<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on DevOps 攻城狮</title><link>https://shenxianpeng.github.io/posts/</link><description>Recent content in Posts on DevOps 攻城狮</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>xianpeng.shen@gmail.com (沈显鹏)</managingEditor><webMaster>xianpeng.shen@gmail.com (沈显鹏)</webMaster><copyright>© 2017 - 2025 沈显鹏</copyright><lastBuildDate>Sun, 03 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://shenxianpeng.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins Explain Error Plugin 支持 Google Gemini 了！🤖</title><link>https://shenxianpeng.github.io/posts/explain-error-plugin-support-gemini/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/explain-error-plugin-support-gemini/</guid><description>&lt;p>上周我发布了 &lt;a
href="https://shenxianpeng.github.io/2025/07/explain-error-plugin/"
target="_blank"
>Jenkins Explain Error Plugin&lt;/a>，旨在帮助 Jenkins 用户通过内置 AI 来更快地分析和解决 Jenkins 构建中的错误。&lt;/p></description></item><item><title>Jenkins 插件中心居然还没有 AI 插件？我写了一个！🤖</title><link>https://shenxianpeng.github.io/posts/explain-error-plugin/</link><pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/explain-error-plugin/</guid><description>介绍我开发的第一个 Jenkins 插件：Explain Error Plugin。它可以自动解析构建失败的日志信息，并生成可读性强的错误解释，帮助开发者更快地定位和解决问题。</description></item><item><title>🧊2025软件供应链现状报告：开源时代，我们究竟在和谁打交道？</title><link>https://shenxianpeng.github.io/posts/jfrog-report/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jfrog-report/</guid><description>JFrog发布的《2025软件供应链现状报告》揭示了软件供应链的变化和风险，尤其是AI模型的安全问题。本文分享了报告中的关键发现和对DevOps从业者的启示。</description></item><item><title>提升代码可追溯性：一招把 PR 描述写入 Git commit</title><link>https://shenxianpeng.github.io/posts/commit-message-template/</link><pubDate>Thu, 12 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/commit-message-template/</guid><description>在 Bitbucket 中使用 Commit Message Templates 功能，将 PR 描述自动写入 Git commit message，确保关键信息不会随工具变更而丢失。</description></item><item><title>如何优雅地控制 Jenkins 构建是否中断？只看这篇</title><link>https://shenxianpeng.github.io/posts/jenkins-concurrent-build-cn/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-concurrent-build-cn/</guid><description>在 Jenkins 中，&lt;code>disableConcurrentBuilds&lt;/code> 选项用于管理并发构建。本文介绍了如何根据分支类型动态设置 &lt;code>abortPrevious&lt;/code> 的值，从而实现更灵活的构建管理。</description></item><item><title>CI/CD 不是一次性的项目，而是一个不断演进的系统</title><link>https://shenxianpeng.github.io/posts/code-refactor/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/code-refactor/</guid><description>在 DevOps 中，CI/CD 流水线需要持续维护和重构。本文探讨了为什么 CI/CD 不是一次性的建设项目，而是一个需要长期投入和持续演进的系统。</description></item><item><title>asdf-clang-tools：使用 asdf 安装 Clang 工具的新选择</title><link>https://shenxianpeng.github.io/posts/asdf-clang-tools/</link><pubDate>Thu, 29 May 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/asdf-clang-tools/</guid><description>asdf-clang-tools 是一个 asdf 插件，用于安装和管理 Clang Tools 相关工具（如 clang-format、clang-tidy、clang-query 和 clang-apply-replacements 等）。</description></item><item><title>ChatGPT 一开，谁还去“努力”？</title><link>https://shenxianpeng.github.io/posts/ai/</link><pubDate>Mon, 26 May 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/ai/</guid><description>AI 的出现让很多人感到“虚”，但它不会取代我们的职位，而是改变我们的做事方式。本文分享了对 AI 的体会和每天一小步的坚持。</description></item><item><title>还在用 Wiki/Confluence？你可能在生产垃圾</title><link>https://shenxianpeng.github.io/posts/docs-and-code/</link><pubDate>Wed, 14 May 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/docs-and-code/</guid><description>在企业中，Wiki 和 Confluence 等文档工具如果缺乏统一管理和审核机制，可能会导致信息混乱和知识沉淀失败。本文探讨了如何避免这种情况，并借鉴开源社区的成功经验。</description></item><item><title>还在用 pip 和 venv？那你可真落伍了，赶紧体验 uv！</title><link>https://shenxianpeng.github.io/posts/uv/</link><pubDate>Mon, 05 May 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/uv/</guid><description>uv 是一个由 Astral 团队开发的 Python 包管理工具，它能替代 pip、venv、pip-tools 的功能，提供更快的依赖解析速度和更现代的项目管理方式。</description></item><item><title>微软、NASA 都在用？我用业余时间维护了 4 年的项目破百了</title><link>https://shenxianpeng.github.io/posts/cpp-linter-action-milestone/</link><pubDate>Tue, 15 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/cpp-linter-action-milestone/</guid><description>cpp-linter-action 是一个 GitHub Action，提供 C/C++ 代码的格式化和静态分析功能。它使用 clang-format 和 clang-tidy，支持多种配置和自定义规则。项目自 2021 年创建以来，已被多个知名组织和开源项目使用。</description></item><item><title>访问 GitHub 的那点坚持，快磨没了</title><link>https://shenxianpeng.github.io/posts/visit-github/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/visit-github/</guid><description>GitHub 的访问问题让很多程序员感到困扰，尤其是在国内。本文分享了个人的体验和对网络问题的思考。</description></item><item><title>从零配置 Sphinx + ReadTheDocs：快速部署自动化文档</title><link>https://shenxianpeng.github.io/posts/sphinx-readthedoc/</link><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/sphinx-readthedoc/</guid><description>在开源项目或团队协作中，Sphinx + ReadTheDocs 是一个易于维护、可自动部署的文档系统。本文记录了配置过程和注意事项。</description></item><item><title>Markdown 不香了吗？为什么越来越多 Python 项目用 RST？</title><link>https://shenxianpeng.github.io/posts/md-vs-rst/</link><pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/md-vs-rst/</guid><description>Markdown 和 reStructuredText（RST）是两种常用的标记语言。本文对比了它们的优缺点，并分享了在不同场景下的使用建议。</description></item><item><title>为什么越来越多的企业用户开始放弃 VMware？</title><link>https://shenxianpeng.github.io/posts/nutanix/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nutanix/</guid><description>Broadcom 收购 VMware 后，许多企业用户开始寻找替代方案。Nutanix 作为一个超融合基础设施（HCI）解决方案，提供了更低的成本和更简洁的管理界面，是一个不错的选择。</description></item><item><title>一觉醒来，我的 PR 已经被 Merge 到 CPython 主分支了！</title><link>https://shenxianpeng.github.io/posts/my-first-pr-to-cpython/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/my-first-pr-to-cpython/</guid><description>在 CPython 的 Issue 区找到一个合适的 PR，修改代码、测试、提交 Pull Request，第二天醒来发现已经被 Merge 到主分支了！这是一个很好的学习过程，也是对开源社区的贡献。</description></item><item><title>为什么我选择参与 EuroPython 2025 评审？</title><link>https://shenxianpeng.github.io/posts/euro-python-review/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/euro-python-review/</guid><description>最近工作之余没怎么贡献代码，主要把时间都用在了评审 EuroPython 2025 （欧洲 Python 2025 大会）的提案上了。</description></item><item><title>🚀 gitstats 升级来袭：支持 JSON 输出、多平台兼容、代码重构！</title><link>https://shenxianpeng.github.io/posts/gitstats-update/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/gitstats-update/</guid><description>gitstats 经过两个月的持续改进，现已支持 JSON 输出、代码重构、argparse 替换 getopt，并全面兼容 Windows 和 macOS。欢迎使用和 Star 支持！</description></item><item><title>CPython 停止更新 Copyright 了，为什么？</title><link>https://shenxianpeng.github.io/posts/copyright/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/copyright/</guid><description>CPython 停止更新 Copyright 的原因和过程。了解 Python 项目法律团队的建议，以及如何处理开源项目中的版权声明。</description></item><item><title>复活 GitStats：让 Git 历史分析焕发新活力</title><link>https://shenxianpeng.github.io/posts/gitstats/</link><pubDate>Thu, 28 Nov 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/gitstats/</guid><description>&lt;p>最近的晚上的时间（一般要等到孩子睡了）我正在做一件事：复活已经沉寂多年的 GitStats 项目。&lt;/p></description></item><item><title>pip vs pipx 的区别</title><link>https://shenxianpeng.github.io/posts/pip-vs-pipx/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pip-vs-pipx/</guid><description>&lt;h3 class="relative group">&lt;strong>pip vs pipx 的区别&lt;/strong>
&lt;div id="pip-vs-pipx-的区别" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#pip-vs-pipx-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>在 Python 的生态中，&lt;strong>pip&lt;/strong> 和 &lt;strong>pipx&lt;/strong> 都是用于管理包的软件工具，但它们有不同的设计目标和使用场景。有些同学可能会疑惑，两者到底有什么区别？该如何选择？&lt;/p></description></item><item><title>从早到晚，我的 DevOps 一天</title><link>https://shenxianpeng.github.io/posts/devops-everyday/</link><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-everyday/</guid><description>&lt;p>很多人可能会好奇，作为一名 DevOps 工程师，每天究竟忙些什么呢？今天就来简单聊聊，作为 DevOps/Build/Release 工程师，我的日常工作节奏是怎样的。&lt;/p></description></item><item><title>从 Jenkins 升级，我做了哪些优化</title><link>https://shenxianpeng.github.io/posts/jenkins-upgrade/</link><pubDate>Thu, 24 Oct 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-upgrade/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>我最近在做的一件事情是迁移并升级 Jenkins。主要动机是因为这个漏洞 &lt;a
href="https://nvd.nist.gov/vuln/detail/CVE-2024-23897"
target="_blank"
>CVE-2024-23897&lt;/a>&lt;/p></description></item><item><title>DevOps进阶：揭秘首席DevOps工程师的职责与技能</title><link>https://shenxianpeng.github.io/posts/principal-devops-engineer/</link><pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/principal-devops-engineer/</guid><description>&lt;p>想象一下，你是一名 DevOps 工程师，不论初级、中级还是高级，老板总有一天拍拍你的肩膀说：“加油干，兄弟，未来你就是我们的首席 DevOps 工程师了！”你可能会心想：“啥是首席 DevOps？这是个什么新饼？”&lt;/p></description></item><item><title>约定式分支规范中文版正式发布！</title><link>https://shenxianpeng.github.io/posts/conventional-branch-zh/</link><pubDate>Tue, 24 Sep 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/conventional-branch-zh/</guid><description>&lt;p>上周正式发布《约定式分支规范》后，受到了广泛关注，不少人询问何时推出中文版。&lt;/p></description></item><item><title>初步了解 PyPA（Python Packaging Authority）下的知名项目和关系</title><link>https://shenxianpeng.github.io/posts/pypa/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pypa/</guid><description>&lt;p>PyPA（Python Packaging Authority）是管理和维护 Python 包相关工具的一个社区组织。PyPA 管理的知名项目包括 pip、packaging、setuptools、wheel、twine、build 等等。了解这些项目的关于有助于我们更好的了解 Python 的生态系统。&lt;/p></description></item><item><title>你的软件究竟从哪里来？</title><link>https://shenxianpeng.github.io/posts/where-does-your-software-come-from/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/where-does-your-software-come-from/</guid><description>&lt;p>软件真是个有趣又深奥的东西，它由看似神奇的代码片段组成，这些代码运行在最终的终端上，本身却并非生命体，但拥有自己的生命周期。&lt;/p></description></item><item><title>代码签名（Code Signing） - GaraSign</title><link>https://shenxianpeng.github.io/posts/garasign/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/garasign/</guid><description>&lt;p>上次我在 &lt;a
href="2024/04/code-signing/">代码签名（Code Signing）&lt;/a>的文章中时候提到了 GaraSign，这是我在工作中使用到的另一个代码签名工具。&lt;/p></description></item><item><title>Python 软件基金会 (PFS) 基础设施概览</title><link>https://shenxianpeng.github.io/posts/psf-infra/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/psf-infra/</guid><description>&lt;p>Python 软件基金会 (PFS) 或许大家比较熟知，它是开源 Python 编程语言背后的组织，致力于为 Python 和 Python 社区的发展壮大创造条件。&lt;/p></description></item><item><title>代码签名（Code Signing）</title><link>https://shenxianpeng.github.io/posts/code-signing/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/code-signing/</guid><description>&lt;p>当谈到软件开发和安全性时，Code Signing（代码签名）是一个至关重要的概念。在这篇文章中，我们将探讨什么是代码签名，为什么它重要，以及两个代码签名工具的对比。&lt;/p></description></item><item><title>【分享】通过 Jenkins-X 社区最终进入到 Jenkins 基础设施团队成为 SRE 的经历</title><link>https://shenxianpeng.github.io/posts/jenkins-contributors/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-contributors/</guid><description>&lt;p>今天翻译一篇我在 &lt;a
href="https://contributors.jenkins.io/"
target="_blank"
>Jenkins Contributors&lt;/a> 页面上看到的一篇文章。&lt;/p>
&lt;p>其作者是 Hervé Le Meur，我早在关注 Jenkins-Infra 的项目的时候就关注到他，他是一个法国人。以下是关于他如何通过 Jenkins-X 社区最终进入到 Jenkins 基础设施团队成为 SRE 的经历。&lt;/p></description></item><item><title>2024年如何保持竞争力：DevOps工程师的关键技能</title><link>https://shenxianpeng.github.io/posts/devops-skills-2024/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-skills-2024/</guid><description>&lt;p>相信大家最近都总会看到这样或那样的新闻：哪个科技巨头又裁员了。裁员潮似乎成为了这个时代的常态，让许多打工人感到焦虑和不安。&lt;/p></description></item><item><title>你一定要了解的 GitHub Action 特性：可重用工作流（Reusable Workflows）</title><link>https://shenxianpeng.github.io/posts/reusable-workflows/</link><pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/reusable-workflows/</guid><description>&lt;h2 class="relative group">什么是 Reusable Workflows
&lt;div id="什么是-reusable-workflows" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%bb%80%e4%b9%88%e6%98%af-reusable-workflows" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>如果你使用过 GitHub Actions，那么你一定要了解 Reusable Workflows 这个特性，它允许你定义工作流并在多个仓库中重复使用它们。&lt;/p></description></item><item><title>2023 年开源状况和人工智能的崛起（GitHub）</title><link>https://shenxianpeng.github.io/posts/open-source-state/</link><pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/open-source-state/</guid><description>&lt;p>最近看到一篇非常有信息量的关于人工智能、云原生、开源的趋势报告，出自于GitHub，翻译并分享给大家，以下是报告全文。&lt;/p></description></item><item><title>cpp-linter-action 最新版支持 Pull Request Review 功能了 👏</title><link>https://shenxianpeng.github.io/posts/cpp-linter-action/</link><pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/cpp-linter-action/</guid><description>&lt;p>作为 &lt;a
href="https://github.com/cpp-linter"
target="_blank"
>cpp-linter&lt;/a> 的创建者和贡献者，我很高兴地宣布 —— cpp-linter-action 从 v2.9.0 版本开始支持 Pull Request Review 功能了 👏&lt;/p></description></item><item><title>看看顶级的开源组织都在用哪些服务和工具</title><link>https://shenxianpeng.github.io/posts/apache-services-and-tools/</link><pubDate>Sun, 21 Jan 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/apache-services-and-tools/</guid><description>&lt;p>本篇介绍的是大名鼎鼎的开源软件基金会 Apache 所使用的服务(Services)和工具(Tools)，这或许能帮助你打开视野，在选择工具的时候提供参考。如果你是一名 DevOps、SRE 或是 Infra 工程师，通过本篇文章内容结果帮助你更好的展示团队所提供的服务有哪些，以及窥探到 Apache Infra 是怎样组织和管理他们的。&lt;/p></description></item><item><title>如何把 GitHub Release Notes 按照 New features、Bug Fixes ... 进行自动分类</title><link>https://shenxianpeng.github.io/posts/automatic-categorize-release-notes/</link><pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/automatic-categorize-release-notes/</guid><description>&lt;p>如果你使用过 GitHub 发布过项目，你会知道 GitHub 可以&lt;a
href="https://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes#creating-automatically-generated-release-notes-for-a-new-release"
target="_blank"
>自动生成 Release Notes&lt;/a>。&lt;/p>
&lt;p>就像这样 GitHub 自动生成的 Release Notes。&lt;/p></description></item><item><title>Witness 和 SLSA 💃</title><link>https://shenxianpeng.github.io/posts/witness-and-slsa/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/witness-and-slsa/</guid><description>&lt;p>由于近些年针对软件的供应链的攻击越来越频繁，因此 Google 在 2021 提出的解决方案是软件工件供应链级别（Supply chain Levels for Software Artifacts，&amp;ldquo;SLSA&amp;rdquo;）&lt;/p></description></item><item><title>Python 和 SLSA 💃</title><link>https://shenxianpeng.github.io/posts/python-and-slsa/</link><pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/python-and-slsa/</guid><description>&lt;p>由于近些年针对软件的供应链的攻击越来越频繁，据 SonaType 的统计从 2019 年到 2022 年针对开源软件的攻击增长了 742%，因此 2021 年 Google 提出的解决方案是软件工件供应链级别（Supply chain Levels for Software Artifacts，&amp;ldquo;SLSA&amp;rdquo;）&lt;/p></description></item><item><title>解决通过 Jenkins Artifactory plugin 上传 artifacts 失败的问题 “unable to find valid certification path to requested target”</title><link>https://shenxianpeng.github.io/posts/unable-to-find-valid-certification-path/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/unable-to-find-valid-certification-path/</guid><description>本文介绍了如何解决 Jenkins agent 上传 artifacts 到 Artifactory 时遇到的 SSL 证书验证问题，包括生成安全认证文件和导入到 Java 的 cacerts 中。</description></item><item><title>2023 年最值得关注的 DevOps 趋势</title><link>https://shenxianpeng.github.io/posts/devops-trends-2023/</link><pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-trends-2023/</guid><description>&lt;p>DevOps 运动仍然是一个不断发展的领域，受到技术进步、行业趋势和组织需求等多种因素的影响。这使得很难对 DevOps 工程的未来做出具体预测。然而我认为有一些趋势可能会在来年继续影响 DevOps 领域的发展。&lt;/p></description></item><item><title>创建 NuGet Organization 的遇到的坑</title><link>https://shenxianpeng.github.io/posts/nuget/</link><pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nuget/</guid><description>&lt;p>其实创建包管理平台账户没什么可说的，但最近准备在 &lt;a
href="https://www.nuget.org"
target="_blank"
>https://www.nuget.org&lt;/a> 上面发布产品前创建 Organization 的时候确遇到了问题。&lt;/p></description></item><item><title>Docker Buildx Bake：加速构建和管理多平台镜像的利器</title><link>https://shenxianpeng.github.io/posts/buildx-bake/</link><pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/buildx-bake/</guid><description>&lt;p>随着容器化技术的普及和应用场景的增多，构建和管理多平台镜像变得越来越重要。&lt;a
href="https://github.com/docker/buildx"
target="_blank"
>Docker Buildx&lt;/a> 是 Docker 官方对于 Docker CLI 的一个扩展，为 Docker 用户提供了更强大和灵活的构建功能。包括：&lt;/p></description></item><item><title>详解SBOM：定义、关系、区别、最佳实践和生成工具</title><link>https://shenxianpeng.github.io/posts/sbom/</link><pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/sbom/</guid><description>&lt;h2 class="relative group">什么是 SBOM
&lt;div id="什么是-sbom" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%bb%80%e4%b9%88%e6%98%af-sbom" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>SBOM 是软件材料清单（Software Bill of Materials）的缩写。它是一份详细记录软件构建过程中使用的所有组件、库和依赖项的清单。&lt;/p></description></item><item><title>如果你是项目成员，是 Fork 原始仓库还是直接原始仓库中修改代码？</title><link>https://shenxianpeng.github.io/posts/fork-or-unfork/</link><pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/fork-or-unfork/</guid><description>&lt;p>想必你也见到过很多开源项目中的 CONTRIBUTION.md 文档中通常都会让贡献者 Fork 仓库，然后做修改。&lt;/p></description></item><item><title>程序员自我修养之Git提交信息和分支创建规范（工具篇）</title><link>https://shenxianpeng.github.io/posts/commit-check/</link><pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/commit-check/</guid><description>&lt;p>Git 提交信息和 Git 分支命名规范是团队协作中非常重要的一部分，它们能够使代码库更加规范、易于维护和理解。&lt;/p></description></item><item><title>SLSA 框架与软件供应链安全防护</title><link>https://shenxianpeng.github.io/posts/slsa/</link><pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/slsa/</guid><description>&lt;p>随着近些年针对软件供应链发起的攻击次数越来越多，Google 发布了一系列指南来确保软件包的完整性，目的是为了防止未经授权的代码修改影响软件供应链。&lt;/p></description></item><item><title>如何在 DevOps 任务中使用 ChatGPT?</title><link>https://shenxianpeng.github.io/posts/chatgpt-for-devops/</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/chatgpt-for-devops/</guid><description>&lt;p>随着 DevOps 的流行，越来越多的开发团队正在寻找一些工具来帮助他们更好地完成任务。ChatGPT 是一款基于人工智能的自然语言处理工具，它可以用来帮助开发团队在 DevOps 任务中更加高效地工作。&lt;/p></description></item><item><title>为什么我的 Jenkins Controller 越来越慢？可能犯了这些错误...</title><link>https://shenxianpeng.github.io/posts/pipeline-best-practices/</link><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pipeline-best-practices/</guid><description>&lt;p>就像标题所说的，为什么我的 Jenkins Controller 越来越慢，可能是因为没有遵循 Jenkins pipeline 编写的一些最佳实践。&lt;/p></description></item><item><title>C/C++ 代码格式化和静态分析检查的一站式工作流 Cpp Linter</title><link>https://shenxianpeng.github.io/posts/cpp-linter/</link><pubDate>Tue, 23 Aug 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/cpp-linter/</guid><description>&lt;p>本篇是关于 C/C++ 代码格式化和静态分析检查的实践分享。&lt;/p>
&lt;p>目前 C/C++ 语言的代码格式化和检查工具使用的最为广泛的是 &lt;a
href="https://llvm.org/"
target="_blank"
>LLVM&lt;/a> 项目中的 &lt;a
href="https://clang.llvm.org/docs/ClangFormat.html"
target="_blank"
>Clang-Format&lt;/a> 和 &lt;a
href="https://clang.llvm.org/extra/clang-tidy/"
target="_blank"
>Clang-Tidy&lt;/a>。&lt;/p></description></item><item><title>12 周的陪产假我一刻都没闲着</title><link>https://shenxianpeng.github.io/posts/vacation-weekly-report/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/vacation-weekly-report/</guid><description>&lt;p>有幸赶上了公司的政策变化，我有 12 周的陪产假来做全职奶爸，照顾家人的同时希望挤出时间来学习，毕竟在职期间很有有机会能有近 3 个月的假期。&lt;/p></description></item><item><title>在 Windows 做开发还能这么爽？WSL + VS Code + Docker Desktop 你值得有用</title><link>https://shenxianpeng.github.io/posts/wsl/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/wsl/</guid><description>&lt;p>很久以来很多程序员都遇到过在 Windows 做开发的各种不便：&lt;/p>
&lt;p>比如设置开发环境不能像 Linux 和 Mac 那样只需要输入一行命令就能安装各种 command 和 package，因此有的程序员从此转到了 Mac 上开发，也有的干脆就使用 Linux 作为开发机，只有那些不得不使用 Windows 作为开发环境程序员还一直留在了 Windows 上继续凑合中。&lt;/p></description></item><item><title>关于 Docker，containerd，CRI，CRI-O，OCI，runc 的解释以及它们是如何工作在一起的</title><link>https://shenxianpeng.github.io/posts/container-ecosystem/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/container-ecosystem/</guid><description>&lt;p>自 Docker 开启了使用容器的爆发式增长，有越来越多的工具和标准来帮助管理和使用这项容器化技术，与此同时也造成了有很多术语让人感到困惑。&lt;/p></description></item><item><title>靠谱：在不删除和重建 GitHub 仓库的情况下与父(Fork)仓库分离(Unfork)</title><link>https://shenxianpeng.github.io/posts/unfork-github-repo/</link><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/unfork-github-repo/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>有开发者、甚至公司可能会遇到过以下几个问题：&lt;/p></description></item><item><title>在 Jenkins 上用了这么久的 Groovy，是时候认识一下它了</title><link>https://shenxianpeng.github.io/posts/groovy/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/groovy/</guid><description>&lt;p>在使用 Jenkins 和 Groovy 越久，我就这样的疑问：&lt;/p>
&lt;p>Groovy 到底是什么语言？
Groovy 有哪些特性？
Groovy 和 Java 有什么区别？
Groovy 和 Java 如何选择？
Groovy 在整个开发语言中占什么位置？要不要学？&lt;/p></description></item><item><title>2022 年最值得关注的 DevOps 趋势和问答</title><link>https://shenxianpeng.github.io/posts/devops-trends-2022/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-trends-2022/</guid><description>&lt;p>DevOps 是 IT 界最近几年的一个热门话题，而且还会越来越热。&lt;/p>
&lt;p>最近有幸和一位做传播咨询的读者朋友交流关于 2022 年最值得关注的 DevOps 趋势以及一些问题和回答，分享给大家。&lt;/p></description></item><item><title>Vagrant 和 Docker 的区别，该如何选？</title><link>https://shenxianpeng.github.io/posts/vagrant-vs-docker/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/vagrant-vs-docker/</guid><description>&lt;p>关于 Vagrant 的介绍，可以参看前一篇文章：&lt;a
href="https://shenxianpeng.github.io/2022/01/vagrant/"
target="_blank"
>什么是 Vagrant? Vagrant 和 VirtualBox 的区别&lt;/a>&lt;/p></description></item><item><title>什么是 Vagrant? Vagrant 和 VirtualBox 的区别</title><link>https://shenxianpeng.github.io/posts/vagrant/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/vagrant/</guid><description>&lt;h2 class="relative group">什么是 Vagrant
&lt;div id="什么是-vagrant" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%bb%80%e4%b9%88%e6%98%af-vagrant" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Vagrant 是一种&lt;a
href="https://github.com/hashicorp/vagrant"
target="_blank"
>开源&lt;/a>软件产品，用来方便构建和维护虚拟软件开发环境。&lt;/p></description></item><item><title>什么是 Go ？Go 的优势和现状。初学者应该学习 Python 还是 Go？</title><link>https://shenxianpeng.github.io/posts/what-is-go/</link><pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/what-is-go/</guid><description>&lt;p>Go 是一种开源编程语言，可以轻松构建简单、可靠和高效的软件。&lt;/p>
&lt;h2 class="relative group">Go 还是 Golang
&lt;div id="go-还是-golang" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#go-%e8%bf%98%e6%98%af-golang" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>先问一个大多数人可能会忽略的问题：Google 的这门开源编程语言叫 Go 还是 Golang？还是两个都行？给你三秒钟想一下 &amp;hellip;&lt;/p></description></item><item><title>你一定要了解这 17 条 Docker 最佳实践！</title><link>https://shenxianpeng.github.io/posts/docker-best-practice/</link><pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/docker-best-practice/</guid><description>&lt;p>本篇分享在编写 Dockerfiles 和使用 Docker 时应遵循的一些最佳实践。篇幅较长，建议先收藏慢慢看，保证看完会很有收获。&lt;/p></description></item><item><title>2022年序员如何选择显示器？1080p还是2K? 单屏还是多屏？</title><link>https://shenxianpeng.github.io/posts/choose-monitor/</link><pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/choose-monitor/</guid><description>&lt;p>工作十几年用过了不少显示器，从最初的 17寸，到后来的 23寸、27寸、32寸、再到现在的 34 寸，根据我自己的使用体验，来个主观推荐：&lt;/p></description></item><item><title>组织内如何评估 CI/CD 成熟度</title><link>https://shenxianpeng.github.io/posts/cicd-assessment/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/cicd-assessment/</guid><description>&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在一个组织内，不同的团队之间可能会有不同的维度来评估 CI/CD 的成熟度。这使得对衡量每个团队的 CI/CD 的表现变得困难。&lt;/p></description></item><item><title>GitHub Actions 还能这么玩？自动将发布的博客文章更新到 GitHub 个人主页</title><link>https://shenxianpeng.github.io/posts/special-repository/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/special-repository/</guid><description>&lt;p>最近实现了一个很有意思的 Workflow，就是通过 GitHub Actions 自动将每次最新发布的文章自动同步到我的 GitHub 首页。&lt;/p></description></item><item><title>2021-22 世界质量报告（World Quality Report）</title><link>https://shenxianpeng.github.io/posts/world-quality-report/</link><pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/world-quality-report/</guid><description>&lt;h2 class="relative group">前言
&lt;div id="前言" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%89%8d%e8%a8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>2021-22 世界质量报告（World Quality Report 简称 WQR）是由 Micro Focus，Capgemini 和 Sogeti 三家公司合作的来分析软件质量和测试趋势在全球范围内唯一的报告。&lt;/p></description></item><item><title>Polaris - 静态代码分析</title><link>https://shenxianpeng.github.io/posts/what-is-polaris/</link><pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/what-is-polaris/</guid><description>这篇文章介绍了 Polaris 的基本概念、支持的编程语言、SaaS 平台的使用方法，以及如何配置和运行 Polaris 进行静态代码分析。它还提供了示例 YAML 配置文件和分析结果的查看方式。</description></item><item><title>Git 常用命令备忘录</title><link>https://shenxianpeng.github.io/posts/git-cheatsheet/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-cheatsheet/</guid><description>&lt;p>不管是对于 Git 的初学者还是经常使用 Git 的码农们，在日常工作中难免会有遇到有的命令一时想不起来。不妨将下面总结的一些 Git 常用命令及技巧收藏或打印出来，以备需要的时候可以很快找到。&lt;/p></description></item><item><title>使用 Gcov 和 LCOV 做 C/C++ 项目的代码覆盖率</title><link>https://shenxianpeng.github.io/posts/gcov-example-cn/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/gcov-example-cn/</guid><description>&lt;p>本篇分享如何使用 Gcov 和 LCOV 对 C/C++ 项目进行代码覆盖率的度量。&lt;/p>
&lt;p>如果你想了解代码覆盖率工具 Gcov 是如何工作的，或是以后需要做 C/C++ 项目的代码覆盖率，希望本篇对你有所帮助。&lt;/p></description></item><item><title>关于代码覆盖率 (About Code Coverage)</title><link>https://shenxianpeng.github.io/posts/code-coverage/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/code-coverage/</guid><description>&lt;p>本篇简要介绍：什么是代码覆盖率？为什么要做代码覆盖率？代码覆盖率的指标、工作原理，主流的代码覆盖率工具以及不要高估代码覆盖率指标。&lt;/p></description></item><item><title>解决在 AIX 上 Git Clone 失败的两个问题</title><link>https://shenxianpeng.github.io/posts/git-clone-failed-on-aix/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-clone-failed-on-aix/</guid><description>&lt;h2 class="relative group">前言
&lt;div id="前言" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%89%8d%e8%a8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本篇记录两个在做 Jenkins 与 AIX 做持续集成得时候遇到的 Git clone 代码失败的问题，并已解决，分享出来或许能有所帮助。&lt;/p></description></item><item><title>通过解除文件资源限制：解决在 AIX 使用 Git 下载大容量仓库失败问题</title><link>https://shenxianpeng.github.io/posts/aix-ulimit/</link><pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/aix-ulimit/</guid><description>&lt;p>最近使用 AIX 7.1 从 Bitbucket 下载代码的时候遇到了这个错误：&lt;/p>
&lt;p>&lt;code>fatal: write error: A file cannot be larger than the value set by ulimit.&lt;/code>&lt;/p></description></item><item><title>关于 Artifactory 上传制品变得非常缓慢，偶尔失败的问题分享</title><link>https://shenxianpeng.github.io/posts/artifactory-slow-upload/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/artifactory-slow-upload/</guid><description>&lt;p>最近在我使用 Artifactory Enterprise 遇到了上传制品非常缓慢的问题，在经过与 IT，Artifactory 管理员一起合作终于解决这个问题，在此分享一下这个问题的解决过程。&lt;/p></description></item><item><title>Git 常见设置指北</title><link>https://shenxianpeng.github.io/posts/git-guidelines/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-guidelines/</guid><description>&lt;p>在使用 Git 提交代码之前，建议做以下这些设置。&lt;/p>
&lt;p>叫指南有点夸张，因为它在有些情况下下不适用，比如你已经有了 &lt;code>.gitattributes&lt;/code> 或 &lt;code>.editorconfig&lt;/code> 等文件，那么有些设置就不用做了。&lt;/p></description></item><item><title>JaCoCo 代码覆盖率实践分享</title><link>https://shenxianpeng.github.io/posts/jacoco-imp/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jacoco-imp/</guid><description>&lt;p>本文适用的是 Gradle 来构建和适用 JaCoCo。&lt;/p>
&lt;p>分别介绍了 &lt;code>build.gradle&lt;/code> 的文件配置，执行测试和生成报告，报告参数说明，以及如何忽略指定的包或类从而影响测试覆盖率的结果。&lt;/p></description></item><item><title>你的 Python 代码够不够 Pythonic？</title><link>https://shenxianpeng.github.io/posts/pythonic/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pythonic/</guid><description>&lt;p>Python 不必多说，它是众多编程语言中最容易学习的动态类型语言。它的跨平台、易读、易写、丰富的 Packages 等众多特性，也是众多DevOps/测试/开发工程师是最常用的语言之一。&lt;/p></description></item><item><title>基于谷歌代码审查（Code Review）法则的思考与实践</title><link>https://shenxianpeng.github.io/posts/code-review/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/code-review/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>代码审查（Code Review），就是让别人来审查你的代码，其目的就是确保代码库的整体代码运行状况随着时间推移而不断改善。&lt;/p></description></item><item><title>2021年DevOps工程师的学习路线</title><link>https://shenxianpeng.github.io/posts/devops-roadmap-2021/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-roadmap-2021/</guid><description>&lt;p>DevOps 实际上是什么意思？🤔&lt;/p>
&lt;p>DevOps 是一种软件开发方法，涉及持续开发，持续测试，持续集成，部署和监视。这一系列过程跨越了传统上孤立的开发和运营团队，DevOps 试图消除它们之间的障碍。&lt;/p></description></item><item><title>预测 2021 年的 DevOps 趋势</title><link>https://shenxianpeng.github.io/posts/devops-trends-in-2021/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-trends-in-2021/</guid><description>&lt;p>DevOps 已经走了很长一段路，毫无疑问，它将在今年继续发光。由于许多公司都在寻求有关数字化转型的最佳实践，因此重要的是要了解领导者认为行业发展的方向。从这个意义上讲，以下文章是 DevOps 领导者对 DevOps 趋势的回应的集合，需要在 2021 年关注。&lt;/p></description></item><item><title>解决 Code Sign 默认时间戳服务器 http://timestamp.verisign.com/scripts/timstamp.dll 不可用</title><link>https://shenxianpeng.github.io/posts/verisign-server-not-working/</link><pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/verisign-server-not-working/</guid><description>&lt;p>相信许多程序员在新年开始在做 code sign (数字签名)的时候可能遇到 Verisign Timestamp 服务器不好用了 &lt;a
href="http://timestamp.verisign.com/scripts/timstamp.dll"
target="_blank"
>http://timestamp.verisign.com/scripts/timstamp.dll&lt;/a> 的情况。出现了如下错误：&lt;/p></description></item><item><title>2021 年国外 IT 公司对于 DevOps 工程师的要求有哪些？</title><link>https://shenxianpeng.github.io/posts/2021-devops-job-requirement/</link><pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/2021-devops-job-requirement/</guid><description>&lt;h2 class="relative group">前言
&lt;div id="前言" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%89%8d%e8%a8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>自 2020 年因疫情开始，越来越多的 IT 公司都因不得不在家办公从而彻底转为 WFH（Work From Home） 公司，因此对于 IT 从业者来说，工作机会今后将会是全球性的。&lt;/p></description></item><item><title>JaCoCo 实现原理 (JaCoCo Implementation Design)</title><link>https://shenxianpeng.github.io/posts/jacoco/</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jacoco/</guid><description>&lt;p>想要对 Java 项目进行代码覆盖率的测试，很容易就找到 JaCoCo 这个开源代码覆盖率分析工具是众多工具中最后欢迎的哪一个。&lt;/p></description></item><item><title>Ansible 实践</title><link>https://shenxianpeng.github.io/posts/ansible-practice/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/ansible-practice/</guid><description>&lt;p>最近在思考如何将团队里的所有的虚拟机都很好的管理并监控起来，但是由于我们的虚拟机的操作系统繁多，包括 Windows, Linux, AIX, HP-UX, Solaris SPARC 和 Solaris x86. 到底选择哪种方式来管理比较好呢？这需要结合具体场景来考虑。&lt;/p></description></item><item><title>写给那些想使用 JFrog Artifactory 管理制品的人</title><link>https://shenxianpeng.github.io/posts/what-is-artifactory/</link><pubDate>Sun, 04 Oct 2020 20:43:46 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/what-is-artifactory/</guid><description>&lt;p>我在使用 Artifactory 做持续集成已经有一段时间了，对企业级 Artifactory 也有了一些经验和总结，希望能通过本篇的分享帮助刚接触这个工具的人了解什么是Artifactory，它能做什么，为什么要选择它，以及在使用过程中应该注意什么。&lt;/p></description></item><item><title>程序员自我修养之Git提交信息和分支创建规范</title><link>https://shenxianpeng.github.io/posts/commit-messages-specification/</link><pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/commit-messages-specification/</guid><description>&lt;h2 class="relative group">为什么要制定规范
&lt;div id="为什么要制定规范" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%88%b6%e5%ae%9a%e8%a7%84%e8%8c%83" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>古话说，没有规矩不成方圆。在团队协作开发时，每个人提交代码时都会写 commit message，但如果没有规范，每个人都会有自己的书写风格，因此在翻看 git log 时经常看到的是五花八门，十分不利于阅读和维护。&lt;/p></description></item><item><title>在 GitHub 上发布一个 Python 项目需要注意哪些</title><link>https://shenxianpeng.github.io/posts/how-to-release-python-project/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/how-to-release-python-project/</guid><description>&lt;p>本篇介绍个人或企业在 GitHub 上发布一个 Python 项目需要了解和注意哪些内容&lt;/p>
&lt;ol>
&lt;li>&lt;a
href="#%e9%85%8d%e7%bd%aesetup.py">如何配置setup.py&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e5%8f%91%e5%b8%83%e5%88%b0PyPI">如何发布到PyPI&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e5%85%b3%e4%ba%8epydoc">生成pydoc&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e5%85%b3%e4%ba%8e%e7%89%88%e6%9c%ac%e5%8f%b7">版本号的选择&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e9%80%89%e6%8b%a9License">License的选择&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 class="relative group">配置setup.py
&lt;div id="配置setuppy" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%85%8d%e7%bd%aesetuppy" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>打包和发布一项都是通过准备一个 &lt;code>setup.py&lt;/code> 文件来完成的。假设你的项目目录结构如下：&lt;/p></description></item><item><title>通过 generic-webhook-trigger 插件实时获取 Bitbucket Repository Events</title><link>https://shenxianpeng.github.io/posts/bitbucket-pull-request-event/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/bitbucket-pull-request-event/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。&lt;/p></description></item><item><title>Jenkins 执行 Shell 如果返回值不为0，作业(Job)停止并失败怎么办？</title><link>https://shenxianpeng.github.io/posts/jenkins-tips-3/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-tips-3/</guid><description>&lt;blockquote>
&lt;p>《Jenkins Tips 3》—— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p>&lt;/blockquote>
&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在使用 Jenkins pipeline 时，如果 Shell 的返回值不为零（也就是 Shell 命令执行时有错误），Jenkins Job 默认会标记当前的 stage 为失败。因此整个 Job 也会失败。&lt;/p></description></item><item><title>每个 Jenkins 用户都应该知道这三个最佳实践</title><link>https://shenxianpeng.github.io/posts/jenkins-best-practice-cn/</link><pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-best-practice-cn/</guid><description>&lt;p>​在使用 Jenkins 实施了企业级的 CI/CD 工作，有如下三个最重要的实践和总结。&lt;/p></description></item><item><title>将 Jenkins Shell 返回的字符串处理为字符数组</title><link>https://shenxianpeng.github.io/posts/jenkins-tips-2/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-tips-2/</guid><description>&lt;blockquote>
&lt;p>《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p>&lt;/blockquote>
&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。&lt;/p></description></item><item><title>忽略 Jenkins Shell 步骤中的故障</title><link>https://shenxianpeng.github.io/posts/jenkins-tips-1/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-tips-1/</guid><description>&lt;blockquote>
&lt;p>《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p>&lt;/blockquote>
&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>不希望 Shell 脚本因失败而中止&lt;/li>
&lt;li>想一直运行 Shell 脚本并报告失败&lt;/li>
&lt;/ul>
&lt;h2 class="relative group">解决
&lt;div id="解决" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%a7%a3%e5%86%b3" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h3 class="relative group">方法一
&lt;div id="方法一" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e6%96%b9%e6%b3%95%e4%b8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>运行 Shell 时，你可以通过使用内置的 &lt;code>+e&lt;/code> 选项来控制执行你的脚本错误。这可以禁用“非 0 退出”的默认行为。&lt;/p></description></item><item><title>这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job</title><link>https://shenxianpeng.github.io/posts/vm-status-check-via-jenkins/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/vm-status-check-via-jenkins/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。&lt;/p></description></item><item><title>解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题</title><link>https://shenxianpeng.github.io/posts/java-net-socketexception-on-aix/</link><pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/java-net-socketexception-on-aix/</guid><description>&lt;blockquote>
&lt;p>本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。&lt;/p></description></item><item><title>从 “会写程序的干不过会写PPT的” —— 聊程序员写作</title><link>https://shenxianpeng.github.io/posts/programmers-read-and-write/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/programmers-read-and-write/</guid><description>&lt;p>在程序员圈子里比较流行这样一句话“会写程序的干不过会写 PPT 的”，还记得 2019 年新东方年会的一首《放飞自我》里有这样一句歌词戳中了绝大大多数程序员的内心&lt;/p></description></item><item><title>如何确保在提交 Jenkins Pipeline 前没有语法错误</title><link>https://shenxianpeng.github.io/posts/jenkins-pipeline-linter-connector/</link><pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-pipeline-linter-connector/</guid><description>&lt;p>我在做 Jenkins 声明式流水线开发时常会遇到的问题是：修改后的 Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。&lt;/p></description></item><item><title>Nightwarch v1.3 介绍</title><link>https://shenxianpeng.github.io/posts/nightwatch-v1-3/</link><pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-v1-3/</guid><description>&lt;p>Nightwatch js 是我之前写自动化测试用例使用了很长一段时间的测试框架，我当时的使用 v0.9 版本并且对使用和 API 进行了翻译。作为一名前测试工程师，对于自动化的知识不能不更新下自己的知识库，一转眼 Nightwatch 1.3 版本已经发布了，可以看到它在 GitHub 上的使用和关注度还是很高的。&lt;/p></description></item><item><title>Jenkins 与 Bitbucket Webhooks 的配置和使用</title><link>https://shenxianpeng.github.io/posts/bitbucket-webhooks-cn/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/bitbucket-webhooks-cn/</guid><description>&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Jenkins 的 multi-branch pipeline 想必很多人已经在用了，使用这种类型的 Jenkins Job 最显著的作用就是可以对 Git 仓库里的任何分支和任何 Pull Request（以下简写为 PR）进行构建。&lt;/p></description></item><item><title>三种方法解决 Jenkins 声明式流水线 Exception Method code too large !</title><link>https://shenxianpeng.github.io/posts/jenkins-troubleshooting/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-troubleshooting/</guid><description>&lt;p>这是我第二次在使用 Jenkins 声明式流水线的时候遇到了这个问题，第一次遇到这个问题的时候是在一个 Pipeline 里大概写到 600 多行时候遇到如下错误&lt;/p></description></item><item><title>2021 年务必知道的最好用的 14 款 CI/CD 工具</title><link>https://shenxianpeng.github.io/posts/ci-cd-tools/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/ci-cd-tools/</guid><description>&lt;p>&amp;ldquo;Quality at Speed&amp;rdquo; 是软件开发中的新规范。&lt;/p>
&lt;p>企业正在朝着 DevOps 方法论和敏捷文化迈进，以加快交付速度并确保产品质量。在 DevOps 中，连续和自动化的交付周期使快速可靠的交付成为可能的基础。&lt;/p></description></item><item><title>DevOps Top 30+ 面试问题</title><link>https://shenxianpeng.github.io/posts/top-30-devops-interview-questions/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/top-30-devops-interview-questions/</guid><description>&lt;h2 class="relative group">DevOps术语和定义
&lt;div id="devops术语和定义" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#devops%e6%9c%af%e8%af%ad%e5%92%8c%e5%ae%9a%e4%b9%89" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>什么是DevOps&lt;/p></description></item><item><title>如何给你的 Git 仓库“瘦身”</title><link>https://shenxianpeng.github.io/posts/maintaining-git-repository/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/maintaining-git-repository/</guid><description>&lt;p>对 Git 仓库的维护通常是为了减少仓库的大小。如果你从另外一个版本控制系统导入了一个仓库，你可能需要在导入后清除掉不必要的文件。本文主要讨论如何从 Git 仓库中删除不需要的文件。&lt;/p></description></item><item><title>一款免费的 C/C++ 静态代码分析工具 Cppcheck 与 Jenkins 集成</title><link>https://shenxianpeng.github.io/posts/cppcheck/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/cppcheck/</guid><description>&lt;p>由于历史遗留原因，我们当前产品的代码仓库里遗留很多 Warning，这些 Warning 不是一时半会可以解决掉的。只有通过不断的丰富自动化测试用例，来保障最后的质量关卡，才敢有条不紊的进行 Warining 的修复，在次之前，如何有效杜绝继续引入更多的 Warining 是当下应该做的。&lt;/p></description></item><item><title>用 VirtualBox 配置一台 Linux 虚拟机</title><link>https://shenxianpeng.github.io/posts/setup-linux-in-virtualbox/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/setup-linux-in-virtualbox/</guid><description>&lt;p>如果你想使用 Linux 但又不想租用云厂商的虚拟机，那么 VirtualBox 是一个比较好的选择。我们可以在 VirtualBox 安装你需要的绝大数的操作系统。&lt;/p></description></item><item><title>HP-UX 安装工具以及一些使用总结</title><link>https://shenxianpeng.github.io/posts/hpxu-tips/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/hpxu-tips/</guid><description>&lt;h2 class="relative group">安装 Java8
&lt;div id="安装-java8" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%ae%89%e8%a3%85-java8" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>安装包下载链接是 &lt;a
href="https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=JDKJRE8018"
target="_blank"
>https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=JDKJRE8018&lt;/a>&lt;/p></description></item><item><title>最有用的 Linux 命令行技巧</title><link>https://shenxianpeng.github.io/posts/linux-tips/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/linux-tips/</guid><description>&lt;h2 class="relative group">ls 命令
&lt;div id="ls-命令" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#ls-%e5%91%bd%e4%bb%a4" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>列出当前目录的文件和文件夹。参数:&lt;/p></description></item><item><title>通过 Jenkins 定期自动给老板提供 Git 仓库的多维度代码分析报告</title><link>https://shenxianpeng.github.io/posts/git-stats-jenkins/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-stats-jenkins/</guid><description>&lt;p>上一篇（GitStats - Git 历史统计信息工具），我已经给老板提供了他想看的所有仓库的 Git 提交历史分析报告了，并且把报告都部署到了一台虚拟机的 tomcat 上了，老板可以通过网址访问直接查看每个仓库的分析报告了，看看谁的贡献大，谁活跃，谁偷懒了，谁周末写代码了（这里不鼓励 996）。&lt;/p></description></item><item><title>AIX 上安装工具以及一些使用总结</title><link>https://shenxianpeng.github.io/posts/aix-tips/</link><pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/aix-tips/</guid><description>&lt;p>记录在使用 AIX 时所遇到的问题和解决办法，以备以后遇到同样问题不要再因为这些再浪费时间，希望也能帮助到你。&lt;/p></description></item><item><title>Solaris 安装工具以及一些使用总结</title><link>https://shenxianpeng.github.io/posts/solaris-tips/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/solaris-tips/</guid><description>&lt;p>记录在使用 Solaris 时所遇到的问题和解决办法，以备以后遇到同样问题不要再因为这些再浪费时间，希望也能帮助到你。&lt;/p></description></item><item><title>Jenkins Warnings Next Generation 插件</title><link>https://shenxianpeng.github.io/posts/jenkins-warnings-next-generation-plugin/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-warnings-next-generation-plugin/</guid><description>&lt;h2 class="relative group">Jenkins Warnings Next Generation 插件
&lt;div id="jenkins-warnings-next-generation-插件" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#jenkins-warnings-next-generation-%e6%8f%92%e4%bb%b6" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多&lt;a
href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md"
target="_blank"
>支持的报告格式&lt;/a>。&lt;/p></description></item><item><title>Git 历史统计信息生成器</title><link>https://shenxianpeng.github.io/posts/git-stats/</link><pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-stats/</guid><description>&lt;p>如果你是研发效能组的一员或者在从事 CI/CD 或 DevOps，除了提供基础设施，指标和数据是也是一个很重要的一环，比如需要分析下某个 Git 仓库代码提交情况：&lt;/p></description></item><item><title>Black Duck 与 Jenkins 集成</title><link>https://shenxianpeng.github.io/posts/blackduck-interate-with-jenkins/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/blackduck-interate-with-jenkins/</guid><description>&lt;p>最近做了 Black Duck 与 Jenkins 的集成，目标是给测试和开发提供定制化、定时的对各个开发代码仓库的进行源码扫描。&lt;/p></description></item><item><title>Docker 常用命令</title><link>https://shenxianpeng.github.io/posts/docker-commands/</link><pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/docker-commands/</guid><description>一个 Docker 常用命令小纸条，记录一些常用的 Docker 命令和操作，方便日常使用和参考。</description></item><item><title>Docker 版本概述</title><link>https://shenxianpeng.github.io/posts/overview-of-docker-editions/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/overview-of-docker-editions/</guid><description>概述 Docker 的不同版本，包括社区版、企业版和企业级解决方案，适用于不同规模和需求的用户。</description></item><item><title>北京48小时：记一次参加 DevOps 训练营</title><link>https://shenxianpeng.github.io/posts/48h-in-beijing/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/48h-in-beijing/</guid><description>记录我在北京参加 JFrog DevOps 训练营的经历，分享培训内容和个人感受，以及对未来工作的思考。</description></item><item><title>定制一个 Docker 版 Jenkins 镜像</title><link>https://shenxianpeng.github.io/posts/install-docker-jenkins/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/install-docker-jenkins/</guid><description>如何定制一个 Docker 版 Jenkins 镜像，并将其备份到 Artifactory，便于在需要时快速恢复 Jenkins 环境。</description></item><item><title>Artifactory 与 Jenkins 集成</title><link>https://shenxianpeng.github.io/posts/artifactory-integrate-with-jenkins/</link><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/artifactory-integrate-with-jenkins/</guid><description>&lt;p>上一篇 &lt;a
href="https://shenxianpeng.github.io/2019/11/artifactory-install-and-upgrade/"
target="_blank"
>初识 JFrog Artifactory&lt;/a>，介绍了什么是 Artifactory，以及如何安装、启动和升级。&lt;/p></description></item><item><title>初识 JFrog Artifactory</title><link>https://shenxianpeng.github.io/posts/artifactory-install-and-upgrade/</link><pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/artifactory-install-and-upgrade/</guid><description>&lt;h2 class="relative group">什么是 Artifactory
&lt;div id="什么是-artifactory" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%bb%80%e4%b9%88%e6%98%af-artifactory" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Artifactory 是 JFrog 的一个产品，用作二进制存储库管理器。二进制存储库可以将所有这些二进制统一托管，从而使团队的管理更加高效和简单。&lt;/p></description></item><item><title>Jenkins Console Output 显示彩色</title><link>https://shenxianpeng.github.io/posts/output-display-color/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/output-display-color/</guid><description>&lt;p>如果想让 Jenkins Console Output 出来一些重要日志醒目的显示，可以让一些日志显示颜色方便查看&lt;/p></description></item><item><title>Jenkins privilege management</title><link>https://shenxianpeng.github.io/posts/jenkins-privilege-management/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-privilege-management/</guid><description>&lt;p>如何针对 Jenkins 里的不同 Job 进行不同的策略管理。比如某个 Job 所有人都可以查看，但仅限于某些人可以执行，这时候就需要对 Job 行程权限设置。&lt;/p></description></item><item><title>如何设置 NFS 共享以及在不同的平台 Windows/Linux/Unix 进行挂载</title><link>https://shenxianpeng.github.io/posts/nfs/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nfs/</guid><description>&lt;p>例如我有一个共享仓库的代码所在用的空间非常大（超过 20 G），在每个产品构建时候都需要用到这个仓库的代码（从里面 copy 第三方库），如果每个人都要 git clone 这个第三方仓库，一是网络开销非常大，二是 git clone 时间长，而且占用大量的物理空间。&lt;/p></description></item><item><title>解决 Could not read from remote repository 问题</title><link>https://shenxianpeng.github.io/posts/could-not-read-from-remote-repository/</link><pubDate>Sun, 01 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/could-not-read-from-remote-repository/</guid><description>解决在使用 Git 克隆代码时遇到的 &amp;ldquo;Could not read from remote repository&amp;rdquo; 错误，分析原因并提供解决方案。</description></item><item><title>如何通过 Jenkins 进行资源的锁定和释放</title><link>https://shenxianpeng.github.io/posts/jenkins-lock-resource/</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-lock-resource/</guid><description>&lt;h2 class="relative group">业务场景
&lt;div id="业务场景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%b8%9a%e5%8a%a1%e5%9c%ba%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>日常工作中需要切换到不同平台（包括 Linux, AIX, Windows, Solris, HP-UX）不同的版本进行开发和验证问题，但是由于虚拟机有限，并不能保证每个开发和测试都有所以平台的虚拟机并且安装了不同的版本，因此准备各种各样的开发和测试环境会花费很长时间。&lt;/p></description></item><item><title>在大型企业里维护多分支流水线</title><link>https://shenxianpeng.github.io/posts/jenkins-multi-branch-pipeline/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-multi-branch-pipeline/</guid><description>如果没有适当的解决方案，在大型企业可能难以创建和维护多分支流水线。</description></item><item><title>Git 分支策略</title><link>https://shenxianpeng.github.io/posts/git-branching-strategy/</link><pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-branching-strategy/</guid><description>介绍大型项目的 Git 分支策略，包括 master、develop、release 和 hotfix 分支的作用和使用方法，帮助团队更好地管理代码和版本发布。</description></item><item><title>通过 Jenkins 来提交修改的代码 git push by Jenkins</title><link>https://shenxianpeng.github.io/posts/git-push-by-jenkins/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-push-by-jenkins/</guid><description>&lt;p>在持续集成中，你可能需要通过 Jenkins 来修改代码，并且将修改后的代码提交到Git仓库里。怎么做呢？最方便的做法还是 Jenkins 提供对应的插件，但是很遗憾我没找到合适的。另外我也觉得通过脚本的方式来实现会更加稳定，不用担心 Jenkins 以及插件升级带来潜在不好用的可能。&lt;/p></description></item><item><title>Execute sudo without password</title><link>https://shenxianpeng.github.io/posts/execute-sudo-without-password/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/execute-sudo-without-password/</guid><description>&lt;p>在使用 Jenkins pipeline 的时候，在 Linux 需要用 root 来执行，我想通过 Jenkins pipeline 的语法来解决，但是只找到这种方式：&lt;a
href="https://jenkins.io/doc/pipeline/steps/ssh-steps/"
target="_blank"
>SSH Pipeline Steps&lt;/a>&lt;/p></description></item><item><title>Git 管理</title><link>https://shenxianpeng.github.io/posts/git-management/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-management/</guid><description>&lt;h2 class="relative group">查找是否有遗漏提交
&lt;div id="查找是否有遗漏提交" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e6%9f%a5%e6%89%be%e6%98%af%e5%90%a6%e6%9c%89%e9%81%97%e6%bc%8f%e6%8f%90%e4%ba%a4" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>从一个分支找到所有的 commit 和 ticket 号，然后去另外一个分支去查找这些提交是否也在这个分支里。&lt;/p></description></item><item><title>Hexo 添加 Disqus 留言功能</title><link>https://shenxianpeng.github.io/posts/add-disqus-to-hexo/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/add-disqus-to-hexo/</guid><description>&lt;h2 class="relative group">在你的 Hexo 网站添加 Disqus
&lt;div id="在你的-hexo-网站添加-disqus" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%9c%a8%e4%bd%a0%e7%9a%84-hexo-%e7%bd%91%e7%ab%99%e6%b7%bb%e5%8a%a0-disqus" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>去 Disqus 创建一个账号，在这个过程中有需要选择一个 shortname，完成后，你可以在设置页码找到你的 shortname&lt;/p></description></item><item><title>Jenkinsfile example - 实现交互、clone 多个仓库以及 git push</title><link>https://shenxianpeng.github.io/posts/jenkinsfile-example/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkinsfile-example/</guid><description>这个 Jenkinsfile 示例展示了如何在 Jenkins Pipeline 中实现交互式输入、克隆多个 Git 仓库，并在构建完成后将代码推送到远程仓库。</description></item><item><title>GitSCM clone code don't display branch</title><link>https://shenxianpeng.github.io/posts/gitscm-clone-code-don-t-display-branch/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/gitscm-clone-code-don-t-display-branch/</guid><description>&lt;p>最近遇到一个 regression bug，是产品完成构建之后，build commit number 不对，显示的 HEAD 而不是常见的 97b34931ac HASH number,这是什么原因呢？
我检查了 build 脚本没有发现问题，branch 的输出是正确的，那我怀疑是引入 Jenkins 的原因，果然登录到远程的 agent 上去查看分支名称如下：&lt;/p></description></item><item><title>通过参数化上传文件到 FTP 服务器</title><link>https://shenxianpeng.github.io/posts/upload-to-ftp-parameterization-by-bat/</link><pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/upload-to-ftp-parameterization-by-bat/</guid><description>&lt;p>实现 CI/CD 过程中，常常需要将构建好的 build 上传到一个公共的服务器，供测试、开发来获取最新的 build。如何上传 build 成果物到 FTP server，又不想把 FTP server登录的用户名和密码存在脚本里，想做这样的参数化如何实现呢？&lt;/p></description></item><item><title>最受欢迎的 Python 自动化测试框架推荐</title><link>https://shenxianpeng.github.io/posts/most-popular-python-automated-testing-framework/</link><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/most-popular-python-automated-testing-framework/</guid><description>&lt;p>随着技术的进步和自动化技术的出现，市面上出现了一些自动化测试框架。只需要进行一些适用性和效率参数的调整，这些自动化测试框架就能够开箱即用，大大节省了开发时间。&lt;/p></description></item><item><title>如何做好功能测试</title><link>https://shenxianpeng.github.io/posts/how-to-do-functional-testing/</link><pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/how-to-do-functional-testing/</guid><description>&lt;p>当你第一次开始接触测试这个行业的时候，首先听说的应该都是功能测试。&lt;/p></description></item><item><title>做了9年测试，我为何转开发？</title><link>https://shenxianpeng.github.io/posts/why-i-move-to-development/</link><pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/why-i-move-to-development/</guid><description>&lt;p>最近几个月以来一直没有更新公众号文章，是因为五月开始，因为项目原因我有机会转为开发，我非常珍惜这一机会，所以一直在努力学习开发相关的技能。&lt;/p></description></item><item><title>C-print</title><link>https://shenxianpeng.github.io/posts/c-print/</link><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/c-print/</guid><description>一个 C 语言打印字符的示例，展示如何使用循环和条件语句打印特定模式的字符。</description></item><item><title>C-Language 计算图形的面积</title><link>https://shenxianpeng.github.io/posts/calculate-graph-area/</link><pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/calculate-graph-area/</guid><description>一个 C 语言程序，用于计算圆、矩形和三角形的面积，支持用户输入和验证。</description></item><item><title>C-Language 自定义函数</title><link>https://shenxianpeng.github.io/posts/c-self-defining-function/</link><pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/c-self-defining-function/</guid><description>介绍 C 语言中自定义函数的基本概念和使用方法，包括函数的声明、定义和调用。</description></item><item><title>Error: Permission denied (publickey)</title><link>https://shenxianpeng.github.io/posts/permission-denied-publickey/</link><pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/permission-denied-publickey/</guid><description>&lt;p>如果你想在一台电脑上配置 github 和 bitbucket，如何配置多个 SSH git key？
输入以下命令生成 SSH Key，注意在生成过程中最好输入新的名字，比如 id_rsa_github 和 id_rsa_bitbucket&lt;/p></description></item><item><title>我眼中的高级测试工程师</title><link>https://shenxianpeng.github.io/posts/senior-test-engineer/</link><pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/senior-test-engineer/</guid><description>&lt;p>满足什么样的技术和经验才算高级工程师呢？说说我心中的高级工程师。&lt;/p></description></item><item><title>DevOps 实践</title><link>https://shenxianpeng.github.io/posts/devops-practice/</link><pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/devops-practice/</guid><description>&lt;p>我想大多数的团队都面临这样的问题：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>发布周期长&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发和测试时间短&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发和测试是两个独立的团队&lt;/p></description></item><item><title>Jenkinsfile 配置</title><link>https://shenxianpeng.github.io/posts/jenkinsfile-configure/</link><pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkinsfile-configure/</guid><description>&lt;p>最近在做有关 DevOps Build 的时候，学习了 Jenkins 的 Pipeline 的功能，不得不提到的就是 Jenkinsfile 这个文件。&lt;/p></description></item><item><title>Git 命令备忘</title><link>https://shenxianpeng.github.io/posts/git-command-cheat/</link><pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-command-cheat/</guid><description>&lt;p>有些git命令总是记不住，在我这台 Ubuntu 使用 web 版 OneNote 不方便，那就把他们记到 Blog 里吧，需要的时候翻看一下。&lt;/p></description></item><item><title>Git remove and add remote repository</title><link>https://shenxianpeng.github.io/posts/remove-and-add-remote-repository/</link><pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/remove-and-add-remote-repository/</guid><description>&lt;p>如果是通过 https 方式来 pull 和 push 代码，每次都要输入烦人的账号和密码
可以通过切成成 ssh 方式：&lt;/p></description></item><item><title>Nightwatch 使用 VS code 进行调试</title><link>https://shenxianpeng.github.io/posts/debug-nightwatch-in-vs/</link><pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/debug-nightwatch-in-vs/</guid><description>&lt;p>除了通过增加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;===========&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来调试 Nightwatch 代码，如何通过配置 VS code 来 Debug Nightwatch 代码？&lt;/p>
&lt;p>Ctrl+Shift+D 打开 Debug 界面，配置如下：&lt;/p></description></item><item><title>Nightwatch 持续集成问题</title><link>https://shenxianpeng.github.io/posts/nightwatch-ci-problem/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-ci-problem/</guid><description>介绍如何在 Nightwatch 持续集成中处理自动化测试用例的常见问题，包括运行时间过长、程序卡住和异常处理。</description></item><item><title>Nightwatch 打开多个窗口</title><link>https://shenxianpeng.github.io/posts/open-multiple-windows/</link><pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/open-multiple-windows/</guid><description>如何在 Nightwatch 中打开多个浏览器窗口并切换控制。</description></item><item><title>Ubuntu 上使用 VPN</title><link>https://shenxianpeng.github.io/posts/use-vpn-on-ubuntu/</link><pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/use-vpn-on-ubuntu/</guid><description>&lt;p>如何在 Ubuntu 上连接 Cisco AnyConnect VPN&lt;/p>
&lt;p>打开Terminal，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo /sbin/modprobe tun
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装OpenConnect，执行:&lt;/p></description></item><item><title>Ubuntu 上安装 VS Code</title><link>https://shenxianpeng.github.io/posts/install-vscode-on-ubuntu/</link><pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/install-vscode-on-ubuntu/</guid><description>&lt;p>在 Ubuntu 下面安装 Visual Studio Code&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install ubuntu-make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">umake web visual-studio-code
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>亲测，好用。&lt;/p></description></item><item><title>Nightwatch wait For Text</title><link>https://shenxianpeng.github.io/posts/nightwatch-wait-for-text/</link><pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-wait-for-text/</guid><description>&lt;p>在使用 Nightwatch 做自动化测试的时候，会遇到这样一种情况：
创建一个 query, 等待这个query的状态从 Wait 变成 Running 最后到 Available 时再执行操作。
Nightwatch 并没有提供这样的方法，可以通过下面的方式解决。&lt;/p></description></item><item><title>Nightwatch 得到和验证 cookies</title><link>https://shenxianpeng.github.io/posts/nightwatch-handle-cookies/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-handle-cookies/</guid><description>&lt;h2 class="relative group">测试用例
&lt;div id="测试用例" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e6%b5%8b%e8%af%95%e7%94%a8%e4%be%8b" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>验证登录 cookies 和清除 access_token。测试用例设计如下&lt;/p></description></item><item><title>Nightwatch 元素判断</title><link>https://shenxianpeng.github.io/posts/nightwatch-element-check/</link><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-element-check/</guid><description>&lt;h3 class="relative group">Nightwatch 元素常用验证方法
&lt;div id="nightwatch-元素常用验证方法" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#nightwatch-%e5%85%83%e7%b4%a0%e5%b8%b8%e7%94%a8%e9%aa%8c%e8%af%81%e6%96%b9%e6%b3%95" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>验证元素的值信息&lt;/p></description></item><item><title>Change Hexo code highlight</title><link>https://shenxianpeng.github.io/posts/change-hexo-code-highlight/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/change-hexo-code-highlight/</guid><description>&lt;p>Hexo 默认主题代码高亮是黑色的，如果想换个风格？具体操作如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改 highlight.styl 文件，路径&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">themes/landscape/source/css/_partial/highlight.styl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改默认代码主题 Tomorrow Night Eighties&lt;/p></description></item><item><title>Nightwatch 测试用例失败继续执行</title><link>https://shenxianpeng.github.io/posts/test-case-fails-to-continue-execution/</link><pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/test-case-fails-to-continue-execution/</guid><description>&lt;p>自动化测试中，有一个验证点，当测试通过时，后面的测试脚本继续执行；
当出现异常时，你希望标记出来这个错误，但不影响后面的测试脚本执行，在 Nightwatch 中如何做？&lt;/p></description></item><item><title>Nightwatch 验证元素是否存在</title><link>https://shenxianpeng.github.io/posts/nightwatch-cdetermine-if-element-exists/</link><pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-cdetermine-if-element-exists/</guid><description>&lt;h2 class="relative group">元素常用验证方法
&lt;div id="元素常用验证方法" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%85%83%e7%b4%a0%e5%b8%b8%e7%94%a8%e9%aa%8c%e8%af%81%e6%96%b9%e6%b3%95" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>验证元素的值信息&lt;/p></description></item><item><title>Hexo 博客文章中插入图片</title><link>https://shenxianpeng.github.io/posts/insert-img-in-hexo-article/</link><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/insert-img-in-hexo-article/</guid><description>&lt;p>如果想在 Hexo 文章中插入图片怎么做？&lt;/p>
&lt;p>网络上很容易搜到 Markdown 的语法是 &lt;code>![Alt text](/path/to/img.jpg)&lt;/code>
前面 Alt text 是指在图片下面命名，后面是图片的地址。那么如何配置？&lt;/p></description></item><item><title>Hexo 配置 rss 订阅功能</title><link>https://shenxianpeng.github.io/posts/configure-rss-subscription-for-hexo/</link><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/configure-rss-subscription-for-hexo/</guid><description>&lt;p>安装 &lt;a
href="https://github.com/hexojs/hexo-generator-feed"
target="_blank"
>hexo-generator-feed&lt;/a> 插件&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install hexo-generator-feed --save
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果国内 npm 安装不成功，可以先安装 &lt;a
href="https://npm.taobao.org/"
target="_blank"
>cnpm&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install -g cnpm --registry&lt;span class="o">=&lt;/span>https://registry.npm.taobao.org
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后再&lt;/p></description></item><item><title>Nightwatch 自动化测试中比较颜色</title><link>https://shenxianpeng.github.io/posts/nightwatch-auto-compare-colors/</link><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-auto-compare-colors/</guid><description>&lt;p>在做 Nightwatch 自动化测试中，出现需要比较颜色的时候如何来做？
基本的思路是首先需要取到这个 element 的颜色值，然后跟预期的颜色进行对比。
比如我要取下面这个会话窗口的颜色，选中这个图标，按 F12，查看这个图标的属性。发现Angular中的颜色属性不是 Elements 下，是在 Styles 下面，如何取到这个颜色值？&lt;/p></description></item><item><title>Nightwatch 获取接口返回数据</title><link>https://shenxianpeng.github.io/posts/nightwatch-get-interface-return-data/</link><pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-get-interface-return-data/</guid><description>&lt;p>如何在 JavaScript 通过接口自动生成和返回接口数据呢？&lt;/p>
&lt;p>在自动化测试中常常遇到接口测试，或是使用的数据需要从接口返回，那么如何来实现这种情况？&lt;/p></description></item><item><title>Nightwatch 异步操作</title><link>https://shenxianpeng.github.io/posts/nightwatch-async-operation/</link><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-async-operation/</guid><description>&lt;p>在自动化测试中常常需要通过一个 command（或 function ）中返回的值来进行下一步的操作，JavaScript 与 JAVA 在调用返回值时有所不同，JS 中需要特定的写法来进行这种异步操作。&lt;/p></description></item><item><title>Nightwatch 模拟键盘操作</title><link>https://shenxianpeng.github.io/posts/nightwatch-keyboard/</link><pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatch-keyboard/</guid><description>&lt;p>在自动化测试中有这样一个场景，在一个输入框中输入一串字符，然后执行敲回车键，验证搜索结果，以 Google 搜索为例，代码如下：&lt;/p></description></item><item><title>Nightwatchjs 中文参考手册</title><link>https://shenxianpeng.github.io/posts/nightwatchjs-guilde/</link><pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nightwatchjs-guilde/</guid><description>&lt;p>&lt;a
href="https://shenxianpeng.gitbooks.io/nightwatch-js-cn/content/"
target="_blank"
>Nightwatch中文参考手册&lt;/a>&lt;/p>
&lt;h2 class="relative group">为何放弃 JAVA 改用 Nightwatch
&lt;div id="为何放弃-java-改用-nightwatch" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%b8%ba%e4%bd%95%e6%94%be%e5%bc%83-java-%e6%94%b9%e7%94%a8-nightwatch" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>项目初期用的是 Java + Selenium + TestNG 自动化框架，由于之前推行的力度不够，加上繁重的功能测试和频繁的项目变更导致自动化测试代码跟不上开发的进度，大量的测试代码无法正在运行。&lt;/li>
&lt;li>我们的产品采用的 AngularJS 开发，前端开发人员对js对Java更精通，以后的自动化脚本开发也可以一起编写。&lt;/li>
&lt;li>Nightwatch 的环境配置和执行简单，只要 npm install、npm test 就可以运行起来，方便配置，运行和继续集成。&lt;/li>
&lt;/ul>
&lt;p>因此，与其维护不可用的代码不如好好整理，不如在项目领导和开发的强力支持下重新开始做一套可用的 E2E 测试。&lt;/p></description></item></channel></rss>