{"title":"代码签名（Code Signing） - GaraSign","slug":"2024/06/garasign","date":"2024-06-10T03:27:18.000Z","updated":"2025-04-04T22:14:28.340Z","comments":true,"path":"api/articles/2024/06/garasign.json","excerpt":"上次我在 代码签名（Code Signing）的文章中时候提到了 GaraSign，这是我在工作中使用到的另一个代码签名工具。鉴于关于 GaraSign 的使用并没有多少中文资料，本篇我将介绍关于 GaraSign 的一些实线，希望对你有帮助。","covers":["/2024/06/garasign/garasign-components.png","/2024/06/garasign/garasign-approach.png"],"content":"<p>上次我在 <a href=\"2024/04/code-signing/\">代码签名（Code Signing）</a>的文章中时候提到了 GaraSign，这是我在工作中使用到的另一个代码签名工具。</p>\n<p>鉴于关于 GaraSign 的使用并没有多少中文资料，本篇我将介绍关于 GaraSign 的一些实线，希望对你有帮助。</p>\n<span id=\"more\"></span>\n<h2 id=\"代码签名\"><a href=\"#代码签名\" class=\"headerlink\" title=\"代码签名\"></a>代码签名</h2><p>这里再次说明什么是代码签名。代码签名证书用于对应用程序、驱动程序、可执行文件和软件程序进行数字签名，客户可通过这种方式验证他们收到的代码未被网络罪犯和黑客篡改或破坏。签名后的交付产品结合了加密令牌和证书，用户可在安装产品前对其进行验证。代码签名可确认谁是软件作者，并证明代码在签名后未被修改或篡改。</p>\n<h2 id=\"Garasign-解决方案\"><a href=\"#Garasign-解决方案\" class=\"headerlink\" title=\"Garasign 解决方案\"></a>Garasign 解决方案</h2><p>GaraSign 是一个基于 SaaS 的安全协调平台，可对企业基础设施、服务和数据进行集中管理。GaraSign 可与所有主要操作系统、平台和工具的本地客户端集成，确保现有工作流不受干扰，同时改善其整体安全态势和合规性。</p>\n<h3 id=\"GaraSign-由以下组件组成：\"><a href=\"#GaraSign-由以下组件组成：\" class=\"headerlink\" title=\"GaraSign 由以下组件组成：\"></a>GaraSign 由以下组件组成：</h3><ul>\n<li>加密令牌 - 存储签名密钥的加密设备（通常是一个或多个 HSM - Hardware Security Modules）</li>\n<li>GaraSign 签名服务器 - 位于存储签名密钥的加密令牌前的 REST 服务器</li>\n<li>GaraSign Signing 客户端 - 允许与之集成的签名工具在本地散列数据并将签名生成脱载至 GaraSign Signing 服务器的客户端。</li>\n</ul>\n<p><img src=\"/2024/06/garasign/garasign-components.png\" alt=\"garasign components\"></p>\n<p>Garasign 代码签名散列方法 - 大幅提高速度</p>\n<p><img src=\"/2024/06/garasign/garasign-approach.png\" alt=\"garasign approach\"></p>\n<h2 id=\"安装-GaraSign\"><a href=\"#安装-GaraSign\" class=\"headerlink\" title=\"安装 GaraSign\"></a>安装 GaraSign</h2><p>关于如何安装 GaraSign 这里不过去介绍，可以到官网找相关的安装文档。这里要注意目前 GaraSign 对操作系统版本的要求还是很高的，比如</p>\n<ul>\n<li>Windows 最低要求是 Windows 2019, Win10 and Win11</li>\n<li>Linux 最低要求是 RHEL 7.9, 8.0, 9.0，CentOS 7.9, 8.0, 9.0，Rocky 8.0</li>\n</ul>\n<p>如果你的构建环境还是比较旧的或是不符合其支持的版本，建议你向我一样设置一台专用的 GaraSign 机器（推荐 Linux）。</p>\n<p>如果你使用 Jenkins 来构建，可以将这台机器设置为一台 Jenkins agent，通过创建一个 Jenkins pipeline，这样其他所有的要需要发布的包都可以通过这个 pipeline 来进行签名。</p>\n<h2 id=\"如何签署独立签名\"><a href=\"#如何签署独立签名\" class=\"headerlink\" title=\"如何签署独立签名\"></a>如何签署独立签名</h2><p>如果你已经设置好了 GaraSign 环境，以 Linux 为例，那么就可以通过下面的命令进行签署。</p>\n<blockquote>\n<p>注：在 Windows 与 Linux 在签署不同的类型文件所使用到的命令不同，因此推荐在 Linux 进行签名会更加简单。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl dgst -sign &lt;private key file&gt; -keyform PEM -sha256 -out &lt;signature-file-name.sig&gt; -binary &lt;binary file to sign&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体的实施\"><a href=\"#具体的实施\" class=\"headerlink\" title=\"具体的实施\"></a>具体的实施</h3><p>加入你的 Artifacts 存在 Artifactory 上面，下面就 Jenkins 为例，来实施一个可以自动签名的 pipeline。包括：</p>\n<ol>\n<li>从 Artifactory 上下载需要签名的 Artifacts</li>\n<li>使用 GaraSign 进行签名</li>\n<li>验证 GaraSign 是否成功</li>\n<li>上传签名文件和公钥到 Artifactory 上的同一个目录下</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tagent &#123;</span><br><span class=\"line\">        node &#123;</span><br><span class=\"line\">            label <span class=\"string\">&#x27;garasign&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters &#123;</span><br><span class=\"line\">        string(</span><br><span class=\"line\">            <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;REPO_PATH&#x27;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">defaultValue:</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">description:</span> <span class=\"string\">&#x27;Repository Path on Artifactory. eg. generic-stage/test_repo/devel/54/mybuild_1.1.0_752d0821_64bit.exe&#x27;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    environment &#123;</span><br><span class=\"line\">\t\tBOT   = credentials(<span class=\"string\">&quot;BOT-credential&quot;</span>)</span><br><span class=\"line\">\t\tART_URL = <span class=\"string\">&quot;https://my.org.com/artifactory&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;GaraSign&#x27;</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tscript &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (! params.REPO_PATH)&#123;</span><br><span class=\"line\">\t\t\t\t\t\terror <span class=\"string\">&quot;REPO_PATH can not empty, exit!&quot;</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Update Job description</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">def</span> manualTrigger = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\tcurrentBuild.upstreamBuilds?.each &#123; b -&gt;</span><br><span class=\"line\">\t\t\t\t\t\tcurrentBuild.description = <span class=\"string\">&quot;Triggered by: $&#123;b.getFullDisplayName()&#125;\\n$&#123;REPO_PATH&#125;&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\tmanualTrigger = false</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tif (manualTrigger == true) &#123; currentBuild.description = <span class=\"string\">&quot;Manual sign: $&#123;REPO_PATH&#125;&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# download artifacts</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcurl -u$&#123;BOT_USR&#125;:$&#123;BOT_PSW&#125; -O $&#123;ART_URL&#125;/$&#123;REPO_PATH&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tfile_name=$(basename $&#123;REPO_PATH&#125;)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\trepo_folder=$(dirname $&#123;REPO_PATH&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# garasign</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\topenssl dgst -sign grs.privkey.pem -keyform PEM -sha256 -out $file_name.sig -binary $file_name</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# verify</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tgrs.pem.pub.key</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\toutput=$(openssl dgst -verify grs.pem.pub.key -keyform PEM -sha256 -signature $file_name.sig -binary $file_name)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tif echo &quot;$output&quot; | grep -q &quot;Verified OK&quot;; then</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\techo &quot;Output is Verified OK&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\telse</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\techo &quot;Output is not Verified OK&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\texit 1</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tfi</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# upload signature file (.sig) and public key (.pem.pub.key)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcurl -u$&#123;BOT_USR&#125;:$&#123;BOT_PSW&#125; -T $file_name.sig  $&#123;ART_URL&#125;/$&#123;repo_folder&#125;/</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcurl -u$&#123;BOT_USR&#125;:$&#123;BOT_PSW&#125; -T grs.pem.pub.key $&#123;ART_URL&#125;/$&#123;repo_folder&#125;/</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何验证独立签名\"><a href=\"#如何验证独立签名\" class=\"headerlink\" title=\"如何验证独立签名\"></a>如何验证独立签名</h2><p>还是以 Linux 为例，使用如下命令可以进行签名的验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl dgst -verify &lt;public key file&gt; -signature &lt;signature&gt; &lt;file to verify&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当你的 Artifacts 已经进行了签名，在提供给客户的时候，你不但需要提供发布的包，而且需要提供签名文件 (.sig) 和公钥 (.pem.pub.key)。</p>\n<p>举个例子，如下 CLI 产品分别提供了 Windows，Linux 和 AIX 三个平台的安装包，客户可以参考如下进行签名验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装包、签名文件和公钥</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">cli.pem.pub.key  CLI_AIX_1.1.0.zip  CLI_AIX_1.1.0.zip.sig  CLI_LINUXX86_1.1.0.zip  CLI_LINUXX86_1.1.0.zip.sig  CLI_WINDOWS_1.1.0.zip  CLI_WINDOWS_1.1.0.zip.sig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证签名</span></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_AIX_1.1.0.zip.sig CLI_AIX_1.1.0.zip</span><br><span class=\"line\">Verified OK</span><br><span class=\"line\"></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_LINUXX86_1.1.0.zip.sig CLI_LINUXX86_1.1.0.zip</span><br><span class=\"line\">Verified OK</span><br><span class=\"line\"></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_WINDOWS_1.1.0.zip.sig CLI_WINDOWS_1.1.0.zip</span><br><span class=\"line\">Verified OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当包和签名文件不符时会验证失败</span></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_AIX_1.1.0.zip.sig CLI_LINUXX86_1.1.0.zip</span><br><span class=\"line\">Verification Failure</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>以上就是关于 GaraSign 的实现分享，如有任何问题或是建议咱们评论区见。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"代码签名\"><a href=\"#代码签名\" class=\"headerlink\" title=\"代码签名\"></a>代码签名</h2><p>这里再次说明什么是代码签名。代码签名证书用于对应用程序、驱动程序、可执行文件和软件程序进行数字签名，客户可通过这种方式验证他们收到的代码未被网络罪犯和黑客篡改或破坏。签名后的交付产品结合了加密令牌和证书，用户可在安装产品前对其进行验证。代码签名可确认谁是软件作者，并证明代码在签名后未被修改或篡改。</p>\n<h2 id=\"Garasign-解决方案\"><a href=\"#Garasign-解决方案\" class=\"headerlink\" title=\"Garasign 解决方案\"></a>Garasign 解决方案</h2><p>GaraSign 是一个基于 SaaS 的安全协调平台，可对企业基础设施、服务和数据进行集中管理。GaraSign 可与所有主要操作系统、平台和工具的本地客户端集成，确保现有工作流不受干扰，同时改善其整体安全态势和合规性。</p>\n<h3 id=\"GaraSign-由以下组件组成：\"><a href=\"#GaraSign-由以下组件组成：\" class=\"headerlink\" title=\"GaraSign 由以下组件组成：\"></a>GaraSign 由以下组件组成：</h3><ul>\n<li>加密令牌 - 存储签名密钥的加密设备（通常是一个或多个 HSM - Hardware Security Modules）</li>\n<li>GaraSign 签名服务器 - 位于存储签名密钥的加密令牌前的 REST 服务器</li>\n<li>GaraSign Signing 客户端 - 允许与之集成的签名工具在本地散列数据并将签名生成脱载至 GaraSign Signing 服务器的客户端。</li>\n</ul>\n<p><img src=\"/2024/06/garasign/garasign-components.png\" alt=\"garasign components\"></p>\n<p>Garasign 代码签名散列方法 - 大幅提高速度</p>\n<p><img src=\"/2024/06/garasign/garasign-approach.png\" alt=\"garasign approach\"></p>\n<h2 id=\"安装-GaraSign\"><a href=\"#安装-GaraSign\" class=\"headerlink\" title=\"安装 GaraSign\"></a>安装 GaraSign</h2><p>关于如何安装 GaraSign 这里不过去介绍，可以到官网找相关的安装文档。这里要注意目前 GaraSign 对操作系统版本的要求还是很高的，比如</p>\n<ul>\n<li>Windows 最低要求是 Windows 2019, Win10 and Win11</li>\n<li>Linux 最低要求是 RHEL 7.9, 8.0, 9.0，CentOS 7.9, 8.0, 9.0，Rocky 8.0</li>\n</ul>\n<p>如果你的构建环境还是比较旧的或是不符合其支持的版本，建议你向我一样设置一台专用的 GaraSign 机器（推荐 Linux）。</p>\n<p>如果你使用 Jenkins 来构建，可以将这台机器设置为一台 Jenkins agent，通过创建一个 Jenkins pipeline，这样其他所有的要需要发布的包都可以通过这个 pipeline 来进行签名。</p>\n<h2 id=\"如何签署独立签名\"><a href=\"#如何签署独立签名\" class=\"headerlink\" title=\"如何签署独立签名\"></a>如何签署独立签名</h2><p>如果你已经设置好了 GaraSign 环境，以 Linux 为例，那么就可以通过下面的命令进行签署。</p>\n<blockquote>\n<p>注：在 Windows 与 Linux 在签署不同的类型文件所使用到的命令不同，因此推荐在 Linux 进行签名会更加简单。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl dgst -sign &lt;private key file&gt; -keyform PEM -sha256 -out &lt;signature-file-name.sig&gt; -binary &lt;binary file to sign&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体的实施\"><a href=\"#具体的实施\" class=\"headerlink\" title=\"具体的实施\"></a>具体的实施</h3><p>加入你的 Artifacts 存在 Artifactory 上面，下面就 Jenkins 为例，来实施一个可以自动签名的 pipeline。包括：</p>\n<ol>\n<li>从 Artifactory 上下载需要签名的 Artifacts</li>\n<li>使用 GaraSign 进行签名</li>\n<li>验证 GaraSign 是否成功</li>\n<li>上传签名文件和公钥到 Artifactory 上的同一个目录下</li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tagent &#123;</span><br><span class=\"line\">        node &#123;</span><br><span class=\"line\">            label <span class=\"string\">&#x27;garasign&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters &#123;</span><br><span class=\"line\">        string(</span><br><span class=\"line\">            <span class=\"symbol\">name:</span> <span class=\"string\">&#x27;REPO_PATH&#x27;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">defaultValue:</span> <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            <span class=\"symbol\">description:</span> <span class=\"string\">&#x27;Repository Path on Artifactory. eg. generic-stage/test_repo/devel/54/mybuild_1.1.0_752d0821_64bit.exe&#x27;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    environment &#123;</span><br><span class=\"line\">\t\tBOT   = credentials(<span class=\"string\">&quot;BOT-credential&quot;</span>)</span><br><span class=\"line\">\t\tART_URL = <span class=\"string\">&quot;https://my.org.com/artifactory&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;GaraSign&#x27;</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">\t\t\t\tscript &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (! params.REPO_PATH)&#123;</span><br><span class=\"line\">\t\t\t\t\t\terror <span class=\"string\">&quot;REPO_PATH can not empty, exit!&quot;</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Update Job description</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">def</span> manualTrigger = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\tcurrentBuild.upstreamBuilds?.each &#123; b -&gt;</span><br><span class=\"line\">\t\t\t\t\t\tcurrentBuild.description = <span class=\"string\">&quot;Triggered by: $&#123;b.getFullDisplayName()&#125;\\n$&#123;REPO_PATH&#125;&quot;</span></span><br><span class=\"line\">\t\t\t\t\t\tmanualTrigger = false</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tif (manualTrigger == true) &#123; currentBuild.description = <span class=\"string\">&quot;Manual sign: $&#123;REPO_PATH&#125;&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tsh <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# download artifacts</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcurl -u$&#123;BOT_USR&#125;:$&#123;BOT_PSW&#125; -O $&#123;ART_URL&#125;/$&#123;REPO_PATH&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tfile_name=$(basename $&#123;REPO_PATH&#125;)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\trepo_folder=$(dirname $&#123;REPO_PATH&#125;)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# garasign</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\topenssl dgst -sign grs.privkey.pem -keyform PEM -sha256 -out $file_name.sig -binary $file_name</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# verify</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tgrs.pem.pub.key</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\toutput=$(openssl dgst -verify grs.pem.pub.key -keyform PEM -sha256 -signature $file_name.sig -binary $file_name)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tif echo &quot;$output&quot; | grep -q &quot;Verified OK&quot;; then</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\techo &quot;Output is Verified OK&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\telse</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\techo &quot;Output is not Verified OK&quot;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t\texit 1</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tfi</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t# upload signature file (.sig) and public key (.pem.pub.key)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcurl -u$&#123;BOT_USR&#125;:$&#123;BOT_PSW&#125; -T $file_name.sig  $&#123;ART_URL&#125;/$&#123;repo_folder&#125;/</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tcurl -u$&#123;BOT_USR&#125;:$&#123;BOT_PSW&#125; -T grs.pem.pub.key $&#123;ART_URL&#125;/$&#123;repo_folder&#125;/</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何验证独立签名\"><a href=\"#如何验证独立签名\" class=\"headerlink\" title=\"如何验证独立签名\"></a>如何验证独立签名</h2><p>还是以 Linux 为例，使用如下命令可以进行签名的验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl dgst -verify &lt;public key file&gt; -signature &lt;signature&gt; &lt;file to verify&gt;</span><br></pre></td></tr></table></figure>\n\n<p>当你的 Artifacts 已经进行了签名，在提供给客户的时候，你不但需要提供发布的包，而且需要提供签名文件 (.sig) 和公钥 (.pem.pub.key)。</p>\n<p>举个例子，如下 CLI 产品分别提供了 Windows，Linux 和 AIX 三个平台的安装包，客户可以参考如下进行签名验证。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载安装包、签名文件和公钥</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">cli.pem.pub.key  CLI_AIX_1.1.0.zip  CLI_AIX_1.1.0.zip.sig  CLI_LINUXX86_1.1.0.zip  CLI_LINUXX86_1.1.0.zip.sig  CLI_WINDOWS_1.1.0.zip  CLI_WINDOWS_1.1.0.zip.sig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 验证签名</span></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_AIX_1.1.0.zip.sig CLI_AIX_1.1.0.zip</span><br><span class=\"line\">Verified OK</span><br><span class=\"line\"></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_LINUXX86_1.1.0.zip.sig CLI_LINUXX86_1.1.0.zip</span><br><span class=\"line\">Verified OK</span><br><span class=\"line\"></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_WINDOWS_1.1.0.zip.sig CLI_WINDOWS_1.1.0.zip</span><br><span class=\"line\">Verified OK</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当包和签名文件不符时会验证失败</span></span><br><span class=\"line\">openssl dgst -verify cli.pem.pub.key -signature CLI_AIX_1.1.0.zip.sig CLI_LINUXX86_1.1.0.zip</span><br><span class=\"line\">Verification Failure</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>以上就是关于 GaraSign 的实现分享，如有任何问题或是建议咱们评论区见。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"}],"tags":[{"name":"DevSecOps","path":"api/tags/DevSecOps.json"},{"name":"SLSA","path":"api/tags/SLSA.json"}]}