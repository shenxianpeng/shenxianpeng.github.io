{"title":"约定式分支规范中文版正式发布！","slug":"2024/09/conventional-branch-zh","date":"2024-09-23T16:00:00.000Z","updated":"2024-10-24T09:02:35.803Z","comments":true,"path":"api/articles/2024/09/conventional-branch-zh.json","excerpt":null,"covers":null,"content":"<p>上周正式发布《约定式分支规范》后，受到了广泛关注，不少人询问何时推出中文版。</p>\n<p>经过一周末的努力，中文版已正式上线，详情请访问：**<a href=\"https://conventional-branch.github.io/zh/**%E3%80%82\">https://conventional-branch.github.io/zh/**。</a></p>\n<p>此外，我们对原始版本进行了部分细微调整。以下为《约定式分支规范》中文版的完整内容。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>约定式分支是指 Git 分支的结构化和标准化命名约定，旨在使分支更具可读性和可操作性。我们建议了一些您可能想要使用的分支前缀，但您也可以指定自己的命名约定。一致的命名约定使按类型识别分支变得更加容易。</p>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><ol>\n<li><strong>以目的为导向的分支名称</strong>：每个分支名称都清楚地表明了其目的，使所有开发人员都能轻松了解该分支的用途。</li>\n<li><strong>与 CI&#x2F;CD 集成</strong>：通过使用一致的分支名称，它可以帮助自动化系统（如持续集成&#x2F;持续部署管道）根据分支类型触发特定操作（例如，从发布分支自动部署）。</li>\n<li><strong>团队协作</strong>：它通过明确分支目的来鼓励团队内部的协作，减少误解并使团队成员更容易在任务之间切换而不会产生混淆。</li>\n</ol>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><h3 id=\"分支命名前缀\"><a href=\"#分支命名前缀\" class=\"headerlink\" title=\"分支命名前缀\"></a>分支命名前缀</h3><p>分支规范通过 <code>feature/</code>，<code>bugfix/</code>，<code>hotfix/</code>，<code>release/</code>和<code>chore/</code> 来描述，其结构应如下：</p>\n<hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;/&lt;description&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>main</strong>：主要开发分支（例如 <code>main</code>、<code>master</code> 或 <code>develop</code>）</li>\n<li>**feature&#x2F;**：用于新功能（例如 <code>feature/add-login-page</code>）</li>\n<li>**bugfix&#x2F;**：用于错误修复（例如 <code>bugfix/fix-header-bug</code>）</li>\n<li>**hotfix&#x2F;**：用于紧急修复（例如 <code>hotfix/security-patch</code>）</li>\n<li>**release&#x2F;**：用于准备发布的分支（例如 <code>release/v1.2.0</code>）</li>\n<li>**chore&#x2F;**：用于非代码任务，如依赖项、文档更新（例如 <code>chore/update-dependencies</code>）</li>\n</ul>\n<hr>\n<h3 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h3><ol>\n<li><strong>小写字母和连字符分隔</strong>：始终使用小写字母，并使用连字符分隔单词。例如，<code>feature/new-login</code> 或 <code>bugfix/header-styling</code>。</li>\n<li><strong>仅使用字母数字和连字符</strong>：仅使用小写字母 (a-z)、数字 (0-9) 和连字符。避免使用空格、标点符号和下划线等特殊字符。</li>\n<li><strong>无连续连字符</strong>：确保连字符单独使用，没有连续的连字符（例如，<code>feature/new-login</code>，而不是 <code>feature/new--login</code>）。</li>\n<li><strong>无尾随连字符</strong>：请勿在分支名称末尾添加连字符。例如，使用 <code>feature/new-login</code> 而不是 <code>feature/new-login-</code>。</li>\n<li><strong>清晰简洁</strong>：使分支名称具有描述性但简洁。名称应清楚地表明正在完成的工作。</li>\n<li><strong>包括 Jira（或其他工具）票号</strong>：如果适用，请包括项目管理工具中的票号，以便于跟踪。例如，对于票号 <code>T-123</code>，分支名称可以是 <code>feature/T-123-new-login</code>。</li>\n</ol>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><strong>清晰的沟通</strong>：仅凭分支名称就能清楚地了解代码更改的目的。</li>\n<li><strong>自动化友好</strong>：轻松挂接自动化流程（例如，针对 <code>feature</code>, <code>release</code> 等的不同工作流程）。</li>\n<li><strong>可扩展性</strong>：适用于许多开发人员同时处理不同任务的大型团队。</li>\n</ul>\n<p>总之，约定式分支旨在改善 Git 工作流程中的项目组织、沟通和自动化。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"如果团队成员不符合此规范，可以使用哪些工具来自动识别？\"><a href=\"#如果团队成员不符合此规范，可以使用哪些工具来自动识别？\" class=\"headerlink\" title=\"如果团队成员不符合此规范，可以使用哪些工具来自动识别？\"></a>如果团队成员不符合此规范，可以使用哪些工具来自动识别？</h3><p>你可以使用 <a href=\"https://github.com/commit-check/commit-check\">commit-check</a> 来检查分支规范，或者如果你的代码托管在 GitHub 上，则使用 <a href=\"https://github.com/commit-check/commit-check-action\">commit-check-action</a>。</p>\n<hr>\n<p>感谢大家的关注！最后，欢迎Star、转发或建议。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<p>上周正式发布《约定式分支规范》后，受到了广泛关注，不少人询问何时推出中文版。</p>\n<p>经过一周末的努力，中文版已正式上线，详情请访问：**<a href=\"https://conventional-branch.github.io/zh/**%E3%80%82\">https://conventional-branch.github.io/zh/**。</a></p>\n<p>此外，我们对原始版本进行了部分细微调整。以下为《约定式分支规范》中文版的完整内容。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>约定式分支是指 Git 分支的结构化和标准化命名约定，旨在使分支更具可读性和可操作性。我们建议了一些您可能想要使用的分支前缀，但您也可以指定自己的命名约定。一致的命名约定使按类型识别分支变得更加容易。</p>\n<h3 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h3><ol>\n<li><strong>以目的为导向的分支名称</strong>：每个分支名称都清楚地表明了其目的，使所有开发人员都能轻松了解该分支的用途。</li>\n<li><strong>与 CI&#x2F;CD 集成</strong>：通过使用一致的分支名称，它可以帮助自动化系统（如持续集成&#x2F;持续部署管道）根据分支类型触发特定操作（例如，从发布分支自动部署）。</li>\n<li><strong>团队协作</strong>：它通过明确分支目的来鼓励团队内部的协作，减少误解并使团队成员更容易在任务之间切换而不会产生混淆。</li>\n</ol>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><h3 id=\"分支命名前缀\"><a href=\"#分支命名前缀\" class=\"headerlink\" title=\"分支命名前缀\"></a>分支命名前缀</h3><p>分支规范通过 <code>feature/</code>，<code>bugfix/</code>，<code>hotfix/</code>，<code>release/</code>和<code>chore/</code> 来描述，其结构应如下：</p>\n<hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;/&lt;description&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>main</strong>：主要开发分支（例如 <code>main</code>、<code>master</code> 或 <code>develop</code>）</li>\n<li>**feature&#x2F;**：用于新功能（例如 <code>feature/add-login-page</code>）</li>\n<li>**bugfix&#x2F;**：用于错误修复（例如 <code>bugfix/fix-header-bug</code>）</li>\n<li>**hotfix&#x2F;**：用于紧急修复（例如 <code>hotfix/security-patch</code>）</li>\n<li>**release&#x2F;**：用于准备发布的分支（例如 <code>release/v1.2.0</code>）</li>\n<li>**chore&#x2F;**：用于非代码任务，如依赖项、文档更新（例如 <code>chore/update-dependencies</code>）</li>\n</ul>\n<hr>\n<h3 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h3><ol>\n<li><strong>小写字母和连字符分隔</strong>：始终使用小写字母，并使用连字符分隔单词。例如，<code>feature/new-login</code> 或 <code>bugfix/header-styling</code>。</li>\n<li><strong>仅使用字母数字和连字符</strong>：仅使用小写字母 (a-z)、数字 (0-9) 和连字符。避免使用空格、标点符号和下划线等特殊字符。</li>\n<li><strong>无连续连字符</strong>：确保连字符单独使用，没有连续的连字符（例如，<code>feature/new-login</code>，而不是 <code>feature/new--login</code>）。</li>\n<li><strong>无尾随连字符</strong>：请勿在分支名称末尾添加连字符。例如，使用 <code>feature/new-login</code> 而不是 <code>feature/new-login-</code>。</li>\n<li><strong>清晰简洁</strong>：使分支名称具有描述性但简洁。名称应清楚地表明正在完成的工作。</li>\n<li><strong>包括 Jira（或其他工具）票号</strong>：如果适用，请包括项目管理工具中的票号，以便于跟踪。例如，对于票号 <code>T-123</code>，分支名称可以是 <code>feature/T-123-new-login</code>。</li>\n</ol>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li><strong>清晰的沟通</strong>：仅凭分支名称就能清楚地了解代码更改的目的。</li>\n<li><strong>自动化友好</strong>：轻松挂接自动化流程（例如，针对 <code>feature</code>, <code>release</code> 等的不同工作流程）。</li>\n<li><strong>可扩展性</strong>：适用于许多开发人员同时处理不同任务的大型团队。</li>\n</ul>\n<p>总之，约定式分支旨在改善 Git 工作流程中的项目组织、沟通和自动化。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"如果团队成员不符合此规范，可以使用哪些工具来自动识别？\"><a href=\"#如果团队成员不符合此规范，可以使用哪些工具来自动识别？\" class=\"headerlink\" title=\"如果团队成员不符合此规范，可以使用哪些工具来自动识别？\"></a>如果团队成员不符合此规范，可以使用哪些工具来自动识别？</h3><p>你可以使用 <a href=\"https://github.com/commit-check/commit-check\">commit-check</a> 来检查分支规范，或者如果你的代码托管在 GitHub 上，则使用 <a href=\"https://github.com/commit-check/commit-check-action\">commit-check-action</a>。</p>\n<hr>\n<p>感谢大家的关注！最后，欢迎Star、转发或建议。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}