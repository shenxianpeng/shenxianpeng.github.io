{"title":"约定试分支规范正式发布 Conventional Branch Specification Released!","slug":"2024/09/conventional-branch","date":"2024-09-17T16:00:00.000Z","updated":"2024-09-18T09:12:20.261Z","comments":true,"path":"api/articles/2024/09/conventional-branch.json","excerpt":null,"covers":null,"content":"<p>好消息！《约定式分支规范》开源项目正式上线！诚邀广大开发者共同参与，为项目贡献力量。更多详情请访问：<a href=\"https://conventional-branch.github.io/\">https://conventional-branch.github.io</a></p>\n<h2 id=\"什么是约定试分支规范\"><a href=\"#什么是约定试分支规范\" class=\"headerlink\" title=\"什么是约定试分支规范\"></a>什么是约定试分支规范</h2><p>约定试分支规范是指 Git 分支的结构化和标准化命名约定，旨在使分支更具可读性和可操作性。我们建议了一些你可能想要使用的分支前缀，但你也可以指定自己的命名约定。一致的命名约定使按类型识别分支变得更加容易。</p>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>分支规范通过 <code>feature/</code>、<code>bugfix/</code>、<code>hotfix/</code>、<code>release/</code> 和 <code>chore/</code> 来描述，其结构应如下：</p>\n<hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;/&lt;description&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>main</strong>：主要开发分支（例如，<code>main</code>、<code>master</code> 或 <code>develop</code>）</li>\n<li>**feature&#x2F;**：用于新功能（例如，<code>feature/add-login-page</code>）</li>\n<li>**bugfix&#x2F;**：用于错误修复（例如，<code>bugfix/fix-header-bug</code>）</li>\n<li>**hotfix&#x2F;**：用于紧急修复（例如，<code>hotfix/security-patch</code>）</li>\n<li>**release&#x2F;**：用于准备发布的分支（例如，<code>release/v1.2.0</code>）</li>\n<li>**chore&#x2F;**：用于依赖项更新等非代码任务（例如，<code>chore/update-dependencies</code>）</li>\n</ul>\n<hr>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li><strong>以目的为导向的分支名称</strong>：每个分支名称都清楚地表明了其目的，使所有开发人员都可以轻松了解分支的用途。</li>\n<li><strong>与CI&#x2F;CD集成</strong>：通过使用一致的分支名称，它可以帮助自动化系统（如持续集成&#x2F;持续部署管道）根据分支类型触发特定操作（例如，从发布分支自动部署）。</li>\n<li><strong>团队协作</strong>：通过明确分支目的、减少误解并使团队成员更容易在任务之间切换而不会产生混淆，它鼓励团队内部的协作。</li>\n</ol>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ul>\n<li><strong>清晰的沟通</strong>：分支名称本身就提供了对其用途的清晰理解，而无需深入研究代码。</li>\n<li><strong>自动化友好</strong>：轻松挂接到自动化流程（例如，针对功能、发布等的不同工作流程）。</li>\n<li><strong>可扩展性</strong>：在许多开发人员同时处理不同任务的大型团队中效果很好。</li>\n</ul>\n<p>总之，约定试分支命名旨在改善 Git 工作流程中的项目组织、沟通和自动化。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p><strong>可以使用哪些工具自动识别团队成员是否不符合此规范？</strong></p>\n<p>以使用 <a href=\"https://github.com/commit-check/commit-check\">commit-check</a> 检查分支规范或 <a href=\"https://github.com/commit-check/commit-check-action\">commit-check-action</a> 如果你的代码托管在 GitHub 上。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>非常感谢约定式提交规范的启发，在此基础上我们很高兴推出这个开源项目——约定式分支规范。</p>\n<p>目前，项目仅提供英文版本，我们计划在未来增加更多语言版本，欢迎各位开发者踊跃参与！如果你对项目有任何建议或想贡献力量，欢迎在 <a href=\"https://github.com/conventional-branch/conventional-branch/issues\">issues</a> 页面提出。</p>\n<p>感谢大家的关注！最后，欢迎Star和分享。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<p>好消息！《约定式分支规范》开源项目正式上线！诚邀广大开发者共同参与，为项目贡献力量。更多详情请访问：<a href=\"https://conventional-branch.github.io/\">https://conventional-branch.github.io</a></p>\n<h2 id=\"什么是约定试分支规范\"><a href=\"#什么是约定试分支规范\" class=\"headerlink\" title=\"什么是约定试分支规范\"></a>什么是约定试分支规范</h2><p>约定试分支规范是指 Git 分支的结构化和标准化命名约定，旨在使分支更具可读性和可操作性。我们建议了一些你可能想要使用的分支前缀，但你也可以指定自己的命名约定。一致的命名约定使按类型识别分支变得更加容易。</p>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><p>分支规范通过 <code>feature/</code>、<code>bugfix/</code>、<code>hotfix/</code>、<code>release/</code> 和 <code>chore/</code> 来描述，其结构应如下：</p>\n<hr>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;/&lt;description&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>main</strong>：主要开发分支（例如，<code>main</code>、<code>master</code> 或 <code>develop</code>）</li>\n<li>**feature&#x2F;**：用于新功能（例如，<code>feature/add-login-page</code>）</li>\n<li>**bugfix&#x2F;**：用于错误修复（例如，<code>bugfix/fix-header-bug</code>）</li>\n<li>**hotfix&#x2F;**：用于紧急修复（例如，<code>hotfix/security-patch</code>）</li>\n<li>**release&#x2F;**：用于准备发布的分支（例如，<code>release/v1.2.0</code>）</li>\n<li>**chore&#x2F;**：用于依赖项更新等非代码任务（例如，<code>chore/update-dependencies</code>）</li>\n</ul>\n<hr>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><ol>\n<li><strong>以目的为导向的分支名称</strong>：每个分支名称都清楚地表明了其目的，使所有开发人员都可以轻松了解分支的用途。</li>\n<li><strong>与CI&#x2F;CD集成</strong>：通过使用一致的分支名称，它可以帮助自动化系统（如持续集成&#x2F;持续部署管道）根据分支类型触发特定操作（例如，从发布分支自动部署）。</li>\n<li><strong>团队协作</strong>：通过明确分支目的、减少误解并使团队成员更容易在任务之间切换而不会产生混淆，它鼓励团队内部的协作。</li>\n</ol>\n<h3 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h3><ul>\n<li><strong>清晰的沟通</strong>：分支名称本身就提供了对其用途的清晰理解，而无需深入研究代码。</li>\n<li><strong>自动化友好</strong>：轻松挂接到自动化流程（例如，针对功能、发布等的不同工作流程）。</li>\n<li><strong>可扩展性</strong>：在许多开发人员同时处理不同任务的大型团队中效果很好。</li>\n</ul>\n<p>总之，约定试分支命名旨在改善 Git 工作流程中的项目组织、沟通和自动化。</p>\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><p><strong>可以使用哪些工具自动识别团队成员是否不符合此规范？</strong></p>\n<p>以使用 <a href=\"https://github.com/commit-check/commit-check\">commit-check</a> 检查分支规范或 <a href=\"https://github.com/commit-check/commit-check-action\">commit-check-action</a> 如果你的代码托管在 GitHub 上。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>非常感谢约定式提交规范的启发，在此基础上我们很高兴推出这个开源项目——约定式分支规范。</p>\n<p>目前，项目仅提供英文版本，我们计划在未来增加更多语言版本，欢迎各位开发者踊跃参与！如果你对项目有任何建议或想贡献力量，欢迎在 <a href=\"https://github.com/conventional-branch/conventional-branch/issues\">issues</a> 页面提出。</p>\n<p>感谢大家的关注！最后，欢迎Star和分享。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}