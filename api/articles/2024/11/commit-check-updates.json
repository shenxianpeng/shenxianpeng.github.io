{"title":"Commit Check 的最新更新 —— 新增检查 pull request 是否已经 rebase(WIP)","slug":"2024/11/commit-check-updates","date":"2024-11-12T16:00:00.000Z","updated":"2024-11-13T19:38:01.094Z","comments":true,"path":"api/articles/2024/11/commit-check-updates.json","excerpt":null,"covers":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最新有用户提出来（issue <a href=\"https://github.com/commit-check/commit-check/issues/191\">191</a>）是否可以让 <code>commit-check</code> 支持对于对分支进行是否已经 rebase 检查，跟其他检查一样，可以支持开启或是关闭。</p>\n<p>哼哼，感觉这是一个不错的建议。因此经过一周过的晚上下班的陪娃间隙的时间的努力，现在正式宣布在最新的 commit-check 以及 commit-check-action 中都已经支持了一个新的选项叫做 <code>merge-base</code>。</p>\n<p>对了如果你还不知道什么是 commit-check，这里我要隆重的介绍以下：</p>\n<p>Commit Check 是一个免费且强大的工具，用于强制执行提交元数据标准，包括提交消息、分支命名、提交者姓名&#x2F;邮箱以及提交签名，变基。它的错误信息和建议命令都可以完全自定义，确保团队之间的一致性。</p>\n<p>作为 <a href=\"https://docs.github.com/en/enterprise-server@3.11/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/available-rules-for-rulesets#metadata-restrictions\">GitHub Enterprise 元数据限制</a>和 Bitbucket 付费插件 <a href=\"https://marketplace.atlassian.com/apps/1211854/yet-another-commit-checker?tab=overview&hosting=datacenter\">Yet Another Commit Checker</a> 的替代方案，Commit Check 通过集成 DevOps 原则和基础设施即代码（IaC）脱颖而出。</p>\n<p>那么如何使用 commit-check 呢？有以下几种方式。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"使用默认配置\"><a href=\"#使用默认配置\" class=\"headerlink\" title=\"使用默认配置\"></a>使用默认配置</h3><p>如果你没有设置 <code>.commit-check.yml</code>，Commit Check 将使用默认配置。提交消息将遵循 Conventional Commits 规则，分支命名遵循 Conventional Branch 规则。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最新有用户提出来（issue <a href=\"https://github.com/commit-check/commit-check/issues/191\">191</a>）是否可以让 <code>commit-check</code> 支持对于对分支进行是否已经 rebase 检查，跟其他检查一样，可以支持开启或是关闭。</p>\n<p>哼哼，感觉这是一个不错的建议。因此经过一周过的晚上下班的陪娃间隙的时间的努力，现在正式宣布在最新的 commit-check 以及 commit-check-action 中都已经支持了一个新的选项叫做 <code>merge-base</code>。</p>\n<p>对了如果你还不知道什么是 commit-check，这里我要隆重的介绍以下：</p>\n<p>Commit Check 是一个免费且强大的工具，用于强制执行提交元数据标准，包括提交消息、分支命名、提交者姓名&#x2F;邮箱以及提交签名，变基。它的错误信息和建议命令都可以完全自定义，确保团队之间的一致性。</p>\n<p>作为 <a href=\"https://docs.github.com/en/enterprise-server@3.11/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/available-rules-for-rulesets#metadata-restrictions\">GitHub Enterprise 元数据限制</a>和 Bitbucket 付费插件 <a href=\"https://marketplace.atlassian.com/apps/1211854/yet-another-commit-checker?tab=overview&hosting=datacenter\">Yet Another Commit Checker</a> 的替代方案，Commit Check 通过集成 DevOps 原则和基础设施即代码（IaC）脱颖而出。</p>\n<p>那么如何使用 commit-check 呢？有以下几种方式。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"使用默认配置\"><a href=\"#使用默认配置\" class=\"headerlink\" title=\"使用默认配置\"></a>使用默认配置</h3><p>如果你没有设置 <code>.commit-check.yml</code>，Commit Check 将使用默认配置。提交消息将遵循 Conventional Commits 规则，分支命名遵循 Conventional Branch 规则。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"commit-check","path":"api/tags/commit-check.json"}]}