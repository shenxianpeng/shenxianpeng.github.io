{"title":"How to use Jenkins Docker Cloud","slug":"2025/01/jenkins-docker-cloud","date":"2025-01-25T07:26:59.000Z","updated":"2025-04-12T15:17:40.502Z","comments":true,"path":"api/articles/2025/01/jenkins-docker-cloud.json","excerpt":"Recently, I am working on Jenkins instance migration, this time I started to use Jenkins Docker Cloud insead of use docker &#123; ... &#125; in Jenkinsfile.Jenkins cloud pluginFirst you need to install Jenkins Docker Cloud plugin https://plugins.jenkins.io/docker-plugin/Jenkins Docker Cloud is a plugin that allows Jenkins to use Docker containers as build agents.So you need to config a Docker Host with remote API as follows.","covers":null,"content":"<p>Recently, I am working on Jenkins instance migration, this time I started to use Jenkins Docker Cloud insead of use <code>docker &#123; ... &#125;</code> in Jenkinsfile.</p>\n<h2 id=\"Jenkins-cloud-plugin\"><a href=\"#Jenkins-cloud-plugin\" class=\"headerlink\" title=\"Jenkins cloud plugin\"></a>Jenkins cloud plugin</h2><p>First you need to install Jenkins Docker Cloud plugin <a href=\"https://plugins.jenkins.io/docker-plugin/\">https://plugins.jenkins.io/docker-plugin/</a></p>\n<p>Jenkins Docker Cloud is a plugin that allows Jenkins to use Docker containers as build agents.</p>\n<p>So you need to config a Docker Host with remote API as follows.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Enable-Docker-Remote-API\"><a href=\"#Enable-Docker-Remote-API\" class=\"headerlink\" title=\"Enable Docker Remote API\"></a>Enable Docker Remote API</h3><p>Jenkins controller connects to the docker host using REST APIs. To enable the remote API for docker host, please follow the steps below.</p>\n<p>Step 1: Spin up a VM, and install docker on it. You can follow the official documentation for installing docker. based on the Linux distribution you use. Make sure the docker service is up and running.</p>\n<p>Step 2: Log in to the server and open the docker service file <code>/lib/systemd/system/docker.service</code>. Search for <code>ExecStart</code> and replace that line with the following.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>\n\n<p>Step 3: Reload and restart docker service.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure>\n\n<p>Step 4: Validate API by executing the following curl commands. Replace myhostname with your hostname or IP.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:4243/version</span><br><span class=\"line\">curl http://myhostname:4243/version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Create-custom-docker-image\"><a href=\"#Create-custom-docker-image\" class=\"headerlink\" title=\"Create custom docker image\"></a>Create custom docker image</h3><p>For me, I use <a href=\"https://plugins.jenkins.io/docker-plugin/#plugin-content-launch-via-jnlp\">launch via JNLP</a> for my custom docker image.</p>\n<p>For example, you docker image is based on <a href=\"https://hub.docker.com/r/jenkins/inbound-agent\">jenkins&#x2F;inbound-agent</a>, you can use the following Dockerfile to create your custom image.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> jenkins/inbound-agent</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install XXX</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> your-favorite-tool-here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/local/bin/jenkins-agent&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-use-in-Jenkinsfile\"><a href=\"#How-to-use-in-Jenkinsfile\" class=\"headerlink\" title=\"How to use in Jenkinsfile\"></a>How to use in Jenkinsfile</h3><p>Once you have configed Docker Cloud, you can use it in Jenkinsfile like a normal agent.</p>\n<p>For example:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jenkinsfile (Declarative Pipeline)</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">        node &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;docker&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which is does not like if you use <code>docker &#123; ... &#125;</code> directly.</p>\n<p>For example of using <code>docker &#123; ... &#125;</code>:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jenkinsfile (Declarative Pipeline)</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">        docker &#123; image <span class=\"string\">&#x27;node:22.13.1-alpine3.21&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Test&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh <span class=\"string\">&#x27;node --eval &quot;console.log(process.platform,process.env.CI)&quot;&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here is more details about using Docker with pipeline: <a href=\"https://www.jenkins.io/doc/book/pipeline/docker/\">https://www.jenkins.io/doc/book/pipeline/docker/</a></p>\n<p>Feel free to comment if you have any questions.</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h3 id=\"Enable-Docker-Remote-API\"><a href=\"#Enable-Docker-Remote-API\" class=\"headerlink\" title=\"Enable Docker Remote API\"></a>Enable Docker Remote API</h3><p>Jenkins controller connects to the docker host using REST APIs. To enable the remote API for docker host, please follow the steps below.</p>\n<p>Step 1: Spin up a VM, and install docker on it. You can follow the official documentation for installing docker. based on the Linux distribution you use. Make sure the docker service is up and running.</p>\n<p>Step 2: Log in to the server and open the docker service file <code>/lib/systemd/system/docker.service</code>. Search for <code>ExecStart</code> and replace that line with the following.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>\n\n<p>Step 3: Reload and restart docker service.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">service docker restart</span><br></pre></td></tr></table></figure>\n\n<p>Step 4: Validate API by executing the following curl commands. Replace myhostname with your hostname or IP.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl http://localhost:4243/version</span><br><span class=\"line\">curl http://myhostname:4243/version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Create-custom-docker-image\"><a href=\"#Create-custom-docker-image\" class=\"headerlink\" title=\"Create custom docker image\"></a>Create custom docker image</h3><p>For me, I use <a href=\"https://plugins.jenkins.io/docker-plugin/#plugin-content-launch-via-jnlp\">launch via JNLP</a> for my custom docker image.</p>\n<p>For example, you docker image is based on <a href=\"https://hub.docker.com/r/jenkins/inbound-agent\">jenkins&#x2F;inbound-agent</a>, you can use the following Dockerfile to create your custom image.</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> jenkins/inbound-agent</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install XXX</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> your-favorite-tool-here</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;/usr/local/bin/jenkins-agent&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"How-to-use-in-Jenkinsfile\"><a href=\"#How-to-use-in-Jenkinsfile\" class=\"headerlink\" title=\"How to use in Jenkinsfile\"></a>How to use in Jenkinsfile</h3><p>Once you have configed Docker Cloud, you can use it in Jenkinsfile like a normal agent.</p>\n<p>For example:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jenkinsfile (Declarative Pipeline)</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">        node &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;docker&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Which is does not like if you use <code>docker &#123; ... &#125;</code> directly.</p>\n<p>For example of using <code>docker &#123; ... &#125;</code>:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jenkinsfile (Declarative Pipeline)</span></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">        docker &#123; image <span class=\"string\">&#x27;node:22.13.1-alpine3.21&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Test&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh <span class=\"string\">&#x27;node --eval &quot;console.log(process.platform,process.env.CI)&quot;&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here is more details about using Docker with pipeline: <a href=\"https://www.jenkins.io/doc/book/pipeline/docker/\">https://www.jenkins.io/doc/book/pipeline/docker/</a></p>\n<p>Feel free to comment if you have any questions.</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Cloud","path":"api/tags/Cloud.json"}]}