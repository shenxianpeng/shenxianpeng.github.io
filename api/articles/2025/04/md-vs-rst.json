{"title":"Markdown 不香了吗？为什么越来越多 Python 项目用 RST？","slug":"2025/04/md-vs-rst","date":"2025-04-10T17:00:00.000Z","updated":"2025-06-22T16:25:42.296Z","comments":true,"path":"api/articles/2025/04/md-vs-rst.json","excerpt":"在日常工作中，无论是写 README、写博客，还是写项目文档，我们总要选择一种标记语言来排版内容。目前主流的有两种：Markdown 和 reStructuredText（简称 RST）。那它们之间到底有什么区别？又该在什么场景下选哪个呢？最近我将 gitstats 项目的文档从 Markdown 转换为 RST，并发布到 ReadTheDocs 上，这篇文章就来聊聊我的一些实践体会。","covers":null,"content":"<p>在日常工作中，无论是写 README、写博客，还是写项目文档，我们总要选择一种标记语言来排版内容。</p>\n<p>目前主流的有两种：<strong>Markdown</strong> 和 <strong>reStructuredText（简称 RST）</strong>。</p>\n<p>那它们之间到底有什么区别？又该在什么场景下选哪个呢？</p>\n<p>最近我将 <a href=\"https://github.com/shenxianpeng/gitstats\">gitstats</a> 项目的文档从 Markdown 转换为 RST，并发布到 <a href=\"https://gitstats.readthedocs.io/\">ReadTheDocs</a> 上，这篇文章就来聊聊我的一些实践体会。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Markdown-是什么？\"><a href=\"#Markdown-是什么？\" class=\"headerlink\" title=\"Markdown 是什么？\"></a>Markdown 是什么？</h2><p>Markdown 是一种轻量级标记语言，最早由 John Gruber 和 Aaron Swartz 在 2004 年设计，目标是让文档尽可能「可读、可写、可转换为结构良好的 HTML」。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>语法简单、容易上手</li>\n<li>社区支持广泛（GitHub、GitLab、Hexo、Jekyll 等等都支持）</li>\n<li>渲染速度快，格式一致性好</li>\n</ul>\n<p><strong>常见用途：</strong></p>\n<ul>\n<li>README.md</li>\n<li>博客文章</li>\n<li>简单的项目文档</li>\n</ul>\n<h2 id=\"RST-是什么？\"><a href=\"#RST-是什么？\" class=\"headerlink\" title=\"RST 是什么？\"></a>RST 是什么？</h2><p>RST 是 Python 社区使用较多的一种标记语言，由 Docutils 项目维护。相比 Markdown，语法更丰富，也更严格一些。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>原生支持脚注、交叉引用、自动索引、代码文档化等高级功能</li>\n<li>是 Sphinx 的首选格式，适合大型项目的文档编写</li>\n<li>对结构化文档更友好</li>\n</ul>\n<p><strong>常见用途：</strong></p>\n<ul>\n<li>Python 项目的文档（如官方文档）</li>\n<li>使用 Sphinx 生成的技术手册</li>\n<li>多语言文档（结合 gettext）</li>\n</ul>\n<h2 id=\"语法对比小结\"><a href=\"#语法对比小结\" class=\"headerlink\" title=\"语法对比小结\"></a>语法对比小结</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>Markdown</th>\n<th>RST</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标题</td>\n<td><code>#</code> 开头</td>\n<td><code>=====</code> 或 <code>-----</code> 下划线</td>\n</tr>\n<tr>\n<td>粗体 &#x2F; 斜体</td>\n<td><code>**text**</code> &#x2F; <code>*text*</code></td>\n<td><code>**text**</code> &#x2F; <code>*text*</code></td>\n</tr>\n<tr>\n<td>超链接</td>\n<td><code>[text](url)</code></td>\n<td><code>`text &lt;url&gt;`_</code></td>\n</tr>\n<tr>\n<td>表格</td>\n<td>简单表格（扩展支持）</td>\n<td>需要严格缩进，写法复杂</td>\n</tr>\n<tr>\n<td>脚注 &#x2F; 引用</td>\n<td>不支持 &#x2F; 限制较多</td>\n<td>原生支持</td>\n</tr>\n<tr>\n<td>交叉引用</td>\n<td>不支持</td>\n<td>原生支持</td>\n</tr>\n</tbody></table>\n<p>Markdown 更轻松，RST 更专业。</p>\n<h2 id=\"什么时候用-Markdown？\"><a href=\"#什么时候用-Markdown？\" class=\"headerlink\" title=\"什么时候用 Markdown？\"></a>什么时候用 Markdown？</h2><ul>\n<li>项目较小，只需写简单说明文档</li>\n<li>团队成员不熟悉 RST，想快速写文档</li>\n<li>写博客、日常笔记更推荐 Markdown</li>\n<li>使用平台（如 GitHub Pages、Hexo）默认支持 Markdown</li>\n</ul>\n<p>一句话：<strong>轻量文档首选 Markdown</strong>。</p>\n<h2 id=\"什么时候用-RST？\"><a href=\"#什么时候用-RST？\" class=\"headerlink\" title=\"什么时候用 RST？\"></a>什么时候用 RST？</h2><ul>\n<li>使用 <strong>Sphinx</strong> 生成 API 文档或技术手册</li>\n<li>项目结构复杂，需要自动索引、交叉引用、模块文档等高级功能</li>\n<li>需要与 Python 工具链（如 <code>autodoc</code>, <code>napoleon</code> 等）集成</li>\n<li>要发布到 ReadTheDocs（虽然现在也支持 Markdown，但 RST 体验更好）</li>\n</ul>\n<p>一句话：<strong>Python 项目或结构化技术文档推荐 RST</strong>。</p>\n<h2 id=\"我个人的建议\"><a href=\"#我个人的建议\" class=\"headerlink\" title=\"我个人的建议\"></a>我个人的建议</h2><p>如果你是：</p>\n<ul>\n<li><strong>开发工程师</strong>，日常文档写 Markdown 足够</li>\n<li><strong>Python 开发者</strong>，建议学一下 RST，特别是用 Sphinx 写文档时</li>\n<li><strong>开源项目维护者</strong>，项目规模不大，README 用 Markdown 就好；但文档站点可以考虑用 RST + Sphinx 构建</li>\n</ul>\n<h2 id=\"总结一句话\"><a href=\"#总结一句话\" class=\"headerlink\" title=\"总结一句话\"></a>总结一句话</h2><blockquote>\n<p>Markdown 更像是写字的便利贴，RST 更像是写书的排版系统。</p>\n</blockquote>\n<p>选哪个，其实就看你的目标是写“随笔”还是写“手册”。</p>\n<p>如果你对 Markdown、RST 或文档构建工具有自己的心得，欢迎留言交流。</p>\n<p>下期我打算分享下 Sphinx 配置和 ReadTheDocs 自动发布的经验～</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"Markdown-是什么？\"><a href=\"#Markdown-是什么？\" class=\"headerlink\" title=\"Markdown 是什么？\"></a>Markdown 是什么？</h2><p>Markdown 是一种轻量级标记语言，最早由 John Gruber 和 Aaron Swartz 在 2004 年设计，目标是让文档尽可能「可读、可写、可转换为结构良好的 HTML」。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>语法简单、容易上手</li>\n<li>社区支持广泛（GitHub、GitLab、Hexo、Jekyll 等等都支持）</li>\n<li>渲染速度快，格式一致性好</li>\n</ul>\n<p><strong>常见用途：</strong></p>\n<ul>\n<li>README.md</li>\n<li>博客文章</li>\n<li>简单的项目文档</li>\n</ul>\n<h2 id=\"RST-是什么？\"><a href=\"#RST-是什么？\" class=\"headerlink\" title=\"RST 是什么？\"></a>RST 是什么？</h2><p>RST 是 Python 社区使用较多的一种标记语言，由 Docutils 项目维护。相比 Markdown，语法更丰富，也更严格一些。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>原生支持脚注、交叉引用、自动索引、代码文档化等高级功能</li>\n<li>是 Sphinx 的首选格式，适合大型项目的文档编写</li>\n<li>对结构化文档更友好</li>\n</ul>\n<p><strong>常见用途：</strong></p>\n<ul>\n<li>Python 项目的文档（如官方文档）</li>\n<li>使用 Sphinx 生成的技术手册</li>\n<li>多语言文档（结合 gettext）</li>\n</ul>\n<h2 id=\"语法对比小结\"><a href=\"#语法对比小结\" class=\"headerlink\" title=\"语法对比小结\"></a>语法对比小结</h2><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>Markdown</th>\n<th>RST</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标题</td>\n<td><code>#</code> 开头</td>\n<td><code>=====</code> 或 <code>-----</code> 下划线</td>\n</tr>\n<tr>\n<td>粗体 &#x2F; 斜体</td>\n<td><code>**text**</code> &#x2F; <code>*text*</code></td>\n<td><code>**text**</code> &#x2F; <code>*text*</code></td>\n</tr>\n<tr>\n<td>超链接</td>\n<td><code>[text](url)</code></td>\n<td><code>`text &lt;url&gt;`_</code></td>\n</tr>\n<tr>\n<td>表格</td>\n<td>简单表格（扩展支持）</td>\n<td>需要严格缩进，写法复杂</td>\n</tr>\n<tr>\n<td>脚注 &#x2F; 引用</td>\n<td>不支持 &#x2F; 限制较多</td>\n<td>原生支持</td>\n</tr>\n<tr>\n<td>交叉引用</td>\n<td>不支持</td>\n<td>原生支持</td>\n</tr>\n</tbody></table>\n<p>Markdown 更轻松，RST 更专业。</p>\n<h2 id=\"什么时候用-Markdown？\"><a href=\"#什么时候用-Markdown？\" class=\"headerlink\" title=\"什么时候用 Markdown？\"></a>什么时候用 Markdown？</h2><ul>\n<li>项目较小，只需写简单说明文档</li>\n<li>团队成员不熟悉 RST，想快速写文档</li>\n<li>写博客、日常笔记更推荐 Markdown</li>\n<li>使用平台（如 GitHub Pages、Hexo）默认支持 Markdown</li>\n</ul>\n<p>一句话：<strong>轻量文档首选 Markdown</strong>。</p>\n<h2 id=\"什么时候用-RST？\"><a href=\"#什么时候用-RST？\" class=\"headerlink\" title=\"什么时候用 RST？\"></a>什么时候用 RST？</h2><ul>\n<li>使用 <strong>Sphinx</strong> 生成 API 文档或技术手册</li>\n<li>项目结构复杂，需要自动索引、交叉引用、模块文档等高级功能</li>\n<li>需要与 Python 工具链（如 <code>autodoc</code>, <code>napoleon</code> 等）集成</li>\n<li>要发布到 ReadTheDocs（虽然现在也支持 Markdown，但 RST 体验更好）</li>\n</ul>\n<p>一句话：<strong>Python 项目或结构化技术文档推荐 RST</strong>。</p>\n<h2 id=\"我个人的建议\"><a href=\"#我个人的建议\" class=\"headerlink\" title=\"我个人的建议\"></a>我个人的建议</h2><p>如果你是：</p>\n<ul>\n<li><strong>开发工程师</strong>，日常文档写 Markdown 足够</li>\n<li><strong>Python 开发者</strong>，建议学一下 RST，特别是用 Sphinx 写文档时</li>\n<li><strong>开源项目维护者</strong>，项目规模不大，README 用 Markdown 就好；但文档站点可以考虑用 RST + Sphinx 构建</li>\n</ul>\n<h2 id=\"总结一句话\"><a href=\"#总结一句话\" class=\"headerlink\" title=\"总结一句话\"></a>总结一句话</h2><blockquote>\n<p>Markdown 更像是写字的便利贴，RST 更像是写书的排版系统。</p>\n</blockquote>\n<p>选哪个，其实就看你的目标是写“随笔”还是写“手册”。</p>\n<p>如果你对 Markdown、RST 或文档构建工具有自己的心得，欢迎留言交流。</p>\n<p>下期我打算分享下 Sphinx 配置和 ReadTheDocs 自动发布的经验～</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Markdown","path":"api/tags/Markdown.json"},{"name":"RST","path":"api/tags/RST.json"}]}