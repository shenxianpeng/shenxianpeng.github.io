{"title":"asdf-clang-tools：使用 asdf 安装 Clang 工具的新选择","slug":"2025/05/asdf-clang-tools","date":"2025-05-29T13:41:00.000Z","updated":"2025-06-22T16:34:48.694Z","comments":true,"path":"api/articles/2025/05/asdf-clang-tools.json","excerpt":null,"covers":null,"content":"<p>最近，我在 cpp-linter 组织下发布了一个名为 <strong><a href=\"https://github.com/cpp-linter/asdf-clang-tools\">asdf-clang-tools</a></strong> 的全新仓库。这个项目是从 amrox&#x2F;asdf-clang-tools fork 而来。由于原作者多年没有维护，我对其进行了修复、升级和功能扩展，使其焕然一新。简单来说，asdf-clang-tools 是一个 <strong>asdf 插件</strong>，用于安装和管理 Clang Tools 相关工具（如 clang-format、clang-tidy、clang-query 和 clang-apply-replacements 等）。</p>\n<h2 id=\"新的安装方式：除了-pip-还有-asdf\"><a href=\"#新的安装方式：除了-pip-还有-asdf\" class=\"headerlink\" title=\"新的安装方式：除了 pip 还有 asdf\"></a>新的安装方式：除了 pip 还有 asdf</h2><p>在此之前，我曾推出过 <strong>clang-tools-pip</strong> 工具包，用户可以通过 <code>pip install clang-tools</code> 的方式安装包括 clang-format、clang-tidy、clang-query、clang-apply-replacements 在内的一整套 Clang 可执行工具。</p>\n<p>而 asdf-clang-tools 则提供了另一种途径——利用 <a href=\"https://asdf-vm.com/\">asdf</a> 版本管理器来安装这些工具。简而言之，这为喜欢用 asdf 管理工具版本的开发者多了一个选择。</p>\n<p>这两种方式并不是互斥的：你可以通过 pip 或 asdf 轻松安装和管理 Clang 工具。至于选择哪种方式取决于你的工作流和个人喜好。</p>\n<h2 id=\"什么是-asdf-版本管理器\"><a href=\"#什么是-asdf-版本管理器\" class=\"headerlink\" title=\"什么是 asdf 版本管理器\"></a>什么是 asdf 版本管理器</h2><p>很多开发者可能还不太熟悉 asdf。<strong>asdf</strong> 是一个多语言、多工具的版本管理器。</p>\n<p>它可以用一个命令行工具管理多种运行时环境的版本，支持插件机制。</p>\n<p>举例来说，你可以通过 asdf 来管理 Python、Node.js、Ruby 等语言的版本，也可以管理 Clang 工具（像我介绍的 asdf-clang-tools）。</p>\n<p>所有工具的版本信息都记录在一个共享的 <code>.tool-versions</code> 文件中，这样团队可以轻松在不同机器间同步配置。</p>\n<p>总之，asdf 的好处就是“一个工具管理所有的依赖”，让项目所需的各类工具版本统一起来，免去在每个工具里使用不同版本管理器的麻烦。</p>\n<h2 id=\"安装与使用示例\"><a href=\"#安装与使用示例\" class=\"headerlink\" title=\"安装与使用示例\"></a>安装与使用示例</h2><p>使用 asdf-clang-tools 安装 Clang 工具非常简单。假设你已经安装好了 asdf，只需按照官方仓库的说明进行操作：</p>\n<ul>\n<li><p>首先 <strong>添加插件</strong>：以 <code>clang-format</code> 为例，在终端运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">asdf plugin add clang-format https://github.com/cpp-linter/asdf-clang-tools.git</span><br></pre></td></tr></table></figure>\n\n<p>类似地，<code>clang-query</code>、<code>clang-tidy</code>、<code>clang-apply-replacements</code> 等工具也使用相同的仓库地址，只需把插件名改为对应的名称即可。</p>\n</li>\n<li><p><strong>查看可用版本</strong>：添加插件后，可以运行 <code>asdf list all clang-format</code> 来列出所有可安装的 clang-format 版本。</p>\n</li>\n<li><p><strong>安装工具</strong>：选择一个版本（例如最新的 <code>latest</code>），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">asdf install clang-format latest</span><br></pre></td></tr></table></figure>\n\n<p>这会下载并安装指定版本的 clang-format 二进制文件。</p>\n</li>\n<li><p><strong>设置全局版本</strong>：安装完成后，可以执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">asdf <span class=\"built_in\">set</span> clang-format latest</span><br></pre></td></tr></table></figure>\n\n<p>这会把版本写入 <code>~/.tool-versions</code> 文件，实现全局可用。此后，你就可以直接在命令行中使用 <code>clang-format</code> 等命令了。</p>\n</li>\n</ul>\n<p>以上操作完成后，clang-format、clang-tidy 等工具就已集成到 asdf 管理下。更多细节可参考 asdf 官方文档。</p>\n<h2 id=\"欢迎试用并反馈建议\"><a href=\"#欢迎试用并反馈建议\" class=\"headerlink\" title=\"欢迎试用并反馈建议\"></a>欢迎试用并反馈建议</h2><p>总的来说，asdf-clang-tools 为需要 Clang Tools 的开发者提供了一种新的安装方式。</p>\n<p>它与 cpp-linter 组织的其它工具（如 clang-tools-pip）互为补充。</p>\n<p>我诚挚欢迎大家尝试 cpp-linter 提供的整个 C&#x2F;C++ lint 解决方案，选择最适合自己工作流的工具。</p>\n<p>同时，如果在使用过程中有任何问题或改进建议，欢迎通过 GitHub Issues、讨论区等渠道提出，一起完善 Cpp Linter 工具链，让 C&#x2F;C++ 格式化和静态分析工作更加便捷高效！</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<p>最近，我在 cpp-linter 组织下发布了一个名为 <strong><a href=\"https://github.com/cpp-linter/asdf-clang-tools\">asdf-clang-tools</a></strong> 的全新仓库。这个项目是从 amrox&#x2F;asdf-clang-tools fork 而来。由于原作者多年没有维护，我对其进行了修复、升级和功能扩展，使其焕然一新。简单来说，asdf-clang-tools 是一个 <strong>asdf 插件</strong>，用于安装和管理 Clang Tools 相关工具（如 clang-format、clang-tidy、clang-query 和 clang-apply-replacements 等）。</p>\n<h2 id=\"新的安装方式：除了-pip-还有-asdf\"><a href=\"#新的安装方式：除了-pip-还有-asdf\" class=\"headerlink\" title=\"新的安装方式：除了 pip 还有 asdf\"></a>新的安装方式：除了 pip 还有 asdf</h2><p>在此之前，我曾推出过 <strong>clang-tools-pip</strong> 工具包，用户可以通过 <code>pip install clang-tools</code> 的方式安装包括 clang-format、clang-tidy、clang-query、clang-apply-replacements 在内的一整套 Clang 可执行工具。</p>\n<p>而 asdf-clang-tools 则提供了另一种途径——利用 <a href=\"https://asdf-vm.com/\">asdf</a> 版本管理器来安装这些工具。简而言之，这为喜欢用 asdf 管理工具版本的开发者多了一个选择。</p>\n<p>这两种方式并不是互斥的：你可以通过 pip 或 asdf 轻松安装和管理 Clang 工具。至于选择哪种方式取决于你的工作流和个人喜好。</p>\n<h2 id=\"什么是-asdf-版本管理器\"><a href=\"#什么是-asdf-版本管理器\" class=\"headerlink\" title=\"什么是 asdf 版本管理器\"></a>什么是 asdf 版本管理器</h2><p>很多开发者可能还不太熟悉 asdf。<strong>asdf</strong> 是一个多语言、多工具的版本管理器。</p>\n<p>它可以用一个命令行工具管理多种运行时环境的版本，支持插件机制。</p>\n<p>举例来说，你可以通过 asdf 来管理 Python、Node.js、Ruby 等语言的版本，也可以管理 Clang 工具（像我介绍的 asdf-clang-tools）。</p>\n<p>所有工具的版本信息都记录在一个共享的 <code>.tool-versions</code> 文件中，这样团队可以轻松在不同机器间同步配置。</p>\n<p>总之，asdf 的好处就是“一个工具管理所有的依赖”，让项目所需的各类工具版本统一起来，免去在每个工具里使用不同版本管理器的麻烦。</p>\n<h2 id=\"安装与使用示例\"><a href=\"#安装与使用示例\" class=\"headerlink\" title=\"安装与使用示例\"></a>安装与使用示例</h2><p>使用 asdf-clang-tools 安装 Clang 工具非常简单。假设你已经安装好了 asdf，只需按照官方仓库的说明进行操作：</p>\n<ul>\n<li><p>首先 <strong>添加插件</strong>：以 <code>clang-format</code> 为例，在终端运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">asdf plugin add clang-format https://github.com/cpp-linter/asdf-clang-tools.git</span><br></pre></td></tr></table></figure>\n\n<p>类似地，<code>clang-query</code>、<code>clang-tidy</code>、<code>clang-apply-replacements</code> 等工具也使用相同的仓库地址，只需把插件名改为对应的名称即可。</p>\n</li>\n<li><p><strong>查看可用版本</strong>：添加插件后，可以运行 <code>asdf list all clang-format</code> 来列出所有可安装的 clang-format 版本。</p>\n</li>\n<li><p><strong>安装工具</strong>：选择一个版本（例如最新的 <code>latest</code>），执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">asdf install clang-format latest</span><br></pre></td></tr></table></figure>\n\n<p>这会下载并安装指定版本的 clang-format 二进制文件。</p>\n</li>\n<li><p><strong>设置全局版本</strong>：安装完成后，可以执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">asdf <span class=\"built_in\">set</span> clang-format latest</span><br></pre></td></tr></table></figure>\n\n<p>这会把版本写入 <code>~/.tool-versions</code> 文件，实现全局可用。此后，你就可以直接在命令行中使用 <code>clang-format</code> 等命令了。</p>\n</li>\n</ul>\n<p>以上操作完成后，clang-format、clang-tidy 等工具就已集成到 asdf 管理下。更多细节可参考 asdf 官方文档。</p>\n<h2 id=\"欢迎试用并反馈建议\"><a href=\"#欢迎试用并反馈建议\" class=\"headerlink\" title=\"欢迎试用并反馈建议\"></a>欢迎试用并反馈建议</h2><p>总的来说，asdf-clang-tools 为需要 Clang Tools 的开发者提供了一种新的安装方式。</p>\n<p>它与 cpp-linter 组织的其它工具（如 clang-tools-pip）互为补充。</p>\n<p>我诚挚欢迎大家尝试 cpp-linter 提供的整个 C&#x2F;C++ lint 解决方案，选择最适合自己工作流的工具。</p>\n<p>同时，如果在使用过程中有任何问题或改进建议，欢迎通过 GitHub Issues、讨论区等渠道提出，一起完善 Cpp Linter 工具链，让 C&#x2F;C++ 格式化和静态分析工作更加便捷高效！</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","categories":[{"name":"asdf","path":"api/categories/asdf.json"}],"tags":[{"name":"clang-tools","path":"api/tags/clang-tools.json"},{"name":"asdf","path":"api/tags/asdf.json"}]}