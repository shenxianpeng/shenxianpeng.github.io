{"title":"还在用 pip 和 venv？那你可真落伍了，赶紧体验 uv！","slug":"2025/05/uv","date":"2025-05-05T13:41:00.000Z","updated":"2025-08-03T18:27:10.596Z","comments":true,"path":"api/articles/2025/05/uv.json","excerpt":"如果你已经习惯了 pip install、手动创建虚拟环境、自己管理 requirements.txt，那你可能会对 uv 有些惊喜。这是一个由 Astral 团队开发、用 Rust 写的 Python 包管理工具，它不仅能替代 pip、venv、pip-tools 的功能，还带来了更快的依赖解析速度，以及一套更现代的项目管理方式。从 uv init 开始，一键创建项目骨架我们不从 “怎么装 uv” 讲起，而是从 “怎么用 uv 创建一个项目” 开始。","covers":null,"content":"<p>如果你已经习惯了 <code>pip install</code>、手动创建虚拟环境、自己管理 requirements.txt，那你可能会对 <a href=\"https://docs.astral.sh/uv/\">uv</a> 有些惊喜。</p>\n<p>这是一个由 <a href=\"https://astral.sh/\">Astral</a> 团队开发、用 Rust 写的 Python 包管理工具，它不仅能替代 pip、venv、pip-tools 的功能，还带来了更快的依赖解析速度，以及一套更现代的项目管理方式。</p>\n<h3 id=\"从-uv-init-开始，一键创建项目骨架\"><a href=\"#从-uv-init-开始，一键创建项目骨架\" class=\"headerlink\" title=\"从 uv init 开始，一键创建项目骨架\"></a>从 <code>uv init</code> 开始，一键创建项目骨架</h3><p>我们不从 “怎么装 uv” 讲起，而是从 “怎么用 uv 创建一个项目” 开始。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv init</span><br></pre></td></tr></table></figure>\n\n<p>运行这条命令后，uv 会帮你：</p>\n<ul>\n<li>创建 <code>.venv</code> 虚拟环境；</li>\n<li>初始化 <code>pyproject.toml</code> 配置文件；</li>\n<li>（可选）添加依赖；</li>\n<li>生成 <code>uv.lock</code> 锁定文件；</li>\n<li>将 <code>.venv</code> 设置为当前目录默认环境（无需手动激活）；</li>\n</ul>\n<p>整个过程只需一个命令，就能完成以往多个步骤，是构建 Python 项目的更优起点。</p>\n<h3 id=\"使用-uv-add-安装依赖（而不是-pip-install）\"><a href=\"#使用-uv-add-安装依赖（而不是-pip-install）\" class=\"headerlink\" title=\"使用 uv add 安装依赖（而不是 pip install）\"></a>使用 <code>uv add</code> 安装依赖（而不是 pip install）</h3><p>传统的写法是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<p>但在 uv 的世界里，添加依赖是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv add requests</span><br></pre></td></tr></table></figure>\n\n<p>这样做的好处是：</p>\n<ul>\n<li>自动写入 <code>pyproject.toml</code> 的 <code>[project.dependencies]</code>；</li>\n<li>自动安装到 <code>.venv</code> 中；</li>\n<li>自动更新 <code>uv.lock</code> 锁定文件；</li>\n<li>无需再维护 <code>requirements.txt</code>。</li>\n</ul>\n<p>如果你想添加开发依赖（比如测试或格式化工具），可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv add --dev pytest ruff</span><br></pre></td></tr></table></figure>\n\n<p>想移除依赖？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv remove requests</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行项目脚本或工具：uv-venv-uvx\"><a href=\"#运行项目脚本或工具：uv-venv-uvx\" class=\"headerlink\" title=\"运行项目脚本或工具：uv venv + uvx\"></a>运行项目脚本或工具：<code>uv venv</code> + <code>uvx</code></h3><p>uv 的虚拟环境默认安装在 <code>.venv</code> 中，但你<strong>不需要每次 source activate</strong>，只需执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv venv</span><br></pre></td></tr></table></figure>\n\n<p>这会确保 <code>.venv</code> 存在并自动配置成当前 shell 的默认 Python 环境。之后你运行脚本或工具时，不用担心路径问题。</p>\n<p>更妙的是，uv 提供了一个 <code>uvx</code> 命令，跟 <code>pipx</code> 以及 Node.js 的 <code>npx</code> 类似，可以直接运行安装在项目里的 CLI 工具。</p>\n<p>比如我们用 <code>ruff</code> 来检查或格式化 Python 代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uvx ruff check .</span><br><span class=\"line\">uvx ruff format .</span><br></pre></td></tr></table></figure>\n\n<p>现在用 <code>uvx</code>，你不需要再装一堆全局工具，也不用再通过 <code>pre-commit</code> 来统一调用命令——项目内直接用，跨平台还省心。</p>\n<h3 id=\"项目结构示例\"><a href=\"#项目结构示例\" class=\"headerlink\" title=\"项目结构示例\"></a>项目结构示例</h3><p>经过 <code>uv init</code> 和一些 <code>uv add</code> 之后，一个干净的 Python 项目结构可能是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">my-project/</span><br><span class=\"line\">├── .venv/               ← 虚拟环境</span><br><span class=\"line\">├── pyproject.toml       ← 项目配置（依赖、元数据等）</span><br><span class=\"line\">├── uv.lock              ← 锁定的依赖版本</span><br><span class=\"line\">├── main.py              ← 项目入口脚本</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用体验如何？\"><a href=\"#使用体验如何？\" class=\"headerlink\" title=\"使用体验如何？\"></a>使用体验如何？</h3><p>我最近已经把 uv 作为新项目的默认工具：</p>\n<ul>\n<li>不再手动写 <code>requirements.txt</code></li>\n<li>不再纠结 <code>poetry.lock</code> 和 <code>pyproject.toml</code> 的混用</li>\n<li>依赖安装速度非常快，第一次装大型项目时速度能快 3～5 倍</li>\n<li>搭配 <code>ruff</code> 作为 Lint + Format 工具，完全不需要再装 black、flake8</li>\n</ul>\n<p>在 CI 中，我也逐步用它替代 <code>pip install -r requirements.txt</code>，用锁定文件构建环境，一致性更强。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果你：</p>\n<ul>\n<li>对 <code>pip install</code> 安装慢感到不满；</li>\n<li>不想再写一堆 requirements 文件；</li>\n<li>想要更现代、更快、更自动化的 Python 项目结构；</li>\n</ul>\n<p>那你应该试试 <code>uv</code>。它是更快、更更现代的包管理器工具集。</p>\n<p>从下个项目开始，不妨从 <code>uv init</code> 开始吧。</p>\n<p>项目地址：<a href=\"https://docs.astral.sh/uv/\">https://docs.astral.sh/uv/</a></p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv init</span><br></pre></td></tr></table></figure>\n\n<p>运行这条命令后，uv 会帮你：</p>\n<ul>\n<li>创建 <code>.venv</code> 虚拟环境；</li>\n<li>初始化 <code>pyproject.toml</code> 配置文件；</li>\n<li>（可选）添加依赖；</li>\n<li>生成 <code>uv.lock</code> 锁定文件；</li>\n<li>将 <code>.venv</code> 设置为当前目录默认环境（无需手动激活）；</li>\n</ul>\n<p>整个过程只需一个命令，就能完成以往多个步骤，是构建 Python 项目的更优起点。</p>\n<h3 id=\"使用-uv-add-安装依赖（而不是-pip-install）\"><a href=\"#使用-uv-add-安装依赖（而不是-pip-install）\" class=\"headerlink\" title=\"使用 uv add 安装依赖（而不是 pip install）\"></a>使用 <code>uv add</code> 安装依赖（而不是 pip install）</h3><p>传统的写法是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure>\n\n<p>但在 uv 的世界里，添加依赖是这样的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv add requests</span><br></pre></td></tr></table></figure>\n\n<p>这样做的好处是：</p>\n<ul>\n<li>自动写入 <code>pyproject.toml</code> 的 <code>[project.dependencies]</code>；</li>\n<li>自动安装到 <code>.venv</code> 中；</li>\n<li>自动更新 <code>uv.lock</code> 锁定文件；</li>\n<li>无需再维护 <code>requirements.txt</code>。</li>\n</ul>\n<p>如果你想添加开发依赖（比如测试或格式化工具），可以：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv add --dev pytest ruff</span><br></pre></td></tr></table></figure>\n\n<p>想移除依赖？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv remove requests</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行项目脚本或工具：uv-venv-uvx\"><a href=\"#运行项目脚本或工具：uv-venv-uvx\" class=\"headerlink\" title=\"运行项目脚本或工具：uv venv + uvx\"></a>运行项目脚本或工具：<code>uv venv</code> + <code>uvx</code></h3><p>uv 的虚拟环境默认安装在 <code>.venv</code> 中，但你<strong>不需要每次 source activate</strong>，只需执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uv venv</span><br></pre></td></tr></table></figure>\n\n<p>这会确保 <code>.venv</code> 存在并自动配置成当前 shell 的默认 Python 环境。之后你运行脚本或工具时，不用担心路径问题。</p>\n<p>更妙的是，uv 提供了一个 <code>uvx</code> 命令，跟 <code>pipx</code> 以及 Node.js 的 <code>npx</code> 类似，可以直接运行安装在项目里的 CLI 工具。</p>\n<p>比如我们用 <code>ruff</code> 来检查或格式化 Python 代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">uvx ruff check .</span><br><span class=\"line\">uvx ruff format .</span><br></pre></td></tr></table></figure>\n\n<p>现在用 <code>uvx</code>，你不需要再装一堆全局工具，也不用再通过 <code>pre-commit</code> 来统一调用命令——项目内直接用，跨平台还省心。</p>\n<h3 id=\"项目结构示例\"><a href=\"#项目结构示例\" class=\"headerlink\" title=\"项目结构示例\"></a>项目结构示例</h3><p>经过 <code>uv init</code> 和一些 <code>uv add</code> 之后，一个干净的 Python 项目结构可能是这样的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">my-project/</span><br><span class=\"line\">├── .venv/               ← 虚拟环境</span><br><span class=\"line\">├── pyproject.toml       ← 项目配置（依赖、元数据等）</span><br><span class=\"line\">├── uv.lock              ← 锁定的依赖版本</span><br><span class=\"line\">├── main.py              ← 项目入口脚本</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用体验如何？\"><a href=\"#使用体验如何？\" class=\"headerlink\" title=\"使用体验如何？\"></a>使用体验如何？</h3><p>我最近已经把 uv 作为新项目的默认工具：</p>\n<ul>\n<li>不再手动写 <code>requirements.txt</code></li>\n<li>不再纠结 <code>poetry.lock</code> 和 <code>pyproject.toml</code> 的混用</li>\n<li>依赖安装速度非常快，第一次装大型项目时速度能快 3～5 倍</li>\n<li>搭配 <code>ruff</code> 作为 Lint + Format 工具，完全不需要再装 black、flake8</li>\n</ul>\n<p>在 CI 中，我也逐步用它替代 <code>pip install -r requirements.txt</code>，用锁定文件构建环境，一致性更强。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果你：</p>\n<ul>\n<li>对 <code>pip install</code> 安装慢感到不满；</li>\n<li>不想再写一堆 requirements 文件；</li>\n<li>想要更现代、更快、更自动化的 Python 项目结构；</li>\n</ul>\n<p>那你应该试试 <code>uv</code>。它是更快、更更现代的包管理器工具集。</p>\n<p>从下个项目开始，不妨从 <code>uv init</code> 开始吧。</p>\n<p>项目地址：<a href=\"https://docs.astral.sh/uv/\">https://docs.astral.sh/uv/</a></p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"uv","path":"api/tags/uv.json"},{"name":"pip","path":"api/tags/pip.json"}]}