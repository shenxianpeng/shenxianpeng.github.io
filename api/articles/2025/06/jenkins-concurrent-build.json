{"title":"How to Change abortPrevious Value in Jenkins?","slug":"2025/06/jenkins-concurrent-build","date":"2025-06-04T15:41:00.000Z","updated":"2025-06-11T21:34:26.196Z","comments":true,"path":"api/articles/2025/06/jenkins-concurrent-build.json","excerpt":"BackgroundIn our Jenkins pipeline, we use the following configuration to manage resource consumption, especially for builds that typically take more than 30 minutes to complete:disableConcurrentBuilds abortPrevious: true<br>This setting prevents concurrent builds on the same branch or pull request. When a new build is triggered while a previous one is still running, the older build is automatically aborted.This helps conserve resources and avoids redundant builds when developers push multiple updates shortly after opening a pull request.The problemBut the problem is:Sometimes, during merges, an ongoing build gets aborted midway or near completion because a new build was triggered for the same branch.<br>They requested that if a build is already running, new builds triggered on the same branch should wait in the queue instead of aborting the current build.","covers":["/2025/06/jenkins-concurrent-build/image.png"],"content":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>In our Jenkins pipeline, we use the following configuration to manage resource consumption, especially for builds that typically take more than 30 minutes to complete:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">disableConcurrentBuilds <span class=\"attr\">abortPrevious:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>This setting prevents concurrent builds on the same branch or pull request. When a new build is triggered while a previous one is still running, the older build is automatically aborted.</p>\n<p>This helps conserve resources and avoids redundant builds when developers push multiple updates shortly after opening a pull request.</p>\n<h2 id=\"The-problem\"><a href=\"#The-problem\" class=\"headerlink\" title=\"The problem\"></a>The problem</h2><p>But the problem is:</p>\n<blockquote>\n<p>Sometimes, during merges, an ongoing build gets aborted midway or near completion because a new build was triggered for the same branch.<br>They requested that if a build is already running, new builds triggered on the same branch should wait in the queue instead of aborting the current build.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"Before-the-changes\"><a href=\"#Before-the-changes\" class=\"headerlink\" title=\"Before the changes:\"></a>Before the changes:</h3><p>Let’s take a picture bellow of the release&#x2F;x.x.x branch.</p>\n<p><img src=\"/2025/06/jenkins-concurrent-build/image.png\" alt=\"What&#39;s the difference?\"></p>\n<ul>\n<li>Job #104 was aborted because a new merge was triggered on the release&#x2F;x.x.x branch.</li>\n<li>Job #105 was also aborted for the same reason, due to another new merge on the release&#x2F;x.x.x branch.</li>\n</ul>\n<h3 id=\"After-the-changes\"><a href=\"#After-the-changes\" class=\"headerlink\" title=\"After the changes:\"></a>After the changes:</h3><ul>\n<li>Job #106 will continue running without being canceled, even if a new merge occurs.</li>\n<li>Job #107 will wait in the queue until Job #106 finishes before starting.</li>\n</ul>\n<h2 id=\"Initial-Thoughts\"><a href=\"#Initial-Thoughts\" class=\"headerlink\" title=\"Initial Thoughts\"></a>Initial Thoughts</h2><p>Initially, I believed that <code>disableConcurrentBuilds</code> was a global setting that applied uniformly across all branches and pull requests.</p>\n<p>After researching via ChatGPT and Google, I found that selectively applying this setting per branch is not straightforward and requires adding complexity to the existing pipeline.</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>But there is a simple solution? Yes!</p>\n<p>I implemented and tested conditional logic that:</p>\n<ul>\n<li>Retains <code>abortPrevious: true</code> for pull request builds,</li>\n<li>Disables it for specific branches such as <code>devel</code> and <code>release</code>.</li>\n</ul>\n<p>Here the code snap about how to implement it.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vars/build.groovy</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> call() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> isAboutPrevious = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.BRANCH_NAME == <span class=\"string\">&#x27;devel&#x27;</span> || env.BRANCH_NAME.startsWith(<span class=\"string\">&#x27;release/&#x27;</span>)) &#123;</span><br><span class=\"line\">        isAboutPrevious = <span class=\"literal\">false</span> <span class=\"comment\">// disable abortPrevious for devel and release branches.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pipeline &#123;</span><br><span class=\"line\">        options &#123;</span><br><span class=\"line\">            disableConcurrentBuilds <span class=\"attr\">abortPrevious:</span> isAboutPrevious</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stages&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ....</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-Result\"><a href=\"#The-Result\" class=\"headerlink\" title=\"The Result\"></a>The Result</h3><p>The changes passed testing and have been merged into our shared pipeline library.</p>\n<p>Now, for the <code>devel</code> and <code>release</code> branches in multi-branch pipeline:</p>\n<ul>\n<li>Jenkins <strong>no longer aborts running builds</strong> when new builds are triggered.</li>\n<li>Instead, it <strong>queues subsequent builds</strong>, improving stability and predictability for our QA workflows.</li>\n</ul>\n<hr>\n<p>Please credit the author and source when reposting this article. Commercial use is not permitted. You’re welcome to subscribe to my blog via RSS.</p>\n","more":"<h3 id=\"Before-the-changes\"><a href=\"#Before-the-changes\" class=\"headerlink\" title=\"Before the changes:\"></a>Before the changes:</h3><p>Let’s take a picture bellow of the release&#x2F;x.x.x branch.</p>\n<p><img src=\"/2025/06/jenkins-concurrent-build/image.png\" alt=\"What&#39;s the difference?\"></p>\n<ul>\n<li>Job #104 was aborted because a new merge was triggered on the release&#x2F;x.x.x branch.</li>\n<li>Job #105 was also aborted for the same reason, due to another new merge on the release&#x2F;x.x.x branch.</li>\n</ul>\n<h3 id=\"After-the-changes\"><a href=\"#After-the-changes\" class=\"headerlink\" title=\"After the changes:\"></a>After the changes:</h3><ul>\n<li>Job #106 will continue running without being canceled, even if a new merge occurs.</li>\n<li>Job #107 will wait in the queue until Job #106 finishes before starting.</li>\n</ul>\n<h2 id=\"Initial-Thoughts\"><a href=\"#Initial-Thoughts\" class=\"headerlink\" title=\"Initial Thoughts\"></a>Initial Thoughts</h2><p>Initially, I believed that <code>disableConcurrentBuilds</code> was a global setting that applied uniformly across all branches and pull requests.</p>\n<p>After researching via ChatGPT and Google, I found that selectively applying this setting per branch is not straightforward and requires adding complexity to the existing pipeline.</p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>But there is a simple solution? Yes!</p>\n<p>I implemented and tested conditional logic that:</p>\n<ul>\n<li>Retains <code>abortPrevious: true</code> for pull request builds,</li>\n<li>Disables it for specific branches such as <code>devel</code> and <code>release</code>.</li>\n</ul>\n<p>Here the code snap about how to implement it.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vars/build.groovy</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> call() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> isAboutPrevious = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.BRANCH_NAME == <span class=\"string\">&#x27;devel&#x27;</span> || env.BRANCH_NAME.startsWith(<span class=\"string\">&#x27;release/&#x27;</span>)) &#123;</span><br><span class=\"line\">        isAboutPrevious = <span class=\"literal\">false</span> <span class=\"comment\">// disable abortPrevious for devel and release branches.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pipeline &#123;</span><br><span class=\"line\">        options &#123;</span><br><span class=\"line\">            disableConcurrentBuilds <span class=\"attr\">abortPrevious:</span> isAboutPrevious</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stages&#123;</span><br><span class=\"line\">            <span class=\"comment\">// ....</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"The-Result\"><a href=\"#The-Result\" class=\"headerlink\" title=\"The Result\"></a>The Result</h3><p>The changes passed testing and have been merged into our shared pipeline library.</p>\n<p>Now, for the <code>devel</code> and <code>release</code> branches in multi-branch pipeline:</p>\n<ul>\n<li>Jenkins <strong>no longer aborts running builds</strong> when new builds are triggered.</li>\n<li>Instead, it <strong>queues subsequent builds</strong>, improving stability and predictability for our QA workflows.</li>\n</ul>\n<hr>\n<p>Please credit the author and source when reposting this article. Commercial use is not permitted. You’re welcome to subscribe to my blog via RSS.</p>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}