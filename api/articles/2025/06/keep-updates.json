{"title":"CI/CD 不是一次性的项目，而是一个不断演进的系统","slug":"2025/06/keep-updates","date":"2025-06-02T15:41:00.000Z","updated":"2025-06-02T20:53:03.409Z","comments":true,"path":"api/articles/2025/06/keep-updates.json","excerpt":null,"covers":null,"content":"<p>今天这篇文章，起因是我看到前同事发的一条朋友圈。</p>\n<p>我感觉他这是在<strong>赤裸裸地夸我</strong> ：）<br>（不好意思，得瑟一下~）</p>\n<p>不过说实话，这几年在 CI&#x2F;CD 这块，我确实一直在做两件事：</p>\n<ul>\n<li>一边关注行业里最新的实践；</li>\n<li>一边筛选出适合我们业务的部分落地实施，或者写文章进行分享。</li>\n</ul>\n<p>但我发现一个常见的误区是：</p>\n<p><strong>很多人觉得 CI&#x2F;CD 做完了就完了，是一劳永逸的事情。</strong></p>\n<p>其实并不是。</p>\n<h2 id=\"罗马不是一天建成的，CI-CD-也不是\"><a href=\"#罗马不是一天建成的，CI-CD-也不是\" class=\"headerlink\" title=\"罗马不是一天建成的，CI&#x2F;CD 也不是\"></a>罗马不是一天建成的，CI&#x2F;CD 也不是</h2><p>不论是 CI&#x2F;CD 流水线，还是底层的程序、工具、库、平台，它们都属于基础设施的一部分。基础设施的一个显著特点是：</p>\n<blockquote>\n<p><strong>需要长期投入与持续维护。</strong></p>\n</blockquote>\n<p>否则，哪怕你现在搭建得再好，几年之后，也会因为无人维护而变成一个臃肿、失控的“技术债堆积场”。最终不得不推翻重来。</p>\n<p>举几个例子你就会明白：</p>\n<h2 id=\"如果不维护，风险很快就会显现\"><a href=\"#如果不维护，风险很快就会显现\" class=\"headerlink\" title=\"如果不维护，风险很快就会显现\"></a>如果不维护，风险很快就会显现</h2><h3 id=\"1-安全风险：\"><a href=\"#1-安全风险：\" class=\"headerlink\" title=\"1. 安全风险：\"></a>1. 安全风险：</h3><p>  如果你没关注 <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23897\">CVE-2024-23897</a>，可能根本不知道你的 Jenkins 存在任意文件读取漏洞，有被攻击者入侵的风险。</p>\n<h3 id=\"2-功能缺失与兼容性问题：\"><a href=\"#2-功能缺失与兼容性问题：\" class=\"headerlink\" title=\"2. 功能缺失与兼容性问题：\"></a>2. 功能缺失与兼容性问题：</h3><p>  不看 Jenkins 的更新日志，可能会错过一些关键修复或新特性；<br>  不更新 CI&#x2F;CD 工具链，代码可能突然就编译不了了，测试也不再通过。</p>\n<h3 id=\"3-技术债积累与维护成本上升：\"><a href=\"#3-技术债积累与维护成本上升：\" class=\"headerlink\" title=\"3. 技术债积累与维护成本上升：\"></a>3. 技术债积累与维护成本上升：</h3><p>  没有引入新的实践和工具，流水线就会越来越复杂、难维护，开发体验也会越来越差。</p>\n<h2 id=\"再来看-Python-项目这边\"><a href=\"#再来看-Python-项目这边\" class=\"headerlink\" title=\"再来看 Python 项目这边\"></a>再来看 Python 项目这边</h2><h3 id=\"1-依旧使用-setup-py？\"><a href=\"#1-依旧使用-setup-py？\" class=\"headerlink\" title=\"1. 依旧使用 setup.py？\"></a>1. 依旧使用 setup.py？</h3><p>  那你可能错过了 PEP 518 推出的 pyproject.toml 所带来的统一构建生态。</p>\n<h3 id=\"2-依旧用-pip-install-安装-CLI-工具？\"><a href=\"#2-依旧用-pip-install-安装-CLI-工具？\" class=\"headerlink\" title=\"2. 依旧用 pip install 安装 CLI 工具？\"></a>2. 依旧用 pip install 安装 CLI 工具？</h3><p>  那你可能还不了解 pipx 和 uvx 能如何更方便、高效地管理工具依赖。</p>\n<h3 id=\"3-不了解-PEP、不了解包结构和发布规范？\"><a href=\"#3-不了解-PEP、不了解包结构和发布规范？\" class=\"headerlink\" title=\"3. 不了解 PEP、不了解包结构和发布规范？\"></a>3. 不了解 PEP、不了解包结构和发布规范？</h3><p>  那很容易写出不规范、难以维护、别人无法复用的代码。</p>\n<p>这些问题，表面上看似无伤大雅，但背后隐藏的是维护成本、团队协作效率以及项目未来发展的可持续性。</p>\n<p><strong>所以说，重构是软件工程的日常功课</strong></p>\n<p>很多时候，这些工作并不显眼，甚至容易被认为是“做多了”“瞎折腾”或“浪费时间”。</p>\n<p>但实际上，<strong>恰恰是这些“隐性的工作”，才是软件工程真正的根基。</strong></p>\n<blockquote>\n<p>没有重构，系统只会越来越臃肿；<br>没有持续进化，CI&#x2F;CD 迟早变成一个烂摊子；<br>没有持续学习和探索，就会离最佳实践越来越远。</p>\n</blockquote>\n<p>所以，希望这篇文章能给你一点启发：</p>\n<blockquote>\n<p>CI&#x2F;CD 不是一次性的建设项目，而是一个持续演进、不断重构和成长的 DevOps 系统。</p>\n</blockquote>\n<p>如果你也正在做这些“看不见的工作”，别灰心。你正在为整个系统的长期可持续打下基础。</p>\n<p>📌 你是否也遇到过相关的坑？欢迎留言分享你的故事。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<p>今天这篇文章，起因是我看到前同事发的一条朋友圈。</p>\n<p>我感觉他这是在<strong>赤裸裸地夸我</strong> ：）<br>（不好意思，得瑟一下~）</p>\n<p>不过说实话，这几年在 CI&#x2F;CD 这块，我确实一直在做两件事：</p>\n<ul>\n<li>一边关注行业里最新的实践；</li>\n<li>一边筛选出适合我们业务的部分落地实施，或者写文章进行分享。</li>\n</ul>\n<p>但我发现一个常见的误区是：</p>\n<p><strong>很多人觉得 CI&#x2F;CD 做完了就完了，是一劳永逸的事情。</strong></p>\n<p>其实并不是。</p>\n<h2 id=\"罗马不是一天建成的，CI-CD-也不是\"><a href=\"#罗马不是一天建成的，CI-CD-也不是\" class=\"headerlink\" title=\"罗马不是一天建成的，CI&#x2F;CD 也不是\"></a>罗马不是一天建成的，CI&#x2F;CD 也不是</h2><p>不论是 CI&#x2F;CD 流水线，还是底层的程序、工具、库、平台，它们都属于基础设施的一部分。基础设施的一个显著特点是：</p>\n<blockquote>\n<p><strong>需要长期投入与持续维护。</strong></p>\n</blockquote>\n<p>否则，哪怕你现在搭建得再好，几年之后，也会因为无人维护而变成一个臃肿、失控的“技术债堆积场”。最终不得不推翻重来。</p>\n<p>举几个例子你就会明白：</p>\n<h2 id=\"如果不维护，风险很快就会显现\"><a href=\"#如果不维护，风险很快就会显现\" class=\"headerlink\" title=\"如果不维护，风险很快就会显现\"></a>如果不维护，风险很快就会显现</h2><h3 id=\"1-安全风险：\"><a href=\"#1-安全风险：\" class=\"headerlink\" title=\"1. 安全风险：\"></a>1. 安全风险：</h3><p>  如果你没关注 <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23897\">CVE-2024-23897</a>，可能根本不知道你的 Jenkins 存在任意文件读取漏洞，有被攻击者入侵的风险。</p>\n<h3 id=\"2-功能缺失与兼容性问题：\"><a href=\"#2-功能缺失与兼容性问题：\" class=\"headerlink\" title=\"2. 功能缺失与兼容性问题：\"></a>2. 功能缺失与兼容性问题：</h3><p>  不看 Jenkins 的更新日志，可能会错过一些关键修复或新特性；<br>  不更新 CI&#x2F;CD 工具链，代码可能突然就编译不了了，测试也不再通过。</p>\n<h3 id=\"3-技术债积累与维护成本上升：\"><a href=\"#3-技术债积累与维护成本上升：\" class=\"headerlink\" title=\"3. 技术债积累与维护成本上升：\"></a>3. 技术债积累与维护成本上升：</h3><p>  没有引入新的实践和工具，流水线就会越来越复杂、难维护，开发体验也会越来越差。</p>\n<h2 id=\"再来看-Python-项目这边\"><a href=\"#再来看-Python-项目这边\" class=\"headerlink\" title=\"再来看 Python 项目这边\"></a>再来看 Python 项目这边</h2><h3 id=\"1-依旧使用-setup-py？\"><a href=\"#1-依旧使用-setup-py？\" class=\"headerlink\" title=\"1. 依旧使用 setup.py？\"></a>1. 依旧使用 setup.py？</h3><p>  那你可能错过了 PEP 518 推出的 pyproject.toml 所带来的统一构建生态。</p>\n<h3 id=\"2-依旧用-pip-install-安装-CLI-工具？\"><a href=\"#2-依旧用-pip-install-安装-CLI-工具？\" class=\"headerlink\" title=\"2. 依旧用 pip install 安装 CLI 工具？\"></a>2. 依旧用 pip install 安装 CLI 工具？</h3><p>  那你可能还不了解 pipx 和 uvx 能如何更方便、高效地管理工具依赖。</p>\n<h3 id=\"3-不了解-PEP、不了解包结构和发布规范？\"><a href=\"#3-不了解-PEP、不了解包结构和发布规范？\" class=\"headerlink\" title=\"3. 不了解 PEP、不了解包结构和发布规范？\"></a>3. 不了解 PEP、不了解包结构和发布规范？</h3><p>  那很容易写出不规范、难以维护、别人无法复用的代码。</p>\n<p>这些问题，表面上看似无伤大雅，但背后隐藏的是维护成本、团队协作效率以及项目未来发展的可持续性。</p>\n<p><strong>所以说，重构是软件工程的日常功课</strong></p>\n<p>很多时候，这些工作并不显眼，甚至容易被认为是“做多了”“瞎折腾”或“浪费时间”。</p>\n<p>但实际上，<strong>恰恰是这些“隐性的工作”，才是软件工程真正的根基。</strong></p>\n<blockquote>\n<p>没有重构，系统只会越来越臃肿；<br>没有持续进化，CI&#x2F;CD 迟早变成一个烂摊子；<br>没有持续学习和探索，就会离最佳实践越来越远。</p>\n</blockquote>\n<p>所以，希望这篇文章能给你一点启发：</p>\n<blockquote>\n<p>CI&#x2F;CD 不是一次性的建设项目，而是一个持续演进、不断重构和成长的 DevOps 系统。</p>\n</blockquote>\n<p>如果你也正在做这些“看不见的工作”，别灰心。你正在为整个系统的长期可持续打下基础。</p>\n<p>📌 你是否也遇到过相关的坑？欢迎留言分享你的故事。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"CI/CD","path":"api/tags/CI/CD.json"}]}