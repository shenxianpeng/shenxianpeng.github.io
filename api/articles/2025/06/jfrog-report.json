{"title":"🧊2025软件供应链现状报告：开源时代，我们究竟在和谁打交道？","slug":"2025/06/jfrog-report","date":"2025-06-28T01:41:00.000Z","updated":"2025-08-03T18:27:10.600Z","comments":true,"path":"api/articles/2025/06/jfrog-report.json","excerpt":"大家好，我是DevOps攻城狮。最近读了一份挺有意思也挺震撼的报告：JFrog发布的《2025软件供应链现状报告》。这是JFrog连续多年基于其平台数据、CVE趋势分析、安全研究团队研究和1400位开发&#x2F;安全从业者调查所形成的一份行业报告。我挑了一些对我们DevOps从业者、尤其是负责CI&#x2F;CD和软件交付的人来说非常有参考价值的内容，分享如下：软件供应链，真的变了报告开头就给出了几个数字，让人警觉：64% 的企业开发团队使用 7种以上编程语言，44% 使用10种以上；一个普通组织 每年引入458个新包，也就是每月平均38个；Docker Hub 和 Hugging Face 上的镜像和模型数量仍在指数级增长；npm依然是恶意包的“重灾区”，但 Hugging Face 上的恶意模型增长了6.5倍。","covers":null,"content":"<p>大家好，我是DevOps攻城狮。</p>\n<p>最近读了一份挺有意思也挺震撼的报告：JFrog发布的《2025软件供应链现状报告》。这是JFrog连续多年基于其平台数据、CVE趋势分析、安全研究团队研究和1400位开发&#x2F;安全从业者调查所形成的一份行业报告。</p>\n<p>我挑了一些对我们DevOps从业者、尤其是负责CI&#x2F;CD和软件交付的人来说非常有参考价值的内容，分享如下：</p>\n<h2 id=\"软件供应链，真的变了\"><a href=\"#软件供应链，真的变了\" class=\"headerlink\" title=\"软件供应链，真的变了\"></a>软件供应链，真的变了</h2><p>报告开头就给出了几个数字，让人警觉：</p>\n<ul>\n<li><strong>64%</strong> 的企业开发团队使用 <strong>7种以上编程语言</strong>，44% 使用10种以上；</li>\n<li>一个普通组织 <strong>每年引入458个新包</strong>，也就是每月平均38个；</li>\n<li>Docker Hub 和 Hugging Face 上的镜像和模型数量仍在指数级增长；</li>\n<li>npm依然是恶意包的“重灾区”，但 Hugging Face 上的<strong>恶意模型增长了6.5倍</strong>。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>如果说过去我们担心“你用的包有没有CVE”，现在可能得先问一句：</p>\n<blockquote>\n<p>你真的知道自己用了哪些包、拉了哪些模型吗？</p>\n</blockquote>\n<h2 id=\"风险激增，不只来自漏洞\"><a href=\"#风险激增，不只来自漏洞\" class=\"headerlink\" title=\"风险激增，不只来自漏洞\"></a>风险激增，不只来自漏洞</h2><p>2024年，全球共披露了 <strong>33,000多个CVE</strong>，比2023年多了27%。但这只是“冰山一角”。</p>\n<p>报告揭示了一个更加令人担忧的趋势：<strong>“漏洞≠风险”，而“风险”正在从更多方向袭来</strong>：</p>\n<ul>\n<li><strong>秘钥泄露</strong>：JFrog在公开仓库中扫描出 <strong>25,229个秘密token</strong>，其中 <strong>6,790个是“活的”</strong>；</li>\n<li><strong>XZ Utils后门</strong>：攻击者假装是OSS维护者，潜伏多年后埋入后门，影响OpenSSH；</li>\n<li><strong>AI模型的投毒</strong>：某些Hugging Face模型在加载时自动执行恶意代码（Pickle注入），悄无声息入侵机器；</li>\n<li><strong>误配置的代价</strong>：比如微软Power Pages因权限配置问题泄露大量用户数据，Volkswagen旗下公司因SaaS误配置泄露了80万台电动车的定位数据。</li>\n</ul>\n<p>说实话，这些问题和“有没有扫描CVE”没什么关系。很多时候，<strong>是我们根本没意识到“这里也会出事”</strong>。</p>\n<h2 id=\"AI爆发，风险也同步升级\"><a href=\"#AI爆发，风险也同步升级\" class=\"headerlink\" title=\"AI爆发，风险也同步升级\"></a>AI爆发，风险也同步升级</h2><p>今年Hugging Face新增了超过100万个模型和数据集，但同时，恶意模型也增长了 <strong>6.5倍</strong>。很多组织都开始将AI模型纳入业务，但：</p>\n<ul>\n<li>有 <strong>37%的企业靠“人工白名单”筛选模型使用</strong>；</li>\n<li>很多AI模型使用的是Pickle格式，加载即执行，一不小心就中招；</li>\n<li>Hugging Face等平台上也出现了“挂羊头卖木马”的开源模型。</li>\n</ul>\n<p>对于我们DevOps或者平台团队来说，这意味着：</p>\n<blockquote>\n<p>“模型”正在变成新的“依赖包”，也应该纳入供应链治理和安全扫描的范畴。</p>\n</blockquote>\n<h2 id=\"安全实践现状：工具变多，人却更焦虑\"><a href=\"#安全实践现状：工具变多，人却更焦虑\" class=\"headerlink\" title=\"安全实践现状：工具变多，人却更焦虑\"></a>安全实践现状：工具变多，人却更焦虑</h2><p>报告里还有一个很现实的观察：</p>\n<blockquote>\n<p>安全工具越多，反而让人越看不清真相。</p>\n</blockquote>\n<ul>\n<li>73%的企业使用了 <strong>7个以上安全工具</strong>，但只有 <strong>43%同时扫描代码和二进制</strong>；</li>\n<li>71%的组织允许开发者<strong>直接从公网拉包</strong>；</li>\n<li>52%的组织一边允许公网拉包，一边又靠自动规则追踪来源；</li>\n<li>CVSS评分“虚高”问题越来越严重，JFrog分析后发现，<strong>88%的Critical CVE其实并不适用</strong>。</li>\n</ul>\n<p>作为一线DevOps，我看到的是：<strong>工具越来越多，但我们似乎并没有真正“安心”下来。</strong></p>\n<h2 id=\"我们能做什么？\"><a href=\"#我们能做什么？\" class=\"headerlink\" title=\"我们能做什么？\"></a>我们能做什么？</h2><p>报告里没有提供“万无一失”的解决方案，但给出了一些务实建议，我结合自己的理解补充几点：</p>\n<ol>\n<li><strong>治理从源头做起</strong>：不要再让开发者从公网自由拉包，使用内部代理仓库如 Artifactory&#x2F;Nexus&#x2F;Harbor；</li>\n<li><strong>扫描不止于代码</strong>：二进制扫描、容器镜像扫描和SBOM（软件物料清单）都需要纳入CI流程；</li>\n<li><strong>引入“适用性评估”</strong>：别光看CVE得分，更重要的是它是否真的适用于你的场景；</li>\n<li><strong>把AI模型当“依赖”管理</strong>：构建模型白名单、扫描模型安全性，甚至做模型SBOM；</li>\n<li><strong>限制新“匿名包”引入</strong>：不要因为某个库“突然火了”就引入，回顾XZ事件足够令人警醒。</li>\n</ol>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>2025年的软件供应链比以往更大、更快、更复杂，也更脆弱。</p>\n<p>安全问题不是“有没有风险”，而是“你知道风险藏在哪里吗”。<br><strong>一不小心，风险可能来自一个新同事引入的PyPI包，或者一位AI工程师下载的模型。</strong></p>\n<p>JFrog这份报告虽然没有解决所有问题，但给我们敲了一个不小的警钟。</p>\n<p>如果你也在构建自己的DevOps流程、AI平台、或者仅仅是维护日常构建环境，<br>建议你认真想一想：</p>\n<blockquote>\n<p>你的“依赖”到底靠不靠谱？<br>你的“扫描”真的能发现问题吗？<br>你的“策略”是否跟得上变化了？</p>\n</blockquote>\n<p>欢迎在评论区聊聊你看到的“供应链怪现象”。也希望这篇分享对你有所启发。</p>\n<p>🧡 欢迎关注，一起做更好的技术实践。<br>📥 如果你需要这份《JFrog Software Supply Chain Report 2025》原报告，<br>可以在公众号后台回复关键词：“jfrog report 2025” 来获取报告下载链接。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<p>如果说过去我们担心“你用的包有没有CVE”，现在可能得先问一句：</p>\n<blockquote>\n<p>你真的知道自己用了哪些包、拉了哪些模型吗？</p>\n</blockquote>\n<h2 id=\"风险激增，不只来自漏洞\"><a href=\"#风险激增，不只来自漏洞\" class=\"headerlink\" title=\"风险激增，不只来自漏洞\"></a>风险激增，不只来自漏洞</h2><p>2024年，全球共披露了 <strong>33,000多个CVE</strong>，比2023年多了27%。但这只是“冰山一角”。</p>\n<p>报告揭示了一个更加令人担忧的趋势：<strong>“漏洞≠风险”，而“风险”正在从更多方向袭来</strong>：</p>\n<ul>\n<li><strong>秘钥泄露</strong>：JFrog在公开仓库中扫描出 <strong>25,229个秘密token</strong>，其中 <strong>6,790个是“活的”</strong>；</li>\n<li><strong>XZ Utils后门</strong>：攻击者假装是OSS维护者，潜伏多年后埋入后门，影响OpenSSH；</li>\n<li><strong>AI模型的投毒</strong>：某些Hugging Face模型在加载时自动执行恶意代码（Pickle注入），悄无声息入侵机器；</li>\n<li><strong>误配置的代价</strong>：比如微软Power Pages因权限配置问题泄露大量用户数据，Volkswagen旗下公司因SaaS误配置泄露了80万台电动车的定位数据。</li>\n</ul>\n<p>说实话，这些问题和“有没有扫描CVE”没什么关系。很多时候，<strong>是我们根本没意识到“这里也会出事”</strong>。</p>\n<h2 id=\"AI爆发，风险也同步升级\"><a href=\"#AI爆发，风险也同步升级\" class=\"headerlink\" title=\"AI爆发，风险也同步升级\"></a>AI爆发，风险也同步升级</h2><p>今年Hugging Face新增了超过100万个模型和数据集，但同时，恶意模型也增长了 <strong>6.5倍</strong>。很多组织都开始将AI模型纳入业务，但：</p>\n<ul>\n<li>有 <strong>37%的企业靠“人工白名单”筛选模型使用</strong>；</li>\n<li>很多AI模型使用的是Pickle格式，加载即执行，一不小心就中招；</li>\n<li>Hugging Face等平台上也出现了“挂羊头卖木马”的开源模型。</li>\n</ul>\n<p>对于我们DevOps或者平台团队来说，这意味着：</p>\n<blockquote>\n<p>“模型”正在变成新的“依赖包”，也应该纳入供应链治理和安全扫描的范畴。</p>\n</blockquote>\n<h2 id=\"安全实践现状：工具变多，人却更焦虑\"><a href=\"#安全实践现状：工具变多，人却更焦虑\" class=\"headerlink\" title=\"安全实践现状：工具变多，人却更焦虑\"></a>安全实践现状：工具变多，人却更焦虑</h2><p>报告里还有一个很现实的观察：</p>\n<blockquote>\n<p>安全工具越多，反而让人越看不清真相。</p>\n</blockquote>\n<ul>\n<li>73%的企业使用了 <strong>7个以上安全工具</strong>，但只有 <strong>43%同时扫描代码和二进制</strong>；</li>\n<li>71%的组织允许开发者<strong>直接从公网拉包</strong>；</li>\n<li>52%的组织一边允许公网拉包，一边又靠自动规则追踪来源；</li>\n<li>CVSS评分“虚高”问题越来越严重，JFrog分析后发现，<strong>88%的Critical CVE其实并不适用</strong>。</li>\n</ul>\n<p>作为一线DevOps，我看到的是：<strong>工具越来越多，但我们似乎并没有真正“安心”下来。</strong></p>\n<h2 id=\"我们能做什么？\"><a href=\"#我们能做什么？\" class=\"headerlink\" title=\"我们能做什么？\"></a>我们能做什么？</h2><p>报告里没有提供“万无一失”的解决方案，但给出了一些务实建议，我结合自己的理解补充几点：</p>\n<ol>\n<li><strong>治理从源头做起</strong>：不要再让开发者从公网自由拉包，使用内部代理仓库如 Artifactory&#x2F;Nexus&#x2F;Harbor；</li>\n<li><strong>扫描不止于代码</strong>：二进制扫描、容器镜像扫描和SBOM（软件物料清单）都需要纳入CI流程；</li>\n<li><strong>引入“适用性评估”</strong>：别光看CVE得分，更重要的是它是否真的适用于你的场景；</li>\n<li><strong>把AI模型当“依赖”管理</strong>：构建模型白名单、扫描模型安全性，甚至做模型SBOM；</li>\n<li><strong>限制新“匿名包”引入</strong>：不要因为某个库“突然火了”就引入，回顾XZ事件足够令人警醒。</li>\n</ol>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>2025年的软件供应链比以往更大、更快、更复杂，也更脆弱。</p>\n<p>安全问题不是“有没有风险”，而是“你知道风险藏在哪里吗”。<br><strong>一不小心，风险可能来自一个新同事引入的PyPI包，或者一位AI工程师下载的模型。</strong></p>\n<p>JFrog这份报告虽然没有解决所有问题，但给我们敲了一个不小的警钟。</p>\n<p>如果你也在构建自己的DevOps流程、AI平台、或者仅仅是维护日常构建环境，<br>建议你认真想一想：</p>\n<blockquote>\n<p>你的“依赖”到底靠不靠谱？<br>你的“扫描”真的能发现问题吗？<br>你的“策略”是否跟得上变化了？</p>\n</blockquote>\n<p>欢迎在评论区聊聊你看到的“供应链怪现象”。也希望这篇分享对你有所启发。</p>\n<p>🧡 欢迎关注，一起做更好的技术实践。<br>📥 如果你需要这份《JFrog Software Supply Chain Report 2025》原报告，<br>可以在公众号后台回复关键词：“jfrog report 2025” 来获取报告下载链接。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"JFrog","path":"api/tags/JFrog.json"}]}