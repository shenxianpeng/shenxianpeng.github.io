{"title":"Nightwatch 持续集成问题","slug":"2018/01/nightwatch-ci-problem","date":"2018-01-15T14:53:53.000Z","updated":"2025-02-15T16:36:33.600Z","comments":true,"path":"api/articles/2018/01/nightwatch-ci-problem.json","excerpt":"在持续集成执行自动化测试用例时候会遇到那些问题呢运行时间过长因为某些错误程序卡住异常处理","covers":null,"content":"<h2 id=\"在持续集成执行自动化测试用例时候会遇到那些问题呢\"><a href=\"#在持续集成执行自动化测试用例时候会遇到那些问题呢\" class=\"headerlink\" title=\"在持续集成执行自动化测试用例时候会遇到那些问题呢\"></a>在持续集成执行自动化测试用例时候会遇到那些问题呢</h2><ol>\n<li>运行时间过长</li>\n<li>因为某些错误程序卡住</li>\n<li>异常处理</li>\n</ol>\n<span id=\"more\"></span>\n<h2 id=\"针对以上三种情况，通过下面的三种方式进行解决\"><a href=\"#针对以上三种情况，通过下面的三种方式进行解决\" class=\"headerlink\" title=\"针对以上三种情况，通过下面的三种方式进行解决\"></a>针对以上三种情况，通过下面的三种方式进行解决</h2><h3 id=\"运行时间过长-E2E-测试脚本中难免需要时间等待，例如\"><a href=\"#运行时间过长-E2E-测试脚本中难免需要时间等待，例如\" class=\"headerlink\" title=\"运行时间过长, E2E 测试脚本中难免需要时间等待，例如\"></a>运行时间过长, E2E 测试脚本中难免需要时间等待，例如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">pause</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 尽可能将说有的 pause 换成 wait，例如：</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">element</span>(<span class=\"string\">&#x27;@columns&#x27;</span>).<span class=\"property\">to</span>.<span class=\"property\">be</span>.<span class=\"property\">visible</span>.<span class=\"title function_\">before</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">waitForElementVisible</span>(<span class=\"string\">&#x27;@columns&#x27;</span>, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"因为某些错误程序卡住-在-TestCase-中进行验证时，例如\"><a href=\"#因为某些错误程序卡住-在-TestCase-中进行验证时，例如\" class=\"headerlink\" title=\"因为某些错误程序卡住, 在 TestCase 中进行验证时，例如\"></a>因为某些错误程序卡住, 在 TestCase 中进行验证时，例如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">assert</span>.<span class=\"title function_\">equal</span>(result.<span class=\"property\">value</span>.<span class=\"property\">length</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 如果只想标注失败，继续执行后面的代码，则需将 assert 换成 verify</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">veriry</span>.<span class=\"title function_\">equal</span>(result.<span class=\"property\">value</span>.<span class=\"property\">length</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 waitForElementVisible 中加 abortOnFailure 参数，当设置为 false，在 wait 超时时，就会标志为 false 继续继续执行</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">waitForElementVisible</span>(<span class=\"string\">&#x27;@columns&#x27;</span>, <span class=\"number\">5000</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//还可以通过在 nightwatch.conf.js 设置全局变量</span></span><br><span class=\"line\"><span class=\"attr\">abortOnAssertionFailure</span>: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>当程序执行运行一次时，程序运行正常，一旦遇到异常时，下次执行就回出错。<br>例如：比如邀请账号登录系统的操作。管理员添加一个新用户，然后用这个新用户登录，之后管理员删除这个账户。但如果删除这个账号失败时，下次执行这个程序再邀请这个账号时就会提示这个账号存在的，可能这个时候这个程序就执行不下去了。这个时候就需要考虑这些异常情况处理，保证程序能够良好的执行下去。</p>\n","more":"<h2 id=\"针对以上三种情况，通过下面的三种方式进行解决\"><a href=\"#针对以上三种情况，通过下面的三种方式进行解决\" class=\"headerlink\" title=\"针对以上三种情况，通过下面的三种方式进行解决\"></a>针对以上三种情况，通过下面的三种方式进行解决</h2><h3 id=\"运行时间过长-E2E-测试脚本中难免需要时间等待，例如\"><a href=\"#运行时间过长-E2E-测试脚本中难免需要时间等待，例如\" class=\"headerlink\" title=\"运行时间过长, E2E 测试脚本中难免需要时间等待，例如\"></a>运行时间过长, E2E 测试脚本中难免需要时间等待，例如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">pause</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 尽可能将说有的 pause 换成 wait，例如：</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">element</span>(<span class=\"string\">&#x27;@columns&#x27;</span>).<span class=\"property\">to</span>.<span class=\"property\">be</span>.<span class=\"property\">visible</span>.<span class=\"title function_\">before</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">waitForElementVisible</span>(<span class=\"string\">&#x27;@columns&#x27;</span>, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"因为某些错误程序卡住-在-TestCase-中进行验证时，例如\"><a href=\"#因为某些错误程序卡住-在-TestCase-中进行验证时，例如\" class=\"headerlink\" title=\"因为某些错误程序卡住, 在 TestCase 中进行验证时，例如\"></a>因为某些错误程序卡住, 在 TestCase 中进行验证时，例如</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">assert</span>.<span class=\"title function_\">equal</span>(result.<span class=\"property\">value</span>.<span class=\"property\">length</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 如果只想标注失败，继续执行后面的代码，则需将 assert 换成 verify</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">veriry</span>.<span class=\"title function_\">equal</span>(result.<span class=\"property\">value</span>.<span class=\"property\">length</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 waitForElementVisible 中加 abortOnFailure 参数，当设置为 false，在 wait 超时时，就会标志为 false 继续继续执行</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">waitForElementVisible</span>(<span class=\"string\">&#x27;@columns&#x27;</span>, <span class=\"number\">5000</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//还可以通过在 nightwatch.conf.js 设置全局变量</span></span><br><span class=\"line\"><span class=\"attr\">abortOnAssertionFailure</span>: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><p>当程序执行运行一次时，程序运行正常，一旦遇到异常时，下次执行就回出错。<br>例如：比如邀请账号登录系统的操作。管理员添加一个新用户，然后用这个新用户登录，之后管理员删除这个账户。但如果删除这个账号失败时，下次执行这个程序再邀请这个账号时就会提示这个账号存在的，可能这个时候这个程序就执行不下去了。这个时候就需要考虑这些异常情况处理，保证程序能够良好的执行下去。</p>","categories":[{"name":"Automation","path":"api/categories/Automation.json"}],"tags":[{"name":"Nightwatch","path":"api/tags/Nightwatch.json"},{"name":"Automation","path":"api/tags/Automation.json"}]}