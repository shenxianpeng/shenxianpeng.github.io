{"title":"Nightwarch v1.3 介绍","slug":"2020/05/nightwatch-v1-3","date":"2020-05-17T01:00:00.000Z","updated":"2024-06-25T15:08:47.741Z","comments":true,"path":"api/articles/2020/05/nightwatch-v1-3.json","excerpt":"Nightwatch js 是我之前写自动化测试用例使用了很长一段时间的测试框架，我当时的使用 v0.9 版本并且对使用和 API 进行了翻译。作为一名前测试工程师，对于自动化的知识不能不更新下自己的知识库，一转眼 Nightwatch 1.3 版本已经发布了，可以看到它在 GitHub 上的使用和关注度还是很高的。 [Figure] Nightwarch.js 是一个端到端的基于 Node.js 使用 W3C Webdriver （以前是 Selenium ）的自动化测试框架。它是一个完整的集成解决方案，用于 web 应用程序和网站的端到端测试，以及 Node.js 单元测试和集成测试。","covers":["/2020/05/nightwatch-v1-3/nightwatch-star.png"],"content":"<p>Nightwatch js 是我之前写自动化测试用例使用了很长一段时间的测试框架，我当时的使用 v0.9 版本并且对使用和 API 进行了翻译。作为一名前测试工程师，对于自动化的知识不能不更新下自己的知识库，一转眼 Nightwatch 1.3 版本已经发布了，可以看到它在 GitHub 上的使用和关注度还是很高的。</p>\n<p><img src=\"/2020/05/nightwatch-v1-3/nightwatch-star.png\" alt=\"Nightwatch star 数量\"></p>\n<p>Nightwarch.js 是一个端到端的基于 Node.js 使用 W3C Webdriver （以前是 Selenium ）的自动化测试框架。它是一个完整的集成解决方案，用于 web 应用程序和网站的端到端测试，以及 Node.js 单元测试和集成测试。</p>\n<span id=\"more\"></span>\n\n<p>查看了一下 Nightwatch 的发布历史（<a href=\"https://github.com/nightwatchjs/nightwatch/releases%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%99%E6%9C%9F%E9%97%B4%E4%BF%AE%E5%A4%8D%E4%BA%86%E4%B8%8D%E5%B0%91\">https://github.com/nightwatchjs/nightwatch/releases），可以看到这期间修复了不少</a> Bug，而且在 v1.3 ​版本还新增一些新的功能。</p>\n<ul>\n<li><p>新增 BDD describe Interface - 可以同时运行以 BDD 描述和导出接口编写的测试，无需其他配置。</p>\n</li>\n<li><p>新增 <code>assert.not</code> 断言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原来这么写</span></span><br><span class=\"line\">browser.<span class=\"property\">assert</span>.<span class=\"title function_\">elementNotPresent</span>()</span><br><span class=\"line\"><span class=\"comment\">// 现在可以这么写</span></span><br><span class=\"line\">browser.<span class=\"property\">assert</span>.<span class=\"property\">not</span>.<span class=\"title function_\">elementPresent</span>(<span class=\"string\">&#x27;.not_present&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增一些 APIs - 比如 <code>getElementProperty</code>, <code>domPropertyContains</code>, <code>domPropertyEquals</code>, <code>.property</code></p>\n</li>\n<li><p>新增了 CLI 选项</p>\n<ul>\n<li><code>--headless</code> - 以无头模式启动浏览器（Chrome或Firefox）</li>\n<li><code>--timeout</code> - 设置断言失败之前重试断言的全局超时</li>\n</ul>\n</li>\n</ul>\n<p>如果要从 v1.0 之前的版本升级，参阅如下升级指南。</p>\n<h2 id=\"升级和启动\"><a href=\"#升级和启动\" class=\"headerlink\" title=\"升级和启动\"></a>升级和启动</h2><p>从 NPM 安装 Nightwatch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install nightwatch --save-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装浏览器驱动程序\"><a href=\"#安装浏览器驱动程序\" class=\"headerlink\" title=\"安装浏览器驱动程序\"></a>安装浏览器驱动程序</h3><h4 id=\"Geckodriver（Firefox）\"><a href=\"#Geckodriver（Firefox）\" class=\"headerlink\" title=\"Geckodriver（Firefox）\"></a>Geckodriver（Firefox）</h4><p>Geckodriver 是用于驱动 Mozilla Firefox 浏览器的 WebDriver 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install geckodriver --save-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Chromedriver\"><a href=\"#Chromedriver\" class=\"headerlink\" title=\"Chromedriver\"></a>Chromedriver</h4><p>Chromedriver 是用于驱动 Google Chrome 浏览器的 WebDriver 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install chromedriver --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>或用一行安装所有内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i nightwatch geckodriver chromedriver --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行演示测试\"><a href=\"#运行演示测试\" class=\"headerlink\" title=\"运行演示测试\"></a>运行演示测试</h2><p>Nightwatch 带有一个 example 文件夹，其中包含一些示例测试。</p>\n<p>下面将运行一个基本测试，该测试打开搜索引擎 Ecosia.org，搜索 “nightwatch” 一词，并验证术语 “第一个结果” 是否是 Nightwatch.js 网站。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/nightwatch node_modules/nightwatch/examples/tests/ecosia.js</span><br></pre></td></tr></table></figure>\n\n<p>Windows 用户可能需要运行节点 node node_modules&#x2F;.bin&#x2F;nightwatch</p>\n<h2 id=\"手动下载浏览器驱动程序\"><a href=\"#手动下载浏览器驱动程序\" class=\"headerlink\" title=\"手动下载浏览器驱动程序\"></a>手动下载浏览器驱动程序</h2><p>Nightwatch 使用兼容 WebDriver 的服务器来控制浏览器。 WebDriver 是 W3C 规范和行业标准，提供了与浏览器进行交互的平台和 HTTP 协议。</p>\n<p>Nightwatch 包括对自动管理以下服务的支持：</p>\n<h3 id=\"ChromeDriver\"><a href=\"#ChromeDriver\" class=\"headerlink\" title=\"ChromeDriver\"></a>ChromeDriver</h3><ul>\n<li>针对 Chrome 浏览器运行测试</li>\n<li>下载网址 <a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads%E3%80%82\">https://sites.google.com/a/chromium.org/chromedriver/downloads。</a></li>\n</ul>\n<p>从版本 75 开始，Chromedriver 默认启用 W3C Webdriver 协议。如果你现在想坚持使用 JSONWire，请调整 chromeOptions：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">desiredCapabilities : &#123;</span><br><span class=\"line\">  browserName : <span class=\"string\">&#x27;chrome&#x27;</span>,</span><br><span class=\"line\">  chromeOptions: &#123;</span><br><span class=\"line\">    w3c: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GeckoDriver\"><a href=\"#GeckoDriver\" class=\"headerlink\" title=\"GeckoDriver\"></a>GeckoDriver</h3><p>针对 Mozilla Firefox 浏览器运行测试。下载网址：<a href=\"https://github.com/mozilla/geckodriver/releases\">https://github.com/mozilla/geckodriver/releases</a>.</p>\n<h3 id=\"Selenium-Standalone-Server\"><a href=\"#Selenium-Standalone-Server\" class=\"headerlink\" title=\"Selenium Standalone Server\"></a>Selenium Standalone Server</h3><ul>\n<li>在一个地方管理多个浏览器配置，还可以利用 Selenium Grid 服务</li>\n<li>可以从 Selenium 发布页面下载 selenium 服务器 jar 文件 selenium-server-standalone-3.x.x.jar：<a href=\"https://selenium-release.storage.googleapis.com/index.html\">https://selenium-release.storage.googleapis.com/index.html</a></li>\n</ul>\n<p>重要的是要注意，尽管较早的 Nightwatch 版本（v0.9 及更低版本）需要 Selenium Server，但从 1.0 版本开始不再需要 Selenium。</p>\n<p>特定的 WebDriver 设置指南可在 Docs 网站上找到。旧版 Selenium 驱动程序安装指南以及调试说明可以在 Wiki 上找到。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>示例文件夹中包含示例测试，这些示例演示了多个 Nightwatch 功能的用法。</p>\n<p>你还可以查看 nightwatch-website-tests (<a href=\"https://github.com/nightwatchjs/nightwatch-website-tests\">https://github.com/nightwatchjs/nightwatch-website-tests</a>) 存储库，例如针对 nightwatchjs.org (<a href=\"https://nightwatchjs.org/\">https://nightwatchjs.org/</a>) 网站的测试。</p>\n<h2 id=\"Nightwatch-单元测试\"><a href=\"#Nightwatch-单元测试\" class=\"headerlink\" title=\"Nightwatch 单元测试\"></a>Nightwatch 单元测试</h2><p>Nightwatch 的测试是使用 Mocha 编写的。</p>\n<p>1.克隆项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nightwatchjs/nightwatch.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nightwatch</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>2.运行测试</p>\n<p>要运行完整的测试套件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>要检查测试范围，请运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run mocha-coverage</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器中打开生成的 coverage&#x2F;index.html 文件。</p>\n<h2 id=\"Nightwatch-使用示例\"><a href=\"#Nightwatch-使用示例\" class=\"headerlink\" title=\"Nightwatch 使用示例\"></a>Nightwatch 使用示例</h2><p>以下是我写的一个使用 NightwatchJS 对 Nightwatch 官网 <a href=\"https://nightwatchjs.org/\">https://nightwatchjs.org</a> 进行测试的一个测试示例（已经升级到 v1.3 版本）以展示在实际项目中使用 Nightwatchjs 如何组织目录结构，区别配置全局和本地环境。</p>\n<p>示例仓库的 GitHub 地址是 <a href=\"https://github.com/nightwatchjs-cn/nightwatch-e2e%EF%BC%8C%E6%AC%A2%E8%BF%8E\">https://github.com/nightwatchjs-cn/nightwatch-e2e，欢迎</a> Star 和 Fork。</p>\n","more":"<p>查看了一下 Nightwatch 的发布历史（<a href=\"https://github.com/nightwatchjs/nightwatch/releases%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%99%E6%9C%9F%E9%97%B4%E4%BF%AE%E5%A4%8D%E4%BA%86%E4%B8%8D%E5%B0%91\">https://github.com/nightwatchjs/nightwatch/releases），可以看到这期间修复了不少</a> Bug，而且在 v1.3 ​版本还新增一些新的功能。</p>\n<ul>\n<li><p>新增 BDD describe Interface - 可以同时运行以 BDD 描述和导出接口编写的测试，无需其他配置。</p>\n</li>\n<li><p>新增 <code>assert.not</code> 断言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原来这么写</span></span><br><span class=\"line\">browser.<span class=\"property\">assert</span>.<span class=\"title function_\">elementNotPresent</span>()</span><br><span class=\"line\"><span class=\"comment\">// 现在可以这么写</span></span><br><span class=\"line\">browser.<span class=\"property\">assert</span>.<span class=\"property\">not</span>.<span class=\"title function_\">elementPresent</span>(<span class=\"string\">&#x27;.not_present&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新增一些 APIs - 比如 <code>getElementProperty</code>, <code>domPropertyContains</code>, <code>domPropertyEquals</code>, <code>.property</code></p>\n</li>\n<li><p>新增了 CLI 选项</p>\n<ul>\n<li><code>--headless</code> - 以无头模式启动浏览器（Chrome或Firefox）</li>\n<li><code>--timeout</code> - 设置断言失败之前重试断言的全局超时</li>\n</ul>\n</li>\n</ul>\n<p>如果要从 v1.0 之前的版本升级，参阅如下升级指南。</p>\n<h2 id=\"升级和启动\"><a href=\"#升级和启动\" class=\"headerlink\" title=\"升级和启动\"></a>升级和启动</h2><p>从 NPM 安装 Nightwatch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install nightwatch --save-dev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装浏览器驱动程序\"><a href=\"#安装浏览器驱动程序\" class=\"headerlink\" title=\"安装浏览器驱动程序\"></a>安装浏览器驱动程序</h3><h4 id=\"Geckodriver（Firefox）\"><a href=\"#Geckodriver（Firefox）\" class=\"headerlink\" title=\"Geckodriver（Firefox）\"></a>Geckodriver（Firefox）</h4><p>Geckodriver 是用于驱动 Mozilla Firefox 浏览器的 WebDriver 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install geckodriver --save-dev</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Chromedriver\"><a href=\"#Chromedriver\" class=\"headerlink\" title=\"Chromedriver\"></a>Chromedriver</h4><p>Chromedriver 是用于驱动 Google Chrome 浏览器的 WebDriver 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install chromedriver --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>或用一行安装所有内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm i nightwatch geckodriver chromedriver --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行演示测试\"><a href=\"#运行演示测试\" class=\"headerlink\" title=\"运行演示测试\"></a>运行演示测试</h2><p>Nightwatch 带有一个 example 文件夹，其中包含一些示例测试。</p>\n<p>下面将运行一个基本测试，该测试打开搜索引擎 Ecosia.org，搜索 “nightwatch” 一词，并验证术语 “第一个结果” 是否是 Nightwatch.js 网站。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/nightwatch node_modules/nightwatch/examples/tests/ecosia.js</span><br></pre></td></tr></table></figure>\n\n<p>Windows 用户可能需要运行节点 node node_modules&#x2F;.bin&#x2F;nightwatch</p>\n<h2 id=\"手动下载浏览器驱动程序\"><a href=\"#手动下载浏览器驱动程序\" class=\"headerlink\" title=\"手动下载浏览器驱动程序\"></a>手动下载浏览器驱动程序</h2><p>Nightwatch 使用兼容 WebDriver 的服务器来控制浏览器。 WebDriver 是 W3C 规范和行业标准，提供了与浏览器进行交互的平台和 HTTP 协议。</p>\n<p>Nightwatch 包括对自动管理以下服务的支持：</p>\n<h3 id=\"ChromeDriver\"><a href=\"#ChromeDriver\" class=\"headerlink\" title=\"ChromeDriver\"></a>ChromeDriver</h3><ul>\n<li>针对 Chrome 浏览器运行测试</li>\n<li>下载网址 <a href=\"https://sites.google.com/a/chromium.org/chromedriver/downloads%E3%80%82\">https://sites.google.com/a/chromium.org/chromedriver/downloads。</a></li>\n</ul>\n<p>从版本 75 开始，Chromedriver 默认启用 W3C Webdriver 协议。如果你现在想坚持使用 JSONWire，请调整 chromeOptions：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">desiredCapabilities : &#123;</span><br><span class=\"line\">  browserName : <span class=\"string\">&#x27;chrome&#x27;</span>,</span><br><span class=\"line\">  chromeOptions: &#123;</span><br><span class=\"line\">    w3c: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"GeckoDriver\"><a href=\"#GeckoDriver\" class=\"headerlink\" title=\"GeckoDriver\"></a>GeckoDriver</h3><p>针对 Mozilla Firefox 浏览器运行测试。下载网址：<a href=\"https://github.com/mozilla/geckodriver/releases\">https://github.com/mozilla/geckodriver/releases</a>.</p>\n<h3 id=\"Selenium-Standalone-Server\"><a href=\"#Selenium-Standalone-Server\" class=\"headerlink\" title=\"Selenium Standalone Server\"></a>Selenium Standalone Server</h3><ul>\n<li>在一个地方管理多个浏览器配置，还可以利用 Selenium Grid 服务</li>\n<li>可以从 Selenium 发布页面下载 selenium 服务器 jar 文件 selenium-server-standalone-3.x.x.jar：<a href=\"https://selenium-release.storage.googleapis.com/index.html\">https://selenium-release.storage.googleapis.com/index.html</a></li>\n</ul>\n<p>重要的是要注意，尽管较早的 Nightwatch 版本（v0.9 及更低版本）需要 Selenium Server，但从 1.0 版本开始不再需要 Selenium。</p>\n<p>特定的 WebDriver 设置指南可在 Docs 网站上找到。旧版 Selenium 驱动程序安装指南以及调试说明可以在 Wiki 上找到。</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>示例文件夹中包含示例测试，这些示例演示了多个 Nightwatch 功能的用法。</p>\n<p>你还可以查看 nightwatch-website-tests (<a href=\"https://github.com/nightwatchjs/nightwatch-website-tests\">https://github.com/nightwatchjs/nightwatch-website-tests</a>) 存储库，例如针对 nightwatchjs.org (<a href=\"https://nightwatchjs.org/\">https://nightwatchjs.org/</a>) 网站的测试。</p>\n<h2 id=\"Nightwatch-单元测试\"><a href=\"#Nightwatch-单元测试\" class=\"headerlink\" title=\"Nightwatch 单元测试\"></a>Nightwatch 单元测试</h2><p>Nightwatch 的测试是使用 Mocha 编写的。</p>\n<p>1.克隆项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/nightwatchjs/nightwatch.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nightwatch</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>2.运行测试</p>\n<p>要运行完整的测试套件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>要检查测试范围，请运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run mocha-coverage</span><br></pre></td></tr></table></figure>\n\n<p>然后在浏览器中打开生成的 coverage&#x2F;index.html 文件。</p>\n<h2 id=\"Nightwatch-使用示例\"><a href=\"#Nightwatch-使用示例\" class=\"headerlink\" title=\"Nightwatch 使用示例\"></a>Nightwatch 使用示例</h2><p>以下是我写的一个使用 NightwatchJS 对 Nightwatch 官网 <a href=\"https://nightwatchjs.org/\">https://nightwatchjs.org</a> 进行测试的一个测试示例（已经升级到 v1.3 版本）以展示在实际项目中使用 Nightwatchjs 如何组织目录结构，区别配置全局和本地环境。</p>\n<p>示例仓库的 GitHub 地址是 <a href=\"https://github.com/nightwatchjs-cn/nightwatch-e2e%EF%BC%8C%E6%AC%A2%E8%BF%8E\">https://github.com/nightwatchjs-cn/nightwatch-e2e，欢迎</a> Star 和 Fork。</p>","categories":[{"name":"Automation","path":"api/categories/Automation.json"}],"tags":[{"name":"Nightwatch","path":"api/tags/Nightwatch.json"},{"name":"Javascript","path":"api/tags/Javascript.json"}]}