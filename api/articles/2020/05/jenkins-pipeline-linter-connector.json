{"title":"如何确保在提交 Jenkins Pipeline 前没有语法错误","slug":"2020/05/jenkins-pipeline-linter-connector","date":"2020-05-23T06:38:59.000Z","updated":"2025-07-13T18:21:20.810Z","comments":true,"path":"api/articles/2020/05/jenkins-pipeline-linter-connector.json","excerpt":"我在做 Jenkins 声明式流水线开发时常会遇到的问题是：修改后的 Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。为了减少这种因为语法错误而需要频繁像代码库去提交的情况，如果能在提交之前进行基本的语法校验，来检查当前的 Pipeline 是否存在语法错误就好了。经过调查发现 Jenkins 本身提供了这样的语法检查 REST API，可以直接使用这个 API 来对 Pipeline 声明式进行语法校验，这个方式需要执行一长串的 curl 命令，看起来似乎很麻烦，如果能在 IDE 里直接运行就好了。VS Code 作为当前当前最流行 IDE 工具，果然找到了相关的插件。以下就介绍两种方法：针对 Jenkins 声明式流水线中的 Jenkinsfile 文件进行语法错误检查，这两种方式的原理都是通过调用 Jenkins REST API 来实现的。","covers":["/2020/05/jenkins-pipeline-linter-connector/settings.png","/2020/05/jenkins-pipeline-linter-connector/example1.gif"],"content":"<p>我在做 Jenkins 声明式流水线开发时常会遇到的问题是：修改后的 Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。</p>\n<p>为了减少这种因为语法错误而需要频繁像代码库去提交的情况，如果能在提交之前进行基本的语法校验，来检查当前的 Pipeline 是否存在语法错误就好了。</p>\n<p>经过调查发现 Jenkins 本身提供了这样的语法检查 REST API，可以直接使用这个 API 来对 Pipeline 声明式进行语法校验，这个方式需要执行一长串的 <code>curl</code> 命令，看起来似乎很麻烦，如果能在 IDE 里直接运行就好了。</p>\n<p>VS Code 作为当前当前最流行 IDE 工具，果然找到了相关的插件。</p>\n<p>以下就介绍两种方法：针对 Jenkins 声明式流水线中的 Jenkinsfile 文件进行语法错误检查，这两种方式的原理都是通过调用 Jenkins REST API 来实现的。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>注意：</p>\n<p>当前只有声明式流水线支持语法校验，脚本式流水线不支持。</p>\n<p>如果使用 Jenkins 回放功能或是使用 Jenkins Web 页面开发 Pipeline 不存在上述问题。</p>\n</blockquote>\n<h2 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h2><p>如果你的项目使用了 Jenkins Shared Libraries，为了方便使用 REST API，那么不妨在该仓库下面创建一个 linter.sh 文件，并将这个文件加到你的 .gitignore 里，这样你可以在这个文件里配置你的用户名和密码就不会意外的被提交到 Git 仓库中。</p>\n<p>以下是 linter.sh 脚本内容如下，供参考。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如何使用</span></span><br><span class=\"line\"><span class=\"comment\"># sh linter.sh your-jenkinsfile-path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为你的 Jenkins 用户名</span></span><br><span class=\"line\">username=admin</span><br><span class=\"line\"><span class=\"comment\"># 替换为你的 Jenkins 密码</span></span><br><span class=\"line\">password=admin</span><br><span class=\"line\"><span class=\"comment\"># 替换为你的 Jenkins URL</span></span><br><span class=\"line\">JENKINS_URL=http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\">PWD=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">JENKINS_FILE=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl --user <span class=\"variable\">$username</span>:<span class=\"variable\">$password</span> -X POST -F <span class=\"string\">&quot;jenkinsfile=&lt;<span class=\"variable\">$PWD</span>/<span class=\"variable\">$JENKINS_FILE</span>&quot;</span> <span class=\"variable\">$JENKINS_URL</span>/pipeline-model-converter/validate</span><br></pre></td></tr></table></figure>\n\n<p>让我们来测试一下效果 <code>sh linter.sh your-jenkinsfile-path</code></p>\n<p>实例 1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sh linter.sh Jenkinsfile</span><br><span class=\"line\">Errors encountered validating Jenkinsfile:</span><br><span class=\"line\">WorkflowScript: 161: Expected a stage @ line 161, column 9.</span><br><span class=\"line\">           stages &#123;</span><br><span class=\"line\">           ^</span><br></pre></td></tr></table></figure>\n\n<p>实例 2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh linter.sh Jenkinsfile</span><br><span class=\"line\">Errors encountered validating Jenkinsfile:</span><br><span class=\"line\">WorkflowScript: 60: Invalid condition <span class=\"string\">&quot;failed&quot;</span> - valid conditions are [always, changed, fixed, regression, aborted, success, unsuccessful, unstable, failure, notBuilt, cleanup] @ line 60, column 9.</span><br><span class=\"line\">           failed&#123;</span><br><span class=\"line\">           ^</span><br><span class=\"line\"><span class=\"comment\"># 将 failed 改为 failure，再次执行，成功。</span></span><br><span class=\"line\">sh linter.sh Jenkinsfile</span><br><span class=\"line\">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure>\n\n<p>当 Pipeline 写的很长的时候，总是很难发现有什么地方没有匹配或是缺了括号什么的。有了这个脚本就可以在提交之前检查是否有问题。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins-Pipeline-Linter-Connector-插件\"><a href=\"#Jenkins-Pipeline-Linter-Connector-插件\" class=\"headerlink\" title=\"Jenkins Pipeline Linter Connector 插件\"></a><code>Jenkins Pipeline Linter Connector</code> 插件</h2><p>第二种方式就是通用了，只要是声明式流水线，就可以使用这个插件去验证是否存在语法错误问题。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在 VSCode 插件里搜索 <code>Jenkins Pipeline Linter Connector</code></p>\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><p>打开 File -&gt; Preferences -&gt; Settings -&gt; Extensions， 找到 <code>Jenkins Pipeline Linter Connector</code>，参考如下配置。</p>\n<p><img src=\"/2020/05/jenkins-pipeline-linter-connector/settings.png\" alt=\"Jenkins pipeline linter 设置\"></p>\n<h3 id=\"运行插件\"><a href=\"#运行插件\" class=\"headerlink\" title=\"运行插件\"></a>运行插件</h3><p>右键 -&gt; Command Palette -&gt; Validate Jenkinsfile</p>\n<p>或</p>\n<p>执行快捷键 Shift + Alt + V</p>\n<h3 id=\"执行效果\"><a href=\"#执行效果\" class=\"headerlink\" title=\"执行效果\"></a>执行效果</h3><p><img src=\"/2020/05/jenkins-pipeline-linter-connector/example1.gif\" alt=\"Example 1\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果使用 VSCode 作为开发工具，推荐使用 <code>Jenkins Pipeline Linter Connector</code> 插件。</p>\n<p>如果是 Jenkins Shared Libraries 仓库不妨可以创建一个 shell 脚本，通过执行脚本来进行校验。</p>\n<p>当然，如果只是简单的使用 Jenkinfile 也可以在 Jenkins Web Pipeline 页面里编写，那里自带语法检查。</p>\n<p>如果您还有别的方式，欢迎留言告诉我。</p>\n","more":"<blockquote>\n<p>注意：</p>\n<p>当前只有声明式流水线支持语法校验，脚本式流水线不支持。</p>\n<p>如果使用 Jenkins 回放功能或是使用 Jenkins Web 页面开发 Pipeline 不存在上述问题。</p>\n</blockquote>\n<h2 id=\"REST-API\"><a href=\"#REST-API\" class=\"headerlink\" title=\"REST API\"></a>REST API</h2><p>如果你的项目使用了 Jenkins Shared Libraries，为了方便使用 REST API，那么不妨在该仓库下面创建一个 linter.sh 文件，并将这个文件加到你的 .gitignore 里，这样你可以在这个文件里配置你的用户名和密码就不会意外的被提交到 Git 仓库中。</p>\n<p>以下是 linter.sh 脚本内容如下，供参考。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 如何使用</span></span><br><span class=\"line\"><span class=\"comment\"># sh linter.sh your-jenkinsfile-path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 替换为你的 Jenkins 用户名</span></span><br><span class=\"line\">username=admin</span><br><span class=\"line\"><span class=\"comment\"># 替换为你的 Jenkins 密码</span></span><br><span class=\"line\">password=admin</span><br><span class=\"line\"><span class=\"comment\"># 替换为你的 Jenkins URL</span></span><br><span class=\"line\">JENKINS_URL=http://localhost:8080/</span><br><span class=\"line\"></span><br><span class=\"line\">PWD=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\">JENKINS_FILE=<span class=\"variable\">$1</span></span><br><span class=\"line\"></span><br><span class=\"line\">curl --user <span class=\"variable\">$username</span>:<span class=\"variable\">$password</span> -X POST -F <span class=\"string\">&quot;jenkinsfile=&lt;<span class=\"variable\">$PWD</span>/<span class=\"variable\">$JENKINS_FILE</span>&quot;</span> <span class=\"variable\">$JENKINS_URL</span>/pipeline-model-converter/validate</span><br></pre></td></tr></table></figure>\n\n<p>让我们来测试一下效果 <code>sh linter.sh your-jenkinsfile-path</code></p>\n<p>实例 1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sh linter.sh Jenkinsfile</span><br><span class=\"line\">Errors encountered validating Jenkinsfile:</span><br><span class=\"line\">WorkflowScript: 161: Expected a stage @ line 161, column 9.</span><br><span class=\"line\">           stages &#123;</span><br><span class=\"line\">           ^</span><br></pre></td></tr></table></figure>\n\n<p>实例 2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh linter.sh Jenkinsfile</span><br><span class=\"line\">Errors encountered validating Jenkinsfile:</span><br><span class=\"line\">WorkflowScript: 60: Invalid condition <span class=\"string\">&quot;failed&quot;</span> - valid conditions are [always, changed, fixed, regression, aborted, success, unsuccessful, unstable, failure, notBuilt, cleanup] @ line 60, column 9.</span><br><span class=\"line\">           failed&#123;</span><br><span class=\"line\">           ^</span><br><span class=\"line\"><span class=\"comment\"># 将 failed 改为 failure，再次执行，成功。</span></span><br><span class=\"line\">sh linter.sh Jenkinsfile</span><br><span class=\"line\">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure>\n\n<p>当 Pipeline 写的很长的时候，总是很难发现有什么地方没有匹配或是缺了括号什么的。有了这个脚本就可以在提交之前检查是否有问题。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Jenkins-Pipeline-Linter-Connector-插件\"><a href=\"#Jenkins-Pipeline-Linter-Connector-插件\" class=\"headerlink\" title=\"Jenkins Pipeline Linter Connector 插件\"></a><code>Jenkins Pipeline Linter Connector</code> 插件</h2><p>第二种方式就是通用了，只要是声明式流水线，就可以使用这个插件去验证是否存在语法错误问题。</p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>在 VSCode 插件里搜索 <code>Jenkins Pipeline Linter Connector</code></p>\n<h3 id=\"配置插件\"><a href=\"#配置插件\" class=\"headerlink\" title=\"配置插件\"></a>配置插件</h3><p>打开 File -&gt; Preferences -&gt; Settings -&gt; Extensions， 找到 <code>Jenkins Pipeline Linter Connector</code>，参考如下配置。</p>\n<p><img src=\"/2020/05/jenkins-pipeline-linter-connector/settings.png\" alt=\"Jenkins pipeline linter 设置\"></p>\n<h3 id=\"运行插件\"><a href=\"#运行插件\" class=\"headerlink\" title=\"运行插件\"></a>运行插件</h3><p>右键 -&gt; Command Palette -&gt; Validate Jenkinsfile</p>\n<p>或</p>\n<p>执行快捷键 Shift + Alt + V</p>\n<h3 id=\"执行效果\"><a href=\"#执行效果\" class=\"headerlink\" title=\"执行效果\"></a>执行效果</h3><p><img src=\"/2020/05/jenkins-pipeline-linter-connector/example1.gif\" alt=\"Example 1\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>如果使用 VSCode 作为开发工具，推荐使用 <code>Jenkins Pipeline Linter Connector</code> 插件。</p>\n<p>如果是 Jenkins Shared Libraries 仓库不妨可以创建一个 shell 脚本，通过执行脚本来进行校验。</p>\n<p>当然，如果只是简单的使用 Jenkinfile 也可以在 Jenkins Web Pipeline 页面里编写，那里自带语法检查。</p>\n<p>如果您还有别的方式，欢迎留言告诉我。</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}