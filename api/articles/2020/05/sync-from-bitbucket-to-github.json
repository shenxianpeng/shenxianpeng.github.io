{"title":"Synchronize from Bitbucket to GitHub via Jenkins","slug":"2020/05/sync-from-bitbucket-to-github","date":"2020-05-05T08:54:09.000Z","updated":"2025-07-13T18:21:20.811Z","comments":true,"path":"api/articles/2020/05/sync-from-bitbucket-to-github.json","excerpt":"背景最近我们团队需要将一些示例和例子从内部的 Bitbucket 同步到 GitHub。我了解 GitHub 可以创建公共的或是私人的仓库，但我们需要保持以下两点只分享我们想给客户分享的内容不改变当前的工作流程，即继续使用 Bitbucket","covers":["/2020/05/sync-from-bitbucket-to-github/sync-diagrom.png","/2020/05/sync-from-bitbucket-to-github/branch-strategy.png","/2020/05/sync-from-bitbucket-to-github/branch-strategy.png"],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近我们团队需要将一些示例和例子从内部的 Bitbucket 同步到 GitHub。我了解 GitHub 可以创建公共的或是私人的仓库，但我们需要保持以下两点</p>\n<ul>\n<li>只分享我们想给客户分享的内容</li>\n<li>不改变当前的工作流程，即继续使用 Bitbucket</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>因此我们需要在 GitHub 上创建相应的仓库，然后将内部 Bitbucket 仓库中对应的 master 分支定期的通过 CI job 同步到 BitHub 上去。</p>\n<p><img src=\"/2020/05/sync-from-bitbucket-to-github/sync-diagrom.png\" alt=\"同步\"></p>\n<h2 id=\"分支策略\"><a href=\"#分支策略\" class=\"headerlink\" title=\"分支策略\"></a>分支策略</h2><p>首先，需要对 Bitbucket 进行分支权限设置</p>\n<ul>\n<li>master 分支只允许通过 Pull Request 来进行修改</li>\n<li>Pull Request 默认的 reviewer 至少需要一人，并且只有同意状态才允许合并</li>\n</ul>\n<p>其次，为了方便产品、售后等人员使用，简化分支策略如下</p>\n<ol>\n<li>从 master 分支上创建 feature 或是 bugfix 分支（取决于你的修改目的）</li>\n<li>然后将你的更改提交到自己的 feature 或 bugfix 分支</li>\n<li>在你自己的分支通过测试后，提交 Pull Request 到 master 分支</li>\n<li>当 reviewer 同意状态，才能进行合并进入到 master 分支</li>\n</ol>\n<p><img src=\"/2020/05/sync-from-bitbucket-to-github/branch-strategy.png\" alt=\"分支策略\"></p>\n<h2 id=\"Jenkins-Pipeline\"><a href=\"#Jenkins-Pipeline\" class=\"headerlink\" title=\"Jenkins Pipeline\"></a>Jenkins Pipeline</h2><p>基于这样的工作不是特别的频繁，也为了方便维护 Jenkins Pipeline 的简单和易于维护，我没有在需要同步的每个仓库里添加 <code>Jenkinsfile</code> 或在 Bitbucket 里添加 <code>webhooks</code>。有以下几点好处：</p>\n<ul>\n<li>只创建一个 Jenkins Job，用一个 <code>Jenkinsfile</code> 满足所有仓库的同步</li>\n<li>减少了冗余的 <code>Jenkinsfile</code> 的代码，修改时只需更维护一个文件</li>\n<li>不需要在每个仓库里添加一个 <code>Jenkinsfile</code>，更纯粹的展示示例，避免给非 IT 人员造成困扰</li>\n</ul>\n<p>不足之处，不能通过 SCM 来触发构建，如果想通过 <code>webhooks</code> 来触发，有的公司需要申请权限来添加 <code>webhooks</code> 比较麻烦；另外可能无法区分从哪个仓库发来的请求，实现指定仓库的同步。</p>\n<p>因此如果不是特别频繁的需要同步，提供手动或是定时同步即可。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个 Jenkinsfile 是用来将 Bitbucket 仓库的 master 分支同步到 GitHub 仓库的 master 分支</span></span><br><span class=\"line\"><span class=\"comment\">// This Jenkinsfile is used to synchronize Bitbucket repositories master branches to GitHub repositories master branches.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Library</span>(<span class=\"string\">&#x27;jenkins-shared-library@develop&#x27;</span>) _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> email = <span class=\"keyword\">new</span> org.cicd.email()</span><br><span class=\"line\"></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    label <span class=\"string\">&quot;main-slave&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  parameters &#123;</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">false</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-win&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-win master branch with external git-repo-win on GitHub&#x27;</span>)</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">true</span>,  <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-lin&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-lin master branch with external git-repo-lin on GitHub&#x27;</span>)</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">false</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-aix&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-aix master branch with external git-repo-aix on GitHub&#x27;</span>)</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">false</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-sol&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-sol master branch with external git-repo-sol on GitHub&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  options &#123;</span><br><span class=\"line\">    timestamps()</span><br><span class=\"line\">    buildDiscarder(logRotator(<span class=\"attr\">numToKeepStr:</span><span class=\"string\">&#x27;50&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Synchronous master branch&quot;</span>)&#123;</span><br><span class=\"line\">      steps&#123;</span><br><span class=\"line\">        script &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            params.each &#123; key, value -&gt;</span><br><span class=\"line\">              <span class=\"keyword\">def</span> repoName = <span class=\"string\">&quot;$key&quot;</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> ( value == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&quot;Start synchronizing $key Bitbucket repository.&quot;</span></span><br><span class=\"line\">                sh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                rm -rf $&#123;repoName&#125;</span></span><br><span class=\"line\"><span class=\"string\">                return_status=0</span></span><br><span class=\"line\"><span class=\"string\">                git clone -b master ssh://git@git.your-company.com:7999/~xshen/$&#123;repoName&#125;.git</span></span><br><span class=\"line\"><span class=\"string\">                cd $&#123;repoName&#125;</span></span><br><span class=\"line\"><span class=\"string\">                git config user.name &quot;Sync Bot&quot;</span></span><br><span class=\"line\"><span class=\"string\">                git config user.email &quot;bot@your-company.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">                git remote add github git@github.com:shenxianpeng/$&#123;repoName&#125;.git</span></span><br><span class=\"line\"><span class=\"string\">                git push -u github master</span></span><br><span class=\"line\"><span class=\"string\">                return_status=&quot;\\$?&quot;</span></span><br><span class=\"line\"><span class=\"string\">                if [ \\$return_status -eq 0 ] ; then</span></span><br><span class=\"line\"><span class=\"string\">                  echo &quot;Synchronize $&#123;repoName&#125; from Bitbucket to GitHub success.&quot;</span></span><br><span class=\"line\"><span class=\"string\">                  cd ..</span></span><br><span class=\"line\"><span class=\"string\">                  rm -rf $&#123;repoName&#125;</span></span><br><span class=\"line\"><span class=\"string\">                  exit 0</span></span><br><span class=\"line\"><span class=\"string\">                else</span></span><br><span class=\"line\"><span class=\"string\">                  echo &quot;Synchronize $&#123;repoName&#125; from Bitbucket to GitHub failed.&quot;</span></span><br><span class=\"line\"><span class=\"string\">                  exit 1</span></span><br><span class=\"line\"><span class=\"string\">                fi&quot;&quot;&quot;</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&quot;$&#123;repoName&#125; parameter value is $value, skip it.&quot;</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cleanWs()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            echo <span class=\"string\">&quot;Some error occurs during synchronizing $key process.&quot;</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            email.Send(currentBuild.currentResult, env.CHANGE_AUTHOR_EMAIL)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上的 <code>Jenkinsfile</code> 的主要关键点是这句 <code>params.each &#123; key, value -&gt;  &#125;</code>，可以通过对构建时选择参数的进行判断，如果构建时参数已勾选，则会执行同步脚本；否则跳过同步脚本，循环到下一个参数进行判断，这样就实现了可以对指定仓库进行同步。</p>\n<hr>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently our team need to share code from internal Bitbucket to external GitHub. I know GitHub can create private and public repository, but we have these points want to keep.</p>\n<ul>\n<li>only share the code what we want to share</li>\n<li>not change current work process, continue use Bitbucket.</li>\n</ul>\n<p>So we have created corresponding repositories in the internal Bitbucket, and the master branches of these repositories will periodically synchronize with the master branches of corresponding repositories on GitHub via Jenkins job.</p>\n<h2 id=\"Branch-Strategy\"><a href=\"#Branch-Strategy\" class=\"headerlink\" title=\"Branch Strategy\"></a>Branch Strategy</h2><p>Then the work process will be like</p>\n<ol>\n<li><p>Create a feature or bugfix branch (it depends on the purpose of your modification).</p>\n</li>\n<li><p>Commit changes to your feature&#x2F;bugfix branch.</p>\n</li>\n<li><p>Please pass your feature&#x2F;bugfix branch test first then create a Pull Request from your branch to master branch, at least one reviewer is required by default.</p>\n</li>\n<li><p>After the reviewer approved, you or reviewer could merge the Pull Request, then the changes will be added to the master branch.</p>\n</li>\n</ol>\n<p>Timing trigger CI job will sync code from internal repositories master branch to GitHub master branch by default. also support manual trigger.</p>\n<p><img src=\"/2020/05/sync-from-bitbucket-to-github/branch-strategy.png\" alt=\"Branch Strategy\"></p>\n<h2 id=\"Jenkins-Job\"><a href=\"#Jenkins-Job\" class=\"headerlink\" title=\"Jenkins Job\"></a>Jenkins Job</h2><p>Base on this work is not very frequency, so I want make the Jenkins job simple and easy to maintain, so I don’t create every <code>Jenkinsfile</code> for every Bitbucket repositories.</p>\n<p>Pros</p>\n<ul>\n<li>Only one <code>Jenkinsfile</code> for all Bitbucket repositories.</li>\n<li>Less duplicate code, less need to change when maintenance.</li>\n<li>Don’t need to add <code>Jenkinsfile</code> into very Bitbucket repositories.</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Can not support SCM trigger, in my view this need add <code>Jenkinsfile</code> into repository.</li>\n</ul>\n<p>The main part for this <code>Jenkinsfile</code> is below, use this function <code>params.each &#123; key, value -&gt; &#125;</code> can by passing in parameters when start Jenkins build.</p>\n","more":"<p>因此我们需要在 GitHub 上创建相应的仓库，然后将内部 Bitbucket 仓库中对应的 master 分支定期的通过 CI job 同步到 BitHub 上去。</p>\n<p><img src=\"/2020/05/sync-from-bitbucket-to-github/sync-diagrom.png\" alt=\"同步\"></p>\n<h2 id=\"分支策略\"><a href=\"#分支策略\" class=\"headerlink\" title=\"分支策略\"></a>分支策略</h2><p>首先，需要对 Bitbucket 进行分支权限设置</p>\n<ul>\n<li>master 分支只允许通过 Pull Request 来进行修改</li>\n<li>Pull Request 默认的 reviewer 至少需要一人，并且只有同意状态才允许合并</li>\n</ul>\n<p>其次，为了方便产品、售后等人员使用，简化分支策略如下</p>\n<ol>\n<li>从 master 分支上创建 feature 或是 bugfix 分支（取决于你的修改目的）</li>\n<li>然后将你的更改提交到自己的 feature 或 bugfix 分支</li>\n<li>在你自己的分支通过测试后，提交 Pull Request 到 master 分支</li>\n<li>当 reviewer 同意状态，才能进行合并进入到 master 分支</li>\n</ol>\n<p><img src=\"/2020/05/sync-from-bitbucket-to-github/branch-strategy.png\" alt=\"分支策略\"></p>\n<h2 id=\"Jenkins-Pipeline\"><a href=\"#Jenkins-Pipeline\" class=\"headerlink\" title=\"Jenkins Pipeline\"></a>Jenkins Pipeline</h2><p>基于这样的工作不是特别的频繁，也为了方便维护 Jenkins Pipeline 的简单和易于维护，我没有在需要同步的每个仓库里添加 <code>Jenkinsfile</code> 或在 Bitbucket 里添加 <code>webhooks</code>。有以下几点好处：</p>\n<ul>\n<li>只创建一个 Jenkins Job，用一个 <code>Jenkinsfile</code> 满足所有仓库的同步</li>\n<li>减少了冗余的 <code>Jenkinsfile</code> 的代码，修改时只需更维护一个文件</li>\n<li>不需要在每个仓库里添加一个 <code>Jenkinsfile</code>，更纯粹的展示示例，避免给非 IT 人员造成困扰</li>\n</ul>\n<p>不足之处，不能通过 SCM 来触发构建，如果想通过 <code>webhooks</code> 来触发，有的公司需要申请权限来添加 <code>webhooks</code> 比较麻烦；另外可能无法区分从哪个仓库发来的请求，实现指定仓库的同步。</p>\n<p>因此如果不是特别频繁的需要同步，提供手动或是定时同步即可。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个 Jenkinsfile 是用来将 Bitbucket 仓库的 master 分支同步到 GitHub 仓库的 master 分支</span></span><br><span class=\"line\"><span class=\"comment\">// This Jenkinsfile is used to synchronize Bitbucket repositories master branches to GitHub repositories master branches.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Library</span>(<span class=\"string\">&#x27;jenkins-shared-library@develop&#x27;</span>) _</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> email = <span class=\"keyword\">new</span> org.cicd.email()</span><br><span class=\"line\"></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    label <span class=\"string\">&quot;main-slave&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  parameters &#123;</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">false</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-win&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-win master branch with external git-repo-win on GitHub&#x27;</span>)</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">true</span>,  <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-lin&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-lin master branch with external git-repo-lin on GitHub&#x27;</span>)</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">false</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-aix&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-aix master branch with external git-repo-aix on GitHub&#x27;</span>)</span><br><span class=\"line\">    booleanParam(<span class=\"attr\">defaultValue:</span> <span class=\"literal\">false</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;git-repo-sol&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Sync internal git-repo-sol master branch with external git-repo-sol on GitHub&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  options &#123;</span><br><span class=\"line\">    timestamps()</span><br><span class=\"line\">    buildDiscarder(logRotator(<span class=\"attr\">numToKeepStr:</span><span class=\"string\">&#x27;50&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Synchronous master branch&quot;</span>)&#123;</span><br><span class=\"line\">      steps&#123;</span><br><span class=\"line\">        script &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            params.each &#123; key, value -&gt;</span><br><span class=\"line\">              <span class=\"keyword\">def</span> repoName = <span class=\"string\">&quot;$key&quot;</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> ( value == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&quot;Start synchronizing $key Bitbucket repository.&quot;</span></span><br><span class=\"line\">                sh <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">                rm -rf $&#123;repoName&#125;</span></span><br><span class=\"line\"><span class=\"string\">                return_status=0</span></span><br><span class=\"line\"><span class=\"string\">                git clone -b master ssh://git@git.your-company.com:7999/~xshen/$&#123;repoName&#125;.git</span></span><br><span class=\"line\"><span class=\"string\">                cd $&#123;repoName&#125;</span></span><br><span class=\"line\"><span class=\"string\">                git config user.name &quot;Sync Bot&quot;</span></span><br><span class=\"line\"><span class=\"string\">                git config user.email &quot;bot@your-company.com&quot;</span></span><br><span class=\"line\"><span class=\"string\">                git remote add github git@github.com:shenxianpeng/$&#123;repoName&#125;.git</span></span><br><span class=\"line\"><span class=\"string\">                git push -u github master</span></span><br><span class=\"line\"><span class=\"string\">                return_status=&quot;\\$?&quot;</span></span><br><span class=\"line\"><span class=\"string\">                if [ \\$return_status -eq 0 ] ; then</span></span><br><span class=\"line\"><span class=\"string\">                  echo &quot;Synchronize $&#123;repoName&#125; from Bitbucket to GitHub success.&quot;</span></span><br><span class=\"line\"><span class=\"string\">                  cd ..</span></span><br><span class=\"line\"><span class=\"string\">                  rm -rf $&#123;repoName&#125;</span></span><br><span class=\"line\"><span class=\"string\">                  exit 0</span></span><br><span class=\"line\"><span class=\"string\">                else</span></span><br><span class=\"line\"><span class=\"string\">                  echo &quot;Synchronize $&#123;repoName&#125; from Bitbucket to GitHub failed.&quot;</span></span><br><span class=\"line\"><span class=\"string\">                  exit 1</span></span><br><span class=\"line\"><span class=\"string\">                fi&quot;&quot;&quot;</span></span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                echo <span class=\"string\">&quot;$&#123;repoName&#125; parameter value is $value, skip it.&quot;</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cleanWs()</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            echo <span class=\"string\">&quot;Some error occurs during synchronizing $key process.&quot;</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            email.Send(currentBuild.currentResult, env.CHANGE_AUTHOR_EMAIL)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上的 <code>Jenkinsfile</code> 的主要关键点是这句 <code>params.each &#123; key, value -&gt;  &#125;</code>，可以通过对构建时选择参数的进行判断，如果构建时参数已勾选，则会执行同步脚本；否则跳过同步脚本，循环到下一个参数进行判断，这样就实现了可以对指定仓库进行同步。</p>\n<hr>\n<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently our team need to share code from internal Bitbucket to external GitHub. I know GitHub can create private and public repository, but we have these points want to keep.</p>\n<ul>\n<li>only share the code what we want to share</li>\n<li>not change current work process, continue use Bitbucket.</li>\n</ul>\n<p>So we have created corresponding repositories in the internal Bitbucket, and the master branches of these repositories will periodically synchronize with the master branches of corresponding repositories on GitHub via Jenkins job.</p>\n<h2 id=\"Branch-Strategy\"><a href=\"#Branch-Strategy\" class=\"headerlink\" title=\"Branch Strategy\"></a>Branch Strategy</h2><p>Then the work process will be like</p>\n<ol>\n<li><p>Create a feature or bugfix branch (it depends on the purpose of your modification).</p>\n</li>\n<li><p>Commit changes to your feature&#x2F;bugfix branch.</p>\n</li>\n<li><p>Please pass your feature&#x2F;bugfix branch test first then create a Pull Request from your branch to master branch, at least one reviewer is required by default.</p>\n</li>\n<li><p>After the reviewer approved, you or reviewer could merge the Pull Request, then the changes will be added to the master branch.</p>\n</li>\n</ol>\n<p>Timing trigger CI job will sync code from internal repositories master branch to GitHub master branch by default. also support manual trigger.</p>\n<p><img src=\"/2020/05/sync-from-bitbucket-to-github/branch-strategy.png\" alt=\"Branch Strategy\"></p>\n<h2 id=\"Jenkins-Job\"><a href=\"#Jenkins-Job\" class=\"headerlink\" title=\"Jenkins Job\"></a>Jenkins Job</h2><p>Base on this work is not very frequency, so I want make the Jenkins job simple and easy to maintain, so I don’t create every <code>Jenkinsfile</code> for every Bitbucket repositories.</p>\n<p>Pros</p>\n<ul>\n<li>Only one <code>Jenkinsfile</code> for all Bitbucket repositories.</li>\n<li>Less duplicate code, less need to change when maintenance.</li>\n<li>Don’t need to add <code>Jenkinsfile</code> into very Bitbucket repositories.</li>\n</ul>\n<p>Cons</p>\n<ul>\n<li>Can not support SCM trigger, in my view this need add <code>Jenkinsfile</code> into repository.</li>\n</ul>\n<p>The main part for this <code>Jenkinsfile</code> is below, use this function <code>params.each &#123; key, value -&gt; &#125;</code> can by passing in parameters when start Jenkins build.</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"Bitbucket","path":"api/tags/Bitbucket.json"},{"name":"GitHub","path":"api/tags/GitHub.json"}]}