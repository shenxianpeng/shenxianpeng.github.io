{"title":"企业版 Artifactory 的实践分享","slug":"2020/10/what-is-artifactory","date":"2020-10-04T12:43:46.000Z","updated":"2020-10-24T12:02:56.867Z","comments":true,"path":"api/articles/2020/10/what-is-artifactory.json","excerpt":"本篇介绍使用企业版 Artifactory 有哪些优势。以及如何使用、工作流（包括，仓库命名，目录结构，Jenkins关键）、仓库权限、保留策略的实践分享。什么是Artifactory一句话概括：Artifactory 是一个存放制品（Artifacts）的工具。目前，Artifactory 是一个非常流行，非常强大的 DevOps 工具链中非常重要的工具。Artifactory有哪些优势可能你的团队已经有了存放构建的工具了，比如 FTP，但为什么还了解 Artifactory。这就要说说它到底有有哪些优势。以下优势都是针对 JFrog Aritifacvtory 企业版来介绍的。开源版，即 OSS 版本不具备以下丰富的功能。它是一个通用管理仓库JFrog Artifactory 完全支持所有主要包格式的存储库管理器。它不但可以管理二进制文件，也可以对市面上几乎所有语言的包的依赖进行管理，如下图所示。 [Figure] 因此，使用 Artifactory 能够将所有的二进制文件和包存储在一个地方。","covers":["/2020/10/what-is-artifactory/support-package-formats.png","/2020/10/what-is-artifactory/ci-tools.png","/2020/10/what-is-artifactory/search-by-name.png","/2020/10/what-is-artifactory/search-by-property.png","/2020/10/what-is-artifactory/search-by-checksum.png","/2020/10/what-is-artifactory/artifactory-home.png","/2020/10/what-is-artifactory/artifactory-artifacts.png"],"content":"<p>本篇介绍使用企业版 Artifactory 有哪些优势。以及如何使用、工作流（包括，仓库命名，目录结构，Jenkins关键）、仓库权限、保留策略的实践分享。</p>\n<h2 id=\"什么是Artifactory\"><a href=\"#什么是Artifactory\" class=\"headerlink\" title=\"什么是Artifactory\"></a>什么是Artifactory</h2><p>一句话概括：Artifactory 是一个存放制品（Artifacts）的工具。目前，Artifactory 是一个非常流行，非常强大的 DevOps 工具链中非常重要的工具。</p>\n<h2 id=\"Artifactory有哪些优势\"><a href=\"#Artifactory有哪些优势\" class=\"headerlink\" title=\"Artifactory有哪些优势\"></a>Artifactory有哪些优势</h2><p>可能你的团队已经有了存放构建的工具了，比如 FTP，但为什么还了解 Artifactory。这就要说说它到底有有哪些优势。</p>\n<blockquote>\n<p>以下优势都是针对 JFrog Aritifacvtory 企业版来介绍的。开源版，即 OSS 版本不具备以下丰富的功能。</p>\n</blockquote>\n<h3 id=\"它是一个通用管理仓库\"><a href=\"#它是一个通用管理仓库\" class=\"headerlink\" title=\"它是一个通用管理仓库\"></a>它是一个通用管理仓库</h3><p>JFrog Artifactory 完全支持所有主要包格式的存储库管理器。它不但可以管理二进制文件，也可以对市面上几乎所有语言的包的依赖进行管理，如下图所示。</p>\n<p><img src=\"/2020/10/what-is-artifactory/support-package-formats.png\" alt=\"主要的包格式\"></p>\n<p>因此，使用 Artifactory 能够将所有的二进制文件和包存储在一个地方。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"很好的与-CI-工具进行集成\"><a href=\"#很好的与-CI-工具进行集成\" class=\"headerlink\" title=\"很好的与 CI 工具进行集成\"></a>很好的与 CI 工具进行集成</h3><p>它支持所有主流 CI 工具（如下图所示），并在部署期间捕获详尽的构建环境信息，以实现可完全复制的构建。</p>\n<p><img src=\"/2020/10/what-is-artifactory/ci-tools.png\" alt></p>\n<p>另外通过提供的丰富的 REST API，因此GUI页面上的任何操作都可以通过代码以编程方式完成，方便做持续集成。</p>\n<h3 id=\"提供强大的搜索功能\"><a href=\"#提供强大的搜索功能\" class=\"headerlink\" title=\"提供强大的搜索功能\"></a>提供强大的搜索功能</h3><p>如果你的构建是存储在 FTP 上，如果你想从大量的制品中找到你要找的那一个，如果你还不知道它的名字，那么真的很难快速找到。</p>\n<p>Artifactory 提供了强大的搜索功能，你可以通过带有正则表达的名字进行搜索，还可以通过文件的 checksum，以及通过属性（Properties）等进行快速搜索。</p>\n<h4 id=\"通过名字搜索\"><a href=\"#通过名字搜索\" class=\"headerlink\" title=\"通过名字搜索\"></a>通过名字搜索</h4><p>你想找某一个提交点的构建制品，假设那个提交点的 commit hash 是 <code>a422912</code>，那么你就可以直接输入 <code>*a422912*</code> 快速的从众多的制品中返回对应的构建，例如 Demo_Linux_bin_a422912.zip</p>\n<p><img src=\"/2020/10/what-is-artifactory/search-by-name.png\" alt></p>\n<h4 id=\"通过属性搜索\"><a href=\"#通过属性搜索\" class=\"headerlink\" title=\"通过属性搜索\"></a>通过属性搜索</h4><p>比如要找属性 release.status 为 released 的所有构建那么就可以这样搜索。</p>\n<p><img src=\"/2020/10/what-is-artifactory/search-by-property.png\" alt></p>\n<h4 id=\"通过-checksum-搜索\"><a href=\"#通过-checksum-搜索\" class=\"headerlink\" title=\"通过 checksum 搜索\"></a>通过 checksum 搜索</h4><p>如果只知道一个文件的 <code>checksum</code>，也可以进行搜索。例如通过 <code>sha1sum</code> 计算出文件的 <code>checksum</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sha1sum test.zip</span><br><span class=\"line\">ad62c72fb097fc4aa7723e1fc72b08a6ebcacfd1 *test.zip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/what-is-artifactory/search-by-checksum.png\" alt></p>\n<h3 id=\"管理制品的生命周期\"><a href=\"#管理制品的生命周期\" class=\"headerlink\" title=\"管理制品的生命周期\"></a>管理制品的生命周期</h3><p>通过定义不同成熟度存储库，然后使用 Artifactory Promote 功能可以将制品移动到不同的成熟度存储库，以及通过元数据属性，可以很好的管理和维护制品的生命周期。</p>\n<p>除了这些优点之外，Artifactory 还有更多的特点，但我不会在这次会议上一一介绍。</p>\n<blockquote>\n<p>更多可以浏览 JFrog Artifactory 的官方介绍 <a href=\"https://jfrog.com/artifactory/features/\" target=\"_blank\" rel=\"noopener\">https://jfrog.com/artifactory/features/</a></p>\n</blockquote>\n<p>接下来我通过一个 Demo 来介绍 Artifactory 应该怎么使用，以及其中有哪些最佳实践与你分享。</p>\n<h2 id=\"Artifactory首页介绍\"><a href=\"#Artifactory首页介绍\" class=\"headerlink\" title=\"Artifactory首页介绍\"></a>Artifactory首页介绍</h2><p><img src=\"/2020/10/what-is-artifactory/artifactory-home.png\" alt=\"Artifactory Home\"></p>\n<h3 id=\"页面上部\"><a href=\"#页面上部\" class=\"headerlink\" title=\"页面上部\"></a>页面上部</h3><p>你可以看到 Artifactory 已经服务了超过5000件的制品。然后可以看到Artifactory 企业版的当前版本号，以及最新版本。</p>\n<h3 id=\"页面中部，从左到右\"><a href=\"#页面中部，从左到右\" class=\"headerlink\" title=\"页面中部，从左到右\"></a>页面中部，从左到右</h3><ol>\n<li><p>你可以看到搜索功能，它使搜索制品变得很容易。然后是一些有用的信息，包括用户手册、视频、REST API 文档等。</p>\n</li>\n<li><p>Set Me Up 在中间，使用它可以选择和筛选你想要关注的存储库，单击特定的存储库将弹出关于如何使用它的详细说明。</p>\n</li>\n<li><p>最右边是显示的是最近部署的构建和最多下载量的制品（最多被下载时95次）</p>\n</li>\n</ol>\n<h3 id=\"页面底部\"><a href=\"#页面底部\" class=\"headerlink\" title=\"页面底部\"></a>页面底部</h3><p>在底部是一些与 Artifactory 集成的相关工具和技术用户文档。</p>\n<h2 id=\"实践和工作流\"><a href=\"#实践和工作流\" class=\"headerlink\" title=\"实践和工作流\"></a>实践和工作流</h2><h3 id=\"设置关注的仓库\"><a href=\"#设置关注的仓库\" class=\"headerlink\" title=\"设置关注的仓库\"></a>设置关注的仓库</h3><p>在首页的 Set Me Up 里你也看到了我们有很多仓库（Repository），然后对你想关注的仓库。 添加喜欢，然后点击喜欢按钮就可以只列出你关注的 Artifact Repository。</p>\n<p><img src=\"/2020/10/what-is-artifactory/artifactory-artifacts.png\" alt=\"Artifacts\"></p>\n<h3 id=\"Artifactory-仓库命名方法\"><a href=\"#Artifactory-仓库命名方法\" class=\"headerlink\" title=\"Artifactory 仓库命名方法\"></a>Artifactory 仓库命名方法</h3><p>在这个列表仓库中，你可以从这些仓库的名称中看到遵循了某些命名约定，这是 <a href=\"https://jfrog.com/whitepaper/best-practices-structuring-naming-artifactory-repositories/\" target=\"_blank\" rel=\"noopener\">JFrog Artifactory 推荐的官方命名</a>方法，它是由四部分组成：</p>\n<p><code>&lt;team&gt;-&lt;technology&gt;-&lt;maturity&gt;-&lt;locator&gt;</code></p>\n<ul>\n<li>这里 team 我做了脱敏，我们叫它 team1。</li>\n<li>然后是技术，这里有很多选项，比如 generic, Docker, Maven, NPM 等等，这里我们的产品是 C/C++ 编译出来的二进制文件，它属于 generic 类别</li>\n<li>接下来是成熟度（maturity），一个仓库通常由四个级别的成熟度，从低到搞这里分别是 dev, int, stage 和 release。</li>\n<li>最后是表明制品的位置在哪里。比如一个跨国公司，它为了保证上传/下载速度等因素，会在全球部署多个 Artifactory 站点。图上的 den 就是当前 Artifactory 所在位置的缩写。</li>\n</ul>\n<h3 id=\"从构建的生成到发布，了解它的工作流\"><a href=\"#从构建的生成到发布，了解它的工作流\" class=\"headerlink\" title=\"从构建的生成到发布，了解它的工作流\"></a>从构建的生成到发布，了解它的工作流</h3><p>dev 意味着 development（开发），该仓库对所有产品成员都具有读写权限，他们可以上传一些库或其他一些二进制文件。</p>\n<p>int 表示 integration（集成）的意思，比如从 Jenkins 里成功构建的制品将首先放在这个存储库下。如果构建失败，它将不会被上传到 Artifactory。</p>\n<h4 id=\"规范分支命名有利于Artifactory的目录清晰\"><a href=\"#规范分支命名有利于Artifactory的目录清晰\" class=\"headerlink\" title=\"规范分支命名有利于Artifactory的目录清晰\"></a>规范分支命名有利于Artifactory的目录清晰</h4><p>例如，一个产品叫 ART，它的 Git 仓库也叫 ART，它下面有这样一个分支 <code>feature/ART-1234</code></p>\n<p>Jenkins Pipeline 里的环境变量设置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment &#123;</span><br><span class=\"line\">  INT_REPO_PATH &#x3D; &quot;team1-generic-int-den&#x2F;ART&#x2F;$&#123;BRANCH_NAME&#125;&#x2F;$&#123;BUILD_NUMBER&#125;&#x2F;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个分支通过 Jenkins 第1构建成功后，它首先会被 <code>team1-generic-int-den</code> 仓库下的 <code>ART/feature/ART-1234/1/</code> 的目录下面，如果进行第2次构建，并成功，那么它的制品目录会是：</p>\n<p><code>team1-generic-int-den/ART/feature/ART-1234/2/</code> 依次类推。</p>\n<p>为了更好的管理仓库下面的目录，这里我强力建议团队事先做好分支的命名规范，这样同一种类型的分支的所有构建都会出现在一个目录下面。</p>\n<p>关于命名规范可参见这篇文章<a href=\"https://shenxianpeng.github.io/2020/09/commit-messages-specification/\">程序员自我修养之Git提交信息和分支创建规范</a></p>\n<p>对于 Pull Request Build 如果也想放到 Artifactory 上面，建议像下面这样设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment &#123;</span><br><span class=\"line\">  PR_INT_REPO_PATH &#x3D; &quot;team1-generic-int-den&#x2F;ART&#x2F;PRs&#x2F;$&#123;BRANCH_NAME&#125;&#x2F;$&#123;BUILD_NUMBER&#125;&#x2F;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样所有的 Pull Request Build 构建成功后都会被放到 <code>PRs</code> 这个目录下，方便查找和管理。</p>\n<h4 id=\"不同阶段添加不同的属性\"><a href=\"#不同阶段添加不同的属性\" class=\"headerlink\" title=\"不同阶段添加不同的属性\"></a>不同阶段添加不同的属性</h4><p>如果以上的构建通过了一些质量关卡，比如通过了自动化测试以及 sonaqube 的扫描等等，可进入待人工测试状态，可以通过 Artifactory Promote 功能在，将构建从 int 仓库自动移动到 stage 仓库（需要在 Pipeline 写好这部分的动作代码）</p>\n<p>然后测试工程师就可以到 stage 仓库下去获取构建，进行测试了。通过测试后，对制品添加相应的属性状态，比如在 Property 中添加 <code>manual.test.status=passed</code>。</p>\n<p>之后发布流水线中去到 stage 仓库里去找这些状态为通过的构建进行发布。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">automated.test.status&#x3D;passed</span><br><span class=\"line\">sonaqube.scan.status&#x3D;passed</span><br><span class=\"line\">manual.test.status&#x3D;passed</span><br></pre></td></tr></table></figure>\n\n<p>发布成功后，将构建从 stage 仓库 promote 到 release 仓库中，并添加属性 <code>release.status=released</code>，这样就完成了发布。</p>\n<p>这个过程中，就像使用漏斗一样将构建通过层层帅选，从 int 仓库到 stage 仓库，最后到 release 仓库完成了发布。</p>\n<h2 id=\"仓库权限与保留策略\"><a href=\"#仓库权限与保留策略\" class=\"headerlink\" title=\"仓库权限与保留策略\"></a>仓库权限与保留策略</h2><p>参考如下：</p>\n<table>\n<thead>\n<tr>\n<th>仓库(maturity)</th>\n<th>保留策略(Retention)</th>\n<th>个人账户权限(Personal Account)</th>\n<th>服务账户权限(Service Account)</th>\n<th>管理员(Admin)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dev</td>\n<td>通常不清理</td>\n<td>read/write</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n<tr>\n<td>int</td>\n<td>一周或是几天</td>\n<td>read</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n<tr>\n<td>stage</td>\n<td>永不清理</td>\n<td>read</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n<tr>\n<td>release</td>\n<td>永不清理</td>\n<td>read</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n</tbody></table>\n","more":"<h3 id=\"很好的与-CI-工具进行集成\"><a href=\"#很好的与-CI-工具进行集成\" class=\"headerlink\" title=\"很好的与 CI 工具进行集成\"></a>很好的与 CI 工具进行集成</h3><p>它支持所有主流 CI 工具（如下图所示），并在部署期间捕获详尽的构建环境信息，以实现可完全复制的构建。</p>\n<p><img src=\"/2020/10/what-is-artifactory/ci-tools.png\" alt></p>\n<p>另外通过提供的丰富的 REST API，因此GUI页面上的任何操作都可以通过代码以编程方式完成，方便做持续集成。</p>\n<h3 id=\"提供强大的搜索功能\"><a href=\"#提供强大的搜索功能\" class=\"headerlink\" title=\"提供强大的搜索功能\"></a>提供强大的搜索功能</h3><p>如果你的构建是存储在 FTP 上，如果你想从大量的制品中找到你要找的那一个，如果你还不知道它的名字，那么真的很难快速找到。</p>\n<p>Artifactory 提供了强大的搜索功能，你可以通过带有正则表达的名字进行搜索，还可以通过文件的 checksum，以及通过属性（Properties）等进行快速搜索。</p>\n<h4 id=\"通过名字搜索\"><a href=\"#通过名字搜索\" class=\"headerlink\" title=\"通过名字搜索\"></a>通过名字搜索</h4><p>你想找某一个提交点的构建制品，假设那个提交点的 commit hash 是 <code>a422912</code>，那么你就可以直接输入 <code>*a422912*</code> 快速的从众多的制品中返回对应的构建，例如 Demo_Linux_bin_a422912.zip</p>\n<p><img src=\"/2020/10/what-is-artifactory/search-by-name.png\" alt></p>\n<h4 id=\"通过属性搜索\"><a href=\"#通过属性搜索\" class=\"headerlink\" title=\"通过属性搜索\"></a>通过属性搜索</h4><p>比如要找属性 release.status 为 released 的所有构建那么就可以这样搜索。</p>\n<p><img src=\"/2020/10/what-is-artifactory/search-by-property.png\" alt></p>\n<h4 id=\"通过-checksum-搜索\"><a href=\"#通过-checksum-搜索\" class=\"headerlink\" title=\"通过 checksum 搜索\"></a>通过 checksum 搜索</h4><p>如果只知道一个文件的 <code>checksum</code>，也可以进行搜索。例如通过 <code>sha1sum</code> 计算出文件的 <code>checksum</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sha1sum test.zip</span><br><span class=\"line\">ad62c72fb097fc4aa7723e1fc72b08a6ebcacfd1 *test.zip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/10/what-is-artifactory/search-by-checksum.png\" alt></p>\n<h3 id=\"管理制品的生命周期\"><a href=\"#管理制品的生命周期\" class=\"headerlink\" title=\"管理制品的生命周期\"></a>管理制品的生命周期</h3><p>通过定义不同成熟度存储库，然后使用 Artifactory Promote 功能可以将制品移动到不同的成熟度存储库，以及通过元数据属性，可以很好的管理和维护制品的生命周期。</p>\n<p>除了这些优点之外，Artifactory 还有更多的特点，但我不会在这次会议上一一介绍。</p>\n<blockquote>\n<p>更多可以浏览 JFrog Artifactory 的官方介绍 <a href=\"https://jfrog.com/artifactory/features/\" target=\"_blank\" rel=\"noopener\">https://jfrog.com/artifactory/features/</a></p>\n</blockquote>\n<p>接下来我通过一个 Demo 来介绍 Artifactory 应该怎么使用，以及其中有哪些最佳实践与你分享。</p>\n<h2 id=\"Artifactory首页介绍\"><a href=\"#Artifactory首页介绍\" class=\"headerlink\" title=\"Artifactory首页介绍\"></a>Artifactory首页介绍</h2><p><img src=\"/2020/10/what-is-artifactory/artifactory-home.png\" alt=\"Artifactory Home\"></p>\n<h3 id=\"页面上部\"><a href=\"#页面上部\" class=\"headerlink\" title=\"页面上部\"></a>页面上部</h3><p>你可以看到 Artifactory 已经服务了超过5000件的制品。然后可以看到Artifactory 企业版的当前版本号，以及最新版本。</p>\n<h3 id=\"页面中部，从左到右\"><a href=\"#页面中部，从左到右\" class=\"headerlink\" title=\"页面中部，从左到右\"></a>页面中部，从左到右</h3><ol>\n<li><p>你可以看到搜索功能，它使搜索制品变得很容易。然后是一些有用的信息，包括用户手册、视频、REST API 文档等。</p>\n</li>\n<li><p>Set Me Up 在中间，使用它可以选择和筛选你想要关注的存储库，单击特定的存储库将弹出关于如何使用它的详细说明。</p>\n</li>\n<li><p>最右边是显示的是最近部署的构建和最多下载量的制品（最多被下载时95次）</p>\n</li>\n</ol>\n<h3 id=\"页面底部\"><a href=\"#页面底部\" class=\"headerlink\" title=\"页面底部\"></a>页面底部</h3><p>在底部是一些与 Artifactory 集成的相关工具和技术用户文档。</p>\n<h2 id=\"实践和工作流\"><a href=\"#实践和工作流\" class=\"headerlink\" title=\"实践和工作流\"></a>实践和工作流</h2><h3 id=\"设置关注的仓库\"><a href=\"#设置关注的仓库\" class=\"headerlink\" title=\"设置关注的仓库\"></a>设置关注的仓库</h3><p>在首页的 Set Me Up 里你也看到了我们有很多仓库（Repository），然后对你想关注的仓库。 添加喜欢，然后点击喜欢按钮就可以只列出你关注的 Artifact Repository。</p>\n<p><img src=\"/2020/10/what-is-artifactory/artifactory-artifacts.png\" alt=\"Artifacts\"></p>\n<h3 id=\"Artifactory-仓库命名方法\"><a href=\"#Artifactory-仓库命名方法\" class=\"headerlink\" title=\"Artifactory 仓库命名方法\"></a>Artifactory 仓库命名方法</h3><p>在这个列表仓库中，你可以从这些仓库的名称中看到遵循了某些命名约定，这是 <a href=\"https://jfrog.com/whitepaper/best-practices-structuring-naming-artifactory-repositories/\" target=\"_blank\" rel=\"noopener\">JFrog Artifactory 推荐的官方命名</a>方法，它是由四部分组成：</p>\n<p><code>&lt;team&gt;-&lt;technology&gt;-&lt;maturity&gt;-&lt;locator&gt;</code></p>\n<ul>\n<li>这里 team 我做了脱敏，我们叫它 team1。</li>\n<li>然后是技术，这里有很多选项，比如 generic, Docker, Maven, NPM 等等，这里我们的产品是 C/C++ 编译出来的二进制文件，它属于 generic 类别</li>\n<li>接下来是成熟度（maturity），一个仓库通常由四个级别的成熟度，从低到搞这里分别是 dev, int, stage 和 release。</li>\n<li>最后是表明制品的位置在哪里。比如一个跨国公司，它为了保证上传/下载速度等因素，会在全球部署多个 Artifactory 站点。图上的 den 就是当前 Artifactory 所在位置的缩写。</li>\n</ul>\n<h3 id=\"从构建的生成到发布，了解它的工作流\"><a href=\"#从构建的生成到发布，了解它的工作流\" class=\"headerlink\" title=\"从构建的生成到发布，了解它的工作流\"></a>从构建的生成到发布，了解它的工作流</h3><p>dev 意味着 development（开发），该仓库对所有产品成员都具有读写权限，他们可以上传一些库或其他一些二进制文件。</p>\n<p>int 表示 integration（集成）的意思，比如从 Jenkins 里成功构建的制品将首先放在这个存储库下。如果构建失败，它将不会被上传到 Artifactory。</p>\n<h4 id=\"规范分支命名有利于Artifactory的目录清晰\"><a href=\"#规范分支命名有利于Artifactory的目录清晰\" class=\"headerlink\" title=\"规范分支命名有利于Artifactory的目录清晰\"></a>规范分支命名有利于Artifactory的目录清晰</h4><p>例如，一个产品叫 ART，它的 Git 仓库也叫 ART，它下面有这样一个分支 <code>feature/ART-1234</code></p>\n<p>Jenkins Pipeline 里的环境变量设置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment &#123;</span><br><span class=\"line\">  INT_REPO_PATH &#x3D; &quot;team1-generic-int-den&#x2F;ART&#x2F;$&#123;BRANCH_NAME&#125;&#x2F;$&#123;BUILD_NUMBER&#125;&#x2F;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个分支通过 Jenkins 第1构建成功后，它首先会被 <code>team1-generic-int-den</code> 仓库下的 <code>ART/feature/ART-1234/1/</code> 的目录下面，如果进行第2次构建，并成功，那么它的制品目录会是：</p>\n<p><code>team1-generic-int-den/ART/feature/ART-1234/2/</code> 依次类推。</p>\n<p>为了更好的管理仓库下面的目录，这里我强力建议团队事先做好分支的命名规范，这样同一种类型的分支的所有构建都会出现在一个目录下面。</p>\n<p>关于命名规范可参见这篇文章<a href=\"https://shenxianpeng.github.io/2020/09/commit-messages-specification/\">程序员自我修养之Git提交信息和分支创建规范</a></p>\n<p>对于 Pull Request Build 如果也想放到 Artifactory 上面，建议像下面这样设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">environment &#123;</span><br><span class=\"line\">  PR_INT_REPO_PATH &#x3D; &quot;team1-generic-int-den&#x2F;ART&#x2F;PRs&#x2F;$&#123;BRANCH_NAME&#125;&#x2F;$&#123;BUILD_NUMBER&#125;&#x2F;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样所有的 Pull Request Build 构建成功后都会被放到 <code>PRs</code> 这个目录下，方便查找和管理。</p>\n<h4 id=\"不同阶段添加不同的属性\"><a href=\"#不同阶段添加不同的属性\" class=\"headerlink\" title=\"不同阶段添加不同的属性\"></a>不同阶段添加不同的属性</h4><p>如果以上的构建通过了一些质量关卡，比如通过了自动化测试以及 sonaqube 的扫描等等，可进入待人工测试状态，可以通过 Artifactory Promote 功能在，将构建从 int 仓库自动移动到 stage 仓库（需要在 Pipeline 写好这部分的动作代码）</p>\n<p>然后测试工程师就可以到 stage 仓库下去获取构建，进行测试了。通过测试后，对制品添加相应的属性状态，比如在 Property 中添加 <code>manual.test.status=passed</code>。</p>\n<p>之后发布流水线中去到 stage 仓库里去找这些状态为通过的构建进行发布。 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">automated.test.status&#x3D;passed</span><br><span class=\"line\">sonaqube.scan.status&#x3D;passed</span><br><span class=\"line\">manual.test.status&#x3D;passed</span><br></pre></td></tr></table></figure>\n\n<p>发布成功后，将构建从 stage 仓库 promote 到 release 仓库中，并添加属性 <code>release.status=released</code>，这样就完成了发布。</p>\n<p>这个过程中，就像使用漏斗一样将构建通过层层帅选，从 int 仓库到 stage 仓库，最后到 release 仓库完成了发布。</p>\n<h2 id=\"仓库权限与保留策略\"><a href=\"#仓库权限与保留策略\" class=\"headerlink\" title=\"仓库权限与保留策略\"></a>仓库权限与保留策略</h2><p>参考如下：</p>\n<table>\n<thead>\n<tr>\n<th>仓库(maturity)</th>\n<th>保留策略(Retention)</th>\n<th>个人账户权限(Personal Account)</th>\n<th>服务账户权限(Service Account)</th>\n<th>管理员(Admin)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dev</td>\n<td>通常不清理</td>\n<td>read/write</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n<tr>\n<td>int</td>\n<td>一周或是几天</td>\n<td>read</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n<tr>\n<td>stage</td>\n<td>永不清理</td>\n<td>read</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n<tr>\n<td>release</td>\n<td>永不清理</td>\n<td>read</td>\n<td>read/write</td>\n<td>all</td>\n</tr>\n</tbody></table>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Artifactory","path":"api/tags/Artifactory.json"},{"name":"JFrog","path":"api/tags/JFrog.json"}]}