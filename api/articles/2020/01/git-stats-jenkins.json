{"title":"通过 Jenkins 定期自动给老板提供 Git 仓库的多维度代码分析报告","slug":"2020/01/git-stats-jenkins","date":"2020-01-21T14:06:53.000Z","updated":"2024-08-13T07:48:16.359Z","comments":true,"path":"api/articles/2020/01/git-stats-jenkins.json","excerpt":"上一篇（GitStats - Git 历史统计信息工具），我已经给老板提供了他想看的所有仓库的 Git 提交历史分析报告了，并且把报告都部署到了一台虚拟机的 tomcat 上了，老板可以通过网址访问直接查看每个仓库的分析报告了，看看谁的贡献大，谁活跃，谁偷懒了，谁周末写代码了（这里不鼓励 996）。最近老板提需求了。老板：你弄个这个网址的数据咋不更新呢？报告上咋没见你们提交代码呢？<br>小开：老板儿，您看到这些一个个仓库的数据都是小开我人肉手动生成的，要不您给我点时间，我来做个自动化任务吧。","covers":null,"content":"<p>上一篇（GitStats - Git 历史统计信息工具），我已经给老板提供了他想看的所有仓库的 Git 提交历史分析报告了，并且把报告都部署到了一台虚拟机的 tomcat 上了，老板可以通过网址访问直接查看每个仓库的分析报告了，看看谁的贡献大，谁活跃，谁偷懒了，谁周末写代码了（这里不鼓励 996）。</p>\n<p>最近老板提需求了。</p>\n<p><em>老板：你弄个这个网址的数据咋不更新呢？报告上咋没见你们提交代码呢？</em><br><em>小开：老板儿，您看到这些一个个仓库的数据都是小开我人肉手动生成的，要不您给我点时间，我来做个自动化任务吧。</em></p>\n<span id=\"more\"></span>\n\n<p>我这么积极主动，不是我奉承老板，我心里也知道老板如果觉得 Git Stats 这个工具好用，肯定希望看到的分析报告是最新的。既然老板先提了，那我就别磨蹭了，赶紧干吧。</p>\n<p>不过用啥实现呢？肯定是 Jenkins 了。一来我已经在 Jenkins 上做了很多的自动化任务了，轻车熟路；二来使用同一套系统不但可以减少繁多的系统入口，降低学习成本，也提高 Jenkins 服务器的利用率。</p>\n<p>设身处地的考虑了下老板的使用需求，他肯定不希望自己去 Jenkins 服务器上去运行 Job 来生成这个Git 仓库的多维度代码分析报告，那么，如果我是老板，我希望：</p>\n<ol>\n<li>这个 Jenkins 任务要定期执行，不需要太频繁，一周更新一次就行；</li>\n<li>另外还要支持对单独仓库的单独执行，一旦老板要立即马上查看某个仓库的的分析报告呢。</li>\n</ol>\n<p>最后实现的效果如下：</p>\n<h2 id=\"手动执行\"><a href=\"#手动执行\" class=\"headerlink\" title=\"手动执行\"></a>手动执行</h2><p>老板可以勾选他最关心的代码仓库进行更新</p>\n<h2 id=\"每周末定时执行\"><a href=\"#每周末定时执行\" class=\"headerlink\" title=\"每周末定时执行\"></a>每周末定时执行</h2><p>老板在周一上班就能看到最新的分析数据了，可以看到这个任务 Started by timer</p>\n<h2 id=\"最终的-Jenkinsfile-是这样的\"><a href=\"#最终的-Jenkinsfile-是这样的\" class=\"headerlink\" title=\"最终的 Jenkinsfile 是这样的\"></a>最终的 Jenkinsfile 是这样的</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\">  agent&#123;</span><br><span class=\"line\">    node &#123;</span><br><span class=\"line\">      label <span class=\"string\">&#x27;main-slave&#x27;</span></span><br><span class=\"line\">      customWorkspace <span class=\"string\">&quot;/workspace/gitstats&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  environment &#123;</span><br><span class=\"line\">    USER_CRE = credentials(<span class=\"string\">&quot;d1cbab74-823d-41aa-abb7&quot;</span>)</span><br><span class=\"line\">    webapproot = <span class=\"string\">&quot;/workspace/apache-tomcat-7.0.99/webapps/gitstats&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parameters &#123;</span><br><span class=\"line\">    booleanParam(defaultValue: <span class=\"literal\">true</span>, name: <span class=\"string\">&#x27;repo1&#x27;</span>, description: <span class=\"string\">&#x27;uncheck to disable [repo1]&#x27;</span>)</span><br><span class=\"line\">    booleanParam(defaultValue: <span class=\"literal\">true</span>, name: <span class=\"string\">&#x27;repo2&#x27;</span>, description: <span class=\"string\">&#x27;uncheck to disable [repo2]&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  triggers &#123;</span><br><span class=\"line\">    cron <span class=\"string\">&#x27;0 3 * * 7&#x27;</span>    <span class=\"comment\"># 每周日早上进行定时运行，因此此时机器是空闲的。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  options &#123;</span><br><span class=\"line\">    buildDiscarder(logRotator(numToKeepStr:<span class=\"string\">&#x27;10&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stages&#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Checkout gitstats&quot;</span>)&#123;</span><br><span class=\"line\">      steps&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 准备存放 html 报告目录</span></span><br><span class=\"line\">        sh <span class=\"string\">&quot;mkdir -p html&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 下载 gitstats 代码</span></span><br><span class=\"line\">        sh <span class=\"string\">&quot;rm -rf gitstats &amp;&amp; git clone https://github.com/hoxu/gitstats.git&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Under statistics&quot;</span>) &#123;</span><br><span class=\"line\">      parallel &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&quot;reop1&quot;</span>) &#123;</span><br><span class=\"line\">          when &#123;</span><br><span class=\"line\">            expression &#123; <span class=\"built_in\">return</span> params.repo1 &#125;  <span class=\"comment\"># 判断是否勾选了</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          steps &#123;</span><br><span class=\"line\">            <span class=\"comment\"># 下载要进行分析的仓库 repo1</span></span><br><span class=\"line\">            sh <span class=\"string\">&#x27;git clone -b master https://$USER_CRE_USR:&quot;$USER_CRE_PSW&quot;@git.software.com/scm/repo1.git&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\"># 进行仓库 repo1 的历史记录分析</span></span><br><span class=\"line\">            sh <span class=\"string\">&quot;cd gitstats &amp;&amp; ./gitstats ../repo1 ../html/repo1&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          post &#123;</span><br><span class=\"line\">            success &#123;</span><br><span class=\"line\">              <span class=\"comment\"># 如果分析成功，则将分析结果放到 apache-tomcat-7.0.99/webapps/gitstats 目录下</span></span><br><span class=\"line\">              sh <span class=\"string\">&#x27;rm -rf $&#123;webapproot&#125;/repo1 &amp;&amp; mv html/repo1 $&#123;webapproot&#125;&#x27;</span></span><br><span class=\"line\">              <span class=\"comment\"># 然后删掉 repo1 的代码和 html 报告，以免不及时清理造成磁盘空间的过度占用</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf repo1&quot;</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf html/repo1&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stage(<span class=\"string\">&quot;repo2&quot;</span>) &#123;</span><br><span class=\"line\">          when &#123;</span><br><span class=\"line\">            expression &#123; <span class=\"built_in\">return</span> params.repo2 &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          steps &#123;</span><br><span class=\"line\">            sh <span class=\"string\">&#x27;git clone -b master https://$USER_CRE_USR:&quot;$USER_CRE_PSW&quot;@git.software.com/scm/repo2.git&#x27;</span></span><br><span class=\"line\">            sh <span class=\"string\">&quot;cd gitstats &amp;&amp; ./gitstats ../repo2 ../html/repo2&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          post &#123;</span><br><span class=\"line\">            success &#123;</span><br><span class=\"line\">              sh <span class=\"string\">&#x27;rm -rf $&#123;webapproot&#125;/repo2 &amp;&amp; mv html/repo2 $&#123;webapproot&#125;&#x27;</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf repo2&quot;</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf html/repo2&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post&#123;</span><br><span class=\"line\">    always&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 总是给执行者分送邮件通知，不论是否成功都会对工作空间进行清理</span></span><br><span class=\"line\">      script &#123;</span><br><span class=\"line\">        def email = load <span class=\"string\">&quot;vars/email.groovy&quot;</span></span><br><span class=\"line\">        email.build(currentBuild.result, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      cleanWs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>如果你是测试、DevOps或是从事研发效能方面的工作，那么利用好开源工具，比如 Jenkins 和 Git Stats 就可以快速帮助老板或是你自己提供一个 Git 仓库的多维度代码分析报告，有助于更加了解产品的代码情况。</p>\n","more":"<p>我这么积极主动，不是我奉承老板，我心里也知道老板如果觉得 Git Stats 这个工具好用，肯定希望看到的分析报告是最新的。既然老板先提了，那我就别磨蹭了，赶紧干吧。</p>\n<p>不过用啥实现呢？肯定是 Jenkins 了。一来我已经在 Jenkins 上做了很多的自动化任务了，轻车熟路；二来使用同一套系统不但可以减少繁多的系统入口，降低学习成本，也提高 Jenkins 服务器的利用率。</p>\n<p>设身处地的考虑了下老板的使用需求，他肯定不希望自己去 Jenkins 服务器上去运行 Job 来生成这个Git 仓库的多维度代码分析报告，那么，如果我是老板，我希望：</p>\n<ol>\n<li>这个 Jenkins 任务要定期执行，不需要太频繁，一周更新一次就行；</li>\n<li>另外还要支持对单独仓库的单独执行，一旦老板要立即马上查看某个仓库的的分析报告呢。</li>\n</ol>\n<p>最后实现的效果如下：</p>\n<h2 id=\"手动执行\"><a href=\"#手动执行\" class=\"headerlink\" title=\"手动执行\"></a>手动执行</h2><p>老板可以勾选他最关心的代码仓库进行更新</p>\n<h2 id=\"每周末定时执行\"><a href=\"#每周末定时执行\" class=\"headerlink\" title=\"每周末定时执行\"></a>每周末定时执行</h2><p>老板在周一上班就能看到最新的分析数据了，可以看到这个任务 Started by timer</p>\n<h2 id=\"最终的-Jenkinsfile-是这样的\"><a href=\"#最终的-Jenkinsfile-是这样的\" class=\"headerlink\" title=\"最终的 Jenkinsfile 是这样的\"></a>最终的 Jenkinsfile 是这样的</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\">  agent&#123;</span><br><span class=\"line\">    node &#123;</span><br><span class=\"line\">      label <span class=\"string\">&#x27;main-slave&#x27;</span></span><br><span class=\"line\">      customWorkspace <span class=\"string\">&quot;/workspace/gitstats&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  environment &#123;</span><br><span class=\"line\">    USER_CRE = credentials(<span class=\"string\">&quot;d1cbab74-823d-41aa-abb7&quot;</span>)</span><br><span class=\"line\">    webapproot = <span class=\"string\">&quot;/workspace/apache-tomcat-7.0.99/webapps/gitstats&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parameters &#123;</span><br><span class=\"line\">    booleanParam(defaultValue: <span class=\"literal\">true</span>, name: <span class=\"string\">&#x27;repo1&#x27;</span>, description: <span class=\"string\">&#x27;uncheck to disable [repo1]&#x27;</span>)</span><br><span class=\"line\">    booleanParam(defaultValue: <span class=\"literal\">true</span>, name: <span class=\"string\">&#x27;repo2&#x27;</span>, description: <span class=\"string\">&#x27;uncheck to disable [repo2]&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  triggers &#123;</span><br><span class=\"line\">    cron <span class=\"string\">&#x27;0 3 * * 7&#x27;</span>    <span class=\"comment\"># 每周日早上进行定时运行，因此此时机器是空闲的。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  options &#123;</span><br><span class=\"line\">    buildDiscarder(logRotator(numToKeepStr:<span class=\"string\">&#x27;10&#x27;</span>))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stages&#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Checkout gitstats&quot;</span>)&#123;</span><br><span class=\"line\">      steps&#123;</span><br><span class=\"line\">        <span class=\"comment\"># 准备存放 html 报告目录</span></span><br><span class=\"line\">        sh <span class=\"string\">&quot;mkdir -p html&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 下载 gitstats 代码</span></span><br><span class=\"line\">        sh <span class=\"string\">&quot;rm -rf gitstats &amp;&amp; git clone https://github.com/hoxu/gitstats.git&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Under statistics&quot;</span>) &#123;</span><br><span class=\"line\">      parallel &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&quot;reop1&quot;</span>) &#123;</span><br><span class=\"line\">          when &#123;</span><br><span class=\"line\">            expression &#123; <span class=\"built_in\">return</span> params.repo1 &#125;  <span class=\"comment\"># 判断是否勾选了</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          steps &#123;</span><br><span class=\"line\">            <span class=\"comment\"># 下载要进行分析的仓库 repo1</span></span><br><span class=\"line\">            sh <span class=\"string\">&#x27;git clone -b master https://$USER_CRE_USR:&quot;$USER_CRE_PSW&quot;@git.software.com/scm/repo1.git&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\"># 进行仓库 repo1 的历史记录分析</span></span><br><span class=\"line\">            sh <span class=\"string\">&quot;cd gitstats &amp;&amp; ./gitstats ../repo1 ../html/repo1&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          post &#123;</span><br><span class=\"line\">            success &#123;</span><br><span class=\"line\">              <span class=\"comment\"># 如果分析成功，则将分析结果放到 apache-tomcat-7.0.99/webapps/gitstats 目录下</span></span><br><span class=\"line\">              sh <span class=\"string\">&#x27;rm -rf $&#123;webapproot&#125;/repo1 &amp;&amp; mv html/repo1 $&#123;webapproot&#125;&#x27;</span></span><br><span class=\"line\">              <span class=\"comment\"># 然后删掉 repo1 的代码和 html 报告，以免不及时清理造成磁盘空间的过度占用</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf repo1&quot;</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf html/repo1&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stage(<span class=\"string\">&quot;repo2&quot;</span>) &#123;</span><br><span class=\"line\">          when &#123;</span><br><span class=\"line\">            expression &#123; <span class=\"built_in\">return</span> params.repo2 &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          steps &#123;</span><br><span class=\"line\">            sh <span class=\"string\">&#x27;git clone -b master https://$USER_CRE_USR:&quot;$USER_CRE_PSW&quot;@git.software.com/scm/repo2.git&#x27;</span></span><br><span class=\"line\">            sh <span class=\"string\">&quot;cd gitstats &amp;&amp; ./gitstats ../repo2 ../html/repo2&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          post &#123;</span><br><span class=\"line\">            success &#123;</span><br><span class=\"line\">              sh <span class=\"string\">&#x27;rm -rf $&#123;webapproot&#125;/repo2 &amp;&amp; mv html/repo2 $&#123;webapproot&#125;&#x27;</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf repo2&quot;</span></span><br><span class=\"line\">              sh <span class=\"string\">&quot;rm -rf html/repo2&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post&#123;</span><br><span class=\"line\">    always&#123;</span><br><span class=\"line\">      <span class=\"comment\"># 总是给执行者分送邮件通知，不论是否成功都会对工作空间进行清理</span></span><br><span class=\"line\">      script &#123;</span><br><span class=\"line\">        def email = load <span class=\"string\">&quot;vars/email.groovy&quot;</span></span><br><span class=\"line\">        email.build(currentBuild.result, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      cleanWs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>如果你是测试、DevOps或是从事研发效能方面的工作，那么利用好开源工具，比如 Jenkins 和 Git Stats 就可以快速帮助老板或是你自己提供一个 Git 仓库的多维度代码分析报告，有助于更加了解产品的代码情况。</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"Stats","path":"api/tags/Stats.json"}]}