{"title":"这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job","slug":"2020/06/vm-status-check-via-jenkins","date":"2020-06-12T19:34:28.000Z","updated":"2025-05-05T19:16:17.117Z","comments":true,"path":"api/articles/2020/06/vm-status-check-via-jenkins.json","excerpt":"背景实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。","covers":["/2020/06/vm-status-check-via-jenkins/pipeline-start.png","/2020/06/vm-status-check-via-jenkins/pipeline-result.png"],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"需求分解\"><a href=\"#需求分解\" class=\"headerlink\" title=\"需求分解\"></a>需求分解</h2><p>通过一个简单的 shell 脚本可实现定期进行 ssh 登录操作，但如何实现的更优雅一些就需要花点时间了，比如：</p>\n<ol>\n<li>定期自动执行</li>\n<li>输出比较直观的登录测试结果</li>\n<li>支持用户添加新的虚拟机 hostname 到检查列表中</li>\n<li>执行完成后，通知用户等等</li>\n</ol>\n<p>希望在不引入其他 Web 页面的情况下通过现有的工具 Jenkins 使用 Shell 脚本如何实现呢？</p>\n<ol>\n<li>写一个脚本去循环一个 list 里所有的 hostname，经考虑这个 list 最好是一个 file，这样方便后续处理。</li>\n<li>这样当用户通过执行 Jenkins job 传入新的 hostname 时，使用新的 hostname 到 file 里进行 grep，查看是否已存在。</li>\n<li>如果 grep 到，不添加；如果没有 grep 到，将这个 hostname 添加到 file 里。</li>\n<li>将修改后的 file 添加到 git 仓库里，这样下次 Jenkins 的定时任务就会执行最近添加的 hostname 了。</li>\n</ol>\n<h2 id=\"实现重点\"><a href=\"#实现重点\" class=\"headerlink\" title=\"实现重点\"></a>实现重点</h2><ol>\n<li><p>使用 <code>expect</code>。在使用 ssh 连接远程虚拟机的时候需要实现与远程连接时实现交互，例如：可以期待屏幕上的输出，然后进而进行相应的输入。在使用 <code>expect</code> 之前需要先安装，以 Redhat 的安装命令为例： <code>sudo yum install expect</code> 来进行安装。</p>\n<blockquote>\n<p>更多有关 <code>expect</code> 使用的可以参看这个连接：<a href=\"http://xstarcd.github.io/wiki/shell/expect.html\">http://xstarcd.github.io/wiki/shell/expect.html</a></p>\n</blockquote>\n</li>\n<li><p>使用了 Shell 数组。使用 Shell 读取文件数据，进行登录操作，将操作失败的记录到一个数组里，然后打印出来。</p>\n</li>\n<li><p>在通过 Jenkins 提交新的 hostname 到 Git 仓库时，origin 的 URL 需要是 <code>https://$&#123;USERNAME&#125;:$&#123;PASSWORD&#125;@git.company.com/scm/vmm.git</code> 或 <code>git@company.com:scm/vmm.git</code>（需要提前在执行机器上生成了 id_rsa.pub）</p>\n</li>\n</ol>\n<blockquote>\n<p>代码已经上传 GitHub 请参看 <a href=\"https://github.com/shenxianpeng/vmm.git\">https://github.com/shenxianpeng/vmm.git</a></p>\n</blockquote>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><h3 id=\"开始执行，提供输入新的-hostname\"><a href=\"#开始执行，提供输入新的-hostname\" class=\"headerlink\" title=\"开始执行，提供输入新的 hostname\"></a>开始执行，提供输入新的 hostname</h3><p><img src=\"/2020/06/vm-status-check-via-jenkins/pipeline-start.png\" alt=\"Bulid with parameters\"></p>\n<h3 id=\"执行完成，将执行结果归档以便查看\"><a href=\"#执行完成，将执行结果归档以便查看\" class=\"headerlink\" title=\"执行完成，将执行结果归档以便查看\"></a>执行完成，将执行结果归档以便查看</h3><p><img src=\"/2020/06/vm-status-check-via-jenkins/pipeline-result.png\" alt=\"VM 检查结果\"></p>\n<h3 id=\"打开归档结果如下\"><a href=\"#打开归档结果如下\" class=\"headerlink\" title=\"打开归档结果如下\"></a>打开归档结果如下</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#####################################################</span></span><br><span class=\"line\"><span class=\"comment\">######### VM login check via SSH results ############</span></span><br><span class=\"line\"><span class=\"comment\">#####################################################</span></span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\"><span class=\"comment\"># Compelted (success) 14/16 (total) login vm check. #</span></span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\"><span class=\"comment\"># Below 2 host(s) login faied, need to check.       #</span></span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\">      abc.company.com</span><br><span class=\"line\">      xyz.company.com</span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\"><span class=\"comment\">#####################################################</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>现在技术的更新非常快，尤其作为 DevOps 工程师，各种工具层出不穷，想要每一样工具都掌握几乎是不可能的。</p>\n<p>只会工具不了解其背后的原理，等到新工具出现替换掉旧的工具，其实这些年是没有进步的。</p>\n<p>只有认真的把在工作中遇到的每个问题背后来龙去脉去搞懂，才能地基打的稳，这样不论工具怎么变，学习起来都会很快。</p>\n<p>掌握操作系统，Shell，以及一门擅长的编程语言之后再去学习那些工具，要不永远都是漂浮在空中。</p>\n","more":"<h2 id=\"需求分解\"><a href=\"#需求分解\" class=\"headerlink\" title=\"需求分解\"></a>需求分解</h2><p>通过一个简单的 shell 脚本可实现定期进行 ssh 登录操作，但如何实现的更优雅一些就需要花点时间了，比如：</p>\n<ol>\n<li>定期自动执行</li>\n<li>输出比较直观的登录测试结果</li>\n<li>支持用户添加新的虚拟机 hostname 到检查列表中</li>\n<li>执行完成后，通知用户等等</li>\n</ol>\n<p>希望在不引入其他 Web 页面的情况下通过现有的工具 Jenkins 使用 Shell 脚本如何实现呢？</p>\n<ol>\n<li>写一个脚本去循环一个 list 里所有的 hostname，经考虑这个 list 最好是一个 file，这样方便后续处理。</li>\n<li>这样当用户通过执行 Jenkins job 传入新的 hostname 时，使用新的 hostname 到 file 里进行 grep，查看是否已存在。</li>\n<li>如果 grep 到，不添加；如果没有 grep 到，将这个 hostname 添加到 file 里。</li>\n<li>将修改后的 file 添加到 git 仓库里，这样下次 Jenkins 的定时任务就会执行最近添加的 hostname 了。</li>\n</ol>\n<h2 id=\"实现重点\"><a href=\"#实现重点\" class=\"headerlink\" title=\"实现重点\"></a>实现重点</h2><ol>\n<li><p>使用 <code>expect</code>。在使用 ssh 连接远程虚拟机的时候需要实现与远程连接时实现交互，例如：可以期待屏幕上的输出，然后进而进行相应的输入。在使用 <code>expect</code> 之前需要先安装，以 Redhat 的安装命令为例： <code>sudo yum install expect</code> 来进行安装。</p>\n<blockquote>\n<p>更多有关 <code>expect</code> 使用的可以参看这个连接：<a href=\"http://xstarcd.github.io/wiki/shell/expect.html\">http://xstarcd.github.io/wiki/shell/expect.html</a></p>\n</blockquote>\n</li>\n<li><p>使用了 Shell 数组。使用 Shell 读取文件数据，进行登录操作，将操作失败的记录到一个数组里，然后打印出来。</p>\n</li>\n<li><p>在通过 Jenkins 提交新的 hostname 到 Git 仓库时，origin 的 URL 需要是 <code>https://$&#123;USERNAME&#125;:$&#123;PASSWORD&#125;@git.company.com/scm/vmm.git</code> 或 <code>git@company.com:scm/vmm.git</code>（需要提前在执行机器上生成了 id_rsa.pub）</p>\n</li>\n</ol>\n<blockquote>\n<p>代码已经上传 GitHub 请参看 <a href=\"https://github.com/shenxianpeng/vmm.git\">https://github.com/shenxianpeng/vmm.git</a></p>\n</blockquote>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><h3 id=\"开始执行，提供输入新的-hostname\"><a href=\"#开始执行，提供输入新的-hostname\" class=\"headerlink\" title=\"开始执行，提供输入新的 hostname\"></a>开始执行，提供输入新的 hostname</h3><p><img src=\"/2020/06/vm-status-check-via-jenkins/pipeline-start.png\" alt=\"Bulid with parameters\"></p>\n<h3 id=\"执行完成，将执行结果归档以便查看\"><a href=\"#执行完成，将执行结果归档以便查看\" class=\"headerlink\" title=\"执行完成，将执行结果归档以便查看\"></a>执行完成，将执行结果归档以便查看</h3><p><img src=\"/2020/06/vm-status-check-via-jenkins/pipeline-result.png\" alt=\"VM 检查结果\"></p>\n<h3 id=\"打开归档结果如下\"><a href=\"#打开归档结果如下\" class=\"headerlink\" title=\"打开归档结果如下\"></a>打开归档结果如下</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#####################################################</span></span><br><span class=\"line\"><span class=\"comment\">######### VM login check via SSH results ############</span></span><br><span class=\"line\"><span class=\"comment\">#####################################################</span></span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\"><span class=\"comment\"># Compelted (success) 14/16 (total) login vm check. #</span></span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\"><span class=\"comment\"># Below 2 host(s) login faied, need to check.       #</span></span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\">      abc.company.com</span><br><span class=\"line\">      xyz.company.com</span><br><span class=\"line\"><span class=\"comment\">#                                                   #</span></span><br><span class=\"line\"><span class=\"comment\">#####################################################</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>现在技术的更新非常快，尤其作为 DevOps 工程师，各种工具层出不穷，想要每一样工具都掌握几乎是不可能的。</p>\n<p>只会工具不了解其背后的原理，等到新工具出现替换掉旧的工具，其实这些年是没有进步的。</p>\n<p>只有认真的把在工作中遇到的每个问题背后来龙去脉去搞懂，才能地基打的稳，这样不论工具怎么变，学习起来都会很快。</p>\n<p>掌握操作系统，Shell，以及一门擅长的编程语言之后再去学习那些工具，要不永远都是漂浮在空中。</p>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"Shell","path":"api/tags/Shell.json"}]}