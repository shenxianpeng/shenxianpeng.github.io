{"title":"将 Jenkins Shell 返回的字符串处理为字符数组","slug":"2020/06/jenkins-tips-2","date":"2020-06-22T06:37:29.000Z","updated":"2024-10-24T09:02:35.755Z","comments":true,"path":"api/articles/2020/06/jenkins-tips-2.json","excerpt":"《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。问题想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。","covers":null,"content":"<blockquote>\n<p>《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p>\n</blockquote>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>想通过 Shell 先对数据进行处理，然后返回到 Jenkins pipeline 里，但只能得到 Shell 返回的字符串，因此需要在 Jenkinsfile 里把字符串处理成数组，然后通过一个 for 循环对数组中的值进行处理。</p>\n<p>以下是要处理的文本数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br></pre></td></tr></table></figure>\n\n<p>要将以上文件通过 Jenkins 分别进行处理，得到用户 user1，user2，user3 然后发送邮件。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><p>通过 Shell 表达式只过滤出 user1 user2 user3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># list 所有以 fail-list 开头的文件，并赋给一个数组 l</span></span><br><span class=\"line\">l=$(<span class=\"built_in\">ls</span> -a fail-list-*)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> <span class=\"variable\">$l</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  f=<span class=\"variable\">$&#123;f#fail-list-&#125;</span> <span class=\"comment\"># 使用#号截取左边字符</span></span><br><span class=\"line\">  f=<span class=\"variable\">$&#123;f%.txt&#125;</span>       <span class=\"comment\"># 使用%号截取右边字符</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$f</span>           <span class=\"comment\"># 最终输出仅包含 user 的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>测试结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br><span class=\"line\">$ l=$(<span class=\"built_in\">ls</span> -a fail-list-*) &amp;&amp; <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> <span class=\"variable\">$l</span>; <span class=\"keyword\">do</span> f=<span class=\"variable\">$&#123;f#fail-list-&#125;</span>; f=<span class=\"variable\">$&#123;f%.txt&#125;</span>; <span class=\"built_in\">echo</span> <span class=\"variable\">$f</span> ; <span class=\"keyword\">done</span>;</span><br><span class=\"line\">user1</span><br><span class=\"line\">user2</span><br><span class=\"line\">user3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理字符串为数组\"><a href=\"#处理字符串为数组\" class=\"headerlink\" title=\"处理字符串为数组\"></a>处理字符串为数组</h3><p>以下在 Jenkinsfile 使用 groovy 将 Shell 返回的字符串处理成字符数组。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jenkinsfile</span></span><br><span class=\"line\"><span class=\"comment\">// 忽略 stage, steps 等其他无关步骤</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">scripts &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将 Shell 返回字符串赋给 owners 这个变量。注意在 $ 前面需要加上 \\ 进行转义。</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> owners = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;l=\\$(ls -a fail-list-*) &amp;&amp; for f in \\$l; do f=\\$&#123;f#fail-list-&#125;; f=\\$&#123;f%.txt&#125;; echo \\$f ; done;&quot;</span>, <span class=\"attr\">returnStdout:</span><span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查看 owners 数组是否为空，isEmpty() 是 groovy 内置方法。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( ! owners.isEmpty() ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 .split() 对 owners string 进行分解，返回字符串数组。然后通过 .each() 对返回的字符串数组进行循环。</span></span><br><span class=\"line\">    owners.split().each &#123; owner -&gt;</span><br><span class=\"line\">      <span class=\"comment\">// 打印最终的用户返回</span></span><br><span class=\"line\">      println <span class=\"string\">&quot;owner is $&#123;owner&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 发送邮件，例子</span></span><br><span class=\"line\">      email.SendEx([</span><br><span class=\"line\">          <span class=\"string\">&#x27;buildStatus&#x27;</span>  : currentBuild.currentResult,</span><br><span class=\"line\">          <span class=\"string\">&#x27;buildExecutor&#x27;</span>: <span class=\"string\">&quot;$&#123;owner&#125;&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;attachment&#x27;</span>   : <span class=\"string\">&quot;fail-list-$&#123;owner&#125;.txt&quot;</span></span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终完成了通过 Groovy 将 Shell 返回的字符串处理成字符数组，实现上述例子中对不同人进行邮件通知的需求。</p>\n<p>希望以上例子对你做其他类似需求的时候有所启示和帮助。</p>\n","more":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>想通过 Shell 先对数据进行处理，然后返回到 Jenkins pipeline 里，但只能得到 Shell 返回的字符串，因此需要在 Jenkinsfile 里把字符串处理成数组，然后通过一个 for 循环对数组中的值进行处理。</p>\n<p>以下是要处理的文本数据：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Example</span></span><br><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br></pre></td></tr></table></figure>\n\n<p>要将以上文件通过 Jenkins 分别进行处理，得到用户 user1，user2，user3 然后发送邮件。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><p>通过 Shell 表达式只过滤出 user1 user2 user3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># list 所有以 fail-list 开头的文件，并赋给一个数组 l</span></span><br><span class=\"line\">l=$(<span class=\"built_in\">ls</span> -a fail-list-*)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> <span class=\"variable\">$l</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  f=<span class=\"variable\">$&#123;f#fail-list-&#125;</span> <span class=\"comment\"># 使用#号截取左边字符</span></span><br><span class=\"line\">  f=<span class=\"variable\">$&#123;f%.txt&#125;</span>       <span class=\"comment\"># 使用%号截取右边字符</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$f</span>           <span class=\"comment\"># 最终输出仅包含 user 的字符串</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>测试结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br><span class=\"line\">$ l=$(<span class=\"built_in\">ls</span> -a fail-list-*) &amp;&amp; <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> <span class=\"variable\">$l</span>; <span class=\"keyword\">do</span> f=<span class=\"variable\">$&#123;f#fail-list-&#125;</span>; f=<span class=\"variable\">$&#123;f%.txt&#125;</span>; <span class=\"built_in\">echo</span> <span class=\"variable\">$f</span> ; <span class=\"keyword\">done</span>;</span><br><span class=\"line\">user1</span><br><span class=\"line\">user2</span><br><span class=\"line\">user3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理字符串为数组\"><a href=\"#处理字符串为数组\" class=\"headerlink\" title=\"处理字符串为数组\"></a>处理字符串为数组</h3><p>以下在 Jenkinsfile 使用 groovy 将 Shell 返回的字符串处理成字符数组。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Jenkinsfile</span></span><br><span class=\"line\"><span class=\"comment\">// 忽略 stage, steps 等其他无关步骤</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">scripts &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将 Shell 返回字符串赋给 owners 这个变量。注意在 $ 前面需要加上 \\ 进行转义。</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> owners = sh(<span class=\"attr\">script:</span> <span class=\"string\">&quot;l=\\$(ls -a fail-list-*) &amp;&amp; for f in \\$l; do f=\\$&#123;f#fail-list-&#125;; f=\\$&#123;f%.txt&#125;; echo \\$f ; done;&quot;</span>, <span class=\"attr\">returnStdout:</span><span class=\"literal\">true</span>).trim()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查看 owners 数组是否为空，isEmpty() 是 groovy 内置方法。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( ! owners.isEmpty() ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 .split() 对 owners string 进行分解，返回字符串数组。然后通过 .each() 对返回的字符串数组进行循环。</span></span><br><span class=\"line\">    owners.split().each &#123; owner -&gt;</span><br><span class=\"line\">      <span class=\"comment\">// 打印最终的用户返回</span></span><br><span class=\"line\">      println <span class=\"string\">&quot;owner is $&#123;owner&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 发送邮件，例子</span></span><br><span class=\"line\">      email.SendEx([</span><br><span class=\"line\">          <span class=\"string\">&#x27;buildStatus&#x27;</span>  : currentBuild.currentResult,</span><br><span class=\"line\">          <span class=\"string\">&#x27;buildExecutor&#x27;</span>: <span class=\"string\">&quot;$&#123;owner&#125;&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&#x27;attachment&#x27;</span>   : <span class=\"string\">&quot;fail-list-$&#123;owner&#125;.txt&quot;</span></span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终完成了通过 Groovy 将 Shell 返回的字符串处理成字符数组，实现上述例子中对不同人进行邮件通知的需求。</p>\n<p>希望以上例子对你做其他类似需求的时候有所启示和帮助。</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}