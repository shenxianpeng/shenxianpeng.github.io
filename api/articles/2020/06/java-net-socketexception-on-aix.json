{"title":"解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题","slug":"2020/06/java-net-socketexception-on-aix","date":"2020-06-03T11:30:03.000Z","updated":"2024-02-22T05:41:59.558Z","comments":true,"path":"api/articles/2020/06/java-net-socketexception-on-aix.json","excerpt":"本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。分享一个花了两天时间才解决的一个问题：使用 Jenkins Artifactory 插件上传制品到 https 协议的企业级的 Artifactory 失败。该问题只在 AIX 平台上出现的，其他 Windows，Linux, Unix 均正常。","covers":["/2020/06/java-net-socketexception-on-aix/configure-agent-environment-variable.png"],"content":"<blockquote>\n<p>本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。</p>\n</blockquote>\n<p>分享一个花了两天时间才解决的一个问题：使用 Jenkins Artifactory 插件上传制品到 https 协议的企业级的 Artifactory 失败。该问题只在 AIX 平台上出现的，其他 Windows，Linux, Unix 均正常。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近计划将之前使用的 Artifactory OSS（开源版）迁移到 Artifactory Enterprise（企业版）上。为什么要做迁移？这里有一个 Artifactory 对比的矩阵图 <a href=\"https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix\">https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix</a></p>\n<p>简单来说，开源版缺少与 CI 工具集成时常用的 REST API 功能，比如以下常用功能</p>\n<ul>\n<li>设置保留策略(Retention)。设置上传的制品保留几天等，达到定期清理的目的。</li>\n<li>提升(Promote)。通过自动化测试的制品会被提升到 stage（待测试）仓库，通过手工测试的提升到 release（发布）仓库。</li>\n<li>设置属性(set properties)。对于通过不同阶段的制品通过 CI 集成进行属性的设置。</li>\n</ul>\n<p>正好公司已经有企业版了，那就开始迁移吧。本以为会很顺利的完成，没想到唯独在 IBM 的 AIX 出现上传制品失败的问题。</p>\n<blockquote>\n<p>环境信息</p>\n<ul>\n<li>Jenkins ver. 2.176.3</li>\n<li>Artifactory Plugin 3.6.2</li>\n<li>Enterprise Artifactory 6.9.060900900</li>\n<li>AIX 7.1 &amp;&amp; java version 1.8.0</li>\n</ul>\n</blockquote>\n<p>以下是去掉了无相关的信息的错误日志。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[consumer_0] Deploying artifact: https:<span class=\"comment\">//artifactory.company.com/artifactory/generic-int-den/database/develop/10/database2_cdrom_opt_AIX_24ec6f9.tar.Z</span></span><br><span class=\"line\">Error occurred <span class=\"keyword\">for</span> request GET /artifactory/api/system/version HTTP/<span class=\"number\">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class=\"line\">Error occurred <span class=\"keyword\">for</span> request PUT /artifactory/generic-<span class=\"type\">int</span>-den/database/develop/<span class=\"number\">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class=\"number\">1591170116591</span>;build.name=develop;build.number=<span class=\"number\">10</span> HTTP/<span class=\"number\">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class=\"line\">Error occurred <span class=\"keyword\">for</span> request PUT /artifactory/generic-<span class=\"type\">int</span>-den/database/develop/<span class=\"number\">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class=\"number\">1591170116591</span>;build.name=develop;build.number=<span class=\"number\">10</span> HTTP/<span class=\"number\">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class=\"line\">[consumer_0] An exception occurred during execution:</span><br><span class=\"line\"> java.lang.RuntimeException: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class=\"number\">44</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.producerConsumer.ConsumerRunnableBase.run(ConsumerRunnableBase.java:<span class=\"number\">11</span>)</span><br><span class=\"line\"> \tat java.lang.Thread.run(Thread.java:<span class=\"number\">785</span>)</span><br><span class=\"line\"> Caused by: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class=\"line\"> \tat java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class=\"number\">127</span>)</span><br><span class=\"line\"> \tat java.net.SocketInputStream.read(SocketInputStream.java:<span class=\"number\">182</span>)</span><br><span class=\"line\"> \tat java.net.SocketInputStream.read(SocketInputStream.java:<span class=\"number\">152</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.a.a(a.java:<span class=\"number\">227</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.a.a(a.java:<span class=\"number\">168</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.a(as.java:<span class=\"number\">702</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.i(as.java:<span class=\"number\">338</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.a(as.java:<span class=\"number\">711</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.startHandshake(as.java:<span class=\"number\">454</span>)</span><br><span class=\"line\"> \tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:<span class=\"number\">436</span>)</span><br><span class=\"line\"> \tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:<span class=\"number\">384</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:<span class=\"number\">142</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:<span class=\"number\">374</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:<span class=\"number\">393</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class=\"number\">236</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class=\"number\">186</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class=\"number\">89</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.ServiceUnavailableRetryExec.execute(ServiceUnavailableRetryExec.java:<span class=\"number\">85</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class=\"number\">110</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class=\"number\">185</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class=\"number\">83</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.client.PreemptiveHttpClient.execute(PreemptiveHttpClient.java:<span class=\"number\">89</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.client.ArtifactoryHttpClient.execute(ArtifactoryHttpClient.java:<span class=\"number\">253</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.client.ArtifactoryHttpClient.upload(ArtifactoryHttpClient.java:<span class=\"number\">249</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.uploadFile(ArtifactoryBuildInfoClient.java:<span class=\"number\">692</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.doDeployArtifact(ArtifactoryBuildInfoClient.java:<span class=\"number\">379</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.deployArtifact(ArtifactoryBuildInfoClient.java:<span class=\"number\">367</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class=\"number\">39</span>)</span><br><span class=\"line\"> \t... <span class=\"number\">2</span> more</span><br><span class=\"line\">Failed uploading artifacts by spec</span><br></pre></td></tr></table></figure>\n\n<p>很奇怪会出现上述问题，从开源版的 Artifactory 迁移到企业版的 Artifactory，它们之间最直接的区别是使用了不同的传输协议，前者是 http 后者是 https。</p>\n<blockquote>\n<p>HTTPS 其实是有两部分组成：HTTP + SSL&#x2F;TLS，也就是在 HTTP 上又加了一层处理加密信息的模块，因此更安全。</p>\n</blockquote>\n<p>本以为 Google 一下就能找到此类问题的解决办法，可惜这个问题在其他平台都没有，只有 AIX 上才有，肯定这个 AIX 有什么“过人之处”和其他 Linux&#x2F;Unix 不一样。</p>\n<h2 id=\"使用-curl-来替代\"><a href=\"#使用-curl-来替代\" class=\"headerlink\" title=\"使用 curl 来替代\"></a>使用 <code>curl</code> 来替代</h2><p>由于上述问题重现在需要重新构建，比较花时间，就先试试直接用 <code>curl</code> 命令来调用 Artifactory REST API 看看结果。</p>\n<p>做了以下测试，查看 Artifactory 的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl  https://artifactory.company.com/artifactory/api/system/version</span><br><span class=\"line\">curl: (35) Unknown SSL protocol error <span class=\"keyword\">in</span> connection to artifactory.company.com:443</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 -v 模式，输出更多信息</span></span><br><span class=\"line\">bash-4.3$ curl -v  https://artifactory.company.com/artifactory/api/system/version</span><br><span class=\"line\">*   Trying 10.18.12.95...</span><br><span class=\"line\">* Connected to artifactory.company.com (10.18.12.95) port 443 (<span class=\"comment\">#0)</span></span><br><span class=\"line\">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class=\"line\">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class=\"line\">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class=\"line\">* NPN, negotiated HTTP1.1</span><br><span class=\"line\">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class=\"line\">* TLSv1.2 (OUT), TLS alert, Server hello (2):</span><br><span class=\"line\">* Unknown SSL protocol error <span class=\"keyword\">in</span> connection to artifactory.company.com:443</span><br><span class=\"line\">* Closing connection 0</span><br><span class=\"line\">curl: (35) Unknown SSL protocol error <span class=\"keyword\">in</span> connection to artifactory.company.com:443</span><br></pre></td></tr></table></figure>\n\n<p>果然也出错了，<code>curl</code> 也不行，可能就是执行 <code>curl</code> 命令的时候没有找到指定证书，查了 <code>curl</code> 的 help，有 <code>--cacert</code> 参数可以指定 cacert.pem 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-4.3$ curl --cacert /var/ssl/cacert.pem https://artifactory.company.com/artifactory/api/system/version</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span> : <span class=\"string\">&quot;6.9.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;revision&quot;</span> : <span class=\"string\">&quot;60900900&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;addons&quot;</span> : [ <span class=\"string\">&quot;build&quot;</span>, <span class=\"string\">&quot;docker&quot;</span>, <span class=\"string\">&quot;vagrant&quot;</span>, <span class=\"string\">&quot;replication&quot;</span>, <span class=\"string\">&quot;filestore&quot;</span>, <span class=\"string\">&quot;plugins&quot;</span>, <span class=\"string\">&quot;gems&quot;</span>, <span class=\"string\">&quot;composer&quot;</span>, <span class=\"string\">&quot;npm&quot;</span>, <span class=\"string\">&quot;bower&quot;</span>, <span class=\"string\">&quot;git-lfs&quot;</span>, <span class=\"string\">&quot;nuget&quot;</span>, <span class=\"string\">&quot;debian&quot;</span>, <span class=\"string\">&quot;opkg&quot;</span>, <span class=\"string\">&quot;rpm&quot;</span>, <span class=\"string\">&quot;cocoapods&quot;</span>, <span class=\"string\">&quot;conan&quot;</span>, <span class=\"string\">&quot;vcs&quot;</span>, <span class=\"string\">&quot;pypi&quot;</span>, <span class=\"string\">&quot;release-bundle&quot;</span>, <span class=\"string\">&quot;replicator&quot;</span>, <span class=\"string\">&quot;keys&quot;</span>, <span class=\"string\">&quot;chef&quot;</span>, <span class=\"string\">&quot;cran&quot;</span>, <span class=\"string\">&quot;go&quot;</span>, <span class=\"string\">&quot;helm&quot;</span>, <span class=\"string\">&quot;rest&quot;</span>, <span class=\"string\">&quot;conda&quot;</span>, <span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;puppet&quot;</span>, <span class=\"string\">&quot;ldap&quot;</span>, <span class=\"string\">&quot;sso&quot;</span>, <span class=\"string\">&quot;layouts&quot;</span>, <span class=\"string\">&quot;properties&quot;</span>, <span class=\"string\">&quot;search&quot;</span>, <span class=\"string\">&quot;filtered-resources&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;webstart&quot;</span>, <span class=\"string\">&quot;support&quot;</span>, <span class=\"string\">&quot;xray&quot;</span> ],</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span> : <span class=\"string\">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>试了下成功了。</p>\n<p>到这里问题已经解决了，只要使用 <code>curl</code> 调用 Artifactory REST API 就能完成上传操作了。但我用的 Jenkins Artifactory Plugin，如果使用 <code>curl</code> 我需要把之前的代码重新再实现一遍，然后再测试，就为了 AIX 一个平台的问题，实在是“懒”的重新开始。本着这样懒惰的性格，还得继续解决 Jenkins 调用 agent 去执行上传失败的问题。</p>\n<h2 id=\"最终解决办法\"><a href=\"#最终解决办法\" class=\"headerlink\" title=\"最终解决办法\"></a>最终解决办法</h2><h3 id=\"尝试设置-SSL-CERT-FILE-环境变量\"><a href=\"#尝试设置-SSL-CERT-FILE-环境变量\" class=\"headerlink\" title=\"尝试设置 SSL_CERT_FILE 环境变量\"></a>尝试设置 <code>SSL_CERT_FILE</code> 环境变量</h3><p>想试试用上述的办法来解决 Jenkins 的问题。如果能有一个环境变量能设置指定 cacert.pem 文件的路径，那样在 Jenkins 调用 agent 执行上传时候就能找到证书，可能就能解决这个问题了。果然是有这样的环境变量的 <code>SSL_CERT_FILE</code>，设置如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> SSL_CERT_FILE=/var/ssl/cacert.pem</span><br></pre></td></tr></table></figure>\n\n<p>设置好环境变量之后，通过 <code>curl</code> 调用，再不需要使用 <code>--cacert</code> 参数了。这下看起来有戏了，带着喜悦的心情把这个环境变量加到 agent 机器上，设置如下：</p>\n<p><img src=\"/2020/06/java-net-socketexception-on-aix/configure-agent-environment-variable.png\" alt=\"Jenkins agent 环境变量设置\"></p>\n<p>或者可以修改 agent 机器上的 <code>/etc/environment</code> 文件。</p>\n<p>结果经测试错误信息依旧，看来 Jenkins 执行的 remote.jar 进行上传时跟本地配置环境没有关联，看来需要从执行 remote.jar 着手，把相应的设置或是环境变量在启动 remote.jar 时传进去。</p>\n<blockquote>\n<p>Jenkins 管理 agent 的原理是通过在 agent 上启动一个 remote.jar 实现的</p>\n</blockquote>\n<h3 id=\"在启动-remote-jar-时设置环境变量\"><a href=\"#在启动-remote-jar-时设置环境变量\" class=\"headerlink\" title=\"在启动 remote.jar 时设置环境变量\"></a>在启动 remote.jar 时设置环境变量</h3><p><code>java</code> 的 <code>-D</code> 参数可以完成这一点。</p>\n<p>进行了大量的搜索和尝试，最终在 IBM 的官方找到了这篇文档 <a href=\"https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html\">https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html</a></p>\n<p>文档大意是，IBM SDK 系统属性 <code>com.ibm.jsse2.overrideDefaultTLS=[true|false]</code> 有 <code>true</code> 和 <code>false</code> 两个值，如果想要与 Oracle <code>SSLContext.getInstance(&quot;TLS&quot;)</code> 的行为相匹配，请将此属性设置为 <code>true</code>，默认值为 <code>false</code>。</p>\n<p>下表显示了系统属性对 SSLContext.getInstance(“TLS”) 的影响</p>\n<table>\n<thead>\n<tr>\n<th>Property value setting</th>\n<th>Protocol enabled</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>false</td>\n<td>TLS V1.0</td>\n</tr>\n<tr>\n<td>true</td>\n<td>TLS V1.0, V1.1, and V1.2</td>\n</tr>\n</tbody></table>\n<p>绝大多数的 Java 应用都是使用 Oracle 的 JDK 来开发的，这里要与 Oracle 的行为保持一致；另外 IBM 的 SDK 默认协议只有 TLS V1.0，而上面的 log 可以看到使用的 TLSv1.2 协议，因此需要将属性设置为 <code>true</code>。</p>\n<p>最终在 Jenkins 的 agent 配置里将 JVM Options 区域加上这句 <code>-Dcom.ibm.jsse2.overrideDefaultTLS=true</code>，断开连接，重新启动 agent，再次执行 Pipeline，成功的把 AIX 上的制品上传到 Artifactory 上了，问题解决了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到问题并解决问题是一件非常爽的事，从中也学到了很多之前不曾了解过的知识，解决问题的过程比 Google 随便查查更让人印象深刻，再遇到此类问题可能就会举一反三了。</p>\n<p>另外，凡事如果觉得自己在短时间内没有头绪、自己搞不定的时候尽快寻求有经验的同事的帮助。感谢帮助我的同事们，没有他们的帮助和指导就不能这么快的解决问题。</p>\n","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近计划将之前使用的 Artifactory OSS（开源版）迁移到 Artifactory Enterprise（企业版）上。为什么要做迁移？这里有一个 Artifactory 对比的矩阵图 <a href=\"https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix\">https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix</a></p>\n<p>简单来说，开源版缺少与 CI 工具集成时常用的 REST API 功能，比如以下常用功能</p>\n<ul>\n<li>设置保留策略(Retention)。设置上传的制品保留几天等，达到定期清理的目的。</li>\n<li>提升(Promote)。通过自动化测试的制品会被提升到 stage（待测试）仓库，通过手工测试的提升到 release（发布）仓库。</li>\n<li>设置属性(set properties)。对于通过不同阶段的制品通过 CI 集成进行属性的设置。</li>\n</ul>\n<p>正好公司已经有企业版了，那就开始迁移吧。本以为会很顺利的完成，没想到唯独在 IBM 的 AIX 出现上传制品失败的问题。</p>\n<blockquote>\n<p>环境信息</p>\n<ul>\n<li>Jenkins ver. 2.176.3</li>\n<li>Artifactory Plugin 3.6.2</li>\n<li>Enterprise Artifactory 6.9.060900900</li>\n<li>AIX 7.1 &amp;&amp; java version 1.8.0</li>\n</ul>\n</blockquote>\n<p>以下是去掉了无相关的信息的错误日志。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">[consumer_0] Deploying artifact: https:<span class=\"comment\">//artifactory.company.com/artifactory/generic-int-den/database/develop/10/database2_cdrom_opt_AIX_24ec6f9.tar.Z</span></span><br><span class=\"line\">Error occurred <span class=\"keyword\">for</span> request GET /artifactory/api/system/version HTTP/<span class=\"number\">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class=\"line\">Error occurred <span class=\"keyword\">for</span> request PUT /artifactory/generic-<span class=\"type\">int</span>-den/database/develop/<span class=\"number\">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class=\"number\">1591170116591</span>;build.name=develop;build.number=<span class=\"number\">10</span> HTTP/<span class=\"number\">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class=\"line\">Error occurred <span class=\"keyword\">for</span> request PUT /artifactory/generic-<span class=\"type\">int</span>-den/database/develop/<span class=\"number\">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class=\"number\">1591170116591</span>;build.name=develop;build.number=<span class=\"number\">10</span> HTTP/<span class=\"number\">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class=\"line\">[consumer_0] An exception occurred during execution:</span><br><span class=\"line\"> java.lang.RuntimeException: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class=\"number\">44</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.producerConsumer.ConsumerRunnableBase.run(ConsumerRunnableBase.java:<span class=\"number\">11</span>)</span><br><span class=\"line\"> \tat java.lang.Thread.run(Thread.java:<span class=\"number\">785</span>)</span><br><span class=\"line\"> Caused by: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class=\"line\"> \tat java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class=\"number\">127</span>)</span><br><span class=\"line\"> \tat java.net.SocketInputStream.read(SocketInputStream.java:<span class=\"number\">182</span>)</span><br><span class=\"line\"> \tat java.net.SocketInputStream.read(SocketInputStream.java:<span class=\"number\">152</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.a.a(a.java:<span class=\"number\">227</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.a.a(a.java:<span class=\"number\">168</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.a(as.java:<span class=\"number\">702</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.i(as.java:<span class=\"number\">338</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.a(as.java:<span class=\"number\">711</span>)</span><br><span class=\"line\"> \tat com.ibm.jsse2.as.startHandshake(as.java:<span class=\"number\">454</span>)</span><br><span class=\"line\"> \tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:<span class=\"number\">436</span>)</span><br><span class=\"line\"> \tat org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:<span class=\"number\">384</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:<span class=\"number\">142</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:<span class=\"number\">374</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:<span class=\"number\">393</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class=\"number\">236</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class=\"number\">186</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class=\"number\">89</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.ServiceUnavailableRetryExec.execute(ServiceUnavailableRetryExec.java:<span class=\"number\">85</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class=\"number\">110</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class=\"number\">185</span>)</span><br><span class=\"line\"> \tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class=\"number\">83</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.client.PreemptiveHttpClient.execute(PreemptiveHttpClient.java:<span class=\"number\">89</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.client.ArtifactoryHttpClient.execute(ArtifactoryHttpClient.java:<span class=\"number\">253</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.client.ArtifactoryHttpClient.upload(ArtifactoryHttpClient.java:<span class=\"number\">249</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.uploadFile(ArtifactoryBuildInfoClient.java:<span class=\"number\">692</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.doDeployArtifact(ArtifactoryBuildInfoClient.java:<span class=\"number\">379</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.deployArtifact(ArtifactoryBuildInfoClient.java:<span class=\"number\">367</span>)</span><br><span class=\"line\"> \tat org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class=\"number\">39</span>)</span><br><span class=\"line\"> \t... <span class=\"number\">2</span> more</span><br><span class=\"line\">Failed uploading artifacts by spec</span><br></pre></td></tr></table></figure>\n\n<p>很奇怪会出现上述问题，从开源版的 Artifactory 迁移到企业版的 Artifactory，它们之间最直接的区别是使用了不同的传输协议，前者是 http 后者是 https。</p>\n<blockquote>\n<p>HTTPS 其实是有两部分组成：HTTP + SSL&#x2F;TLS，也就是在 HTTP 上又加了一层处理加密信息的模块，因此更安全。</p>\n</blockquote>\n<p>本以为 Google 一下就能找到此类问题的解决办法，可惜这个问题在其他平台都没有，只有 AIX 上才有，肯定这个 AIX 有什么“过人之处”和其他 Linux&#x2F;Unix 不一样。</p>\n<h2 id=\"使用-curl-来替代\"><a href=\"#使用-curl-来替代\" class=\"headerlink\" title=\"使用 curl 来替代\"></a>使用 <code>curl</code> 来替代</h2><p>由于上述问题重现在需要重新构建，比较花时间，就先试试直接用 <code>curl</code> 命令来调用 Artifactory REST API 看看结果。</p>\n<p>做了以下测试，查看 Artifactory 的版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl  https://artifactory.company.com/artifactory/api/system/version</span><br><span class=\"line\">curl: (35) Unknown SSL protocol error <span class=\"keyword\">in</span> connection to artifactory.company.com:443</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打开 -v 模式，输出更多信息</span></span><br><span class=\"line\">bash-4.3$ curl -v  https://artifactory.company.com/artifactory/api/system/version</span><br><span class=\"line\">*   Trying 10.18.12.95...</span><br><span class=\"line\">* Connected to artifactory.company.com (10.18.12.95) port 443 (<span class=\"comment\">#0)</span></span><br><span class=\"line\">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class=\"line\">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class=\"line\">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class=\"line\">* NPN, negotiated HTTP1.1</span><br><span class=\"line\">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class=\"line\">* TLSv1.2 (OUT), TLS alert, Server hello (2):</span><br><span class=\"line\">* Unknown SSL protocol error <span class=\"keyword\">in</span> connection to artifactory.company.com:443</span><br><span class=\"line\">* Closing connection 0</span><br><span class=\"line\">curl: (35) Unknown SSL protocol error <span class=\"keyword\">in</span> connection to artifactory.company.com:443</span><br></pre></td></tr></table></figure>\n\n<p>果然也出错了，<code>curl</code> 也不行，可能就是执行 <code>curl</code> 命令的时候没有找到指定证书，查了 <code>curl</code> 的 help，有 <code>--cacert</code> 参数可以指定 cacert.pem 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-4.3$ curl --cacert /var/ssl/cacert.pem https://artifactory.company.com/artifactory/api/system/version</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span> : <span class=\"string\">&quot;6.9.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;revision&quot;</span> : <span class=\"string\">&quot;60900900&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;addons&quot;</span> : [ <span class=\"string\">&quot;build&quot;</span>, <span class=\"string\">&quot;docker&quot;</span>, <span class=\"string\">&quot;vagrant&quot;</span>, <span class=\"string\">&quot;replication&quot;</span>, <span class=\"string\">&quot;filestore&quot;</span>, <span class=\"string\">&quot;plugins&quot;</span>, <span class=\"string\">&quot;gems&quot;</span>, <span class=\"string\">&quot;composer&quot;</span>, <span class=\"string\">&quot;npm&quot;</span>, <span class=\"string\">&quot;bower&quot;</span>, <span class=\"string\">&quot;git-lfs&quot;</span>, <span class=\"string\">&quot;nuget&quot;</span>, <span class=\"string\">&quot;debian&quot;</span>, <span class=\"string\">&quot;opkg&quot;</span>, <span class=\"string\">&quot;rpm&quot;</span>, <span class=\"string\">&quot;cocoapods&quot;</span>, <span class=\"string\">&quot;conan&quot;</span>, <span class=\"string\">&quot;vcs&quot;</span>, <span class=\"string\">&quot;pypi&quot;</span>, <span class=\"string\">&quot;release-bundle&quot;</span>, <span class=\"string\">&quot;replicator&quot;</span>, <span class=\"string\">&quot;keys&quot;</span>, <span class=\"string\">&quot;chef&quot;</span>, <span class=\"string\">&quot;cran&quot;</span>, <span class=\"string\">&quot;go&quot;</span>, <span class=\"string\">&quot;helm&quot;</span>, <span class=\"string\">&quot;rest&quot;</span>, <span class=\"string\">&quot;conda&quot;</span>, <span class=\"string\">&quot;license&quot;</span>, <span class=\"string\">&quot;puppet&quot;</span>, <span class=\"string\">&quot;ldap&quot;</span>, <span class=\"string\">&quot;sso&quot;</span>, <span class=\"string\">&quot;layouts&quot;</span>, <span class=\"string\">&quot;properties&quot;</span>, <span class=\"string\">&quot;search&quot;</span>, <span class=\"string\">&quot;filtered-resources&quot;</span>, <span class=\"string\">&quot;p2&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;webstart&quot;</span>, <span class=\"string\">&quot;support&quot;</span>, <span class=\"string\">&quot;xray&quot;</span> ],</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span> : <span class=\"string\">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>试了下成功了。</p>\n<p>到这里问题已经解决了，只要使用 <code>curl</code> 调用 Artifactory REST API 就能完成上传操作了。但我用的 Jenkins Artifactory Plugin，如果使用 <code>curl</code> 我需要把之前的代码重新再实现一遍，然后再测试，就为了 AIX 一个平台的问题，实在是“懒”的重新开始。本着这样懒惰的性格，还得继续解决 Jenkins 调用 agent 去执行上传失败的问题。</p>\n<h2 id=\"最终解决办法\"><a href=\"#最终解决办法\" class=\"headerlink\" title=\"最终解决办法\"></a>最终解决办法</h2><h3 id=\"尝试设置-SSL-CERT-FILE-环境变量\"><a href=\"#尝试设置-SSL-CERT-FILE-环境变量\" class=\"headerlink\" title=\"尝试设置 SSL_CERT_FILE 环境变量\"></a>尝试设置 <code>SSL_CERT_FILE</code> 环境变量</h3><p>想试试用上述的办法来解决 Jenkins 的问题。如果能有一个环境变量能设置指定 cacert.pem 文件的路径，那样在 Jenkins 调用 agent 执行上传时候就能找到证书，可能就能解决这个问题了。果然是有这样的环境变量的 <code>SSL_CERT_FILE</code>，设置如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> SSL_CERT_FILE=/var/ssl/cacert.pem</span><br></pre></td></tr></table></figure>\n\n<p>设置好环境变量之后，通过 <code>curl</code> 调用，再不需要使用 <code>--cacert</code> 参数了。这下看起来有戏了，带着喜悦的心情把这个环境变量加到 agent 机器上，设置如下：</p>\n<p><img src=\"/2020/06/java-net-socketexception-on-aix/configure-agent-environment-variable.png\" alt=\"Jenkins agent 环境变量设置\"></p>\n<p>或者可以修改 agent 机器上的 <code>/etc/environment</code> 文件。</p>\n<p>结果经测试错误信息依旧，看来 Jenkins 执行的 remote.jar 进行上传时跟本地配置环境没有关联，看来需要从执行 remote.jar 着手，把相应的设置或是环境变量在启动 remote.jar 时传进去。</p>\n<blockquote>\n<p>Jenkins 管理 agent 的原理是通过在 agent 上启动一个 remote.jar 实现的</p>\n</blockquote>\n<h3 id=\"在启动-remote-jar-时设置环境变量\"><a href=\"#在启动-remote-jar-时设置环境变量\" class=\"headerlink\" title=\"在启动 remote.jar 时设置环境变量\"></a>在启动 remote.jar 时设置环境变量</h3><p><code>java</code> 的 <code>-D</code> 参数可以完成这一点。</p>\n<p>进行了大量的搜索和尝试，最终在 IBM 的官方找到了这篇文档 <a href=\"https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html\">https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html</a></p>\n<p>文档大意是，IBM SDK 系统属性 <code>com.ibm.jsse2.overrideDefaultTLS=[true|false]</code> 有 <code>true</code> 和 <code>false</code> 两个值，如果想要与 Oracle <code>SSLContext.getInstance(&quot;TLS&quot;)</code> 的行为相匹配，请将此属性设置为 <code>true</code>，默认值为 <code>false</code>。</p>\n<p>下表显示了系统属性对 SSLContext.getInstance(“TLS”) 的影响</p>\n<table>\n<thead>\n<tr>\n<th>Property value setting</th>\n<th>Protocol enabled</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>false</td>\n<td>TLS V1.0</td>\n</tr>\n<tr>\n<td>true</td>\n<td>TLS V1.0, V1.1, and V1.2</td>\n</tr>\n</tbody></table>\n<p>绝大多数的 Java 应用都是使用 Oracle 的 JDK 来开发的，这里要与 Oracle 的行为保持一致；另外 IBM 的 SDK 默认协议只有 TLS V1.0，而上面的 log 可以看到使用的 TLSv1.2 协议，因此需要将属性设置为 <code>true</code>。</p>\n<p>最终在 Jenkins 的 agent 配置里将 JVM Options 区域加上这句 <code>-Dcom.ibm.jsse2.overrideDefaultTLS=true</code>，断开连接，重新启动 agent，再次执行 Pipeline，成功的把 AIX 上的制品上传到 Artifactory 上了，问题解决了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到问题并解决问题是一件非常爽的事，从中也学到了很多之前不曾了解过的知识，解决问题的过程比 Google 随便查查更让人印象深刻，再遇到此类问题可能就会举一反三了。</p>\n<p>另外，凡事如果觉得自己在短时间内没有头绪、自己搞不定的时候尽快寻求有经验的同事的帮助。感谢帮助我的同事们，没有他们的帮助和指导就不能这么快的解决问题。</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Troubleshooting","path":"api/tags/Troubleshooting.json"},{"name":"Artifactory","path":"api/tags/Artifactory.json"},{"name":"JFrog","path":"api/tags/JFrog.json"}]}