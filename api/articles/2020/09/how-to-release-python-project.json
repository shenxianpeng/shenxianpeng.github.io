{"title":"在 GitHub 上发布一个 Python 项目需要注意哪些","slug":"2020/09/how-to-release-python-project","date":"2020-09-13T08:13:17.000Z","updated":"2025-05-26T20:35:07.248Z","comments":true,"path":"api/articles/2020/09/how-to-release-python-project.json","excerpt":"本篇介绍个人或企业在 GitHub 上发布一个 Python 项目需要了解和注意哪些内容如何配置setup.py如何发布到PyPI生成pydoc版本号的选择License的选择配置setup.py打包和发布一项都是通过准备一个 setup.py 文件来完成的。假设你的项目目录结构如下：demo<br>├── LICENSE<br>├── README.md<br>├── MANIFEST.in # 打包时，用来定制化生成 `dist/*.tar.gz` 里的内容<br>├── demo<br>│   └── __init__.py<br>├── setup.py<br>├── tests<br>│   └── __init__.py<br>│   └── __pycache__/<br>└── docs<br>在使用打包命令 python setup.py sdist bdist_wheel，将会生成在 dist 目录下生成两个文件 demo-1.0.0-py3-none-any.whl 和 demo-1.0.0.tar.gz.whl 文件是用于执行 pip install dist/demo-1.0.0-py3-none-any.whl 将其安装到 ...\\Python38\\Lib\\site-packages\\demo 目录时使用的文件。.tar.gz 是打包后的源代码的存档文件。而 MANIFEST.in 则是用来控制这个文件里到底要有哪些内容。","covers":["/2020/09/how-to-release-python-project/pydoc-es.png"],"content":"<p>本篇介绍个人或企业在 GitHub 上发布一个 Python 项目需要了解和注意哪些内容</p>\n<ol>\n<li><a href=\"#%E9%85%8D%E7%BD%AEsetup.py\">如何配置setup.py</a></li>\n<li><a href=\"#%E5%8F%91%E5%B8%83%E5%88%B0PyPI\">如何发布到PyPI</a></li>\n<li><a href=\"#%E5%85%B3%E4%BA%8Epydoc\">生成pydoc</a></li>\n<li><a href=\"#%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E5%8F%B7\">版本号的选择</a></li>\n<li><a href=\"#%E9%80%89%E6%8B%A9License\">License的选择</a></li>\n</ol>\n<h2 id=\"配置setup-py\"><a href=\"#配置setup-py\" class=\"headerlink\" title=\"配置setup.py\"></a>配置setup.py</h2><p>打包和发布一项都是通过准备一个 <code>setup.py</code> 文件来完成的。假设你的项目目录结构如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">demo</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── MANIFEST.<span class=\"keyword\">in</span> <span class=\"comment\"># 打包时，用来定制化生成 `dist/*.tar.gz` 里的内容</span></span><br><span class=\"line\">├── demo</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">├── setup.py</span><br><span class=\"line\">├── tests</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">│   └── __pycache__/</span><br><span class=\"line\">└── docs</span><br></pre></td></tr></table></figure>\n\n<p>在使用打包命令 <code>python setup.py sdist bdist_wheel</code>，将会生成在 dist 目录下生成两个文件 <code>demo-1.0.0-py3-none-any.whl</code> 和 <code>demo-1.0.0.tar.gz</code></p>\n<ul>\n<li><p><code>.whl</code> 文件是用于执行 <code>pip install dist/demo-1.0.0-py3-none-any.whl</code> 将其安装到 <code>...\\Python38\\Lib\\site-packages\\demo</code> 目录时使用的文件。</p>\n</li>\n<li><p><code>.tar.gz</code> 是打包后的源代码的存档文件。而 <code>MANIFEST.in</code> 则是用来控制这个文件里到底要有哪些内容。</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>下面例子是如何使用 <code>MANIFEST.in</code> 来定制化生成 <code>dist/*.tar.gz</code> 里的内容。<code>MANIFEST.in</code> 文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">include LICENSE</span><br><span class=\"line\">include README.md</span><br><span class=\"line\">include MANIFEST.<span class=\"keyword\">in</span></span><br><span class=\"line\">graft demo</span><br><span class=\"line\">graft tests</span><br><span class=\"line\">graft docs</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude __pycache__</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.log</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.pyc</span><br></pre></td></tr></table></figure>\n\n<p>根据以上文件内容，在使用命令 <code>python setup.py sdist bdist_wheel</code> 生成 <code>demo-1.0.0.tar.gz</code> 文件时会包含 <code>LICENSE</code>, <code>README.md</code>, <code>MANIFEST.in</code> 这三个文件，并且还会包含 <code>demo</code>, <code>tests</code>, <code>docs</code> 三个目录下的所有文件，最后排除掉所有的 <code>__pycache__</code>, <code>*.log</code>, <code>*.pyc</code> 文件。</p>\n<p>更多关于  <code>MANIFEST.in</code> 文件的语法请参看 <a href=\"https://packaging.python.org/guides/using-manifest-in/\">https://packaging.python.org/guides/using-manifest-in/</a></p>\n<blockquote>\n<p>官方有详细的示例和文档 <a href=\"https://packaging.python.org/tutorials/packaging-projects/\">https://packaging.python.org/tutorials/packaging-projects/</a></p>\n<p>Python sample 项目供你参考 <a href=\"https://github.com/pypa/sampleproject\">https://github.com/pypa/sampleproject</a></p>\n</blockquote>\n<p>攒点耐心将上面的链接看完，就完全满足一般项目的发布要求了。</p>\n<h2 id=\"发布到PyPI\"><a href=\"#发布到PyPI\" class=\"headerlink\" title=\"发布到PyPI\"></a>发布到PyPI</h2><p>使用 Python 大家都知道可以通过以下命令来下载你要是使用的外部库，Python 有着大量的第三方库，将开源项目发布到 PyPI 上方便用户使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install xxxx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是-PyPI\"><a href=\"#什么是-PyPI\" class=\"headerlink\" title=\"什么是 PyPI\"></a>什么是 PyPI</h3><p>PyPI 是 The Python Package Index 的缩写，意思是 Python 包索引仓库，用来查找、安装和发布 Python 包。</p>\n<p>PyPI 有两个环境</p>\n<ul>\n<li>测试环境 <a href=\"https://test.pypi.org/\">TestPyPI</a></li>\n<li>正式环境 <a href=\"https://pypi.org/\">PyPI</a></li>\n</ul>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>如果想熟悉 PyPI 发布工具和发布流程可以使用测试环境 <a href=\"https://test.pypi.org/\">TestPyPI</a></li>\n<li>如果已经熟悉了 PyPI 的发布工具和流程可以直接使用正式环境 <a href=\"https://pypi.org/\">PyPI</a></li>\n<li>TestPyPI 和 PyPI 需要单独注册，即在正式环境注册了，如果去使用测试环境也同样需要注册。注意：同一个账号不能在 PyPI 和 TestPyPI 同时注册。</li>\n</ol>\n<p>假设你的项目已经完成了，准备要发布到 PyPI 了，执行下面的命令，就可以将项目发布到 PyPI 上了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> dist/*</span><br><span class=\"line\"><span class=\"comment\"># 生成代码存档 .tar.gz 文件和构建文件 .whl 文件</span></span><br><span class=\"line\">python setup.py sdist bdist_wheel</span><br><span class=\"line\"><span class=\"comment\"># 如果发布到TestPyPI使用以下命令</span></span><br><span class=\"line\">twine upload --repository testpypi dist/*</span><br><span class=\"line\"><span class=\"comment\"># 如果发布到PyPI使用以下命令</span></span><br><span class=\"line\">twine upload dist/*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于pydoc\"><a href=\"#关于pydoc\" class=\"headerlink\" title=\"关于pydoc\"></a>关于pydoc</h2><p>Python 内置了 doc 的功能，叫 <code>pydoc</code>。执行 <code>python -m pydoc</code> 可以看到它有哪些选项和功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> docs</span><br><span class=\"line\">python -m pydoc -w ..\\   <span class=\"comment\"># 生成全部文档</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>python -m pydoc -b</code> 可以在本地立即启动一个 web 页面来访问你 <code>...\\Python38\\Lib\\site-packages\\</code> 目录下所有 Libraries 文档。</p>\n<p><img src=\"/2020/09/how-to-release-python-project/pydoc-es.png\" alt=\"以 elasticsearch 文档为例\"></p>\n<p>这些本地的 web 文档如何在外网进行访问？可以通过 GitHub 有内置的 GitHub Pages 功能，很容易提供一个在线网址。</p>\n<p>打开你的 GitHub python 项目设置选项 -&gt; 找到 GitHub Pages -&gt; Source 选择你的分支和路径，保存后就立刻拥有了一个网址。例如：</p>\n<ul>\n<li><a href=\"https://xxxxx.github.io/demo/\">https://xxxxx.github.io/demo/</a> 是你的项目主页，显示是 README.md 信息</li>\n<li><a href=\"https://xxxxx.github.io/demo/docs/demo.html\">https://xxxxx.github.io/demo/docs/demo.html</a> 是你的项目的 pydoc 文档</li>\n</ul>\n<h2 id=\"关于版本号\"><a href=\"#关于版本号\" class=\"headerlink\" title=\"关于版本号\"></a>关于版本号</h2><p>另外如果是正式版本，在发布还需要注意版本号的选择。</p>\n<ul>\n<li>如果是功能简单，完成度也不高，建议从 0.0.1 版本开始。</li>\n<li>如果是功能完善，且完成度很高，那么可以从 1.0.0 版本开始。</li>\n</ul>\n<p>比如一个项目从准备发布到正式发布有四个阶段：Alpha, Beta, 候选发布以及正式发布。假如正式发布的版本号是 1.1.0 版本，根据以下的版本标识的规范：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">X.YaN   # Alpha release</span><br><span class=\"line\">X.YbN   # Beta release</span><br><span class=\"line\">X.YrcN  # Release Candidate</span><br><span class=\"line\">X.Y     # Final release</span><br></pre></td></tr></table></figure>\n\n<p>得到 Alpha, Beta, 候选发布及正式发布版本分别如下：</p>\n<p>Alpha release 版本号是 <code>1.1.0a1, 1.1.0a1, 1.1.0aN...</code><br>Beta release  版本号是 <code>1.1.0b1, 1.1.0b1, 1.1.0bN...</code><br>Release Candidate 版本号是 <code>1.1.0rc1, 1.1.0rc2, 1.1.0rcN...</code><br>Final release 版本号 <code>1.1.0, 1.1.1, 1.1.N...</code></p>\n<blockquote>\n<p>Python 官方的<a href=\"https://www.python.org/dev/peps/pep-0440/\">版本标识和依赖规范文档</a></p>\n</blockquote>\n<h2 id=\"选择License\"><a href=\"#选择License\" class=\"headerlink\" title=\"选择License\"></a>选择License</h2><p>企业级的项目 License 一般由公司的法律团队来提供，发布者只需拿到 License 文件做一些格式化工作（比如将 license.txt 文件格式化为每行 70~80 个字符）。</p>\n<p>如果是个人项目或是想了解开源许可相关的介绍，常见的软件开源许可证（以下许可证是按条件数量排序的）</p>\n<ul>\n<li>GNU AGPLv3</li>\n<li>GNU GPLv3</li>\n<li>GNU LGPLv3</li>\n<li>Mozilla Public License 2.0</li>\n<li>Apache License 2.0</li>\n<li>MIT License</li>\n<li>Boost Software License 1.0</li>\n<li>The Unlicense</li>\n</ul>\n<p>这里有一篇关于《<a href=\"https://mp.weixin.qq.com/s/CjeWol3BdGkmGZi-zMnDkQ\">Github仓库如何选择开源许可证</a>》文章供参考。</p>\n<blockquote>\n<p>如何选项 License <a href=\"https://choosealicense.com/licenses/\">https://choosealicense.com/licenses\\</a><br>如何选项 License GitHub 仓库 <a href=\"https://github.com/github/choosealicense.com/\">https://github.com/github/choosealicense.com\\</a><br>如何选项 License 附录 <a href=\"https://choosealicense.com/appendix\">https://choosealicense.com/appendix</a> \\</p>\n</blockquote>\n","more":"<p>下面例子是如何使用 <code>MANIFEST.in</code> 来定制化生成 <code>dist/*.tar.gz</code> 里的内容。<code>MANIFEST.in</code> 文件内容如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">include LICENSE</span><br><span class=\"line\">include README.md</span><br><span class=\"line\">include MANIFEST.<span class=\"keyword\">in</span></span><br><span class=\"line\">graft demo</span><br><span class=\"line\">graft tests</span><br><span class=\"line\">graft docs</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude __pycache__</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.log</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.pyc</span><br></pre></td></tr></table></figure>\n\n<p>根据以上文件内容，在使用命令 <code>python setup.py sdist bdist_wheel</code> 生成 <code>demo-1.0.0.tar.gz</code> 文件时会包含 <code>LICENSE</code>, <code>README.md</code>, <code>MANIFEST.in</code> 这三个文件，并且还会包含 <code>demo</code>, <code>tests</code>, <code>docs</code> 三个目录下的所有文件，最后排除掉所有的 <code>__pycache__</code>, <code>*.log</code>, <code>*.pyc</code> 文件。</p>\n<p>更多关于  <code>MANIFEST.in</code> 文件的语法请参看 <a href=\"https://packaging.python.org/guides/using-manifest-in/\">https://packaging.python.org/guides/using-manifest-in/</a></p>\n<blockquote>\n<p>官方有详细的示例和文档 <a href=\"https://packaging.python.org/tutorials/packaging-projects/\">https://packaging.python.org/tutorials/packaging-projects/</a></p>\n<p>Python sample 项目供你参考 <a href=\"https://github.com/pypa/sampleproject\">https://github.com/pypa/sampleproject</a></p>\n</blockquote>\n<p>攒点耐心将上面的链接看完，就完全满足一般项目的发布要求了。</p>\n<h2 id=\"发布到PyPI\"><a href=\"#发布到PyPI\" class=\"headerlink\" title=\"发布到PyPI\"></a>发布到PyPI</h2><p>使用 Python 大家都知道可以通过以下命令来下载你要是使用的外部库，Python 有着大量的第三方库，将开源项目发布到 PyPI 上方便用户使用。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install xxxx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"什么是-PyPI\"><a href=\"#什么是-PyPI\" class=\"headerlink\" title=\"什么是 PyPI\"></a>什么是 PyPI</h3><p>PyPI 是 The Python Package Index 的缩写，意思是 Python 包索引仓库，用来查找、安装和发布 Python 包。</p>\n<p>PyPI 有两个环境</p>\n<ul>\n<li>测试环境 <a href=\"https://test.pypi.org/\">TestPyPI</a></li>\n<li>正式环境 <a href=\"https://pypi.org/\">PyPI</a></li>\n</ul>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>如果想熟悉 PyPI 发布工具和发布流程可以使用测试环境 <a href=\"https://test.pypi.org/\">TestPyPI</a></li>\n<li>如果已经熟悉了 PyPI 的发布工具和流程可以直接使用正式环境 <a href=\"https://pypi.org/\">PyPI</a></li>\n<li>TestPyPI 和 PyPI 需要单独注册，即在正式环境注册了，如果去使用测试环境也同样需要注册。注意：同一个账号不能在 PyPI 和 TestPyPI 同时注册。</li>\n</ol>\n<p>假设你的项目已经完成了，准备要发布到 PyPI 了，执行下面的命令，就可以将项目发布到 PyPI 上了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> dist/*</span><br><span class=\"line\"><span class=\"comment\"># 生成代码存档 .tar.gz 文件和构建文件 .whl 文件</span></span><br><span class=\"line\">python setup.py sdist bdist_wheel</span><br><span class=\"line\"><span class=\"comment\"># 如果发布到TestPyPI使用以下命令</span></span><br><span class=\"line\">twine upload --repository testpypi dist/*</span><br><span class=\"line\"><span class=\"comment\"># 如果发布到PyPI使用以下命令</span></span><br><span class=\"line\">twine upload dist/*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于pydoc\"><a href=\"#关于pydoc\" class=\"headerlink\" title=\"关于pydoc\"></a>关于pydoc</h2><p>Python 内置了 doc 的功能，叫 <code>pydoc</code>。执行 <code>python -m pydoc</code> 可以看到它有哪些选项和功能。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> docs</span><br><span class=\"line\">python -m pydoc -w ..\\   <span class=\"comment\"># 生成全部文档</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>python -m pydoc -b</code> 可以在本地立即启动一个 web 页面来访问你 <code>...\\Python38\\Lib\\site-packages\\</code> 目录下所有 Libraries 文档。</p>\n<p><img src=\"/2020/09/how-to-release-python-project/pydoc-es.png\" alt=\"以 elasticsearch 文档为例\"></p>\n<p>这些本地的 web 文档如何在外网进行访问？可以通过 GitHub 有内置的 GitHub Pages 功能，很容易提供一个在线网址。</p>\n<p>打开你的 GitHub python 项目设置选项 -&gt; 找到 GitHub Pages -&gt; Source 选择你的分支和路径，保存后就立刻拥有了一个网址。例如：</p>\n<ul>\n<li><a href=\"https://xxxxx.github.io/demo/\">https://xxxxx.github.io/demo/</a> 是你的项目主页，显示是 README.md 信息</li>\n<li><a href=\"https://xxxxx.github.io/demo/docs/demo.html\">https://xxxxx.github.io/demo/docs/demo.html</a> 是你的项目的 pydoc 文档</li>\n</ul>\n<h2 id=\"关于版本号\"><a href=\"#关于版本号\" class=\"headerlink\" title=\"关于版本号\"></a>关于版本号</h2><p>另外如果是正式版本，在发布还需要注意版本号的选择。</p>\n<ul>\n<li>如果是功能简单，完成度也不高，建议从 0.0.1 版本开始。</li>\n<li>如果是功能完善，且完成度很高，那么可以从 1.0.0 版本开始。</li>\n</ul>\n<p>比如一个项目从准备发布到正式发布有四个阶段：Alpha, Beta, 候选发布以及正式发布。假如正式发布的版本号是 1.1.0 版本，根据以下的版本标识的规范：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">X.YaN   # Alpha release</span><br><span class=\"line\">X.YbN   # Beta release</span><br><span class=\"line\">X.YrcN  # Release Candidate</span><br><span class=\"line\">X.Y     # Final release</span><br></pre></td></tr></table></figure>\n\n<p>得到 Alpha, Beta, 候选发布及正式发布版本分别如下：</p>\n<p>Alpha release 版本号是 <code>1.1.0a1, 1.1.0a1, 1.1.0aN...</code><br>Beta release  版本号是 <code>1.1.0b1, 1.1.0b1, 1.1.0bN...</code><br>Release Candidate 版本号是 <code>1.1.0rc1, 1.1.0rc2, 1.1.0rcN...</code><br>Final release 版本号 <code>1.1.0, 1.1.1, 1.1.N...</code></p>\n<blockquote>\n<p>Python 官方的<a href=\"https://www.python.org/dev/peps/pep-0440/\">版本标识和依赖规范文档</a></p>\n</blockquote>\n<h2 id=\"选择License\"><a href=\"#选择License\" class=\"headerlink\" title=\"选择License\"></a>选择License</h2><p>企业级的项目 License 一般由公司的法律团队来提供，发布者只需拿到 License 文件做一些格式化工作（比如将 license.txt 文件格式化为每行 70~80 个字符）。</p>\n<p>如果是个人项目或是想了解开源许可相关的介绍，常见的软件开源许可证（以下许可证是按条件数量排序的）</p>\n<ul>\n<li>GNU AGPLv3</li>\n<li>GNU GPLv3</li>\n<li>GNU LGPLv3</li>\n<li>Mozilla Public License 2.0</li>\n<li>Apache License 2.0</li>\n<li>MIT License</li>\n<li>Boost Software License 1.0</li>\n<li>The Unlicense</li>\n</ul>\n<p>这里有一篇关于《<a href=\"https://mp.weixin.qq.com/s/CjeWol3BdGkmGZi-zMnDkQ\">Github仓库如何选择开源许可证</a>》文章供参考。</p>\n<blockquote>\n<p>如何选项 License <a href=\"https://choosealicense.com/licenses/\">https://choosealicense.com/licenses\\</a><br>如何选项 License GitHub 仓库 <a href=\"https://github.com/github/choosealicense.com/\">https://github.com/github/choosealicense.com\\</a><br>如何选项 License 附录 <a href=\"https://choosealicense.com/appendix\">https://choosealicense.com/appendix</a> \\</p>\n</blockquote>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Release","path":"api/tags/Release.json"},{"name":"PyPI","path":"api/tags/PyPI.json"}]}