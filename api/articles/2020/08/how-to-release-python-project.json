{"title":"如何在 GitHub 上发布一个企业级的 Python 项目","slug":"2020/08/how-to-release-python-project","date":"2020-08-23T08:13:17.000Z","updated":"2020-08-23T08:36:58.649Z","comments":true,"path":"api/articles/2020/08/how-to-release-python-project.json","excerpt":"目录选择License配置setup.py发布到PyPI关于pydoc关于版本号选择License这里由一篇关于如何选择 GitHub License 的文章 Github仓库如何选择开源许可证，这里就不过多介绍。配置setup.py官方有详细的示例和文档 https://packaging.python.org/tutorials/packaging-projects/。这里还有一个 sample 项目供你参考 https://github.com/pypa/sampleproject攒点耐心将上面两个链接阅读，就基本可以满足一般项目的发布要求了。这里着重介绍下引入 MANIFEST.in 文件的作用。它是用来定制化生成 dist/*.tar.gz 时需要用到的。假设你的项目目录结构如下：1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>demo<br>├── LICENSE<br>├── README.md<br>├── MANIFEST.in<br>├── demo<br>│   └── __init__.py<br>├── setup.py<br>├── tests<br>│   └── __init__.py<br>│   └── __pycache__&#x2F;<br>└── docs<br>","covers":["/2020/08/how-to-release-python-project/pydoc-es.png"],"content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#选择License\">选择License</a></li>\n<li><a href=\"#配置setup.py\">配置setup.py</a></li>\n<li><a href=\"#发布到PyPI\">发布到PyPI</a></li>\n<li><a href=\"#关于pydoc\">关于pydoc</a></li>\n<li><a href=\"#关于版本号\">关于版本号</a></li>\n</ul>\n<h2 id=\"选择License\"><a href=\"#选择License\" class=\"headerlink\" title=\"选择License\"></a>选择License</h2><p>这里由一篇关于如何选择 GitHub License 的文章 <a href=\"https://mp.weixin.qq.com/s/CjeWol3BdGkmGZi-zMnDkQ\" target=\"_blank\" rel=\"noopener\">Github仓库如何选择开源许可证</a>，这里就不过多介绍。</p>\n<h2 id=\"配置setup-py\"><a href=\"#配置setup-py\" class=\"headerlink\" title=\"配置setup.py\"></a>配置setup.py</h2><p>官方有详细的示例和文档 <a href=\"https://packaging.python.org/tutorials/packaging-projects/。\" target=\"_blank\" rel=\"noopener\">https://packaging.python.org/tutorials/packaging-projects/。</a></p>\n<p>这里还有一个 sample 项目供你参考 <a href=\"https://github.com/pypa/sampleproject\" target=\"_blank\" rel=\"noopener\">https://github.com/pypa/sampleproject</a></p>\n<p>攒点耐心将上面两个链接阅读，就基本可以满足一般项目的发布要求了。</p>\n<p>这里着重介绍下引入 <code>MANIFEST.in</code> 文件的作用。它是用来定制化生成 <code>dist/*.tar.gz</code> 时需要用到的。</p>\n<p>假设你的项目目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">demo</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── README.md</span><br><span class=\"line\">├── MANIFEST.in</span><br><span class=\"line\">├── demo</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">├── setup.py</span><br><span class=\"line\">├── tests</span><br><span class=\"line\">│   └── __init__.py</span><br><span class=\"line\">│   └── __pycache__&#x2F;</span><br><span class=\"line\">└── docs</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>在使用打包命令 <code>python setup.py sdist bdist_wheel</code>，将会生成在 dist 目录下生成两个文件 <code>demo-1.0.0-py3-none-any.whl</code> 和 <code>demo-1.0.0.tar.gz</code></p>\n<p><code>.whl</code> 文件是用于执行 <code>pip install dist/demo-1.0.0-py3-none-any.whl</code> 将其安装到 <code>...\\Python38\\Lib\\site-packages\\demo</code> 目录时使用的文件。</p>\n<p><code>.tar.gz</code> 是打包后的源代码的存档文件。而 <code>MANIFEST.in</code> 则是用来控制这个文件里到底要有哪些内容。</p>\n<p>以下面的 <code>MANIFEST.in</code> 文件为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include LICENSE</span><br><span class=\"line\">include README.md</span><br><span class=\"line\">include MANIFEST.<span class=\"keyword\">in</span></span><br><span class=\"line\">graft demo</span><br><span class=\"line\">graft tests</span><br><span class=\"line\">graft docs</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude __pycache__</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.log</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.pyc</span><br></pre></td></tr></table></figure>\n\n<p>根据以上文件描述，在使用命令 <code>python setup.py sdist bdist_wheel</code> 生成 <code>demo-1.0.0.tar.gz</code> 文件时会包含 <code>LICENSE</code>, <code>README.md</code>, <code>MANIFEST.in</code> 这三个文件，并且还会包含 <code>demo</code>, <code>tests</code>, <code>docs</code> 三个目录下的所有文件，最后排除掉所有的 <code>__pycache__</code>, <code>*.log</code>, <code>*.pyc</code> 文件。</p>\n<p>更多关于  <code>MANIFEST.in</code> 文件的语法请参看 <a href=\"https://packaging.python.org/guides/using-manifest-in/\" target=\"_blank\" rel=\"noopener\">https://packaging.python.org/guides/using-manifest-in/</a></p>\n<h2 id=\"发布到PyPI\"><a href=\"#发布到PyPI\" class=\"headerlink\" title=\"发布到PyPI\"></a>发布到PyPI</h2><p>使用 Python 编程的人都知道，Python 的优势之一就是有大量的第三方库，通常使用如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install xxxx</span><br></pre></td></tr></table></figure>\n\n<p>就可以轻松下载，真是即酷炫又方便。</p>\n<h3 id=\"什么是-PyPI\"><a href=\"#什么是-PyPI\" class=\"headerlink\" title=\"什么是 PyPI\"></a>什么是 PyPI</h3><p>PyPI 是 The Python Package Index 的缩写，意思是 Python 包索引仓库，用来查找、安装和发布 Python 包。</p>\n<p>PyPI 又两个环境，一个是测试环境 <a href=\"https://test.pypi.org/\" target=\"_blank\" rel=\"noopener\">TestPyPI</a> 和 正式环境 <a href=\"https://pypi.org/\" target=\"_blank\" rel=\"noopener\">PyPI</a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>如果想熟悉 PyPI 发布工具和发布流程可以使用测试环境 <a href=\"https://test.pypi.org/\" target=\"_blank\" rel=\"noopener\">TestPyPI</a> </li>\n<li>如果已经熟悉了 PyPI 的发布工具和流程可以直接使用正式环境 <a href=\"https://pypi.org/\" target=\"_blank\" rel=\"noopener\">PyPI</a></li>\n<li>TestPyPI 和 PyPI 需要单独注册，即在正式环境注册了，如果去使用测试环境也同样需要注册。</li>\n<li>已经写好并且可以正常使用的项目/库/方法。</li>\n</ol>\n<p>发布一个 Python 项目到 PyPI 还是非常简单的，遵照上述的步骤，每个人都可以将上面的项目发布到自己账户下。</p>\n<h2 id=\"关于pydoc\"><a href=\"#关于pydoc\" class=\"headerlink\" title=\"关于pydoc\"></a>关于pydoc</h2><p>Python 内置了 doc 的功能，叫 <code>pydoc</code>。执行 <code>python -m pydoc</code> 可以看到它有哪些选项和功能。</p>\n<p>执行 <code>python -m pydoc -b</code> 可以在本地理解启动一个 web 页面来访问你 <code>...\\Python38\\Lib\\site-packages\\</code> 目录下所有项目的文档。</p>\n<p><img src=\"/2020/08/how-to-release-python-project/pydoc-es.png\" alt=\"以 elasticsearch 文档为例\"></p>\n<p>如何让用户可以在线访问你的 doc 呢？</p>\n<p>GitHub 有内置的 GitHub Pages 功能，可以很容易的提供一个在线网址。只要打开你的 python 项目设置选项 -&gt; 找到 GitHub Pages -&gt; Source 选择你的分支和路径，保存后就立刻拥有了一个网址。例如：</p>\n<ul>\n<li><a href=\"https://xxxxx.github.io/demo/\" target=\"_blank\" rel=\"noopener\">https://xxxxx.github.io/demo/</a> 是你的项目主页，显示是 README.md 信息 </li>\n<li><a href=\"https://xxxxx.github.io/demo/docs/demo.html\" target=\"_blank\" rel=\"noopener\">https://xxxxx.github.io/demo/docs/demo.html</a> 是你的项目的 pydoc 文档</li>\n</ul>\n<h2 id=\"关于版本号\"><a href=\"#关于版本号\" class=\"headerlink\" title=\"关于版本号\"></a>关于版本号</h2><p>另外如果是正式版本，在发布还需要注意版本号的选择。如果是功能很简答，完成度也不高，建议从 0.0.1 版本开始。</p>\n<p>如果是一个完成度很高的产品了，那么可以从 1.0.0 版本开始。</p>\n","more":"<p>在使用打包命令 <code>python setup.py sdist bdist_wheel</code>，将会生成在 dist 目录下生成两个文件 <code>demo-1.0.0-py3-none-any.whl</code> 和 <code>demo-1.0.0.tar.gz</code></p>\n<p><code>.whl</code> 文件是用于执行 <code>pip install dist/demo-1.0.0-py3-none-any.whl</code> 将其安装到 <code>...\\Python38\\Lib\\site-packages\\demo</code> 目录时使用的文件。</p>\n<p><code>.tar.gz</code> 是打包后的源代码的存档文件。而 <code>MANIFEST.in</code> 则是用来控制这个文件里到底要有哪些内容。</p>\n<p>以下面的 <code>MANIFEST.in</code> 文件为例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include LICENSE</span><br><span class=\"line\">include README.md</span><br><span class=\"line\">include MANIFEST.<span class=\"keyword\">in</span></span><br><span class=\"line\">graft demo</span><br><span class=\"line\">graft tests</span><br><span class=\"line\">graft docs</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude __pycache__</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.log</span><br><span class=\"line\"><span class=\"keyword\">global</span>-exclude *.pyc</span><br></pre></td></tr></table></figure>\n\n<p>根据以上文件描述，在使用命令 <code>python setup.py sdist bdist_wheel</code> 生成 <code>demo-1.0.0.tar.gz</code> 文件时会包含 <code>LICENSE</code>, <code>README.md</code>, <code>MANIFEST.in</code> 这三个文件，并且还会包含 <code>demo</code>, <code>tests</code>, <code>docs</code> 三个目录下的所有文件，最后排除掉所有的 <code>__pycache__</code>, <code>*.log</code>, <code>*.pyc</code> 文件。</p>\n<p>更多关于  <code>MANIFEST.in</code> 文件的语法请参看 <a href=\"https://packaging.python.org/guides/using-manifest-in/\" target=\"_blank\" rel=\"noopener\">https://packaging.python.org/guides/using-manifest-in/</a></p>\n<h2 id=\"发布到PyPI\"><a href=\"#发布到PyPI\" class=\"headerlink\" title=\"发布到PyPI\"></a>发布到PyPI</h2><p>使用 Python 编程的人都知道，Python 的优势之一就是有大量的第三方库，通常使用如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install xxxx</span><br></pre></td></tr></table></figure>\n\n<p>就可以轻松下载，真是即酷炫又方便。</p>\n<h3 id=\"什么是-PyPI\"><a href=\"#什么是-PyPI\" class=\"headerlink\" title=\"什么是 PyPI\"></a>什么是 PyPI</h3><p>PyPI 是 The Python Package Index 的缩写，意思是 Python 包索引仓库，用来查找、安装和发布 Python 包。</p>\n<p>PyPI 又两个环境，一个是测试环境 <a href=\"https://test.pypi.org/\" target=\"_blank\" rel=\"noopener\">TestPyPI</a> 和 正式环境 <a href=\"https://pypi.org/\" target=\"_blank\" rel=\"noopener\">PyPI</a></p>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ol>\n<li>如果想熟悉 PyPI 发布工具和发布流程可以使用测试环境 <a href=\"https://test.pypi.org/\" target=\"_blank\" rel=\"noopener\">TestPyPI</a> </li>\n<li>如果已经熟悉了 PyPI 的发布工具和流程可以直接使用正式环境 <a href=\"https://pypi.org/\" target=\"_blank\" rel=\"noopener\">PyPI</a></li>\n<li>TestPyPI 和 PyPI 需要单独注册，即在正式环境注册了，如果去使用测试环境也同样需要注册。</li>\n<li>已经写好并且可以正常使用的项目/库/方法。</li>\n</ol>\n<p>发布一个 Python 项目到 PyPI 还是非常简单的，遵照上述的步骤，每个人都可以将上面的项目发布到自己账户下。</p>\n<h2 id=\"关于pydoc\"><a href=\"#关于pydoc\" class=\"headerlink\" title=\"关于pydoc\"></a>关于pydoc</h2><p>Python 内置了 doc 的功能，叫 <code>pydoc</code>。执行 <code>python -m pydoc</code> 可以看到它有哪些选项和功能。</p>\n<p>执行 <code>python -m pydoc -b</code> 可以在本地理解启动一个 web 页面来访问你 <code>...\\Python38\\Lib\\site-packages\\</code> 目录下所有项目的文档。</p>\n<p><img src=\"/2020/08/how-to-release-python-project/pydoc-es.png\" alt=\"以 elasticsearch 文档为例\"></p>\n<p>如何让用户可以在线访问你的 doc 呢？</p>\n<p>GitHub 有内置的 GitHub Pages 功能，可以很容易的提供一个在线网址。只要打开你的 python 项目设置选项 -&gt; 找到 GitHub Pages -&gt; Source 选择你的分支和路径，保存后就立刻拥有了一个网址。例如：</p>\n<ul>\n<li><a href=\"https://xxxxx.github.io/demo/\" target=\"_blank\" rel=\"noopener\">https://xxxxx.github.io/demo/</a> 是你的项目主页，显示是 README.md 信息 </li>\n<li><a href=\"https://xxxxx.github.io/demo/docs/demo.html\" target=\"_blank\" rel=\"noopener\">https://xxxxx.github.io/demo/docs/demo.html</a> 是你的项目的 pydoc 文档</li>\n</ul>\n<h2 id=\"关于版本号\"><a href=\"#关于版本号\" class=\"headerlink\" title=\"关于版本号\"></a>关于版本号</h2><p>另外如果是正式版本，在发布还需要注意版本号的选择。如果是功能很简答，完成度也不高，建议从 0.0.1 版本开始。</p>\n<p>如果是一个完成度很高的产品了，那么可以从 1.0.0 版本开始。</p>","categories":[{"name":"Python","path":"api/categories/Python.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Release","path":"api/tags/Release.json"},{"name":"PyPI","path":"api/tags/PyPI.json"}]}