{"title":"通过 generic-webhook-trigger 插件实时获取 Bitbucket Repository Events","slug":"2020/08/bitbucket-pull-request-event","date":"2020-08-07T08:53:03.000Z","updated":"2023-11-21T10:45:44.720Z","comments":true,"path":"api/articles/2020/08/bitbucket-pull-request-event.json","excerpt":"背景本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。使用过 Jenkins Multi-branch pipeline Job 的用户知道，这个 Job 类型的环境变量中可以得到 Pull Request 的相关信息如下 [Figure] 为了获取这个变量需要创建这种类型的 Job，并且可能需要 clone 该仓库的代码，有点杀鸡宰牛的意思，看起来并不是一个特别恰当的办法。如何通过创建一个普通的 Jenkins Job 就能实时获取 Bitbucket 仓库以及 Pull Request 事件呢？通过以下功能和插件可以实现。","covers":["/2020/08/bitbucket-pull-request-event/pull-request-env.png","/2020/08/bitbucket-pull-request-event/webhook.png","/2020/08/bitbucket-pull-request-event/generic-config.png","/2020/08/bitbucket-pull-request-event/generic-config-token.png","/2020/08/bitbucket-pull-request-event/auto-trigger-jenkins.png","/2020/08/bitbucket-pull-request-event/pull-request-id.png"],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。</p>\n<p>使用过 Jenkins Multi-branch pipeline Job 的用户知道，这个 Job 类型的环境变量中可以得到 Pull Request 的相关信息如下</p>\n<p><img src=\"/2020/08/bitbucket-pull-request-event/pull-request-env.png\" alt=\"Multi-branch pipeline Job 环境变量\"></p>\n<p>为了获取这个变量需要创建这种类型的 Job，并且可能需要 clone 该仓库的代码，有点杀鸡宰牛的意思，看起来并不是一个特别恰当的办法。</p>\n<p>如何通过创建一个普通的 Jenkins Job 就能实时获取 Bitbucket 仓库以及 Pull Request 事件呢？通过以下功能和插件可以实现。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>配置 Bitucket 的 Webhook</li>\n<li>通过 Jenkins generic-webhook-trigger 插件接收 Webhook 的 Event 事件</li>\n</ol>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"设置-Bitbucket-Webhook\"><a href=\"#设置-Bitbucket-Webhook\" class=\"headerlink\" title=\"设置 Bitbucket Webhook\"></a>设置 Bitbucket Webhook</h3><p>在需要监听的 Bitbucket 仓库中创建一个 webhook，如下：</p>\n<ul>\n<li>Name: <code>test-demo</code></li>\n<li>URL: <code>http://JENKINS_URL/generic-webhook-trigger/invoke?token=test-demo</code></li>\n</ul>\n<p><img src=\"/2020/08/bitbucket-pull-request-event/webhook.png\" alt=\"创建一个 webhook\"></p>\n<p>备注：Bitbucket 中还有一个另外一个设置项，根据我的测试，该设置项 <strong>Post Webhooks</strong> 与上面的 <strong>Webhooks</strong> 都能实现本文要实现的功能。</p>\n<h3 id=\"2-配置-Jenkins-Job\"><a href=\"#2-配置-Jenkins-Job\" class=\"headerlink\" title=\"2. 配置 Jenkins Job\"></a>2. 配置 Jenkins Job</h3><p><img src=\"/2020/08/bitbucket-pull-request-event/generic-config.png\" alt=\"配置 Jenkins: 获取 Pull Request ID\"></p>\n<p>想获取其他 Event 信息，比如 PR title, commit 等，请参考这个链接 <a href=\"https://github.com/jenkinsci/generic-webhook-trigger-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/gwt/bdd/bitbucket-server/bitbucket-server-pull-request.feature\">bitbucket-server-pull-request.feature</a>，按照上面的设置即可。</p>\n<p><img src=\"/2020/08/bitbucket-pull-request-event/generic-config-token.png\" alt=\"配置 Jenkins: token\"></p>\n<p>这里的 token 值 <code>test-demo</code> 可以任意起名，但要与 Bitbucket event URL 中的 token 保持一致。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li><p>在 Jenkins Job pipeline 里添加了这个代码片段 <code>echo pr_id is $&#123;pr_id&#125;</code> 用来检查输出 Pull Request ID 是否如预期。</p>\n</li>\n<li><p>然后在配置好的 Bitbucket 仓库下面创建一个 Pull Request</p>\n</li>\n<li><p>Jenkins Job 被 Pull Request Open 事件自动触发并执行了</p>\n<p> <img src=\"/2020/08/bitbucket-pull-request-event/auto-trigger-jenkins.png\" alt=\"Jenkins 通过事件别自动执行\"></p>\n</li>\n<li><p>通过 Jenkins 的输出日志看到成功获取到了这个 Pull Request ID 值</p>\n<p> <img src=\"/2020/08/bitbucket-pull-request-event/pull-request-id.png\" alt=\"获取到了 Pull Request ID\"></p>\n</li>\n</ol>\n<h2 id=\"使用扩展\"><a href=\"#使用扩展\" class=\"headerlink\" title=\"使用扩展\"></a>使用扩展</h2><p>假如你有个程序，可以通过传入的 Pull Request ID 并借助 Bitbucket REST API 来获取并分析指定 Pull Request 的内容的。比如获取相关文件的历史记录，从而知道这些文件谁修改的最多以及这次修改涉及到了哪些 Jira 单号，从而做一些 Review 或是执行回归测试的推荐等等。</p>\n<p>有了这个 PR ID 就可以通过 Jenkins 来自动触发去执行你程序了。</p>\n<p>以上的这种方法适合不想或是不知道如何监听 Git 服务器（Bitbucket、GitHub 或是 GitLab 等）事件而需要要单独创建一个服务而准备的。如果你有什么很好的实践，期待你的留言分享。</p>\n","more":"<ol>\n<li>配置 Bitucket 的 Webhook</li>\n<li>通过 Jenkins generic-webhook-trigger 插件接收 Webhook 的 Event 事件</li>\n</ol>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><h3 id=\"设置-Bitbucket-Webhook\"><a href=\"#设置-Bitbucket-Webhook\" class=\"headerlink\" title=\"设置 Bitbucket Webhook\"></a>设置 Bitbucket Webhook</h3><p>在需要监听的 Bitbucket 仓库中创建一个 webhook，如下：</p>\n<ul>\n<li>Name: <code>test-demo</code></li>\n<li>URL: <code>http://JENKINS_URL/generic-webhook-trigger/invoke?token=test-demo</code></li>\n</ul>\n<p><img src=\"/2020/08/bitbucket-pull-request-event/webhook.png\" alt=\"创建一个 webhook\"></p>\n<p>备注：Bitbucket 中还有一个另外一个设置项，根据我的测试，该设置项 <strong>Post Webhooks</strong> 与上面的 <strong>Webhooks</strong> 都能实现本文要实现的功能。</p>\n<h3 id=\"2-配置-Jenkins-Job\"><a href=\"#2-配置-Jenkins-Job\" class=\"headerlink\" title=\"2. 配置 Jenkins Job\"></a>2. 配置 Jenkins Job</h3><p><img src=\"/2020/08/bitbucket-pull-request-event/generic-config.png\" alt=\"配置 Jenkins: 获取 Pull Request ID\"></p>\n<p>想获取其他 Event 信息，比如 PR title, commit 等，请参考这个链接 <a href=\"https://github.com/jenkinsci/generic-webhook-trigger-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/gwt/bdd/bitbucket-server/bitbucket-server-pull-request.feature\">bitbucket-server-pull-request.feature</a>，按照上面的设置即可。</p>\n<p><img src=\"/2020/08/bitbucket-pull-request-event/generic-config-token.png\" alt=\"配置 Jenkins: token\"></p>\n<p>这里的 token 值 <code>test-demo</code> 可以任意起名，但要与 Bitbucket event URL 中的 token 保持一致。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><ol>\n<li><p>在 Jenkins Job pipeline 里添加了这个代码片段 <code>echo pr_id is $&#123;pr_id&#125;</code> 用来检查输出 Pull Request ID 是否如预期。</p>\n</li>\n<li><p>然后在配置好的 Bitbucket 仓库下面创建一个 Pull Request</p>\n</li>\n<li><p>Jenkins Job 被 Pull Request Open 事件自动触发并执行了</p>\n<p> <img src=\"/2020/08/bitbucket-pull-request-event/auto-trigger-jenkins.png\" alt=\"Jenkins 通过事件别自动执行\"></p>\n</li>\n<li><p>通过 Jenkins 的输出日志看到成功获取到了这个 Pull Request ID 值</p>\n<p> <img src=\"/2020/08/bitbucket-pull-request-event/pull-request-id.png\" alt=\"获取到了 Pull Request ID\"></p>\n</li>\n</ol>\n<h2 id=\"使用扩展\"><a href=\"#使用扩展\" class=\"headerlink\" title=\"使用扩展\"></a>使用扩展</h2><p>假如你有个程序，可以通过传入的 Pull Request ID 并借助 Bitbucket REST API 来获取并分析指定 Pull Request 的内容的。比如获取相关文件的历史记录，从而知道这些文件谁修改的最多以及这次修改涉及到了哪些 Jira 单号，从而做一些 Review 或是执行回归测试的推荐等等。</p>\n<p>有了这个 PR ID 就可以通过 Jenkins 来自动触发去执行你程序了。</p>\n<p>以上的这种方法适合不想或是不知道如何监听 Git 服务器（Bitbucket、GitHub 或是 GitLab 等）事件而需要要单独创建一个服务而准备的。如果你有什么很好的实践，期待你的留言分享。</p>","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"Bitbucket","path":"api/tags/Bitbucket.json"},{"name":"Webhook","path":"api/tags/Webhook.json"}]}