{"title":"项目必备：Git仓库提交信息和分支创建规范的制定与实施","slug":"2020/07/commit-messages-specification","date":"2020-07-26T00:39:22.000Z","updated":"2020-09-24T11:41:39.673Z","comments":true,"path":"api/articles/2020/07/commit-messages-specification.json","excerpt":"为什么要标准化提交信息1. 没有规范的提交信息先看一个没有任何规范的 Git 提交信息记录。从这个提交信息里你不知道他修改了什么，修改意图是什么。 [Figure] 特别是对于一个团队，当很多人在一起合作开发一个项目的时候，预先设定好提交信息规范，对于项目的长远发展以及后续人员加入和维护都至关重要。因此对于一个长期发展的项目必须要有良好的信息信息规范的约定。先看两个例子：总结以下几个好处：有助于他人更好的理解你的变更意图，更容易贡献/修改代码。结构化的提交信息有助于自动化脚本的识别，便于CI/CD。提供自动化生成 CHANGELOGs 的能力。最后，这也是体现了一个程序员的自我修养。2. 有规范的提交信息","covers":["/2020/07/commit-messages-specification/bad-commit-message.png","/2020/07/commit-messages-specification/angular-commit-message.png","/2020/07/commit-messages-specification/git-hook.png","/2020/07/commit-messages-specification/commit-checker.png"],"content":"<h2 id=\"为什么要标准化提交信息\"><a href=\"#为什么要标准化提交信息\" class=\"headerlink\" title=\"为什么要标准化提交信息\"></a>为什么要标准化提交信息</h2><h3 id=\"1-没有规范的提交信息\"><a href=\"#1-没有规范的提交信息\" class=\"headerlink\" title=\"1. 没有规范的提交信息\"></a>1. 没有规范的提交信息</h3><p>先看一个没有任何规范的 Git 提交信息记录。从这个提交信息里你不知道他修改了什么，修改意图是什么。</p>\n<p><img src=\"/2020/07/commit-messages-specification/bad-commit-message.png\" alt=\"没有规范的 Git 提交信息\"></p>\n<p>特别是对于一个团队，当很多人在一起合作开发一个项目的时候，预先设定好提交信息规范，对于项目的长远发展以及后续人员加入和维护都至关重要。</p>\n<p>因此对于一个长期发展的项目必须要有良好的信息信息规范的约定。先看两个例子：总结以下几个好处：</p>\n<ol>\n<li>有助于他人更好的理解你的变更意图，更容易贡献/修改代码。</li>\n<li>结构化的提交信息有助于自动化脚本的识别，便于CI/CD。</li>\n<li>提供自动化生成 <code>CHANGELOGs</code> 的能力。</li>\n<li>最后，这也是体现了一个程序员的自我修养。</li>\n</ol>\n<h3 id=\"2-有规范的提交信息\"><a href=\"#2-有规范的提交信息\" class=\"headerlink\" title=\"2. 有规范的提交信息\"></a>2. 有规范的提交信息</h3><a id=\"more\"></a>\n\n<p>让我们再看看一个有规范的提交信息。这是 Angular 有规范的提交信息，它遵循了常规提交 <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\">Conventional Commits</a>。</p>\n<p><img src=\"/2020/07/commit-messages-specification/angular-commit-message.png\" alt=\"有规范的 Git 提交信息\"></p>\n<p>这也是我检索到唯一应用最广泛的Git提交信息规范，已经有不少的项目在follow。当然，如果你的项目已经有了很好的规范，那继续保持；如果没有，建议参考这个规范。</p>\n<h2 id=\"解决规范问题\"><a href=\"#解决规范问题\" class=\"headerlink\" title=\"解决规范问题\"></a>解决规范问题</h2><p>在解决规范问题上，应该从两方面着手：</p>\n<ul>\n<li>首先，为团队制定出提交信息以及创建分支规范，让团队了解并遵守。</li>\n<li>然后，在提交代码或创建分支时，设置 Git Hook。把不规范的提交排除在外，比如提示用户当前提交不符合规范。</li>\n</ul>\n<h3 id=\"制定Git提交信息规范\"><a href=\"#制定Git提交信息规范\" class=\"headerlink\" title=\"制定Git提交信息规范\"></a>制定Git提交信息规范</h3><p>制定合理的规范，最有效的方法是参考软件行业里是否有大家通用的规范。<a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\">Conventional Commits</a> 目前是最为流行的规范，很多项目在follow，比如 Auglar 等项目在使用。</p>\n<p>在此基础上，我们可以制定适合自己团队的规范，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JIRA-1234 feat: support for async execution</span><br><span class=\"line\"></span><br><span class=\"line\">^-------^ ^--^: ^-------------------------^</span><br><span class=\"line\">|         |     |</span><br><span class=\"line\">|         |     +--&gt; Summary in present tense.</span><br><span class=\"line\">|         |</span><br><span class=\"line\">|         +--&gt; Type: feat, fix, docs, style, refactor, perf, test or chore.</span><br><span class=\"line\">|</span><br><span class=\"line\">+--&gt; Jira ticket number</span><br><span class=\"line\"></span><br><span class=\"line\">Type</span><br><span class=\"line\"></span><br><span class=\"line\">Must be one of the following:</span><br><span class=\"line\"></span><br><span class=\"line\">    feat: A new feature</span><br><span class=\"line\">    fix: A bug fix</span><br><span class=\"line\">    docs: Documentation only changes</span><br><span class=\"line\">    style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class=\"line\">    refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class=\"line\">    perf: A code change that improves performance</span><br><span class=\"line\">    test: Adding missing or correcting existing tests</span><br><span class=\"line\">    chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置-Git-Hooks\"><a href=\"#设置-Git-Hooks\" class=\"headerlink\" title=\"设置 Git Hooks\"></a>设置 Git Hooks</h2><p>以 Bitbuket 为例，开启 <a href=\"https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket\" target=\"_blank\" rel=\"noopener\">Yet Another Commit Checker</a> 这个免费插件。</p>\n<p>开启 Yet Another Commit Checker</p>\n<p><img src=\"/2020/07/commit-messages-specification/git-hook.png\" alt=\"开启 Yet Another Commit Checker\"></p>\n<p>Commit Checker 设置，下面进行逐一介绍</p>\n<p><img src=\"/2020/07/commit-messages-specification/commit-checker.png\" alt=\"Yet Another Commit Checker 插件的其他设置选项\"></p>\n<h3 id=\"1-开启-Require-Valid-JIRA-Issue-s\"><a href=\"#1-开启-Require-Valid-JIRA-Issue-s\" class=\"headerlink\" title=\"1. 开启 Require Valid JIRA Issue(s)\"></a>1. 开启 Require Valid JIRA Issue(s)</h3><p>这个功能的开启，在开发者提交信息的时候如果不含有相关联的 Jira 单号，或是这个单号不存在，那么都会提交失败。这样就强制将代码与 Jira 单号进行关联。</p>\n<h3 id=\"2-Commit-Message-Regex\"><a href=\"#2-Commit-Message-Regex\" class=\"headerlink\" title=\"2. Commit Message Regex\"></a>2. Commit Message Regex</h3><p>我设置了 <code>[A-Z\\-0-9]+ .*</code> 这样的正则表达式，这就要求比如有以这样的 Jira 单号 ABCD-1234 为开头，并且在写描述之前必须与 Jira 单号之前有一个空格。</p>\n<p>通过以上两个功能的设置，就将提交信息限定为如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCD-1234 Balabala......</span><br></pre></td></tr></table></figure>\n\n<p>当然还有更复杂的正则表达式，比如如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[A-Z-0-9]+ .*(?&lt;type&gt;chore|ci|docs|feat|fix|perf|refactor|revert|style|test|Bld|¯\\\\_\\(ツ\\)_\\&#x2F;¯)(?&lt;scope&gt;\\(\\w+\\)?((?&#x3D;:\\s)|(?&#x3D;!:\\s)))?(?&lt;breaking&gt;!)?(?&lt;subject&gt;:\\s.*)?|^(?&lt;merge&gt;Merge.* \\w+)|^(?&lt;revert&gt;Revert.* \\w+)</span><br></pre></td></tr></table></figure>\n\n<p>第一眼看起来可能有点头晕，这个正则表达式不但限制了开头必须以 JIRA 单号开始，中间有一个空格，之后要有 type 类型，最后是描述。</p>\n<p>这里一并考虑了如果是 Merge 或是 Revert 会产生其他的描述信息。如果你要在你的 Git 仓库里也要设置这样严格并且复杂的正则表达式，建议一定要经过充分的考虑和测试才把它正式放入你的 Git 仓库的 Hooks 设置中。</p>\n<p>通过以下的测试用例就很容易理解具体的提交规范是什么样子的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 测试通过的用例</span><br><span class=\"line\">NV-1234 chore: change build progress</span><br><span class=\"line\">DT-123456 docs: update xdemo usage</span><br><span class=\"line\">QA-123 ci: update jenkins automatic backup</span><br><span class=\"line\">CC-1234 feat: new fucntional about sync</span><br><span class=\"line\">Merge branch master into develop</span><br><span class=\"line\">Reverted: Revert support feature &amp; bugfix branches build</span><br><span class=\"line\">Merge pull request #36 in cicd from test to develop</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试不通过的用例</span><br><span class=\"line\">NV-1234 build: update</span><br><span class=\"line\">NV-1234 Chore: change progress</span><br><span class=\"line\">DT-123456 Docs: update xdemo</span><br><span class=\"line\">QA-123ci: update jenkins automatic backup</span><br><span class=\"line\">CC-1234 Feat: new fucntional about sync</span><br><span class=\"line\">DT-17734: 8.2.2 merge from CF1&#x2F;2- Enhance PORT.STATUS</span><br><span class=\"line\">DT-17636 fix AIX cord dump issue</span><br><span class=\"line\">DT-18183 Fix the UDTHOME problem for secure telnet</span><br><span class=\"line\">DT-18183 Add new condition to get UDTHOME</span><br><span class=\"line\">DT-15567 code merge by Peter Shen.</span><br></pre></td></tr></table></figure>\n\n<p>以上正则的测试结果可以在这里找到 <a href=\"https://regex101.com/r/5m0SIJ/10\" target=\"_blank\" rel=\"noopener\">https://regex101.com/r/5m0SIJ/10</a></p>\n<h3 id=\"3-Commit-Regex-Error\"><a href=\"#3-Commit-Regex-Error\" class=\"headerlink\" title=\"3. Commit Regex Error\"></a>3. Commit Regex Error</h3><p>这个是用来团队成员在提交的时候，如果不符合规范失败了，给出合理的提示信息，有助于找到问题所在。比如可以是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commit Message Specifications:</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Jira-ticket-number&gt; &lt;type&gt;: &lt;Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\"></span><br><span class=\"line\">ABC-1234 feat: Support for async execution</span><br><span class=\"line\"></span><br><span class=\"line\">1. Between Jira ticket number and type MUST has one space.</span><br><span class=\"line\">2. Between type and description MUST has a colon and a space.</span><br><span class=\"line\"></span><br><span class=\"line\">Type MUST be one of the following and lowercase</span><br><span class=\"line\"></span><br><span class=\"line\">feat: A new feature</span><br><span class=\"line\">fix: A bug fix</span><br><span class=\"line\">docs: Documentation only changes</span><br><span class=\"line\">style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class=\"line\">refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class=\"line\">perf: A code change that improves performance</span><br><span class=\"line\">test: Adding missing or correcting existing tests</span><br><span class=\"line\">chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Branch-Name-Regex\"><a href=\"#4-Branch-Name-Regex\" class=\"headerlink\" title=\"4. Branch Name Regex\"></a>4. Branch Name Regex</h3><p>Bitbucket Hooks 同样还支持分支正则表达式。如果设置了相应的正则表达后，开发在创建分支时，只有符合正则表达式的条件才能创建分支。</p>\n<p>分享一个分支正则表达式 <code>^(bugfix|feature|release|hotfix).*|(master)|(.*-dev)</code></p>\n<p>这里限制了所有的分支必须以 bugfix, feature, release, hotfix 开头或是也可以这样的 v1.0-dev 这种类。</p>\n<p>你可以根据上面的正则表达式来设计属于自己项目的分支正则表达式。</p>\n<h3 id=\"5-Branch-Name-Regex-Error\"><a href=\"#5-Branch-Name-Regex-Error\" class=\"headerlink\" title=\"5. Branch Name Regex Error\"></a>5. Branch Name Regex Error</h3><p>这个是用来团队成员在推送分支的时候，如果不符合规范，推送失败，给出合理的提示信息。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branches must begin with these types: bugfix&#x2F; feature&#x2F; release&#x2F; hotfix&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-其他设置\"><a href=\"#6-其他设置\" class=\"headerlink\" title=\"6. 其他设置\"></a>6. 其他设置</h3><p>另外还有一些其他的设置，比如关联的 Jira 单子必须处于什么样的状态，这个可以防止已经关闭的 Jira 单子，开发还往上面偷偷的修改代码，这时候测试也发现不了。</p>\n<p>还有 Require Matching Committer Email 和 Require Matching Committer Name 来限定开发者必须配置好与登录用户名和邮箱相匹配的用户名和邮箱，来规范提交信息里显示的用户名和邮箱，也方便进行 Git 信息的统计等后续数据的收集。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote>\n<p>Conventional Commits <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\">https://www.conventionalcommits.org/en/v1.0.0/</a> <br>Angular Commit Guidelines: <a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits\" target=\"_blank\" rel=\"noopener\">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits</a> <br>Projects Using Conventional Commits: <a href=\"https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits\" target=\"_blank\" rel=\"noopener\">https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits</a> <br>Yet Another Commit Checker: <a href=\"https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket\" target=\"_blank\" rel=\"noopener\">https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket</a></p>\n</blockquote>\n","more":"<p>让我们再看看一个有规范的提交信息。这是 Angular 有规范的提交信息，它遵循了常规提交 <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\">Conventional Commits</a>。</p>\n<p><img src=\"/2020/07/commit-messages-specification/angular-commit-message.png\" alt=\"有规范的 Git 提交信息\"></p>\n<p>这也是我检索到唯一应用最广泛的Git提交信息规范，已经有不少的项目在follow。当然，如果你的项目已经有了很好的规范，那继续保持；如果没有，建议参考这个规范。</p>\n<h2 id=\"解决规范问题\"><a href=\"#解决规范问题\" class=\"headerlink\" title=\"解决规范问题\"></a>解决规范问题</h2><p>在解决规范问题上，应该从两方面着手：</p>\n<ul>\n<li>首先，为团队制定出提交信息以及创建分支规范，让团队了解并遵守。</li>\n<li>然后，在提交代码或创建分支时，设置 Git Hook。把不规范的提交排除在外，比如提示用户当前提交不符合规范。</li>\n</ul>\n<h3 id=\"制定Git提交信息规范\"><a href=\"#制定Git提交信息规范\" class=\"headerlink\" title=\"制定Git提交信息规范\"></a>制定Git提交信息规范</h3><p>制定合理的规范，最有效的方法是参考软件行业里是否有大家通用的规范。<a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\">Conventional Commits</a> 目前是最为流行的规范，很多项目在follow，比如 Auglar 等项目在使用。</p>\n<p>在此基础上，我们可以制定适合自己团队的规范，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JIRA-1234 feat: support for async execution</span><br><span class=\"line\"></span><br><span class=\"line\">^-------^ ^--^: ^-------------------------^</span><br><span class=\"line\">|         |     |</span><br><span class=\"line\">|         |     +--&gt; Summary in present tense.</span><br><span class=\"line\">|         |</span><br><span class=\"line\">|         +--&gt; Type: feat, fix, docs, style, refactor, perf, test or chore.</span><br><span class=\"line\">|</span><br><span class=\"line\">+--&gt; Jira ticket number</span><br><span class=\"line\"></span><br><span class=\"line\">Type</span><br><span class=\"line\"></span><br><span class=\"line\">Must be one of the following:</span><br><span class=\"line\"></span><br><span class=\"line\">    feat: A new feature</span><br><span class=\"line\">    fix: A bug fix</span><br><span class=\"line\">    docs: Documentation only changes</span><br><span class=\"line\">    style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class=\"line\">    refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class=\"line\">    perf: A code change that improves performance</span><br><span class=\"line\">    test: Adding missing or correcting existing tests</span><br><span class=\"line\">    chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置-Git-Hooks\"><a href=\"#设置-Git-Hooks\" class=\"headerlink\" title=\"设置 Git Hooks\"></a>设置 Git Hooks</h2><p>以 Bitbuket 为例，开启 <a href=\"https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket\" target=\"_blank\" rel=\"noopener\">Yet Another Commit Checker</a> 这个免费插件。</p>\n<p>开启 Yet Another Commit Checker</p>\n<p><img src=\"/2020/07/commit-messages-specification/git-hook.png\" alt=\"开启 Yet Another Commit Checker\"></p>\n<p>Commit Checker 设置，下面进行逐一介绍</p>\n<p><img src=\"/2020/07/commit-messages-specification/commit-checker.png\" alt=\"Yet Another Commit Checker 插件的其他设置选项\"></p>\n<h3 id=\"1-开启-Require-Valid-JIRA-Issue-s\"><a href=\"#1-开启-Require-Valid-JIRA-Issue-s\" class=\"headerlink\" title=\"1. 开启 Require Valid JIRA Issue(s)\"></a>1. 开启 Require Valid JIRA Issue(s)</h3><p>这个功能的开启，在开发者提交信息的时候如果不含有相关联的 Jira 单号，或是这个单号不存在，那么都会提交失败。这样就强制将代码与 Jira 单号进行关联。</p>\n<h3 id=\"2-Commit-Message-Regex\"><a href=\"#2-Commit-Message-Regex\" class=\"headerlink\" title=\"2. Commit Message Regex\"></a>2. Commit Message Regex</h3><p>我设置了 <code>[A-Z\\-0-9]+ .*</code> 这样的正则表达式，这就要求比如有以这样的 Jira 单号 ABCD-1234 为开头，并且在写描述之前必须与 Jira 单号之前有一个空格。</p>\n<p>通过以上两个功能的设置，就将提交信息限定为如下格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCD-1234 Balabala......</span><br></pre></td></tr></table></figure>\n\n<p>当然还有更复杂的正则表达式，比如如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^[A-Z-0-9]+ .*(?&lt;type&gt;chore|ci|docs|feat|fix|perf|refactor|revert|style|test|Bld|¯\\\\_\\(ツ\\)_\\&#x2F;¯)(?&lt;scope&gt;\\(\\w+\\)?((?&#x3D;:\\s)|(?&#x3D;!:\\s)))?(?&lt;breaking&gt;!)?(?&lt;subject&gt;:\\s.*)?|^(?&lt;merge&gt;Merge.* \\w+)|^(?&lt;revert&gt;Revert.* \\w+)</span><br></pre></td></tr></table></figure>\n\n<p>第一眼看起来可能有点头晕，这个正则表达式不但限制了开头必须以 JIRA 单号开始，中间有一个空格，之后要有 type 类型，最后是描述。</p>\n<p>这里一并考虑了如果是 Merge 或是 Revert 会产生其他的描述信息。如果你要在你的 Git 仓库里也要设置这样严格并且复杂的正则表达式，建议一定要经过充分的考虑和测试才把它正式放入你的 Git 仓库的 Hooks 设置中。</p>\n<p>通过以下的测试用例就很容易理解具体的提交规范是什么样子的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 测试通过的用例</span><br><span class=\"line\">NV-1234 chore: change build progress</span><br><span class=\"line\">DT-123456 docs: update xdemo usage</span><br><span class=\"line\">QA-123 ci: update jenkins automatic backup</span><br><span class=\"line\">CC-1234 feat: new fucntional about sync</span><br><span class=\"line\">Merge branch master into develop</span><br><span class=\"line\">Reverted: Revert support feature &amp; bugfix branches build</span><br><span class=\"line\">Merge pull request #36 in cicd from test to develop</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试不通过的用例</span><br><span class=\"line\">NV-1234 build: update</span><br><span class=\"line\">NV-1234 Chore: change progress</span><br><span class=\"line\">DT-123456 Docs: update xdemo</span><br><span class=\"line\">QA-123ci: update jenkins automatic backup</span><br><span class=\"line\">CC-1234 Feat: new fucntional about sync</span><br><span class=\"line\">DT-17734: 8.2.2 merge from CF1&#x2F;2- Enhance PORT.STATUS</span><br><span class=\"line\">DT-17636 fix AIX cord dump issue</span><br><span class=\"line\">DT-18183 Fix the UDTHOME problem for secure telnet</span><br><span class=\"line\">DT-18183 Add new condition to get UDTHOME</span><br><span class=\"line\">DT-15567 code merge by Peter Shen.</span><br></pre></td></tr></table></figure>\n\n<p>以上正则的测试结果可以在这里找到 <a href=\"https://regex101.com/r/5m0SIJ/10\" target=\"_blank\" rel=\"noopener\">https://regex101.com/r/5m0SIJ/10</a></p>\n<h3 id=\"3-Commit-Regex-Error\"><a href=\"#3-Commit-Regex-Error\" class=\"headerlink\" title=\"3. Commit Regex Error\"></a>3. Commit Regex Error</h3><p>这个是用来团队成员在提交的时候，如果不符合规范失败了，给出合理的提示信息，有助于找到问题所在。比如可以是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commit Message Specifications:</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Jira-ticket-number&gt; &lt;type&gt;: &lt;Description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\"></span><br><span class=\"line\">ABC-1234 feat: Support for async execution</span><br><span class=\"line\"></span><br><span class=\"line\">1. Between Jira ticket number and type MUST has one space.</span><br><span class=\"line\">2. Between type and description MUST has a colon and a space.</span><br><span class=\"line\"></span><br><span class=\"line\">Type MUST be one of the following and lowercase</span><br><span class=\"line\"></span><br><span class=\"line\">feat: A new feature</span><br><span class=\"line\">fix: A bug fix</span><br><span class=\"line\">docs: Documentation only changes</span><br><span class=\"line\">style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class=\"line\">refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class=\"line\">perf: A code change that improves performance</span><br><span class=\"line\">test: Adding missing or correcting existing tests</span><br><span class=\"line\">chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-Branch-Name-Regex\"><a href=\"#4-Branch-Name-Regex\" class=\"headerlink\" title=\"4. Branch Name Regex\"></a>4. Branch Name Regex</h3><p>Bitbucket Hooks 同样还支持分支正则表达式。如果设置了相应的正则表达后，开发在创建分支时，只有符合正则表达式的条件才能创建分支。</p>\n<p>分享一个分支正则表达式 <code>^(bugfix|feature|release|hotfix).*|(master)|(.*-dev)</code></p>\n<p>这里限制了所有的分支必须以 bugfix, feature, release, hotfix 开头或是也可以这样的 v1.0-dev 这种类。</p>\n<p>你可以根据上面的正则表达式来设计属于自己项目的分支正则表达式。</p>\n<h3 id=\"5-Branch-Name-Regex-Error\"><a href=\"#5-Branch-Name-Regex-Error\" class=\"headerlink\" title=\"5. Branch Name Regex Error\"></a>5. Branch Name Regex Error</h3><p>这个是用来团队成员在推送分支的时候，如果不符合规范，推送失败，给出合理的提示信息。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Branches must begin with these types: bugfix&#x2F; feature&#x2F; release&#x2F; hotfix&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-其他设置\"><a href=\"#6-其他设置\" class=\"headerlink\" title=\"6. 其他设置\"></a>6. 其他设置</h3><p>另外还有一些其他的设置，比如关联的 Jira 单子必须处于什么样的状态，这个可以防止已经关闭的 Jira 单子，开发还往上面偷偷的修改代码，这时候测试也发现不了。</p>\n<p>还有 Require Matching Committer Email 和 Require Matching Committer Name 来限定开发者必须配置好与登录用户名和邮箱相匹配的用户名和邮箱，来规范提交信息里显示的用户名和邮箱，也方便进行 Git 信息的统计等后续数据的收集。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><blockquote>\n<p>Conventional Commits <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\" target=\"_blank\" rel=\"noopener\">https://www.conventionalcommits.org/en/v1.0.0/</a> <br>Angular Commit Guidelines: <a href=\"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits\" target=\"_blank\" rel=\"noopener\">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits</a> <br>Projects Using Conventional Commits: <a href=\"https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits\" target=\"_blank\" rel=\"noopener\">https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits</a> <br>Yet Another Commit Checker: <a href=\"https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket\" target=\"_blank\" rel=\"noopener\">https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket</a></p>\n</blockquote>","categories":[{"name":"Git","path":"api/categories/Git.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"Branch","path":"api/tags/Branch.json"},{"name":"Specification","path":"api/tags/Specification.json"},{"name":"Conventional Commits","path":"api/tags/Conventional Commits.json"}]}