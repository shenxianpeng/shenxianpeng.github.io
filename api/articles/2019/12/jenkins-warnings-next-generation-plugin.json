{"title":"Jenkins Warnings Next Generation 插件","slug":"2019/12/jenkins-warnings-next-generation-plugin","date":"2019-12-28T15:16:30.000Z","updated":"2024-04-03T04:07:18.013Z","comments":true,"path":"api/articles/2019/12/jenkins-warnings-next-generation-plugin.json","excerpt":"Jenkins Warnings Next Generation 插件Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多支持的报告格式。","covers":["/2019/12/jenkins-warnings-next-generation-plugin/01.png","/2019/12/jenkins-warnings-next-generation-plugin/02.png","/2019/12/jenkins-warnings-next-generation-plugin/03.png","/2019/12/jenkins-warnings-next-generation-plugin/04.png","/2019/12/jenkins-warnings-next-generation-plugin/05.png","/2019/12/jenkins-warnings-next-generation-plugin/06.png","/2019/12/jenkins-warnings-next-generation-plugin/07.png","/2019/12/jenkins-warnings-next-generation-plugin/08.png","/2019/12/jenkins-warnings-next-generation-plugin/09.png","/2019/12/jenkins-warnings-next-generation-plugin/10.png","/2019/12/jenkins-warnings-next-generation-plugin/12.png","/2019/12/jenkins-warnings-next-generation-plugin/13.png","/2019/12/jenkins-warnings-next-generation-plugin/14.png","/2019/12/jenkins-warnings-next-generation-plugin/15.png","/2019/12/jenkins-warnings-next-generation-plugin/16.png","/2019/12/jenkins-warnings-next-generation-plugin/17.png","/2019/12/jenkins-warnings-next-generation-plugin/18.png","/2019/12/jenkins-warnings-next-generation-plugin/19.png","/2019/12/jenkins-warnings-next-generation-plugin/20.png","/2019/12/jenkins-warnings-next-generation-plugin/20.png","/2019/12/jenkins-warnings-next-generation-plugin/22.png","/2019/12/jenkins-warnings-next-generation-plugin/23.png","/2019/12/jenkins-warnings-next-generation-plugin/24.png","/2019/12/jenkins-warnings-next-generation-plugin/25.png","/2019/12/jenkins-warnings-next-generation-plugin/26.png","/2019/12/jenkins-warnings-next-generation-plugin/27.png"],"content":"<h2 id=\"Jenkins-Warnings-Next-Generation-插件\"><a href=\"#Jenkins-Warnings-Next-Generation-插件\" class=\"headerlink\" title=\"Jenkins Warnings Next Generation 插件\"></a>Jenkins Warnings Next Generation 插件</h2><p>Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md\">支持的报告格式</a>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"支持的项目类型\"><a href=\"#支持的项目类型\" class=\"headerlink\" title=\"支持的项目类型\"></a>支持的项目类型</h3><p>Warnings Next Generation 插件支持以下 Jenkins 项目类型：</p>\n<ul>\n<li>自由式项目</li>\n<li>Maven 项目</li>\n<li>矩阵项目</li>\n<li>脚本化管道（顺序和并行步骤）</li>\n<li>声明式管道（顺序步骤和并行步骤）</li>\n<li>多分支管道</li>\n</ul>\n<h3 id=\"功能概述\"><a href=\"#功能概述\" class=\"headerlink\" title=\"功能概述\"></a>功能概述</h3><p>当作为后续构建任务操作（或步骤）添加时，Warnings Next Generation 插件提供以下功能：</p>\n<ol>\n<li>该插件会扫描 Jenkins 版本的控制台日志或你工作区中的文件中是否存在任何问题。支持一百多种<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md\">报告格式</a>，它可以检测到的问题包括：</li>\n</ol>\n<ul>\n<li>来自编译器的错误（C，C＃，Java等）</li>\n<li>来自静态分析工具（CheckStyle，StyleCop，SpotBugs 等）的警告</li>\n<li>来自复制粘贴检测器（CPD, Simian 等）的重复</li>\n<li>漏洞</li>\n<li>在源文件的注释中打开任务</li>\n</ul>\n<ol start=\"2\">\n<li>该插件会发布有关在构建中发现的问题的报告，因此可以从以下位置导航到摘要报告，主构建页面。你还可以从那里深入了解细节：</li>\n</ol>\n<ul>\n<li>发行新的，固定的和未解决的问题</li>\n<li>按严重性，类别，类型，模块或程序包分发问题</li>\n<li>所有问题的列表，包括来自报告工具的有用评论</li>\n<li>受影响文件的带注释的源代码</li>\n<li>问题趋势图</li>\n</ul>\n<p>该插件不会运行静态分析，它只是可视化此类工具报告的结果。你仍然需要在构建文件或 Jenkinsfile 中启用和配置静态分析工具。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>你可以在 Jenkins 作业配置用户界面中配置插件的每个选项（在自由式，maven 或矩阵作业中）。在这里你需要在工作中添加并启用生成后操作“记录编译器警告和静态分析结果”。</p>\n<p>在管道中，将通过添加 recordIssues 激活插件。也可以使用相同的用户界面来配置此步骤（通过使用 Snippet 编辑器）。请注意，对于脚本化管道，一些其他功能可用于汇总和分组问题，有关详细信息，请参阅“高级管道配置”部分。</p>\n<p>在以下各节中，将同时显示图形配置和管道配置。</p>\n<h3 id=\"工具选择\"><a href=\"#工具选择\" class=\"headerlink\" title=\"工具选择\"></a>工具选择</h3><p>下图显示了插件的基本配置：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/01.png\" alt=\"静态分析工具\"></p>\n<p>首先，你需要指定用于创建问题的工具，根据所选工具，你可能还会配置一些其他参数。</p>\n<p>对于所有读取报告文件的解析器，你需要指定应分析和扫描问题的报告文件的模式。如果未指定模式，则将扫描构建的控制台日志。对于几种流行的工具，提供了默认模式，在这种情况下，如果模式为空，则将使用默认模式。</p>\n<p>为了让扫描程序正确解析你的报告，需要设置文件的编码，否则将使用平台编码，这可能不正确。</p>\n<p>每个工具都由一个 ID 标识，该 ID 用作分析结果的 URL。对于每个工具，都提供了一个默认 URL（和名称），可以根据需要进行更改。例如，如果你打算多次使用解析器，则需要为每个调用指定不同的 ID。</p>\n<p>你可以指定将用于同一配置的多个工具（和模式），由于 Jenkins 的技术（或市场）限制，无法通过使用多个后期构建操作来选择不同的配置。</p>\n<p>通过使用“汇总结果”复选框，可以使用一项新功能。如果选中此选项，则将创建一个结果，其中包含所选工具的所有问题的汇总。这是之前静态分析收集器插件提供的。激活此选项后，你将获得所有问题的唯一入口点。以下屏幕截图显示了此新行为：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/02.png\" alt=\"汇总结果\"></p>\n<p>如果未启用此选项，则将为每个工具创建单独的结果。此结果具有唯一的 URL 和图标，因此你可以快速查看创建的报告之间的区别：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/03.png\" alt=\"分开的结果\"></p>\n<p>在基本配置部分中，你还可以选择是否针对失败的构建也运行该步骤。默认情况下禁用此选项，因为如果构建失败，分析结果可能会不准确。</p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues(</span><br><span class=\"line\">    enabledForFailure: <span class=\"literal\">true</span>, aggregatingResults: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    tools: [java(), checkStyle(pattern: <span class=\"string\">&#x27;checkstyle-result.xml&#x27;</span>, reportEncoding: <span class=\"string\">&#x27;UTF-8&#x27;</span>)]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如果使用单个工具，则可以使用属性工具代替工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues enabledForFailure: <span class=\"literal\">true</span>, aggregatingResults: <span class=\"literal\">true</span>, tool: checkStyle(pattern: <span class=\"string\">&#x27;checkstyle-result.xml&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建对自定义工具的支持\"><a href=\"#创建对自定义工具的支持\" class=\"headerlink\" title=\"创建对自定义工具的支持\"></a>创建对自定义工具的支持</h3><p>如果你的项目中没有内置工具，则可以通过多种方式添加其他工具。</p>\n<h4 id=\"将问题导出为受支持的格式\"><a href=\"#将问题导出为受支持的格式\" class=\"headerlink\" title=\"将问题导出为受支持的格式\"></a>将问题导出为受支持的格式</h4><p>将工具的分析结果获取到 Warnings 插件中的一种简单方法是将信息导出为一种已经支持的格式。例如，几种工具将其问题导出为 CheckStyle 或 PMD 格式。如果要使用警告插件的所有功能，则最好将信息导出为本机 XML 或 JSON 格式（此解析器使用 ID 问题）。<br>这些格式已经在用户界面中注册，你可以直接使用它们。你甚至可以在包含单行 JSON 问题的简单日志文件中提供问题，请参见示例。</p>\n<p>这是一个示例步骤，可用于解析本机 JSON（或 XML）格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues(tool: issues())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用自定义插件部署新工具\"><a href=\"#使用自定义插件部署新工具\" class=\"headerlink\" title=\"使用自定义插件部署新工具\"></a>使用自定义插件部署新工具</h4><p>最灵活的方法是通过编写将在你自己的小型 Jenkins 插件中部署的 Java 类来定义新工具，有关详细信息，请参见文档“为自定义静态分析工具提供支持”。</p>\n<h4 id=\"使用Groovy解析器创建新工具\"><a href=\"#使用Groovy解析器创建新工具\" class=\"headerlink\" title=\"使用Groovy解析器创建新工具\"></a>使用Groovy解析器创建新工具</h4><p>如果日志消息的格式非常简单，则可以通过在 Jenkins 的用户界面中创建简单的工具配置来定义对工具的支持。 出于安全原因（Groovy 脚本可能会危害你的主服务器），此配置仅在系统配置中可用。 新解析器的配置采用正则表达式，该正则表达式将用于匹配报告格式。 如果表达式匹配，则将调用 Groovy 脚本，该脚本将匹配的文本转换为问题实例。 这是基于 Groovy 的解析器的示例：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/04.png\" alt=\"Groovy 解析器\"></p>\n<h4 id=\"以编程方式创建-Groovy-解析器\"><a href=\"#以编程方式创建-Groovy-解析器\" class=\"headerlink\" title=\"以编程方式创建 Groovy 解析器\"></a>以编程方式创建 Groovy 解析器</h4><p>还可以使用 Groovy 脚本从管道，Jenkins 启动脚本或脚本控制台中创建基于 Groovy 的解析器，请参见以下示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">def config = io.jenkins.plugins.analysis.warnings.groovy.ParserConfiguration.getInstance()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!config.contains(<span class=\"string\">&#x27;pep8-groovy&#x27;</span>))&#123;</span><br><span class=\"line\">  def newParser = new io.jenkins.plugins.analysis.warnings.groovy.GroovyParser(</span><br><span class=\"line\">    <span class=\"string\">&#x27;pep8-groovy&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Pep8 Groovy Parser&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;return builder.setFileName(matcher.group(1)).setCategory(matcher.group(4)).setMessage(matcher.group(5)).buildOptional()&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;optparse.py:69:11: E401 multiple imports on one line&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  config.setParsers(config.getParsers().plus(newParser))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用配置作为代码导入解析器（JCasC）\"><a href=\"#使用配置作为代码导入解析器（JCasC）\" class=\"headerlink\" title=\"使用配置作为代码导入解析器（JCasC）\"></a>使用配置作为代码导入解析器（JCasC）</h4><p>还可以使用 JCasC yaml 文件中的部分来指定基于 Groovy 的解析器。这是一个小示例，展示了如何添加这样的解析器：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">unclassified:</span></span><br><span class=\"line\">  <span class=\"attr\">warningsParsers:</span></span><br><span class=\"line\">    <span class=\"attr\">parsers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;Example parser&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">example-id</span></span><br><span class=\"line\">        <span class=\"attr\">regexp:</span> <span class=\"string\">&quot;^\\\\s*(.*):(\\\\d+):(.*):\\\\s*(.*)$&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          import edu.hm.hafner.analysis.Severity</span></span><br><span class=\"line\"><span class=\"string\">          builder.setFileName(matcher.group(1))</span></span><br><span class=\"line\"><span class=\"string\">                  .setLineStart(Integer.parseInt(matcher.group(2)))</span></span><br><span class=\"line\"><span class=\"string\">                  .setSeverity(Severity.WARNING_NORMAL)</span></span><br><span class=\"line\"><span class=\"string\">                  .setCategory(matcher.group(3))</span></span><br><span class=\"line\"><span class=\"string\">                  .setMessage(matcher.group(4))</span></span><br><span class=\"line\"><span class=\"string\">          return builder.buildOptional();</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">example:</span> <span class=\"string\">&quot;somefile.txt:2:SeriousWarnings:SomethingWentWrong&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用定义的工具\"><a href=\"#使用定义的工具\" class=\"headerlink\" title=\"使用定义的工具\"></a>使用定义的工具</h4><p>一旦注册了 Groovy 解析器，就可以在作业的工具配置部分中使用它：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/05.png\" alt=\"Groovy 配置\"></p>\n<p>首先，你需要选择工具 “Groovy Parser” 以获取 Groovy 解析器的配置屏幕。 然后，你可以从可用解析器列表中选择解析器。 该列表是根据 Jenkins 的“系统配置”部分中定义的解析器动态创建的。可以使用与其他工具相同的方式来设置自定义 ID 和名称属性。</p>\n<p>为了在管道中使用 Groovy 解析器，你需要使用以下形式的脚本语句：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues sourceCodeEncoding: <span class=\"string\">&#x27;UTF-8&#x27;</span>,</span><br><span class=\"line\">    tool: groovyScript(parserId: <span class=\"string\">&#x27;groovy-id-in-system-config&#x27;</span>, pattern:<span class=\"string\">&#x27;**/*report.log&#x27;</span>, reportEncoding:<span class=\"string\">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理受影响的源代码文件的属性\"><a href=\"#处理受影响的源代码文件的属性\" class=\"headerlink\" title=\"处理受影响的源代码文件的属性\"></a>处理受影响的源代码文件的属性</h3><p>为了让插件解析并显示你的源代码文件，需要为这些文件设置正确的编码。 此外，如果你的源代码不在工作区中（例如，它已签出到共享代理文件夹中），则该插件将不会自动找到你的源文件。 为了让插件显示这些文件，你可以添加一个附加的源目录：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/06.png\" alt=\"受影响文件\"></p>\n<p>以下代码段显示了带有这些选项的示例管道，请注意，如果需要，可以不同地设置报告文件的编码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues sourceCodeEncoding: <span class=\"string\">&#x27;ISO-8859-1&#x27;</span>, sourceDirectory: <span class=\"string\">&#x27;/path/to/sources&#x27;</span>, tool: java(reportEncoding: <span class=\"string\">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>请注意，工作区外部的文件内容可能很敏感。 为了防止意外显示此类文件，你需要在 Jenkins 系统配置屏幕中提供允许的源代码目录的白名单：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/07.png\" alt=\"源代码目录的白名单\"></p>\n<p>另外，此配置设置可以由 JCasC yaml 文件中的以下子节提供</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">unclassified:</span></span><br><span class=\"line\">  <span class=\"attr\">warningsPlugin:</span></span><br><span class=\"line\">    <span class=\"attr\">sourceDirectories:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">&quot;C:\\\\Temp&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/sources&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制参考构建的选择（基准）\"><a href=\"#控制参考构建的选择（基准）\" class=\"headerlink\" title=\"控制参考构建的选择（基准）\"></a>控制参考构建的选择（基准）</h3><p>警告下一代插件的一项重要功能是将问题分类为新问题，未解决问题和已解决问题：</p>\n<ul>\n<li>新增：所有问题，属于当前报告的一部分，但未在参考报告中显示</li>\n<li>已修复：所有问题，属于参考报告的一部分，但不再存在于当前报告中</li>\n<li>未解决：所有问题，是当前报告和参考报告的一部分</li>\n</ul>\n<p>为了计算此分类，插件需要参考构建（基准）。 然后，通过比较当前版本和基准中的问题来计算新的，已修复的和未解决的问题。 有三个选项可控制参考构建的选择。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/08.png\" alt=\"参考\"></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(), ignoreQualityGate: <span class=\"literal\">false</span>, ignoreFailedBuilds: <span class=\"literal\">true</span>, referenceJobName: <span class=\"string\">&#x27;my-project/master&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"筛选问题\"><a href=\"#筛选问题\" class=\"headerlink\" title=\"筛选问题\"></a>筛选问题</h3><p>创建的问题报告可以随后进行过滤。 你可以指定任意数量的包含或排除过滤器。 当前，支持按模块名称，程序包或名称空间名称，文件名，类别或类型过滤问题。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/09.png\" alt=\"筛选\"></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>), filters: [includeFile(<span class=\"string\">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class=\"string\">&#x27;WHITESPACE&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Quality-gate-配置\"><a href=\"#Quality-gate-配置\" class=\"headerlink\" title=\"Quality gate 配置\"></a>Quality gate 配置</h3><p>你可以定义几个 Quality gate (质量门)，在报告问题后将对其进行检查。这些质量门使你可以修改詹金斯的生产状态，以便立即查看是否满足所需的产品质量。对于这些质量门中的每一个，都可以将构建设置为不稳定或失败。所有质量门都使用一个简单的度量标准：给定质量门将失败的问题数量。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/10.png\" alt=\"质量门\"></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>), qualityGates: [[threshold: 1, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;TOTAL&#x27;</span>, unstable: <span class=\"literal\">true</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>类型确定将用来评估质量门的属性。请参阅枚举 QualityGateType 以查看支持哪些不同类型。</p>\n<h3 id=\"健康报告配置\"><a href=\"#健康报告配置\" class=\"headerlink\" title=\"健康报告配置\"></a>健康报告配置</h3><p>该插件可以参与你项目的运行状况报告。你可以更改将运行状况更改为 0％ 和 100％ 的问题数。此外，可以选择在创建运行状况报告时应考虑的严重性。</p>\n<p><a href=\"jenkins-warnings-next-generation-plugin/11.png\">健康报告配置!</a></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>), healthy: 10, unhealthy: 100, minimumSeverity: <span class=\"string\">&#x27;HIGH&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>该作业根据严重性为 HIGH 和错误的所有警告来调整构建运行状况。如果内部版本包含 10 条或更少的警告，则运行状况为 100％。如果内部版本有 100 个以上的警告，则运行状况为 0％。</p>\n<h3 id=\"管道配置\"><a href=\"#管道配置\" class=\"headerlink\" title=\"管道配置\"></a>管道配置</h3><p>在 Jenkins Pipeline 中使用 Warnings 插件的要求可能很复杂，有时会引起争议。为了尽可能灵活，我决定将主要步骤分为两个独立的部分，然后可以彼此独立使用。</p>\n<h4 id=\"简单的管道配置\"><a href=\"#简单的管道配置\" class=\"headerlink\" title=\"简单的管道配置\"></a>简单的管道配置</h4><p>步骤 recordIssues 提供了简单的管道配置，它提供了与构建后操作相同的属性（请参见上文）。此步骤扫描给定文件集（或控制台日志）中的问题，并在构建中报告这些问题。你可以使用代码片段生成器来创建一个有效的代码片段，以调用此步骤。以下示例显示了此步骤的典型示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues(</span><br><span class=\"line\">    enabledForFailure: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>),</span><br><span class=\"line\">    filters: [includeFile(<span class=\"string\">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class=\"string\">&#x27;WHITESPACE&#x27;</span>)]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在此示例中，将扫描文件 <code>* .log</code> 中的 Java 问题。仅包括文件名与模式 <code>MyFile.*.java</code> 匹配的问题。类别 <code>WHITESPACE</code> 的问题将被排除，即使构建失败，也会执行该步骤。</p>\n<p>为了查看所有配置选项，你可以研究<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\">步骤实现</a>。</p>\n<h4 id=\"声明式管道配置\"><a href=\"#声明式管道配置\" class=\"headerlink\" title=\"声明式管道配置\"></a>声明式管道配置</h4><p>声明性管道作业中的插件配置与脚本管道中的配置相同，请参见以下示例，该示例在 Jenkins 上构建分析模型库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent <span class=\"string\">&#x27;any&#x27;</span></span><br><span class=\"line\">    tools &#123;</span><br><span class=\"line\">        maven <span class=\"string\">&#x27;mvn-default&#x27;</span></span><br><span class=\"line\">        jdk <span class=\"string\">&#x27;jdk-default&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage (<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh <span class=\"string\">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false -Dmaven.test.failure.ignore&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage (<span class=\"string\">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh <span class=\"string\">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs spotbugs:spotbugs&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    post &#123;</span><br><span class=\"line\">        always &#123;</span><br><span class=\"line\">            junit testResults: <span class=\"string\">&#x27;**/target/surefire-reports/TEST-*.xml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tools: [mavenConsole(), java(), javaDoc()]</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: checkStyle()</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: spotBugs()</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: cpd(pattern: <span class=\"string\">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: pmdParser(pattern: <span class=\"string\">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高级管道配置\"><a href=\"#高级管道配置\" class=\"headerlink\" title=\"高级管道配置\"></a>高级管道配置</h4><p>有时仅使用一个步骤发布和报告问题是不够的。例如，如果你使用多个并行步骤来构建产品，并且想要将所有这些步骤中的问题合并为一个结果。然后，你需要拆分扫描和聚合。该插件提供以下两个步骤：</p>\n<ul>\n<li>scanForIssues 此步骤使用特定的解析器扫描报告文件或控制台日志，并创建一个包含报告的中 间 AnnotatedReport 对象。有关详细信息，请参见步骤实现。</li>\n<li>publishIssues：此步骤在你的构建中发布一个新报告，其中包含几个 scanForIssues 步骤的汇总结果。有关详细信息，请参见步骤实现。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">  stage (<span class=\"string\">&#x27;Checkout&#x27;</span>) &#123;</span><br><span class=\"line\">      git branch:<span class=\"string\">&#x27;5.0&#x27;</span>, url: <span class=\"string\">&#x27;git@github.com:jenkinsci/warnings-plugin.git&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stage (<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\">    def mvnHome = tool <span class=\"string\">&#x27;mvn-default&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sh <span class=\"string\">&quot;<span class=\"variable\">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    junit testResults: <span class=\"string\">&#x27;**/target/*-reports/TEST-*.xml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def java = scanForIssues tool: java()</span><br><span class=\"line\">    def javadoc = scanForIssues tool: javaDoc()</span><br><span class=\"line\"></span><br><span class=\"line\">    publishIssues issues: [java, javadoc], filters: [includePackage(<span class=\"string\">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stage (<span class=\"string\">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class=\"line\">    def mvnHome = tool <span class=\"string\">&#x27;mvn-default&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sh <span class=\"string\">&quot;<span class=\"variable\">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def checkstyle = scanForIssues tool: checkStyle(pattern: <span class=\"string\">&#x27;**/target/checkstyle-result.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [checkstyle]</span><br><span class=\"line\"></span><br><span class=\"line\">    def pmd = scanForIssues tool: pmdParser(pattern: <span class=\"string\">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [pmd]</span><br><span class=\"line\"></span><br><span class=\"line\">    def cpd = scanForIssues tool: cpd(pattern: <span class=\"string\">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [cpd]</span><br><span class=\"line\"></span><br><span class=\"line\">    def spotbugs = scanForIssues tool: spotBugs(pattern: <span class=\"string\">&#x27;**/target/findbugsXml.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [spotbugs]</span><br><span class=\"line\"></span><br><span class=\"line\">    def maven = scanForIssues tool: mavenConsole()</span><br><span class=\"line\">    publishIssues issues: [maven]</span><br><span class=\"line\"></span><br><span class=\"line\">    publishIssues <span class=\"built_in\">id</span>: <span class=\"string\">&#x27;analysis&#x27;</span>, name: <span class=\"string\">&#x27;All Issues&#x27;</span>, issues: [checkstyle, pmd, spotbugs], filters: [includePackage(<span class=\"string\">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h2><p>以下各节介绍了最重要的新功能。</p>\n<h3 id=\"发行记录：New-Fixed-Outstanding-问题\"><a href=\"#发行记录：New-Fixed-Outstanding-问题\" class=\"headerlink\" title=\"发行记录：New, Fixed, Outstanding 问题\"></a>发行记录：New, Fixed, Outstanding 问题</h3><p>该插件的一大亮点是能够将后续版本的问题分类为 New, Fixed, Outstanding。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/12.png\" alt=\"趋势\"></p>\n<p>使用此功能可以更轻松地控制项目的质量：你只能专注于最近引入的警告。</p>\n<p>注意：新警告的检测基于复杂的算法，该算法试图在源代码的两个不同版本中跟踪同一警告。根据源代码的修改程度，它可能会产生一些误报，即，即使应该没有警告也可能会收到一些新的固定警告。该算法的准确性仍在研究中，并将在接下来的几个月中进行完善。</p>\n<h3 id=\"Severities-严重程度\"><a href=\"#Severities-严重程度\" class=\"headerlink\" title=\"Severities 严重程度\"></a>Severities 严重程度</h3><p>该插件在图表中显示问题严重性的分布，它定义了以下默认严重级别，但是扩展警告插件的插件可能会添加其他默认级别。</p>\n<ul>\n<li><strong>Error</strong>：表示通常会导致构建失败的错误</li>\n<li><strong>Warning</strong> (High, Normal, Low)：指示给定优先级的警告。映射到优先级取决于各个解析器。</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/13.png\" alt=\"严重程度\"></p>\n<p>请注意，并非每个解析器都能产生不同严重性的警告。某些解析器仅对所有问题使用相同的严重性。</p>\n<h3 id=\"Build-trend-构建趋势\"><a href=\"#Build-trend-构建趋势\" class=\"headerlink\" title=\"Build trend 构建趋势\"></a>Build trend 构建趋势</h3><p>为了查看分析结果的趋势，几个图表显示了每个构建的问题数量。这些图表用于详细信息页面和作业概述中。当前提供以下不同的趋势图类型：</p>\n<h4 id=\"问题的严重程度分布\"><a href=\"#问题的严重程度分布\" class=\"headerlink\" title=\"问题的严重程度分布\"></a>问题的严重程度分布</h4><p>默认趋势图显示问题总数，按严重性堆叠。使用此图表，你可以查看哪种严重程度对问题总数贡献最大。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/14.png\" alt=\"严重度趋势图\"></p>\n<h4 id=\"每种静态分析类型的问题\"><a href=\"#每种静态分析类型的问题\" class=\"headerlink\" title=\"每种静态分析类型的问题\"></a>每种静态分析类型的问题</h4><p>如果你要汇总几个静态分析结果，则类型图将使用单独的一行显示每个工具的问题数量。你可以通过单击相应的图例符号暂时隐藏工具。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/15.png\" alt=\"工具趋势图\"></p>\n<h4 id=\"新问题与已修复问题\"><a href=\"#新问题与已修复问题\" class=\"headerlink\" title=\"新问题与已修复问题\"></a>新问题与已修复问题</h4><p>如果你对积压的问题感兴趣，可以打开新的与固定的图表。它映射了引入的问题与通过一系列构建解决的问题。这可以帮助你了解整个待办事项列表是在增加还是在减少。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/16.png\" alt=\"新修复趋势图\"></p>\n<h4 id=\"项目健康\"><a href=\"#项目健康\" class=\"headerlink\" title=\"项目健康\"></a>项目健康</h4><p>仅当启用了运行状况报告后，运行状况图表才可用。在这种情况下，趋势图将显示健康和不健康区域中的警告数量。你的项目目标应该是使警告数量不逃避图表的绿色部分。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/17.png\" alt=\"健康趋势图\"></p>\n<h4 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h4><p>细节视图中的所有趋势图都支持使用图表底部的范围滑块缩放构建轴。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/18.png\" alt=\"放大\"></p>\n<h4 id=\"构建与日期轴\"><a href=\"#构建与日期轴\" class=\"headerlink\" title=\"构建与日期轴\"></a>构建与日期轴</h4><p>详细信息视图中的所有趋势图都可以显示每个构建或每天的警告数量。你可以通过选择右上角的相应图标在X轴变体之间切换，每天显示平均警告数。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/19.png\" alt=\"构建与日期\"></p>\n<h3 id=\"问题概述\"><a href=\"#问题概述\" class=\"headerlink\" title=\"问题概述\"></a>问题概述</h3><p>你可以在几个聚合视图中快速，高效地查看报告的问题集。根据问题的数量或类型，你将看到问题的分布</p>\n<ul>\n<li>Static Analysis Tool（静态分析工具）</li>\n<li>Module（模组）</li>\n<li>Package or Namespace（包或命名空间）</li>\n<li>Severity（严重程度）</li>\n<li>Category（类别）</li>\n<li>Type（类型）</li>\n</ul>\n<p>这些详细信息视图中的每一个都是交互式的，即，你可以导航到已分类问题的子集。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/20.png\" alt=\"软件包\"></p>\n<h3 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h3><p>一组已报告的问题显示在一个现代化的响应表中。该表使用 Ajax 调用按需加载，它提供以下功能：</p>\n<ul>\n<li><strong>Pagination</strong>（分页）：问题的数量分为几个页面，可以使用提供的页面链接进行选择。请注意，目前分页是在客户端进行的，即从服务器获取整个问题表可能要花费一些时间。</li>\n<li><strong>Sorting</strong>（排序）：可以通过单击表列中的仅一个来对表内容进行排序。</li>\n<li><strong>Filtering, Searching</strong>（过滤，搜索）：你可以通过在搜索框中输入一些文本来过滤显示的问题。</li>\n<li><strong>Content Aware</strong>（内容感知）：仅当有必要显示的内容时才显示列。也就是说，如果工具未报告问题类别，则该类别将被自动隐藏。</li>\n<li><strong>Responsive</strong>（响应式）：布局应适应实际的屏幕阈值。</li>\n<li><strong>Details</strong>（详细信息）：问题的详细信息消息（如果由相应的静态分析工具提供）在表中显示为子行。</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/20.png\" alt=\"详情\"></p>\n<h3 id=\"源代码-Blame（归咎于）\"><a href=\"#源代码-Blame（归咎于）\" class=\"headerlink\" title=\"源代码 Blame（归咎于）\"></a>源代码 Blame（归咎于）</h3><p>这个功能需要安装其他插件：<a href=\"https://github.com/jenkinsci/git-forensics-plugin\">Git Forensics 插件</a></p>\n<p>如果未在作业配置中禁用，则插件将执行 <code>git blame</code> 以确定谁是问题的负责 <code>author</code>。在相应的 SCM Blames 视图中，所有问题将与 <code>auther name</code>, <code>email</code>, 和 <code>commit ID</code> 一起列出。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/22.png\" alt=\"Git\"></p>\n<p>为了禁用 <code>git blame</code> 功能，请将属性 <code>blameDisabled</code> 设置为 <code>true</code>，请参见以下示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues blameDisabled: <span class=\"literal\">true</span>, tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-仓库取证\"><a href=\"#Git-仓库取证\" class=\"headerlink\" title=\"Git 仓库取证\"></a>Git 仓库取证</h3><p>此功能需要安装其他插件：<a href=\"https://github.com/jenkinsci/git-forensics-plugin\">Git Forensics 插件</a></p>\n<p>如果未在作业配置中禁用，则该插件将以“犯罪现场代码”的样式（Adam Tornhill，2013年11月）挖掘源代码存储库，以确定受影响文件的统计信息。在相应的 “SCM 取证” 视图中，将列出所有问题以及受影响文件的以下属性：</p>\n<ul>\n<li>提交总数</li>\n<li>不同作者总数</li>\n<li>创作时间</li>\n<li>最后修改时间</li>\n<li>源代码控制概述</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/23.png\" alt=\"取证视图\"></p>\n<p>为了禁用 Git 取证功能，请将属性 <code>forensicsDisabled</code>设置为 <code>true</code>，请参见以下示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues forensicsDisabled: <span class=\"literal\">true</span>, tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"源代码视图\"><a href=\"#源代码视图\" class=\"headerlink\" title=\"源代码视图\"></a>源代码视图</h3><p>现在，源代码视图使用 JS 库 Prism 在受影响的文件中显示警告。该库为最流行的语言提供语法高亮显示，并在客户端呈现所有内容。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/24.png\" alt=\"源视图\"></p>\n<h3 id=\"发行总数栏\"><a href=\"#发行总数栏\" class=\"headerlink\" title=\"发行总数栏\"></a>发行总数栏</h3><p>你可以在 Jenkins 作业表的单独列中显示作业的总数。 默认情况下，Jenkins 主列表视图将显示一个新列，该列计算所有工具的发行总数。 你可以添加可以配置的其他列</p>\n<ul>\n<li>列名</li>\n<li>应考虑的实际工具</li>\n<li>要显示的总计类型（总体警告，新警告，特定严重性等），请参阅 “token宏支持” 部分。</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/25.png\" alt=\"问题列\"></p>\n<h3 id=\"仪表板视图支持\"><a href=\"#仪表板视图支持\" class=\"headerlink\" title=\"仪表板视图支持\"></a>仪表板视图支持</h3><p>还提供对 Jenkins 仪表板视图的支持。当前，以下 portlet 可用：</p>\n<h4 id=\"每个工具和作业表的问题\"><a href=\"#每个工具和作业表的问题\" class=\"headerlink\" title=\"每个工具和作业表的问题\"></a>每个工具和作业表的问题</h4><p>问题表显示了作业的问题总数（由每个工具分开）。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/26.png\" alt=\"问题 portlet\"></p>\n<h4 id=\"问题趋势\"><a href=\"#问题趋势\" class=\"headerlink\" title=\"问题趋势\"></a>问题趋势</h4><p>可以将趋势图添加为 portlet，该趋势图显示所有作业的发行总数。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/27.png\" alt=\"图表 portlet\"></p>\n<h3 id=\"远程API\"><a href=\"#远程API\" class=\"headerlink\" title=\"远程API\"></a>远程API</h3><p>该插件提供以下 REST API 端点。</p>\n<h4 id=\"所有分析结果的汇总摘要\"><a href=\"#所有分析结果的汇总摘要\" class=\"headerlink\" title=\"所有分析结果的汇总摘要\"></a>所有分析结果的汇总摘要</h4><p>可以使用 URL <code>[build-url]/warnings-ng/api/json</code>（或 <code>[build-url]/warnings-ng/api/xml</code>）查询构建中已配置的所有静态分析工具。此汇总显示每个工具的 ID，名称，URL 和问题总数。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;_class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;io.jenkins.plugins.analysis.core.restapi.AggregationApi&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tools&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;maven&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/maven&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Maven Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">9</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Java Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;javadoc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/javadoc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JavaDoc Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;checkstyle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/checkstyle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CheckStyle Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;pmd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/pmd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;PMD Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">671</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;spotbugs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/spotbugs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SpotBugs Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/cpd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CPD Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">123</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;open-tasks&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/open-tasks&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Open Tasks Scanner Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分析结果汇总\"><a href=\"#分析结果汇总\" class=\"headerlink\" title=\"分析结果汇总\"></a>分析结果汇总</h4><p>你可以使用 URL <code>[build-url]/[tool-id]/api/xml</code>（或 <code>[build-url]/[tool-id]/api/json</code>）获得特定分析报告的摘要。摘要包含问题数量，质量门状态以及所有信息和错误消息。</p>\n<p>这是一个示例 XML 报告：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">analysisResultApi</span> <span class=\"attr\">_class</span>=<span class=\"string\">&#x27;io.jenkins.plugins.analysis.core.restapi.AnalysisResultApi&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">totalSize</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">totalSize</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fixedSize</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">fixedSize</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">newSize</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">newSize</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">noIssuesSinceBuild</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">noIssuesSinceBuild</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">successfulSinceBuild</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">successfulSinceBuild</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">qualityGateStatus</span>&gt;</span>WARNING<span class=\"tag\">&lt;/<span class=\"name\">qualityGateStatus</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">owner</span> <span class=\"attr\">_class</span>=<span class=\"string\">&#x27;org.jenkinsci.plugins.workflow.job.WorkflowRun&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">number</span>&gt;</span>46<span class=\"tag\">&lt;/<span class=\"name\">number</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://localhost:8080/view/White%20Mountains/job/Full%20Analysis%20-%20Model/46/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">owner</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Searching for all files in &#x27;/tmp/node1/workspace/Full Analysis - Model&#x27; that match the pattern</span><br><span class=\"line\">    &#x27;**/target/spotbugsXml.xml&#x27;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; found 1 file<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Successfully parsed file /tmp/node1/workspace/Full Analysis - Model/target/spotbugsXml.xml<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; found 3 issues (skipped 0 duplicates)<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Post processing issues on &#x27;node1&#x27; with encoding &#x27;UTF-8&#x27;<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Resolving absolute file names for all issues<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; affected files for all issues already have absolute paths<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Copying affected files to Jenkins&#x27; build folder /Users/hafner/Development/jenkins/jobs/Full Analysis -</span><br><span class=\"line\">    Model/builds/46</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; 2 copied, 0 not in workspace, 0 not-found, 0 with I/O error<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Resolving module names from module definitions (build.xml, pom.xml, or Manifest.mf files)<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; all issues already have a valid module name<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Resolving package names (or namespaces) by parsing the affected files<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; all affected files already have a valid package name<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Creating fingerprints for all affected code blocks to track issues over different builds<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>No filter has been set, publishing all 3 issues<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>No valid reference build found - all reported issues will be considered outstanding<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Evaluating quality qualityGates<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; WARNING - Total number of issues: 3 - Quality Gate: 1<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; Some quality qualityGates have been missed: overall result is WARNING<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Health report is disabled - skipping<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">analysisResultApi</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Token-宏支持\"><a href=\"#Token-宏支持\" class=\"headerlink\" title=\"Token 宏支持\"></a>Token 宏支持</h3><p>Warnings 插件提供了 token <code>ANALYSIS_ISSUES_COUNT</code>，可用于其他后期构建处理步骤，例如在邮件中。为了使用此 token，你需要安装 token 宏插件。token 具有以下可选参数：</p>\n<ul>\n<li><code>tool</code>：选择特定的分析结果，如果未定义，则将所有结果相加</li>\n<li><code>type</code>：选择要使用的计数器的类型，请选择以下之一<ul>\n<li>Total（任何严重性）</li>\n<li>Total（仅错误）</li>\n<li>Total（仅严重度高）</li>\n<li>Total（仅严重级别正常）</li>\n<li>Total（仅限严重性低）</li>\n<li>New  （任何严重程度）</li>\n<li>New  （仅限错误）</li>\n<li>New  （仅限严重性高）</li>\n<li>New  （仅严重性为正常）</li>\n<li>New  （仅限严重性低）</li>\n<li>Delta（任何严重程度）</li>\n<li>Delta（仅错误）</li>\n<li>Delta（仅严重度高）</li>\n<li>Delta（仅严重等级正常）</li>\n<li>Delta（仅严重度低）</li>\n<li>Fixed（任何严重性）</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<p><code>$&#123;ANALYSIS_ISSUES_COUNT&#125;</code>：扩展到所有分析工具的合计数量</p>\n<p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;&#125;</code>：扩展到CheckStyle问题的总数</p>\n<p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;, type: &quot;NEW&quot;&#125;</code>：扩展到新的 CheckStyle 问题数</p>\n<h2 id=\"从静态分析套件过渡\"><a href=\"#从静态分析套件过渡\" class=\"headerlink\" title=\"从静态分析套件过渡\"></a>从静态分析套件过渡</h2><p>以前，静态分析套件的插件提供了相同的功能集（CheckStyle，PMD，FindBugs，静态分析实用工具，Analysis Collector，任务扫描器，Warnings 等）。为了简化用户体验和开发过程，这些插件和核心功能已合并到Warnings Next Generation 插件中。这些旧的静态分析插件不再需要，现在已经停产。如果当前使用这些旧插件之一，则应尽快迁移到新的记录器和步骤。我仍然会保留旧代码一段时间，但是主要的开发工作将花在新的代码库中。</p>\n<ul>\n<li>迁移 Pipelines</li>\n</ul>\n<p>调用旧的静态分析步骤（例如，findbug，checkstyle 等）的管道需要立即调用新的 recordIssues 步骤。所有静态分析工具都使用相同的步骤，使用 step 属性工具选择实际的解析器。有关可用参数集的更多详细信息，请参见“<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration\">配置</a>”部分。</p>\n<ul>\n<li>迁移其他所有工作</li>\n</ul>\n<p>使用旧版 API 的 Freestyle，Matrix 或 Maven Jobs 使用了由每个插件提供的所谓的 Post Build Action。例如，FindBugs 插件确实提供了构建后操作“发布 FindBugs 分析结果”。这些旧的插件特定操作不再受支持，它们现在在用户界面中标记为 [Deprecated]。现在，你需要添加一个新的后期构建步骤-对于所有静态分析工具，此步骤现在称为“记录编译器警告和静态分析结果”。工具的选择是此后期构建步骤配置的一部分。注意：新的后期制作操作无法读取使用旧 API 的后期制作步骤所产生的警告。也就是说，你看不到新旧结果的合并历史记录-你仅看到两个不相关的结果。也不会自动转换以旧格式存储的结果。</p>\n<ul>\n<li>插件的迁移取决于分析核心</li>\n</ul>\n<p>以下插件已集成到此警告插件的新版本中：</p>\n<ul>\n<li>Android-Lint 插件</li>\n<li>Analysis Collector 插件</li>\n<li>CheckStyle 插件</li>\n<li>CCM 插件</li>\n<li>Dry 插件</li>\n<li>PMD 插件</li>\n<li>FindBugs 插件</li>\n<li>Tasks Scanner 插件</li>\n<li>Warnings 插件</li>\n</ul>\n<p>所有其他插件仍需要集成或需要重构以使用新的 API</p>\n","more":"<h3 id=\"支持的项目类型\"><a href=\"#支持的项目类型\" class=\"headerlink\" title=\"支持的项目类型\"></a>支持的项目类型</h3><p>Warnings Next Generation 插件支持以下 Jenkins 项目类型：</p>\n<ul>\n<li>自由式项目</li>\n<li>Maven 项目</li>\n<li>矩阵项目</li>\n<li>脚本化管道（顺序和并行步骤）</li>\n<li>声明式管道（顺序步骤和并行步骤）</li>\n<li>多分支管道</li>\n</ul>\n<h3 id=\"功能概述\"><a href=\"#功能概述\" class=\"headerlink\" title=\"功能概述\"></a>功能概述</h3><p>当作为后续构建任务操作（或步骤）添加时，Warnings Next Generation 插件提供以下功能：</p>\n<ol>\n<li>该插件会扫描 Jenkins 版本的控制台日志或你工作区中的文件中是否存在任何问题。支持一百多种<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md\">报告格式</a>，它可以检测到的问题包括：</li>\n</ol>\n<ul>\n<li>来自编译器的错误（C，C＃，Java等）</li>\n<li>来自静态分析工具（CheckStyle，StyleCop，SpotBugs 等）的警告</li>\n<li>来自复制粘贴检测器（CPD, Simian 等）的重复</li>\n<li>漏洞</li>\n<li>在源文件的注释中打开任务</li>\n</ul>\n<ol start=\"2\">\n<li>该插件会发布有关在构建中发现的问题的报告，因此可以从以下位置导航到摘要报告，主构建页面。你还可以从那里深入了解细节：</li>\n</ol>\n<ul>\n<li>发行新的，固定的和未解决的问题</li>\n<li>按严重性，类别，类型，模块或程序包分发问题</li>\n<li>所有问题的列表，包括来自报告工具的有用评论</li>\n<li>受影响文件的带注释的源代码</li>\n<li>问题趋势图</li>\n</ul>\n<p>该插件不会运行静态分析，它只是可视化此类工具报告的结果。你仍然需要在构建文件或 Jenkinsfile 中启用和配置静态分析工具。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>你可以在 Jenkins 作业配置用户界面中配置插件的每个选项（在自由式，maven 或矩阵作业中）。在这里你需要在工作中添加并启用生成后操作“记录编译器警告和静态分析结果”。</p>\n<p>在管道中，将通过添加 recordIssues 激活插件。也可以使用相同的用户界面来配置此步骤（通过使用 Snippet 编辑器）。请注意，对于脚本化管道，一些其他功能可用于汇总和分组问题，有关详细信息，请参阅“高级管道配置”部分。</p>\n<p>在以下各节中，将同时显示图形配置和管道配置。</p>\n<h3 id=\"工具选择\"><a href=\"#工具选择\" class=\"headerlink\" title=\"工具选择\"></a>工具选择</h3><p>下图显示了插件的基本配置：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/01.png\" alt=\"静态分析工具\"></p>\n<p>首先，你需要指定用于创建问题的工具，根据所选工具，你可能还会配置一些其他参数。</p>\n<p>对于所有读取报告文件的解析器，你需要指定应分析和扫描问题的报告文件的模式。如果未指定模式，则将扫描构建的控制台日志。对于几种流行的工具，提供了默认模式，在这种情况下，如果模式为空，则将使用默认模式。</p>\n<p>为了让扫描程序正确解析你的报告，需要设置文件的编码，否则将使用平台编码，这可能不正确。</p>\n<p>每个工具都由一个 ID 标识，该 ID 用作分析结果的 URL。对于每个工具，都提供了一个默认 URL（和名称），可以根据需要进行更改。例如，如果你打算多次使用解析器，则需要为每个调用指定不同的 ID。</p>\n<p>你可以指定将用于同一配置的多个工具（和模式），由于 Jenkins 的技术（或市场）限制，无法通过使用多个后期构建操作来选择不同的配置。</p>\n<p>通过使用“汇总结果”复选框，可以使用一项新功能。如果选中此选项，则将创建一个结果，其中包含所选工具的所有问题的汇总。这是之前静态分析收集器插件提供的。激活此选项后，你将获得所有问题的唯一入口点。以下屏幕截图显示了此新行为：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/02.png\" alt=\"汇总结果\"></p>\n<p>如果未启用此选项，则将为每个工具创建单独的结果。此结果具有唯一的 URL 和图标，因此你可以快速查看创建的报告之间的区别：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/03.png\" alt=\"分开的结果\"></p>\n<p>在基本配置部分中，你还可以选择是否针对失败的构建也运行该步骤。默认情况下禁用此选项，因为如果构建失败，分析结果可能会不准确。</p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues(</span><br><span class=\"line\">    enabledForFailure: <span class=\"literal\">true</span>, aggregatingResults: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    tools: [java(), checkStyle(pattern: <span class=\"string\">&#x27;checkstyle-result.xml&#x27;</span>, reportEncoding: <span class=\"string\">&#x27;UTF-8&#x27;</span>)]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如果使用单个工具，则可以使用属性工具代替工具：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues enabledForFailure: <span class=\"literal\">true</span>, aggregatingResults: <span class=\"literal\">true</span>, tool: checkStyle(pattern: <span class=\"string\">&#x27;checkstyle-result.xml&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建对自定义工具的支持\"><a href=\"#创建对自定义工具的支持\" class=\"headerlink\" title=\"创建对自定义工具的支持\"></a>创建对自定义工具的支持</h3><p>如果你的项目中没有内置工具，则可以通过多种方式添加其他工具。</p>\n<h4 id=\"将问题导出为受支持的格式\"><a href=\"#将问题导出为受支持的格式\" class=\"headerlink\" title=\"将问题导出为受支持的格式\"></a>将问题导出为受支持的格式</h4><p>将工具的分析结果获取到 Warnings 插件中的一种简单方法是将信息导出为一种已经支持的格式。例如，几种工具将其问题导出为 CheckStyle 或 PMD 格式。如果要使用警告插件的所有功能，则最好将信息导出为本机 XML 或 JSON 格式（此解析器使用 ID 问题）。<br>这些格式已经在用户界面中注册，你可以直接使用它们。你甚至可以在包含单行 JSON 问题的简单日志文件中提供问题，请参见示例。</p>\n<p>这是一个示例步骤，可用于解析本机 JSON（或 XML）格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues(tool: issues())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用自定义插件部署新工具\"><a href=\"#使用自定义插件部署新工具\" class=\"headerlink\" title=\"使用自定义插件部署新工具\"></a>使用自定义插件部署新工具</h4><p>最灵活的方法是通过编写将在你自己的小型 Jenkins 插件中部署的 Java 类来定义新工具，有关详细信息，请参见文档“为自定义静态分析工具提供支持”。</p>\n<h4 id=\"使用Groovy解析器创建新工具\"><a href=\"#使用Groovy解析器创建新工具\" class=\"headerlink\" title=\"使用Groovy解析器创建新工具\"></a>使用Groovy解析器创建新工具</h4><p>如果日志消息的格式非常简单，则可以通过在 Jenkins 的用户界面中创建简单的工具配置来定义对工具的支持。 出于安全原因（Groovy 脚本可能会危害你的主服务器），此配置仅在系统配置中可用。 新解析器的配置采用正则表达式，该正则表达式将用于匹配报告格式。 如果表达式匹配，则将调用 Groovy 脚本，该脚本将匹配的文本转换为问题实例。 这是基于 Groovy 的解析器的示例：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/04.png\" alt=\"Groovy 解析器\"></p>\n<h4 id=\"以编程方式创建-Groovy-解析器\"><a href=\"#以编程方式创建-Groovy-解析器\" class=\"headerlink\" title=\"以编程方式创建 Groovy 解析器\"></a>以编程方式创建 Groovy 解析器</h4><p>还可以使用 Groovy 脚本从管道，Jenkins 启动脚本或脚本控制台中创建基于 Groovy 的解析器，请参见以下示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">def config = io.jenkins.plugins.analysis.warnings.groovy.ParserConfiguration.getInstance()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!config.contains(<span class=\"string\">&#x27;pep8-groovy&#x27;</span>))&#123;</span><br><span class=\"line\">  def newParser = new io.jenkins.plugins.analysis.warnings.groovy.GroovyParser(</span><br><span class=\"line\">    <span class=\"string\">&#x27;pep8-groovy&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;Pep8 Groovy Parser&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;(.*):(\\\\d+):(\\\\d+): (\\\\D\\\\d*) (.*)&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;return builder.setFileName(matcher.group(1)).setCategory(matcher.group(4)).setMessage(matcher.group(5)).buildOptional()&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;optparse.py:69:11: E401 multiple imports on one line&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  config.setParsers(config.getParsers().plus(newParser))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用配置作为代码导入解析器（JCasC）\"><a href=\"#使用配置作为代码导入解析器（JCasC）\" class=\"headerlink\" title=\"使用配置作为代码导入解析器（JCasC）\"></a>使用配置作为代码导入解析器（JCasC）</h4><p>还可以使用 JCasC yaml 文件中的部分来指定基于 Groovy 的解析器。这是一个小示例，展示了如何添加这样的解析器：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">unclassified:</span></span><br><span class=\"line\">  <span class=\"attr\">warningsParsers:</span></span><br><span class=\"line\">    <span class=\"attr\">parsers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;Example parser&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">example-id</span></span><br><span class=\"line\">        <span class=\"attr\">regexp:</span> <span class=\"string\">&quot;^\\\\s*(.*):(\\\\d+):(.*):\\\\s*(.*)$&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">script:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          import edu.hm.hafner.analysis.Severity</span></span><br><span class=\"line\"><span class=\"string\">          builder.setFileName(matcher.group(1))</span></span><br><span class=\"line\"><span class=\"string\">                  .setLineStart(Integer.parseInt(matcher.group(2)))</span></span><br><span class=\"line\"><span class=\"string\">                  .setSeverity(Severity.WARNING_NORMAL)</span></span><br><span class=\"line\"><span class=\"string\">                  .setCategory(matcher.group(3))</span></span><br><span class=\"line\"><span class=\"string\">                  .setMessage(matcher.group(4))</span></span><br><span class=\"line\"><span class=\"string\">          return builder.buildOptional();</span></span><br><span class=\"line\"><span class=\"string\"></span>        <span class=\"attr\">example:</span> <span class=\"string\">&quot;somefile.txt:2:SeriousWarnings:SomethingWentWrong&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用定义的工具\"><a href=\"#使用定义的工具\" class=\"headerlink\" title=\"使用定义的工具\"></a>使用定义的工具</h4><p>一旦注册了 Groovy 解析器，就可以在作业的工具配置部分中使用它：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/05.png\" alt=\"Groovy 配置\"></p>\n<p>首先，你需要选择工具 “Groovy Parser” 以获取 Groovy 解析器的配置屏幕。 然后，你可以从可用解析器列表中选择解析器。 该列表是根据 Jenkins 的“系统配置”部分中定义的解析器动态创建的。可以使用与其他工具相同的方式来设置自定义 ID 和名称属性。</p>\n<p>为了在管道中使用 Groovy 解析器，你需要使用以下形式的脚本语句：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues sourceCodeEncoding: <span class=\"string\">&#x27;UTF-8&#x27;</span>,</span><br><span class=\"line\">    tool: groovyScript(parserId: <span class=\"string\">&#x27;groovy-id-in-system-config&#x27;</span>, pattern:<span class=\"string\">&#x27;**/*report.log&#x27;</span>, reportEncoding:<span class=\"string\">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"处理受影响的源代码文件的属性\"><a href=\"#处理受影响的源代码文件的属性\" class=\"headerlink\" title=\"处理受影响的源代码文件的属性\"></a>处理受影响的源代码文件的属性</h3><p>为了让插件解析并显示你的源代码文件，需要为这些文件设置正确的编码。 此外，如果你的源代码不在工作区中（例如，它已签出到共享代理文件夹中），则该插件将不会自动找到你的源文件。 为了让插件显示这些文件，你可以添加一个附加的源目录：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/06.png\" alt=\"受影响文件\"></p>\n<p>以下代码段显示了带有这些选项的示例管道，请注意，如果需要，可以不同地设置报告文件的编码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues sourceCodeEncoding: <span class=\"string\">&#x27;ISO-8859-1&#x27;</span>, sourceDirectory: <span class=\"string\">&#x27;/path/to/sources&#x27;</span>, tool: java(reportEncoding: <span class=\"string\">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>请注意，工作区外部的文件内容可能很敏感。 为了防止意外显示此类文件，你需要在 Jenkins 系统配置屏幕中提供允许的源代码目录的白名单：</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/07.png\" alt=\"源代码目录的白名单\"></p>\n<p>另外，此配置设置可以由 JCasC yaml 文件中的以下子节提供</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">unclassified:</span></span><br><span class=\"line\">  <span class=\"attr\">warningsPlugin:</span></span><br><span class=\"line\">    <span class=\"attr\">sourceDirectories:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">&quot;C:\\\\Temp&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mnt/sources&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制参考构建的选择（基准）\"><a href=\"#控制参考构建的选择（基准）\" class=\"headerlink\" title=\"控制参考构建的选择（基准）\"></a>控制参考构建的选择（基准）</h3><p>警告下一代插件的一项重要功能是将问题分类为新问题，未解决问题和已解决问题：</p>\n<ul>\n<li>新增：所有问题，属于当前报告的一部分，但未在参考报告中显示</li>\n<li>已修复：所有问题，属于参考报告的一部分，但不再存在于当前报告中</li>\n<li>未解决：所有问题，是当前报告和参考报告的一部分</li>\n</ul>\n<p>为了计算此分类，插件需要参考构建（基准）。 然后，通过比较当前版本和基准中的问题来计算新的，已修复的和未解决的问题。 有三个选项可控制参考构建的选择。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/08.png\" alt=\"参考\"></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(), ignoreQualityGate: <span class=\"literal\">false</span>, ignoreFailedBuilds: <span class=\"literal\">true</span>, referenceJobName: <span class=\"string\">&#x27;my-project/master&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"筛选问题\"><a href=\"#筛选问题\" class=\"headerlink\" title=\"筛选问题\"></a>筛选问题</h3><p>创建的问题报告可以随后进行过滤。 你可以指定任意数量的包含或排除过滤器。 当前，支持按模块名称，程序包或名称空间名称，文件名，类别或类型过滤问题。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/09.png\" alt=\"筛选\"></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>), filters: [includeFile(<span class=\"string\">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class=\"string\">&#x27;WHITESPACE&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Quality-gate-配置\"><a href=\"#Quality-gate-配置\" class=\"headerlink\" title=\"Quality gate 配置\"></a>Quality gate 配置</h3><p>你可以定义几个 Quality gate (质量门)，在报告问题后将对其进行检查。这些质量门使你可以修改詹金斯的生产状态，以便立即查看是否满足所需的产品质量。对于这些质量门中的每一个，都可以将构建设置为不稳定或失败。所有质量门都使用一个简单的度量标准：给定质量门将失败的问题数量。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/10.png\" alt=\"质量门\"></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>), qualityGates: [[threshold: 1, <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;TOTAL&#x27;</span>, unstable: <span class=\"literal\">true</span>]]</span><br></pre></td></tr></table></figure>\n\n<p>类型确定将用来评估质量门的属性。请参阅枚举 QualityGateType 以查看支持哪些不同类型。</p>\n<h3 id=\"健康报告配置\"><a href=\"#健康报告配置\" class=\"headerlink\" title=\"健康报告配置\"></a>健康报告配置</h3><p>该插件可以参与你项目的运行状况报告。你可以更改将运行状况更改为 0％ 和 100％ 的问题数。此外，可以选择在创建运行状况报告时应考虑的严重性。</p>\n<p><a href=\"jenkins-warnings-next-generation-plugin/11.png\">健康报告配置!</a></p>\n<p>以下代码段显示了具有这些选项的示例管道：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>), healthy: 10, unhealthy: 100, minimumSeverity: <span class=\"string\">&#x27;HIGH&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>该作业根据严重性为 HIGH 和错误的所有警告来调整构建运行状况。如果内部版本包含 10 条或更少的警告，则运行状况为 100％。如果内部版本有 100 个以上的警告，则运行状况为 0％。</p>\n<h3 id=\"管道配置\"><a href=\"#管道配置\" class=\"headerlink\" title=\"管道配置\"></a>管道配置</h3><p>在 Jenkins Pipeline 中使用 Warnings 插件的要求可能很复杂，有时会引起争议。为了尽可能灵活，我决定将主要步骤分为两个独立的部分，然后可以彼此独立使用。</p>\n<h4 id=\"简单的管道配置\"><a href=\"#简单的管道配置\" class=\"headerlink\" title=\"简单的管道配置\"></a>简单的管道配置</h4><p>步骤 recordIssues 提供了简单的管道配置，它提供了与构建后操作相同的属性（请参见上文）。此步骤扫描给定文件集（或控制台日志）中的问题，并在构建中报告这些问题。你可以使用代码片段生成器来创建一个有效的代码片段，以调用此步骤。以下示例显示了此步骤的典型示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues(</span><br><span class=\"line\">    enabledForFailure: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>),</span><br><span class=\"line\">    filters: [includeFile(<span class=\"string\">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class=\"string\">&#x27;WHITESPACE&#x27;</span>)]</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>在此示例中，将扫描文件 <code>* .log</code> 中的 Java 问题。仅包括文件名与模式 <code>MyFile.*.java</code> 匹配的问题。类别 <code>WHITESPACE</code> 的问题将被排除，即使构建失败，也会执行该步骤。</p>\n<p>为了查看所有配置选项，你可以研究<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java\">步骤实现</a>。</p>\n<h4 id=\"声明式管道配置\"><a href=\"#声明式管道配置\" class=\"headerlink\" title=\"声明式管道配置\"></a>声明式管道配置</h4><p>声明性管道作业中的插件配置与脚本管道中的配置相同，请参见以下示例，该示例在 Jenkins 上构建分析模型库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent <span class=\"string\">&#x27;any&#x27;</span></span><br><span class=\"line\">    tools &#123;</span><br><span class=\"line\">        maven <span class=\"string\">&#x27;mvn-default&#x27;</span></span><br><span class=\"line\">        jdk <span class=\"string\">&#x27;jdk-default&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage (<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh <span class=\"string\">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false -Dmaven.test.failure.ignore&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage (<span class=\"string\">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh <span class=\"string\">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs spotbugs:spotbugs&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    post &#123;</span><br><span class=\"line\">        always &#123;</span><br><span class=\"line\">            junit testResults: <span class=\"string\">&#x27;**/target/surefire-reports/TEST-*.xml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tools: [mavenConsole(), java(), javaDoc()]</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: checkStyle()</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: spotBugs()</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: cpd(pattern: <span class=\"string\">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class=\"line\">            recordIssues enabledForFailure: <span class=\"literal\">true</span>, tool: pmdParser(pattern: <span class=\"string\">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"高级管道配置\"><a href=\"#高级管道配置\" class=\"headerlink\" title=\"高级管道配置\"></a>高级管道配置</h4><p>有时仅使用一个步骤发布和报告问题是不够的。例如，如果你使用多个并行步骤来构建产品，并且想要将所有这些步骤中的问题合并为一个结果。然后，你需要拆分扫描和聚合。该插件提供以下两个步骤：</p>\n<ul>\n<li>scanForIssues 此步骤使用特定的解析器扫描报告文件或控制台日志，并创建一个包含报告的中 间 AnnotatedReport 对象。有关详细信息，请参见步骤实现。</li>\n<li>publishIssues：此步骤在你的构建中发布一个新报告，其中包含几个 scanForIssues 步骤的汇总结果。有关详细信息，请参见步骤实现。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node &#123;</span><br><span class=\"line\">  stage (<span class=\"string\">&#x27;Checkout&#x27;</span>) &#123;</span><br><span class=\"line\">      git branch:<span class=\"string\">&#x27;5.0&#x27;</span>, url: <span class=\"string\">&#x27;git@github.com:jenkinsci/warnings-plugin.git&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stage (<span class=\"string\">&#x27;Build&#x27;</span>) &#123;</span><br><span class=\"line\">    def mvnHome = tool <span class=\"string\">&#x27;mvn-default&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sh <span class=\"string\">&quot;<span class=\"variable\">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    junit testResults: <span class=\"string\">&#x27;**/target/*-reports/TEST-*.xml&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def java = scanForIssues tool: java()</span><br><span class=\"line\">    def javadoc = scanForIssues tool: javaDoc()</span><br><span class=\"line\"></span><br><span class=\"line\">    publishIssues issues: [java, javadoc], filters: [includePackage(<span class=\"string\">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stage (<span class=\"string\">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class=\"line\">    def mvnHome = tool <span class=\"string\">&#x27;mvn-default&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sh <span class=\"string\">&quot;<span class=\"variable\">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    def checkstyle = scanForIssues tool: checkStyle(pattern: <span class=\"string\">&#x27;**/target/checkstyle-result.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [checkstyle]</span><br><span class=\"line\"></span><br><span class=\"line\">    def pmd = scanForIssues tool: pmdParser(pattern: <span class=\"string\">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [pmd]</span><br><span class=\"line\"></span><br><span class=\"line\">    def cpd = scanForIssues tool: cpd(pattern: <span class=\"string\">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [cpd]</span><br><span class=\"line\"></span><br><span class=\"line\">    def spotbugs = scanForIssues tool: spotBugs(pattern: <span class=\"string\">&#x27;**/target/findbugsXml.xml&#x27;</span>)</span><br><span class=\"line\">    publishIssues issues: [spotbugs]</span><br><span class=\"line\"></span><br><span class=\"line\">    def maven = scanForIssues tool: mavenConsole()</span><br><span class=\"line\">    publishIssues issues: [maven]</span><br><span class=\"line\"></span><br><span class=\"line\">    publishIssues <span class=\"built_in\">id</span>: <span class=\"string\">&#x27;analysis&#x27;</span>, name: <span class=\"string\">&#x27;All Issues&#x27;</span>, issues: [checkstyle, pmd, spotbugs], filters: [includePackage(<span class=\"string\">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新功能\"><a href=\"#新功能\" class=\"headerlink\" title=\"新功能\"></a>新功能</h2><p>以下各节介绍了最重要的新功能。</p>\n<h3 id=\"发行记录：New-Fixed-Outstanding-问题\"><a href=\"#发行记录：New-Fixed-Outstanding-问题\" class=\"headerlink\" title=\"发行记录：New, Fixed, Outstanding 问题\"></a>发行记录：New, Fixed, Outstanding 问题</h3><p>该插件的一大亮点是能够将后续版本的问题分类为 New, Fixed, Outstanding。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/12.png\" alt=\"趋势\"></p>\n<p>使用此功能可以更轻松地控制项目的质量：你只能专注于最近引入的警告。</p>\n<p>注意：新警告的检测基于复杂的算法，该算法试图在源代码的两个不同版本中跟踪同一警告。根据源代码的修改程度，它可能会产生一些误报，即，即使应该没有警告也可能会收到一些新的固定警告。该算法的准确性仍在研究中，并将在接下来的几个月中进行完善。</p>\n<h3 id=\"Severities-严重程度\"><a href=\"#Severities-严重程度\" class=\"headerlink\" title=\"Severities 严重程度\"></a>Severities 严重程度</h3><p>该插件在图表中显示问题严重性的分布，它定义了以下默认严重级别，但是扩展警告插件的插件可能会添加其他默认级别。</p>\n<ul>\n<li><strong>Error</strong>：表示通常会导致构建失败的错误</li>\n<li><strong>Warning</strong> (High, Normal, Low)：指示给定优先级的警告。映射到优先级取决于各个解析器。</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/13.png\" alt=\"严重程度\"></p>\n<p>请注意，并非每个解析器都能产生不同严重性的警告。某些解析器仅对所有问题使用相同的严重性。</p>\n<h3 id=\"Build-trend-构建趋势\"><a href=\"#Build-trend-构建趋势\" class=\"headerlink\" title=\"Build trend 构建趋势\"></a>Build trend 构建趋势</h3><p>为了查看分析结果的趋势，几个图表显示了每个构建的问题数量。这些图表用于详细信息页面和作业概述中。当前提供以下不同的趋势图类型：</p>\n<h4 id=\"问题的严重程度分布\"><a href=\"#问题的严重程度分布\" class=\"headerlink\" title=\"问题的严重程度分布\"></a>问题的严重程度分布</h4><p>默认趋势图显示问题总数，按严重性堆叠。使用此图表，你可以查看哪种严重程度对问题总数贡献最大。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/14.png\" alt=\"严重度趋势图\"></p>\n<h4 id=\"每种静态分析类型的问题\"><a href=\"#每种静态分析类型的问题\" class=\"headerlink\" title=\"每种静态分析类型的问题\"></a>每种静态分析类型的问题</h4><p>如果你要汇总几个静态分析结果，则类型图将使用单独的一行显示每个工具的问题数量。你可以通过单击相应的图例符号暂时隐藏工具。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/15.png\" alt=\"工具趋势图\"></p>\n<h4 id=\"新问题与已修复问题\"><a href=\"#新问题与已修复问题\" class=\"headerlink\" title=\"新问题与已修复问题\"></a>新问题与已修复问题</h4><p>如果你对积压的问题感兴趣，可以打开新的与固定的图表。它映射了引入的问题与通过一系列构建解决的问题。这可以帮助你了解整个待办事项列表是在增加还是在减少。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/16.png\" alt=\"新修复趋势图\"></p>\n<h4 id=\"项目健康\"><a href=\"#项目健康\" class=\"headerlink\" title=\"项目健康\"></a>项目健康</h4><p>仅当启用了运行状况报告后，运行状况图表才可用。在这种情况下，趋势图将显示健康和不健康区域中的警告数量。你的项目目标应该是使警告数量不逃避图表的绿色部分。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/17.png\" alt=\"健康趋势图\"></p>\n<h4 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h4><p>细节视图中的所有趋势图都支持使用图表底部的范围滑块缩放构建轴。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/18.png\" alt=\"放大\"></p>\n<h4 id=\"构建与日期轴\"><a href=\"#构建与日期轴\" class=\"headerlink\" title=\"构建与日期轴\"></a>构建与日期轴</h4><p>详细信息视图中的所有趋势图都可以显示每个构建或每天的警告数量。你可以通过选择右上角的相应图标在X轴变体之间切换，每天显示平均警告数。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/19.png\" alt=\"构建与日期\"></p>\n<h3 id=\"问题概述\"><a href=\"#问题概述\" class=\"headerlink\" title=\"问题概述\"></a>问题概述</h3><p>你可以在几个聚合视图中快速，高效地查看报告的问题集。根据问题的数量或类型，你将看到问题的分布</p>\n<ul>\n<li>Static Analysis Tool（静态分析工具）</li>\n<li>Module（模组）</li>\n<li>Package or Namespace（包或命名空间）</li>\n<li>Severity（严重程度）</li>\n<li>Category（类别）</li>\n<li>Type（类型）</li>\n</ul>\n<p>这些详细信息视图中的每一个都是交互式的，即，你可以导航到已分类问题的子集。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/20.png\" alt=\"软件包\"></p>\n<h3 id=\"问题详情\"><a href=\"#问题详情\" class=\"headerlink\" title=\"问题详情\"></a>问题详情</h3><p>一组已报告的问题显示在一个现代化的响应表中。该表使用 Ajax 调用按需加载，它提供以下功能：</p>\n<ul>\n<li><strong>Pagination</strong>（分页）：问题的数量分为几个页面，可以使用提供的页面链接进行选择。请注意，目前分页是在客户端进行的，即从服务器获取整个问题表可能要花费一些时间。</li>\n<li><strong>Sorting</strong>（排序）：可以通过单击表列中的仅一个来对表内容进行排序。</li>\n<li><strong>Filtering, Searching</strong>（过滤，搜索）：你可以通过在搜索框中输入一些文本来过滤显示的问题。</li>\n<li><strong>Content Aware</strong>（内容感知）：仅当有必要显示的内容时才显示列。也就是说，如果工具未报告问题类别，则该类别将被自动隐藏。</li>\n<li><strong>Responsive</strong>（响应式）：布局应适应实际的屏幕阈值。</li>\n<li><strong>Details</strong>（详细信息）：问题的详细信息消息（如果由相应的静态分析工具提供）在表中显示为子行。</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/20.png\" alt=\"详情\"></p>\n<h3 id=\"源代码-Blame（归咎于）\"><a href=\"#源代码-Blame（归咎于）\" class=\"headerlink\" title=\"源代码 Blame（归咎于）\"></a>源代码 Blame（归咎于）</h3><p>这个功能需要安装其他插件：<a href=\"https://github.com/jenkinsci/git-forensics-plugin\">Git Forensics 插件</a></p>\n<p>如果未在作业配置中禁用，则插件将执行 <code>git blame</code> 以确定谁是问题的负责 <code>author</code>。在相应的 SCM Blames 视图中，所有问题将与 <code>auther name</code>, <code>email</code>, 和 <code>commit ID</code> 一起列出。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/22.png\" alt=\"Git\"></p>\n<p>为了禁用 <code>git blame</code> 功能，请将属性 <code>blameDisabled</code> 设置为 <code>true</code>，请参见以下示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues blameDisabled: <span class=\"literal\">true</span>, tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git-仓库取证\"><a href=\"#Git-仓库取证\" class=\"headerlink\" title=\"Git 仓库取证\"></a>Git 仓库取证</h3><p>此功能需要安装其他插件：<a href=\"https://github.com/jenkinsci/git-forensics-plugin\">Git Forensics 插件</a></p>\n<p>如果未在作业配置中禁用，则该插件将以“犯罪现场代码”的样式（Adam Tornhill，2013年11月）挖掘源代码存储库，以确定受影响文件的统计信息。在相应的 “SCM 取证” 视图中，将列出所有问题以及受影响文件的以下属性：</p>\n<ul>\n<li>提交总数</li>\n<li>不同作者总数</li>\n<li>创作时间</li>\n<li>最后修改时间</li>\n<li>源代码控制概述</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/23.png\" alt=\"取证视图\"></p>\n<p>为了禁用 Git 取证功能，请将属性 <code>forensicsDisabled</code>设置为 <code>true</code>，请参见以下示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">recordIssues forensicsDisabled: <span class=\"literal\">true</span>, tool: java(pattern: <span class=\"string\">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"源代码视图\"><a href=\"#源代码视图\" class=\"headerlink\" title=\"源代码视图\"></a>源代码视图</h3><p>现在，源代码视图使用 JS 库 Prism 在受影响的文件中显示警告。该库为最流行的语言提供语法高亮显示，并在客户端呈现所有内容。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/24.png\" alt=\"源视图\"></p>\n<h3 id=\"发行总数栏\"><a href=\"#发行总数栏\" class=\"headerlink\" title=\"发行总数栏\"></a>发行总数栏</h3><p>你可以在 Jenkins 作业表的单独列中显示作业的总数。 默认情况下，Jenkins 主列表视图将显示一个新列，该列计算所有工具的发行总数。 你可以添加可以配置的其他列</p>\n<ul>\n<li>列名</li>\n<li>应考虑的实际工具</li>\n<li>要显示的总计类型（总体警告，新警告，特定严重性等），请参阅 “token宏支持” 部分。</li>\n</ul>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/25.png\" alt=\"问题列\"></p>\n<h3 id=\"仪表板视图支持\"><a href=\"#仪表板视图支持\" class=\"headerlink\" title=\"仪表板视图支持\"></a>仪表板视图支持</h3><p>还提供对 Jenkins 仪表板视图的支持。当前，以下 portlet 可用：</p>\n<h4 id=\"每个工具和作业表的问题\"><a href=\"#每个工具和作业表的问题\" class=\"headerlink\" title=\"每个工具和作业表的问题\"></a>每个工具和作业表的问题</h4><p>问题表显示了作业的问题总数（由每个工具分开）。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/26.png\" alt=\"问题 portlet\"></p>\n<h4 id=\"问题趋势\"><a href=\"#问题趋势\" class=\"headerlink\" title=\"问题趋势\"></a>问题趋势</h4><p>可以将趋势图添加为 portlet，该趋势图显示所有作业的发行总数。</p>\n<p><img src=\"/2019/12/jenkins-warnings-next-generation-plugin/27.png\" alt=\"图表 portlet\"></p>\n<h3 id=\"远程API\"><a href=\"#远程API\" class=\"headerlink\" title=\"远程API\"></a>远程API</h3><p>该插件提供以下 REST API 端点。</p>\n<h4 id=\"所有分析结果的汇总摘要\"><a href=\"#所有分析结果的汇总摘要\" class=\"headerlink\" title=\"所有分析结果的汇总摘要\"></a>所有分析结果的汇总摘要</h4><p>可以使用 URL <code>[build-url]/warnings-ng/api/json</code>（或 <code>[build-url]/warnings-ng/api/xml</code>）查询构建中已配置的所有静态分析工具。此汇总显示每个工具的 ID，名称，URL 和问题总数。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;_class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;io.jenkins.plugins.analysis.core.restapi.AggregationApi&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;tools&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;maven&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/maven&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Maven Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">9</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Java Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;javadoc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/javadoc&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JavaDoc Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;checkstyle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/checkstyle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CheckStyle Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;pmd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/pmd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;PMD Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">671</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;spotbugs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/spotbugs&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SpotBugs Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cpd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/cpd&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;CPD Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">123</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;open-tasks&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;latestUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/open-tasks&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Open Tasks Scanner Warnings&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">11</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分析结果汇总\"><a href=\"#分析结果汇总\" class=\"headerlink\" title=\"分析结果汇总\"></a>分析结果汇总</h4><p>你可以使用 URL <code>[build-url]/[tool-id]/api/xml</code>（或 <code>[build-url]/[tool-id]/api/json</code>）获得特定分析报告的摘要。摘要包含问题数量，质量门状态以及所有信息和错误消息。</p>\n<p>这是一个示例 XML 报告：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">analysisResultApi</span> <span class=\"attr\">_class</span>=<span class=\"string\">&#x27;io.jenkins.plugins.analysis.core.restapi.AnalysisResultApi&#x27;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">totalSize</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">totalSize</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">fixedSize</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">fixedSize</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">newSize</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">newSize</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">noIssuesSinceBuild</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">noIssuesSinceBuild</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">successfulSinceBuild</span>&gt;</span>-1<span class=\"tag\">&lt;/<span class=\"name\">successfulSinceBuild</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">qualityGateStatus</span>&gt;</span>WARNING<span class=\"tag\">&lt;/<span class=\"name\">qualityGateStatus</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">owner</span> <span class=\"attr\">_class</span>=<span class=\"string\">&#x27;org.jenkinsci.plugins.workflow.job.WorkflowRun&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">number</span>&gt;</span>46<span class=\"tag\">&lt;/<span class=\"name\">number</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://localhost:8080/view/White%20Mountains/job/Full%20Analysis%20-%20Model/46/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">owner</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Searching for all files in &#x27;/tmp/node1/workspace/Full Analysis - Model&#x27; that match the pattern</span><br><span class=\"line\">    &#x27;**/target/spotbugsXml.xml&#x27;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; found 1 file<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Successfully parsed file /tmp/node1/workspace/Full Analysis - Model/target/spotbugsXml.xml<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; found 3 issues (skipped 0 duplicates)<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Post processing issues on &#x27;node1&#x27; with encoding &#x27;UTF-8&#x27;<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Resolving absolute file names for all issues<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; affected files for all issues already have absolute paths<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Copying affected files to Jenkins&#x27; build folder /Users/hafner/Development/jenkins/jobs/Full Analysis -</span><br><span class=\"line\">    Model/builds/46</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; 2 copied, 0 not in workspace, 0 not-found, 0 with I/O error<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Resolving module names from module definitions (build.xml, pom.xml, or Manifest.mf files)<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; all issues already have a valid module name<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Resolving package names (or namespaces) by parsing the affected files<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; all affected files already have a valid package name<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Creating fingerprints for all affected code blocks to track issues over different builds<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>No filter has been set, publishing all 3 issues<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>No valid reference build found - all reported issues will be considered outstanding<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Evaluating quality qualityGates<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; WARNING - Total number of issues: 3 - Quality Gate: 1<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>-&gt; Some quality qualityGates have been missed: overall result is WARNING<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">infoMessage</span>&gt;</span>Health report is disabled - skipping<span class=\"tag\">&lt;/<span class=\"name\">infoMessage</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">analysisResultApi</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Token-宏支持\"><a href=\"#Token-宏支持\" class=\"headerlink\" title=\"Token 宏支持\"></a>Token 宏支持</h3><p>Warnings 插件提供了 token <code>ANALYSIS_ISSUES_COUNT</code>，可用于其他后期构建处理步骤，例如在邮件中。为了使用此 token，你需要安装 token 宏插件。token 具有以下可选参数：</p>\n<ul>\n<li><code>tool</code>：选择特定的分析结果，如果未定义，则将所有结果相加</li>\n<li><code>type</code>：选择要使用的计数器的类型，请选择以下之一<ul>\n<li>Total（任何严重性）</li>\n<li>Total（仅错误）</li>\n<li>Total（仅严重度高）</li>\n<li>Total（仅严重级别正常）</li>\n<li>Total（仅限严重性低）</li>\n<li>New  （任何严重程度）</li>\n<li>New  （仅限错误）</li>\n<li>New  （仅限严重性高）</li>\n<li>New  （仅严重性为正常）</li>\n<li>New  （仅限严重性低）</li>\n<li>Delta（任何严重程度）</li>\n<li>Delta（仅错误）</li>\n<li>Delta（仅严重度高）</li>\n<li>Delta（仅严重等级正常）</li>\n<li>Delta（仅严重度低）</li>\n<li>Fixed（任何严重性）</li>\n</ul>\n</li>\n</ul>\n<p>例子：</p>\n<p><code>$&#123;ANALYSIS_ISSUES_COUNT&#125;</code>：扩展到所有分析工具的合计数量</p>\n<p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;&#125;</code>：扩展到CheckStyle问题的总数</p>\n<p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;, type: &quot;NEW&quot;&#125;</code>：扩展到新的 CheckStyle 问题数</p>\n<h2 id=\"从静态分析套件过渡\"><a href=\"#从静态分析套件过渡\" class=\"headerlink\" title=\"从静态分析套件过渡\"></a>从静态分析套件过渡</h2><p>以前，静态分析套件的插件提供了相同的功能集（CheckStyle，PMD，FindBugs，静态分析实用工具，Analysis Collector，任务扫描器，Warnings 等）。为了简化用户体验和开发过程，这些插件和核心功能已合并到Warnings Next Generation 插件中。这些旧的静态分析插件不再需要，现在已经停产。如果当前使用这些旧插件之一，则应尽快迁移到新的记录器和步骤。我仍然会保留旧代码一段时间，但是主要的开发工作将花在新的代码库中。</p>\n<ul>\n<li>迁移 Pipelines</li>\n</ul>\n<p>调用旧的静态分析步骤（例如，findbug，checkstyle 等）的管道需要立即调用新的 recordIssues 步骤。所有静态分析工具都使用相同的步骤，使用 step 属性工具选择实际的解析器。有关可用参数集的更多详细信息，请参见“<a href=\"https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration\">配置</a>”部分。</p>\n<ul>\n<li>迁移其他所有工作</li>\n</ul>\n<p>使用旧版 API 的 Freestyle，Matrix 或 Maven Jobs 使用了由每个插件提供的所谓的 Post Build Action。例如，FindBugs 插件确实提供了构建后操作“发布 FindBugs 分析结果”。这些旧的插件特定操作不再受支持，它们现在在用户界面中标记为 [Deprecated]。现在，你需要添加一个新的后期构建步骤-对于所有静态分析工具，此步骤现在称为“记录编译器警告和静态分析结果”。工具的选择是此后期构建步骤配置的一部分。注意：新的后期制作操作无法读取使用旧 API 的后期制作步骤所产生的警告。也就是说，你看不到新旧结果的合并历史记录-你仅看到两个不相关的结果。也不会自动转换以旧格式存储的结果。</p>\n<ul>\n<li>插件的迁移取决于分析核心</li>\n</ul>\n<p>以下插件已集成到此警告插件的新版本中：</p>\n<ul>\n<li>Android-Lint 插件</li>\n<li>Analysis Collector 插件</li>\n<li>CheckStyle 插件</li>\n<li>CCM 插件</li>\n<li>Dry 插件</li>\n<li>PMD 插件</li>\n<li>FindBugs 插件</li>\n<li>Tasks Scanner 插件</li>\n<li>Warnings 插件</li>\n</ul>\n<p>所有其他插件仍需要集成或需要重构以使用新的 API</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"}]}