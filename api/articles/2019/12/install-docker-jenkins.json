{"title":"定制一个 Docker 版 Jenkins 镜像","slug":"2019/12/install-docker-jenkins","date":"2019-12-01T07:17:39.000Z","updated":"2023-07-27T15:36:43.613Z","comments":true,"path":"api/articles/2019/12/install-docker-jenkins.json","excerpt":"对于如何备份 Jenkins 除了用 Jenkins 插件来定期备份之外，如果把 Jenkins 安装到 Docker 里，定期备份一个 Docker Image 最后传到 Artifactory 中，也是一个不错的方案。","covers":["/2019/12/install-docker-jenkins/example-image.png"],"content":"<p>对于如何备份 Jenkins 除了用 Jenkins 插件来定期备份之外，如果把 Jenkins 安装到 Docker 里，定期备份一个 Docker Image 最后传到 Artifactory 中，也是一个不错的方案。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装-Docker-版-Jenkins\"><a href=\"#安装-Docker-版-Jenkins\" class=\"headerlink\" title=\"安装 Docker 版 Jenkins\"></a>安装 Docker 版 Jenkins</h2><p>在 CentOS 上安装 Docker 版 Jenkins，这里推荐用 Long-term Support (LTS) 版本，可以从 Jenkins 官网<a href=\"https://jenkins.io/download/\">下载</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载指定 lts 版本 2.130</span></span><br><span class=\"line\">sudo docker pull jenkins/jenkins:2.130</span><br><span class=\"line\"><span class=\"comment\"># 运行指定 docker Jenkins</span></span><br><span class=\"line\">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:2.130</span><br><span class=\"line\"><span class=\"comment\"># 如果想下载最新的 lts 版</span></span><br><span class=\"line\">sudo docker pull jenkins/jenkins:lts</span><br><span class=\"line\"><span class=\"comment\"># 运行最新的 lts 版 docker Jenkins</span></span><br><span class=\"line\">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<p>启动成功后即可打开 <a href=\"http://hostname:8080/\">http://hostname:8080/</a> 网址</p>\n<h2 id=\"修改登录密码\"><a href=\"#修改登录密码\" class=\"headerlink\" title=\"修改登录密码\"></a>修改登录密码</h2><p>显示所有的 image 以及正在运行的 container</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出来所有 image</span></span><br><span class=\"line\">sudo docker image list</span><br><span class=\"line\"><span class=\"comment\"># 列出当前运行的 container</span></span><br><span class=\"line\">sudo docker ps</span><br><span class=\"line\"><span class=\"comment\"># 进入容器，使用 -it 参数</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it 39bc7a8307d9 /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># 查看默认 admin 密码</span></span><br><span class=\"line\">jenkins@a6195912b579:/$ <span class=\"built_in\">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class=\"line\">5193d06c813d46d3b18babeda836363a</span><br></pre></td></tr></table></figure>\n\n<p>建议登录之后，修改 admin 密码，方便下次登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker commit 39bc7a8307d9 myjenkins:v0.1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将宿主机目录映射到-Jenkins-Docker-中\"><a href=\"#将宿主机目录映射到-Jenkins-Docker-中\" class=\"headerlink\" title=\"将宿主机目录映射到 Jenkins Docker 中\"></a>将宿主机目录映射到 Jenkins Docker 中</h2><p>如果想让 Docker 里的 Jenkins 可以访问宿主机的目录，在运行 docker 时使用 -v 参数进行 mount volume</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -p 8080:8080 -p 50000:50000 --name mydata -v /data/backup:/home/backup jenkins/jenkins:2.130</span><br><span class=\"line\"><span class=\"comment\"># 映射成功，可以看到宿主机上的备份文件了</span></span><br><span class=\"line\">jenkins@c85db3f88115:/home/backup$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">FULL-2019-09-14_02-00  FULL-2019-09-28_02-00  FULL-2019-10-19_02-00  FULL-2019-11-02_02-00  FULL-2019-11-23_02-00</span><br><span class=\"line\">FULL-2019-09-21_02-00  FULL-2019-10-05_02-00  FULL-2019-10-26_02-00  FULL-2019-11-09_02-00  FULL-2019-11-30_02-00</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-Jenkins-Docker-Image-保存在-Artifactory\"><a href=\"#将-Jenkins-Docker-Image-保存在-Artifactory\" class=\"headerlink\" title=\"将 Jenkins Docker Image 保存在 Artifactory\"></a>将 Jenkins Docker Image 保存在 Artifactory</h2><p>下载并安装 Artifactory 企业版或是 JFrog Container Registry，注意 Artifactory Open Source 版本不支持 Docker Registry。</p>\n<p>例如我的 JFrog Container Registry 是：dln.dev.mycompany.com:8040，并创建了一个 docker repository 叫 docker-local。</p>\n<p>上传 Docker Image 一共分为三步：</p>\n<p>docker login</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  在登录前需要添加如下配置到 /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">&quot;insecure-registries&quot;</span> : [<span class=\"string\">&quot;dln.dev.mycompany.com:8040&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># docker login &lt;DOCKER_SERVER&gt;, example below:</span></span><br><span class=\"line\">sudo docker login dln.dev.mycompany.com:8040</span><br></pre></td></tr></table></figure>\n\n<p>docker tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker tag &lt;IMAGE_ID&gt; artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class=\"line\">sudo docker tag myjenkins:v0.1 dln.dev.mycompany.com:8040/docker-local/myjenkins:v0.1</span><br></pre></td></tr></table></figure>\n\n<p>docker push</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker push artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class=\"line\">$ sudo docker push dln.dev.mycompany.com:8040/docker-local/myjenkins::v0.1</span><br><span class=\"line\">The push refers to repository [dln.dev.mycompany.com:8040/docker-local/myjenkins]</span><br><span class=\"line\">98d59071f692: Pushed</span><br><span class=\"line\">af288f00b8a7: Pushed</span><br><span class=\"line\">4b955941a4d0: Pushed</span><br><span class=\"line\">f121afdbbd5d: Pushed</span><br><span class=\"line\">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure>\n\n<p>登录 JFrog Container Registry 刷新就可以到已经上次的 Image 了。说明：截图是我上传的另外一个镜像 ubuntu:15.10</p>\n<p><img src=\"/2019/12/install-docker-jenkins/example-image.png\" alt=\"举例\"></p>\n","more":"<h2 id=\"安装-Docker-版-Jenkins\"><a href=\"#安装-Docker-版-Jenkins\" class=\"headerlink\" title=\"安装 Docker 版 Jenkins\"></a>安装 Docker 版 Jenkins</h2><p>在 CentOS 上安装 Docker 版 Jenkins，这里推荐用 Long-term Support (LTS) 版本，可以从 Jenkins 官网<a href=\"https://jenkins.io/download/\">下载</a>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载指定 lts 版本 2.130</span></span><br><span class=\"line\">sudo docker pull jenkins/jenkins:2.130</span><br><span class=\"line\"><span class=\"comment\"># 运行指定 docker Jenkins</span></span><br><span class=\"line\">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:2.130</span><br><span class=\"line\"><span class=\"comment\"># 如果想下载最新的 lts 版</span></span><br><span class=\"line\">sudo docker pull jenkins/jenkins:lts</span><br><span class=\"line\"><span class=\"comment\"># 运行最新的 lts 版 docker Jenkins</span></span><br><span class=\"line\">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<p>启动成功后即可打开 <a href=\"http://hostname:8080/\">http://hostname:8080/</a> 网址</p>\n<h2 id=\"修改登录密码\"><a href=\"#修改登录密码\" class=\"headerlink\" title=\"修改登录密码\"></a>修改登录密码</h2><p>显示所有的 image 以及正在运行的 container</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出来所有 image</span></span><br><span class=\"line\">sudo docker image list</span><br><span class=\"line\"><span class=\"comment\"># 列出当前运行的 container</span></span><br><span class=\"line\">sudo docker ps</span><br><span class=\"line\"><span class=\"comment\"># 进入容器，使用 -it 参数</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">exec</span> -it 39bc7a8307d9 /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># 查看默认 admin 密码</span></span><br><span class=\"line\">jenkins@a6195912b579:/$ <span class=\"built_in\">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class=\"line\">5193d06c813d46d3b18babeda836363a</span><br></pre></td></tr></table></figure>\n\n<p>建议登录之后，修改 admin 密码，方便下次登录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker commit 39bc7a8307d9 myjenkins:v0.1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将宿主机目录映射到-Jenkins-Docker-中\"><a href=\"#将宿主机目录映射到-Jenkins-Docker-中\" class=\"headerlink\" title=\"将宿主机目录映射到 Jenkins Docker 中\"></a>将宿主机目录映射到 Jenkins Docker 中</h2><p>如果想让 Docker 里的 Jenkins 可以访问宿主机的目录，在运行 docker 时使用 -v 参数进行 mount volume</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -p 8080:8080 -p 50000:50000 --name mydata -v /data/backup:/home/backup jenkins/jenkins:2.130</span><br><span class=\"line\"><span class=\"comment\"># 映射成功，可以看到宿主机上的备份文件了</span></span><br><span class=\"line\">jenkins@c85db3f88115:/home/backup$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">FULL-2019-09-14_02-00  FULL-2019-09-28_02-00  FULL-2019-10-19_02-00  FULL-2019-11-02_02-00  FULL-2019-11-23_02-00</span><br><span class=\"line\">FULL-2019-09-21_02-00  FULL-2019-10-05_02-00  FULL-2019-10-26_02-00  FULL-2019-11-09_02-00  FULL-2019-11-30_02-00</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-Jenkins-Docker-Image-保存在-Artifactory\"><a href=\"#将-Jenkins-Docker-Image-保存在-Artifactory\" class=\"headerlink\" title=\"将 Jenkins Docker Image 保存在 Artifactory\"></a>将 Jenkins Docker Image 保存在 Artifactory</h2><p>下载并安装 Artifactory 企业版或是 JFrog Container Registry，注意 Artifactory Open Source 版本不支持 Docker Registry。</p>\n<p>例如我的 JFrog Container Registry 是：dln.dev.mycompany.com:8040，并创建了一个 docker repository 叫 docker-local。</p>\n<p>上传 Docker Image 一共分为三步：</p>\n<p>docker login</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  在登录前需要添加如下配置到 /etc/docker/daemon.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">&quot;insecure-registries&quot;</span> : [<span class=\"string\">&quot;dln.dev.mycompany.com:8040&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># docker login &lt;DOCKER_SERVER&gt;, example below:</span></span><br><span class=\"line\">sudo docker login dln.dev.mycompany.com:8040</span><br></pre></td></tr></table></figure>\n\n<p>docker tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker tag &lt;IMAGE_ID&gt; artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class=\"line\">sudo docker tag myjenkins:v0.1 dln.dev.mycompany.com:8040/docker-local/myjenkins:v0.1</span><br></pre></td></tr></table></figure>\n\n<p>docker push</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker push artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class=\"line\">$ sudo docker push dln.dev.mycompany.com:8040/docker-local/myjenkins::v0.1</span><br><span class=\"line\">The push refers to repository [dln.dev.mycompany.com:8040/docker-local/myjenkins]</span><br><span class=\"line\">98d59071f692: Pushed</span><br><span class=\"line\">af288f00b8a7: Pushed</span><br><span class=\"line\">4b955941a4d0: Pushed</span><br><span class=\"line\">f121afdbbd5d: Pushed</span><br><span class=\"line\">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure>\n\n<p>登录 JFrog Container Registry 刷新就可以到已经上次的 Image 了。说明：截图是我上传的另外一个镜像 ubuntu:15.10</p>\n<p><img src=\"/2019/12/install-docker-jenkins/example-image.png\" alt=\"举例\"></p>","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"Docker","path":"api/tags/Docker.json"}]}