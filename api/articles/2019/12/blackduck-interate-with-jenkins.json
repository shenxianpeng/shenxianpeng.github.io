{"title":"Black Duck 与 Jenkins 集成","slug":"2019/12/blackduck-interate-with-jenkins","date":"2019-12-08T06:48:02.000Z","updated":"2024-09-26T20:59:10.757Z","comments":true,"path":"api/articles/2019/12/blackduck-interate-with-jenkins.json","excerpt":"最近做了 Black Duck 与 Jenkins 的集成，目标是给测试和开发提供定制化、定时的对各个开发代码仓库的进行源码扫描。为什么要做源码扫描","covers":["/2019/12/blackduck-interate-with-jenkins/open-source.png","/2019/12/blackduck-interate-with-jenkins/blackduck-credentials.png","/2019/12/blackduck-interate-with-jenkins/blackduck-config.png","/2019/12/blackduck-interate-with-jenkins/blackduck-Jenkins-job.png"],"content":"<p>最近做了 Black Duck 与 Jenkins 的集成，目标是给测试和开发提供定制化、定时的对各个开发代码仓库的进行源码扫描。</p>\n<h2 id=\"为什么要做源码扫描\"><a href=\"#为什么要做源码扫描\" class=\"headerlink\" title=\"为什么要做源码扫描\"></a>为什么要做源码扫描</h2><span id=\"more\"></span>\n\n<p>在产品开发中经常需要引入一些开源组件，但这些开源的代码会给产品风险。因此我们在发布自己产品的时候需要对这些开源组件的漏洞和许可信息进行评估。<br><img src=\"/2019/12/blackduck-interate-with-jenkins/open-source.png\" alt=\"开源不等于安全\"></p>\n<p>Black Duck（黑鸭）是一款对源代码进行扫描、审计和代码管理的软件工具（同类型的工具还有 JFrog Xray）。能够搜索安全的开源代码，检测产品的开源代码使用情况，以检查外来代码的开源代码使用情况和风险情况。</p>\n<p>如果不能及时的进行代码扫描，在产品发布快要发布才进行扫描，如果发现问题这时候再去解决就会变得非常被动，因此团队需要尽早发现并解决问题，将 CI 工具进行集成，进行每日、每周、每月扫描就变得十分重要。</p>\n<h2 id=\"Black-Duck-手动执行一般步骤\"><a href=\"#Black-Duck-手动执行一般步骤\" class=\"headerlink\" title=\"Black Duck 手动执行一般步骤\"></a>Black Duck 手动执行一般步骤</h2><ol>\n<li>手动下载指定 Git 仓库及分支代码</li>\n<li>去掉不相关的代码（也可以通过 Black Duck 参数去指定要扫描的特定文件或文件夹）</li>\n<li>手动执行 Black Duck 扫描命令​</li>\n<li>扫描成功后，结果传到内部 Black Duck 网站供相关人员进行审查</li>\n</ol>\n<h2 id=\"Black-Duck-与-Jenkins-的集成目标\"><a href=\"#Black-Duck-与-Jenkins-的集成目标\" class=\"headerlink\" title=\"Black Duck 与 Jenkins 的集成目标\"></a>Black Duck 与 Jenkins 的集成目标</h2><ol>\n<li>一个流水线支持定制化仓库的代码下载</li>\n<li>给开发和测试提供简单的、可随时可以执行源码扫描的界面</li>\n<li>支持定期自动扫描，以及与其他 Jenkins 任务联动执行​</li>\n</ol>\n<h2 id=\"Black-Duck-参数介绍\"><a href=\"#Black-Duck-参数介绍\" class=\"headerlink\" title=\"Black Duck 参数介绍\"></a>Black Duck 参数介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--blackduck.url                                       <span class=\"comment\"># 你的 Black Duck 网址</span></span><br><span class=\"line\">--blackduck.username                                  <span class=\"comment\"># 你的登录用户</span></span><br><span class=\"line\">--blackduck.api.token                                 <span class=\"comment\"># 你的登录用户 Token</span></span><br><span class=\"line\">--detect.project.name                                 <span class=\"comment\"># Black Duck 下面的项目</span></span><br><span class=\"line\">--detect.project.version.name                         <span class=\"comment\"># 项目版本号</span></span><br><span class=\"line\">--detect.source.path                                  <span class=\"comment\"># 要扫描的代码目录</span></span><br><span class=\"line\">--logging.level.com.synopsys.integration              <span class=\"comment\"># 扫描日志级别</span></span><br><span class=\"line\">--blackduck.trust.cert=TRUE                           <span class=\"comment\"># 是否信任 socket (SSL)</span></span><br><span class=\"line\">--detect.blackduck.signature.scanner.snippet.matching <span class=\"comment\"># 扫描片段模式</span></span><br></pre></td></tr></table></figure>\n\n<p>更多其他参数可以参照官方的 CI 集成文档 <a href=\"https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/71106939/Synopsys+Detect+for+Jenkins\">Synopsys Detect for Jenkins</a></p>\n<h2 id=\"Black-Duck-配置\"><a href=\"#Black-Duck-配置\" class=\"headerlink\" title=\"Black Duck 配置\"></a>Black Duck 配置</h2><p>首先，安装 Black Duck 插件 <a href=\"https://wiki.jenkins.io/display/JENKINS/Synopsys+Detect+Plugin\">Synopsys Detect</a> 到 Jenkins</p>\n<p>然后，配置 Synopsys Detect 插件</p>\n<ul>\n<li>Jenkins -&gt; Confiruration（系统配置）</li>\n<li>Black Duck URL： 公司内部的 Black Duck 网址，例如 <a href=\"https://yourcompany.blackducksoftware.com/\">https://yourcompany.blackducksoftware.com</a></li>\n<li>Black Duck credentials： 注意要选择 credentials 类型为 Secret text, Secret 填写你用户的 Token<br><img src=\"/2019/12/blackduck-interate-with-jenkins/blackduck-credentials.png\" alt=\"Secret text 配置\"></li>\n<li>配置完成后点击 Test connections to Black Duck，显示 Connection successful 表示配置成功。<br><img src=\"/2019/12/blackduck-interate-with-jenkins/blackduck-config.png\" alt=\"Connection successful\"></li>\n</ul>\n<h2 id=\"Black-Duck-流水线任务效果\"><a href=\"#Black-Duck-流水线任务效果\" class=\"headerlink\" title=\"Black Duck 流水线任务效果\"></a>Black Duck 流水线任务效果</h2><p><img src=\"/2019/12/blackduck-interate-with-jenkins/blackduck-Jenkins-job.png\" alt=\"Build with Parameters\"></p>\n<h2 id=\"Black-Duck-流水线代码\"><a href=\"#Black-Duck-流水线代码\" class=\"headerlink\" title=\"Black Duck 流水线代码\"></a>Black Duck 流水线代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    node &#123;</span><br><span class=\"line\">      label <span class=\"string\">&#x27;black-duck&#x27;</span></span><br><span class=\"line\">      customWorkspace <span class=\"string\">&quot;/agent/workspace/blackduck&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parameters &#123;</span><br><span class=\"line\">    choice(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;VERSION&#x27;</span>,</span><br><span class=\"line\">      choices: [<span class=\"string\">&#x27;MVSURE_v1.1&#x27;</span>, <span class=\"string\">&#x27;MVSURE_v1.2&#x27;</span>, <span class=\"string\">&#x27;MVSURE_v2.2&#x27;</span>],</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;Which version do you want scan on black duck? MVSURE_v1.1, MVSURE_v1.2 or others?&#x27;</span>)</span><br><span class=\"line\">    choice(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;REPO&#x27;</span>,</span><br><span class=\"line\">      choices: [<span class=\"string\">&#x27;blog-server&#x27;</span>, <span class=\"string\">&#x27;blog-client&#x27;</span>, <span class=\"string\">&#x27;blog-docker&#x27;</span>],</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;Which repository code does above VERSION belong to?&#x27;</span>)</span><br><span class=\"line\">    string(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;BRANCH&#x27;</span>,</span><br><span class=\"line\">      defaultValue: <span class=\"string\">&#x27;develop&#x27;</span>,</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;Which branch does above VERSION belong to?&#x27;</span>)</span><br><span class=\"line\">    choice(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;SNIPPET-MODES&#x27;</span>,</span><br><span class=\"line\">      choices: [<span class=\"string\">&#x27;SNIPPET_MATCHING&#x27;</span>, <span class=\"string\">&#x27;SNIPPET_MATCHING_ONLY&#x27;</span>, <span class=\"string\">&#x27;FULL_SNIPPET_MATCHING&#x27;</span>, <span class=\"string\">&#x27;FULL_SNIPPET_MATCHING_ONLY&#x27;</span>, <span class=\"string\">&#x27;NONE&#x27;</span>],</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;What snippet scan mode do you want to choose?&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  environment &#123;</span><br><span class=\"line\">    ROBOT                  = credentials(<span class=\"string\">&quot;d1cbab74-823d-41aa-abb7-858485121212&quot;</span>)</span><br><span class=\"line\">    hub_detect             = <span class=\"string\">&#x27;https://blackducksoftware.github.io/hub-detect/hub-detect.sh&#x27;</span></span><br><span class=\"line\">    blackduck_url          = <span class=\"string\">&#x27;https://yourcompany.blackducksoftware.com&#x27;</span></span><br><span class=\"line\">    blackduck_user         = <span class=\"string\">&#x27;robot@yourcompany.com&#x27;</span></span><br><span class=\"line\">    detect_project         = <span class=\"string\">&#x27;GITHUB&#x27;</span></span><br><span class=\"line\">    detect_project_version = <span class=\"string\">&#x27;$&#123;VERSION&#125;&#x27;</span></span><br><span class=\"line\">    detect_source_path     = <span class=\"string\">&#x27;$&#123;WORKSPACE&#125;/$&#123;REPO&#125;/src&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 只保留最近十次 Jenkins 执行结果</span></span><br><span class=\"line\">  options &#123;buildDiscarder(logRotator(numToKeepStr:<span class=\"string\">&#x27;10&#x27;</span>))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 定时触发可以在这里添加</span></span><br><span class=\"line\"></span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;git clone&quot;</span>)&#123; <span class=\"comment\"># 参数化 git clone 代码过程</span></span><br><span class=\"line\">      steps&#123;</span><br><span class=\"line\">        sh <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        if [ -d $&#123;REPO&#125; ]; then</span></span><br><span class=\"line\"><span class=\"string\">            rm -rf $&#123;REPO&#125;</span></span><br><span class=\"line\"><span class=\"string\">        fi</span></span><br><span class=\"line\"><span class=\"string\">        git clone -b $&#123;BRANCH&#125; --depth 1 https://$ROBOT_USR:&quot;$ROBOT_PSW&quot;@git.yourcompany.com/scm/github/$&#123;REPO&#125;.git</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;black duck scan&quot;</span>)&#123; <span class=\"comment\"># 参数化 Black Duck 所用到的参数值</span></span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        withCredentials([string(credentialsId: <span class=\"string\">&#x27;robot-black-duck-scan&#x27;</span>, variable: <span class=\"string\">&#x27;TOKEN&#x27;</span>)]) &#123; <span class=\"comment\"># 用 withCredentials 来获得 Token</span></span><br><span class=\"line\">          synopsys_detect <span class=\"string\">&#x27;bash &lt;(curl -s $&#123;hub_detect&#125;) --blackduck.url=$&#123;blackduck_url&#125; --blackduck.username=$&#123;blackduck_user&#125; --blackduck.api.token=$&#123;TOKEN&#125; --detect.project.name=$&#123;detect_project&#125; --detect.project.version.name=$&#123;detect_project_version&#125; --detect.source.path=$&#123;detect_source_path&#125; --logging.level.com.synopsys.integration=debug --blackduck.trust.cert=TRUE --detect.blackduck.signature.scanner.snippet.matching=$&#123;SNIPPET-MODES&#125;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 不论结果任何都给执行者发送邮件通知</span></span><br><span class=\"line\">    always &#123;</span><br><span class=\"line\">      script &#123;</span><br><span class=\"line\">        def email = load <span class=\"string\">&quot;vars/email.groovy&quot;</span></span><br><span class=\"line\">        wrap([<span class=\"variable\">$class</span>: <span class=\"string\">&#x27;BuildUser&#x27;</span>]) &#123;</span><br><span class=\"line\">            def user = env.BUILD_USER_ID</span><br><span class=\"line\">            email.build(currentBuild.result, <span class=\"string\">&quot;<span class=\"variable\">$&#123;user&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    success &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;success, cleanup blackduck workspace&quot;</span></span><br><span class=\"line\">      cleanWs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<p>在产品开发中经常需要引入一些开源组件，但这些开源的代码会给产品风险。因此我们在发布自己产品的时候需要对这些开源组件的漏洞和许可信息进行评估。<br><img src=\"/2019/12/blackduck-interate-with-jenkins/open-source.png\" alt=\"开源不等于安全\"></p>\n<p>Black Duck（黑鸭）是一款对源代码进行扫描、审计和代码管理的软件工具（同类型的工具还有 JFrog Xray）。能够搜索安全的开源代码，检测产品的开源代码使用情况，以检查外来代码的开源代码使用情况和风险情况。</p>\n<p>如果不能及时的进行代码扫描，在产品发布快要发布才进行扫描，如果发现问题这时候再去解决就会变得非常被动，因此团队需要尽早发现并解决问题，将 CI 工具进行集成，进行每日、每周、每月扫描就变得十分重要。</p>\n<h2 id=\"Black-Duck-手动执行一般步骤\"><a href=\"#Black-Duck-手动执行一般步骤\" class=\"headerlink\" title=\"Black Duck 手动执行一般步骤\"></a>Black Duck 手动执行一般步骤</h2><ol>\n<li>手动下载指定 Git 仓库及分支代码</li>\n<li>去掉不相关的代码（也可以通过 Black Duck 参数去指定要扫描的特定文件或文件夹）</li>\n<li>手动执行 Black Duck 扫描命令​</li>\n<li>扫描成功后，结果传到内部 Black Duck 网站供相关人员进行审查</li>\n</ol>\n<h2 id=\"Black-Duck-与-Jenkins-的集成目标\"><a href=\"#Black-Duck-与-Jenkins-的集成目标\" class=\"headerlink\" title=\"Black Duck 与 Jenkins 的集成目标\"></a>Black Duck 与 Jenkins 的集成目标</h2><ol>\n<li>一个流水线支持定制化仓库的代码下载</li>\n<li>给开发和测试提供简单的、可随时可以执行源码扫描的界面</li>\n<li>支持定期自动扫描，以及与其他 Jenkins 任务联动执行​</li>\n</ol>\n<h2 id=\"Black-Duck-参数介绍\"><a href=\"#Black-Duck-参数介绍\" class=\"headerlink\" title=\"Black Duck 参数介绍\"></a>Black Duck 参数介绍</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--blackduck.url                                       <span class=\"comment\"># 你的 Black Duck 网址</span></span><br><span class=\"line\">--blackduck.username                                  <span class=\"comment\"># 你的登录用户</span></span><br><span class=\"line\">--blackduck.api.token                                 <span class=\"comment\"># 你的登录用户 Token</span></span><br><span class=\"line\">--detect.project.name                                 <span class=\"comment\"># Black Duck 下面的项目</span></span><br><span class=\"line\">--detect.project.version.name                         <span class=\"comment\"># 项目版本号</span></span><br><span class=\"line\">--detect.source.path                                  <span class=\"comment\"># 要扫描的代码目录</span></span><br><span class=\"line\">--logging.level.com.synopsys.integration              <span class=\"comment\"># 扫描日志级别</span></span><br><span class=\"line\">--blackduck.trust.cert=TRUE                           <span class=\"comment\"># 是否信任 socket (SSL)</span></span><br><span class=\"line\">--detect.blackduck.signature.scanner.snippet.matching <span class=\"comment\"># 扫描片段模式</span></span><br></pre></td></tr></table></figure>\n\n<p>更多其他参数可以参照官方的 CI 集成文档 <a href=\"https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/71106939/Synopsys+Detect+for+Jenkins\">Synopsys Detect for Jenkins</a></p>\n<h2 id=\"Black-Duck-配置\"><a href=\"#Black-Duck-配置\" class=\"headerlink\" title=\"Black Duck 配置\"></a>Black Duck 配置</h2><p>首先，安装 Black Duck 插件 <a href=\"https://wiki.jenkins.io/display/JENKINS/Synopsys+Detect+Plugin\">Synopsys Detect</a> 到 Jenkins</p>\n<p>然后，配置 Synopsys Detect 插件</p>\n<ul>\n<li>Jenkins -&gt; Confiruration（系统配置）</li>\n<li>Black Duck URL： 公司内部的 Black Duck 网址，例如 <a href=\"https://yourcompany.blackducksoftware.com/\">https://yourcompany.blackducksoftware.com</a></li>\n<li>Black Duck credentials： 注意要选择 credentials 类型为 Secret text, Secret 填写你用户的 Token<br><img src=\"/2019/12/blackduck-interate-with-jenkins/blackduck-credentials.png\" alt=\"Secret text 配置\"></li>\n<li>配置完成后点击 Test connections to Black Duck，显示 Connection successful 表示配置成功。<br><img src=\"/2019/12/blackduck-interate-with-jenkins/blackduck-config.png\" alt=\"Connection successful\"></li>\n</ul>\n<h2 id=\"Black-Duck-流水线任务效果\"><a href=\"#Black-Duck-流水线任务效果\" class=\"headerlink\" title=\"Black Duck 流水线任务效果\"></a>Black Duck 流水线任务效果</h2><p><img src=\"/2019/12/blackduck-interate-with-jenkins/blackduck-Jenkins-job.png\" alt=\"Build with Parameters\"></p>\n<h2 id=\"Black-Duck-流水线代码\"><a href=\"#Black-Duck-流水线代码\" class=\"headerlink\" title=\"Black Duck 流水线代码\"></a>Black Duck 流水线代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline&#123;</span><br><span class=\"line\">  agent &#123;</span><br><span class=\"line\">    node &#123;</span><br><span class=\"line\">      label <span class=\"string\">&#x27;black-duck&#x27;</span></span><br><span class=\"line\">      customWorkspace <span class=\"string\">&quot;/agent/workspace/blackduck&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  parameters &#123;</span><br><span class=\"line\">    choice(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;VERSION&#x27;</span>,</span><br><span class=\"line\">      choices: [<span class=\"string\">&#x27;MVSURE_v1.1&#x27;</span>, <span class=\"string\">&#x27;MVSURE_v1.2&#x27;</span>, <span class=\"string\">&#x27;MVSURE_v2.2&#x27;</span>],</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;Which version do you want scan on black duck? MVSURE_v1.1, MVSURE_v1.2 or others?&#x27;</span>)</span><br><span class=\"line\">    choice(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;REPO&#x27;</span>,</span><br><span class=\"line\">      choices: [<span class=\"string\">&#x27;blog-server&#x27;</span>, <span class=\"string\">&#x27;blog-client&#x27;</span>, <span class=\"string\">&#x27;blog-docker&#x27;</span>],</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;Which repository code does above VERSION belong to?&#x27;</span>)</span><br><span class=\"line\">    string(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;BRANCH&#x27;</span>,</span><br><span class=\"line\">      defaultValue: <span class=\"string\">&#x27;develop&#x27;</span>,</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;Which branch does above VERSION belong to?&#x27;</span>)</span><br><span class=\"line\">    choice(</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;SNIPPET-MODES&#x27;</span>,</span><br><span class=\"line\">      choices: [<span class=\"string\">&#x27;SNIPPET_MATCHING&#x27;</span>, <span class=\"string\">&#x27;SNIPPET_MATCHING_ONLY&#x27;</span>, <span class=\"string\">&#x27;FULL_SNIPPET_MATCHING&#x27;</span>, <span class=\"string\">&#x27;FULL_SNIPPET_MATCHING_ONLY&#x27;</span>, <span class=\"string\">&#x27;NONE&#x27;</span>],</span><br><span class=\"line\">      description: <span class=\"string\">&#x27;What snippet scan mode do you want to choose?&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  environment &#123;</span><br><span class=\"line\">    ROBOT                  = credentials(<span class=\"string\">&quot;d1cbab74-823d-41aa-abb7-858485121212&quot;</span>)</span><br><span class=\"line\">    hub_detect             = <span class=\"string\">&#x27;https://blackducksoftware.github.io/hub-detect/hub-detect.sh&#x27;</span></span><br><span class=\"line\">    blackduck_url          = <span class=\"string\">&#x27;https://yourcompany.blackducksoftware.com&#x27;</span></span><br><span class=\"line\">    blackduck_user         = <span class=\"string\">&#x27;robot@yourcompany.com&#x27;</span></span><br><span class=\"line\">    detect_project         = <span class=\"string\">&#x27;GITHUB&#x27;</span></span><br><span class=\"line\">    detect_project_version = <span class=\"string\">&#x27;$&#123;VERSION&#125;&#x27;</span></span><br><span class=\"line\">    detect_source_path     = <span class=\"string\">&#x27;$&#123;WORKSPACE&#125;/$&#123;REPO&#125;/src&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 只保留最近十次 Jenkins 执行结果</span></span><br><span class=\"line\">  options &#123;buildDiscarder(logRotator(numToKeepStr:<span class=\"string\">&#x27;10&#x27;</span>))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 定时触发可以在这里添加</span></span><br><span class=\"line\"></span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;git clone&quot;</span>)&#123; <span class=\"comment\"># 参数化 git clone 代码过程</span></span><br><span class=\"line\">      steps&#123;</span><br><span class=\"line\">        sh <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        if [ -d $&#123;REPO&#125; ]; then</span></span><br><span class=\"line\"><span class=\"string\">            rm -rf $&#123;REPO&#125;</span></span><br><span class=\"line\"><span class=\"string\">        fi</span></span><br><span class=\"line\"><span class=\"string\">        git clone -b $&#123;BRANCH&#125; --depth 1 https://$ROBOT_USR:&quot;$ROBOT_PSW&quot;@git.yourcompany.com/scm/github/$&#123;REPO&#125;.git</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stage(<span class=\"string\">&quot;black duck scan&quot;</span>)&#123; <span class=\"comment\"># 参数化 Black Duck 所用到的参数值</span></span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        withCredentials([string(credentialsId: <span class=\"string\">&#x27;robot-black-duck-scan&#x27;</span>, variable: <span class=\"string\">&#x27;TOKEN&#x27;</span>)]) &#123; <span class=\"comment\"># 用 withCredentials 来获得 Token</span></span><br><span class=\"line\">          synopsys_detect <span class=\"string\">&#x27;bash &lt;(curl -s $&#123;hub_detect&#125;) --blackduck.url=$&#123;blackduck_url&#125; --blackduck.username=$&#123;blackduck_user&#125; --blackduck.api.token=$&#123;TOKEN&#125; --detect.project.name=$&#123;detect_project&#125; --detect.project.version.name=$&#123;detect_project_version&#125; --detect.source.path=$&#123;detect_source_path&#125; --logging.level.com.synopsys.integration=debug --blackduck.trust.cert=TRUE --detect.blackduck.signature.scanner.snippet.matching=$&#123;SNIPPET-MODES&#125;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post &#123;</span><br><span class=\"line\">    <span class=\"comment\"># 不论结果任何都给执行者发送邮件通知</span></span><br><span class=\"line\">    always &#123;</span><br><span class=\"line\">      script &#123;</span><br><span class=\"line\">        def email = load <span class=\"string\">&quot;vars/email.groovy&quot;</span></span><br><span class=\"line\">        wrap([<span class=\"variable\">$class</span>: <span class=\"string\">&#x27;BuildUser&#x27;</span>]) &#123;</span><br><span class=\"line\">            def user = env.BUILD_USER_ID</span><br><span class=\"line\">            email.build(currentBuild.result, <span class=\"string\">&quot;<span class=\"variable\">$&#123;user&#125;</span>&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    success &#123;</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">&quot;success, cleanup blackduck workspace&quot;</span></span><br><span class=\"line\">      cleanWs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"BlackDuck","path":"api/categories/BlackDuck.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"BlackDuck","path":"api/tags/BlackDuck.json"}]}