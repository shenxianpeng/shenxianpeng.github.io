{"title":"如何通过 Jenkins 进行资源的锁定和释放","slug":"2019/08/jenkins-lock-resource","date":"2019-08-09T16:00:00.000Z","updated":"2020-05-12T08:18:10.242Z","comments":true,"path":"api/articles/2019/08/jenkins-lock-resource.json","excerpt":null,"covers":["/2019/08/jenkins-lock-resource/config-lock-resource.png","/2019/08/jenkins-lock-resource/lock-resource-pool.png","/2019/08/jenkins-lock-resource/build-with-parameters.png","/2019/08/jenkins-lock-resource/build-with-parameters-1.png","/2019/08/jenkins-lock-resource/lock-resource-pool-1.png","/2019/08/jenkins-lock-resource/build-with-parameters-2.png","/2019/08/jenkins-lock-resource/lock-resource-pool-2.png","/2019/08/jenkins-lock-resource/build-with-parameters-3.png","/2019/08/jenkins-lock-resource/build-with-parameters-3-log.png","/2019/08/jenkins-lock-resource/unlock-job-1.png","/2019/08/jenkins-lock-resource/unlock-job-1-after.png"],"content":"<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><p>日常工作中需要切换到不同平台（包括 Linux, AIX, Windows, Solris, HP-UX）不同的版本进行开发和验证问题，但是由于虚拟机有限，并不能保证每个开发和测试都有所以平台的虚拟机并且安装了不同的版本，因此准备各种各样的开发和测试环境会花费很长时间。</p>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>对于这样的需求，一般都会首先想到 Docker；其次是从 Artifactory 取 Build 然后通过 CI 工具进行安装；最后从 Source Code 进行构建然后安装。</p>\n<ul>\n<li><p>先说 Docker，由于我们所支持的平台繁多，包括 Linux, AIX, Windows, Solris, HP-UX, Docker 只适用于 Linux 和 Windows，因此不能满足这样的需求。</p>\n</li>\n<li><p>由于其他原因我们的 Artifactory 暂时还不能使用，最后只能选择用 Source Code 进行构建然后进行安装。这两种方式都需要解决锁定资源以及释放资源的问题。如果当前环境有人正在使用，那么这台虚拟机的资源应该被锁住，不允许 Jenkins 再去调用这台正在使用的 node，以保证环境在使用过程中不被破坏。</p>\n</li>\n</ul>\n<p>本文主要介绍如何通过 Jenkins Lockable Resources Plugin 来实现资源的上锁和解锁。</p>\n<h2 id=\"演示-Demo\"><a href=\"#演示-Demo\" class=\"headerlink\" title=\"演示 Demo\"></a>演示 Demo</h2><ol>\n<li><p>设置 Lockable Resources</p>\n<ul>\n<li>Jenkins -&gt; configuration -&gt; Lockable Resources Manager -&gt; Add Lockable Resource<br><img src=\"/2019/08/jenkins-lock-resource/config-lock-resource.png\" alt=\"我设置了两个 Resources \"><br>这里的 Labels 是你的 node 的 Label，在 Jenkins -&gt; Nodes 设置</li>\n</ul>\n</li>\n<li><p>查看 Lockable Resources 资源池</p>\n<p> <img src=\"/2019/08/jenkins-lock-resource/lock-resource-pool.png\" alt=\"显示我有两个资源可用 \"></p>\n</li>\n<li><p>测试锁资源</p>\n<ul>\n<li>这里我配置的是参数化类型的 Job，可以选择不同平台，不同仓库进行构建<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters.png\" alt=\" Build With Parameters \"> build-with-parameters</li>\n<li>运行第一个 Job<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-1.png\" alt=\" 第一个 Job 已经运行 \"></li>\n<li>查看当前可用资源数量 Free resources = 1，看到已经被 #47 这个 Job 所使用<br><img src=\"/2019/08/jenkins-lock-resource/lock-resource-pool-1.png\" alt=\"当前可用资源数为1\"></li>\n<li>继续运行第二个 Job<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-2.png\" alt=\" 第二个 Job 已经运行 \"></li>\n<li>查看当前可用资源数量 Free resources = 0，看到已经被 #48 这个 Job 所使用<br><img src=\"/2019/08/jenkins-lock-resource/lock-resource-pool-2.png\" alt=\"当前可用资源数为0\"></li>\n<li>最关键是这一步，如果继续运行第三个 Job，是否能够被继续行呢<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-3.png\" alt=\" 第三个 Job 已经运行 \"></li>\n<li>可以看到这个任务没有开始执行，看下 log 是否真的没有被执行。通过日志发现，当前正在等待可用的资源<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-3-log.png\" alt=\" 第三个 Job log \"></li>\n</ul>\n</li>\n<li><p>测试释放锁</p>\n<ul>\n<li>现在释放一个资源，看下第三个 Job 是否能拿到资源，并且执行<br><img src=\"/2019/08/jenkins-lock-resource/unlock-job-1.png\" alt=\" 释放 Job 1 锁 \"></li>\n<li>从下图可以看到 第三个 Job 已经运行成功了<br><img src=\"/2019/08/jenkins-lock-resource/unlock-job-1-after.png\" alt=\" 第三个 Job 运行 \"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Jenkins-pipeline-代码\"><a href=\"#Jenkins-pipeline-代码\" class=\"headerlink\" title=\"Jenkins pipeline 代码\"></a>Jenkins pipeline 代码</h2><p>整个 pipeline 最关键的部分就是如何上锁和释放，这里是通过 lock 和 input message 来实现。</p>\n<p>当前 Job 只要用户不点击 Yes，就会一直处于没有完成的状态，那么的它的锁会一直生效中。直到点击 Yes， Job 结束，锁也就释放了。</p>\n<p>具体可以参考下面的 Jenkinsfile。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">        node &#123;</span><br><span class=\"line\">            label <span class=\"string\">'PreDevENV'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    options &#123;</span><br><span class=\"line\">        lock(label: <span class=\"string\">'PreDevENV'</span>, quantity: 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters &#123;</span><br><span class=\"line\">        choice(</span><br><span class=\"line\">            name: <span class=\"string\">'platform'</span>,</span><br><span class=\"line\">            choices: [<span class=\"string\">'Linux'</span>, <span class=\"string\">'AIX'</span>, <span class=\"string\">'Windows'</span>, <span class=\"string\">'Solris'</span>, <span class=\"string\">'HP-UX'</span>],</span><br><span class=\"line\">            description: <span class=\"string\">'Required: which platform do you want to build'</span>)</span><br><span class=\"line\">        choice(</span><br><span class=\"line\">            name: <span class=\"string\">'repository'</span>,</span><br><span class=\"line\">            choices: [<span class=\"string\">'repo-0.1'</span>, <span class=\"string\">'repo-1.1'</span>, <span class=\"string\">'repo-2.1'</span>, <span class=\"string\">'repo-3.1'</span>, <span class=\"string\">'repo-4.1'</span>],</span><br><span class=\"line\">            description: <span class=\"string\">'Required: which repository do you want to build'</span>)</span><br><span class=\"line\">        string(</span><br><span class=\"line\">            name: <span class=\"string\">'branch'</span>,</span><br><span class=\"line\">            defaultValue: <span class=\"string\">''</span>,</span><br><span class=\"line\">            description: <span class=\"string\">'Required: which branch do you want to build'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">'git clone'</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"git clone source\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'start build'</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"start build\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'install build'</span>)&#123;</span><br><span class=\"line\">            steps&#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"installing\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'unlock your resource'</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                input message: <span class=\"string\">\"do you have finished?\"</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"Yes, I have finished\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<h2 id=\"业务场景\"><a href=\"#业务场景\" class=\"headerlink\" title=\"业务场景\"></a>业务场景</h2><p>日常工作中需要切换到不同平台（包括 Linux, AIX, Windows, Solris, HP-UX）不同的版本进行开发和验证问题，但是由于虚拟机有限，并不能保证每个开发和测试都有所以平台的虚拟机并且安装了不同的版本，因此准备各种各样的开发和测试环境会花费很长时间。</p>\n<h2 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h2><p>对于这样的需求，一般都会首先想到 Docker；其次是从 Artifactory 取 Build 然后通过 CI 工具进行安装；最后从 Source Code 进行构建然后安装。</p>\n<ul>\n<li><p>先说 Docker，由于我们所支持的平台繁多，包括 Linux, AIX, Windows, Solris, HP-UX, Docker 只适用于 Linux 和 Windows，因此不能满足这样的需求。</p>\n</li>\n<li><p>由于其他原因我们的 Artifactory 暂时还不能使用，最后只能选择用 Source Code 进行构建然后进行安装。这两种方式都需要解决锁定资源以及释放资源的问题。如果当前环境有人正在使用，那么这台虚拟机的资源应该被锁住，不允许 Jenkins 再去调用这台正在使用的 node，以保证环境在使用过程中不被破坏。</p>\n</li>\n</ul>\n<p>本文主要介绍如何通过 Jenkins Lockable Resources Plugin 来实现资源的上锁和解锁。</p>\n<h2 id=\"演示-Demo\"><a href=\"#演示-Demo\" class=\"headerlink\" title=\"演示 Demo\"></a>演示 Demo</h2><ol>\n<li><p>设置 Lockable Resources</p>\n<ul>\n<li>Jenkins -&gt; configuration -&gt; Lockable Resources Manager -&gt; Add Lockable Resource<br><img src=\"/2019/08/jenkins-lock-resource/config-lock-resource.png\" alt=\"我设置了两个 Resources \"><br>这里的 Labels 是你的 node 的 Label，在 Jenkins -&gt; Nodes 设置</li>\n</ul>\n</li>\n<li><p>查看 Lockable Resources 资源池</p>\n<p> <img src=\"/2019/08/jenkins-lock-resource/lock-resource-pool.png\" alt=\"显示我有两个资源可用 \"></p>\n</li>\n<li><p>测试锁资源</p>\n<ul>\n<li>这里我配置的是参数化类型的 Job，可以选择不同平台，不同仓库进行构建<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters.png\" alt=\" Build With Parameters \"> build-with-parameters</li>\n<li>运行第一个 Job<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-1.png\" alt=\" 第一个 Job 已经运行 \"></li>\n<li>查看当前可用资源数量 Free resources = 1，看到已经被 #47 这个 Job 所使用<br><img src=\"/2019/08/jenkins-lock-resource/lock-resource-pool-1.png\" alt=\"当前可用资源数为1\"></li>\n<li>继续运行第二个 Job<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-2.png\" alt=\" 第二个 Job 已经运行 \"></li>\n<li>查看当前可用资源数量 Free resources = 0，看到已经被 #48 这个 Job 所使用<br><img src=\"/2019/08/jenkins-lock-resource/lock-resource-pool-2.png\" alt=\"当前可用资源数为0\"></li>\n<li>最关键是这一步，如果继续运行第三个 Job，是否能够被继续行呢<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-3.png\" alt=\" 第三个 Job 已经运行 \"></li>\n<li>可以看到这个任务没有开始执行，看下 log 是否真的没有被执行。通过日志发现，当前正在等待可用的资源<br><img src=\"/2019/08/jenkins-lock-resource/build-with-parameters-3-log.png\" alt=\" 第三个 Job log \"></li>\n</ul>\n</li>\n<li><p>测试释放锁</p>\n<ul>\n<li>现在释放一个资源，看下第三个 Job 是否能拿到资源，并且执行<br><img src=\"/2019/08/jenkins-lock-resource/unlock-job-1.png\" alt=\" 释放 Job 1 锁 \"></li>\n<li>从下图可以看到 第三个 Job 已经运行成功了<br><img src=\"/2019/08/jenkins-lock-resource/unlock-job-1-after.png\" alt=\" 第三个 Job 运行 \"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Jenkins-pipeline-代码\"><a href=\"#Jenkins-pipeline-代码\" class=\"headerlink\" title=\"Jenkins pipeline 代码\"></a>Jenkins pipeline 代码</h2><p>整个 pipeline 最关键的部分就是如何上锁和释放，这里是通过 lock 和 input message 来实现。</p>\n<p>当前 Job 只要用户不点击 Yes，就会一直处于没有完成的状态，那么的它的锁会一直生效中。直到点击 Yes， Job 结束，锁也就释放了。</p>\n<p>具体可以参考下面的 Jenkinsfile。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">        node &#123;</span><br><span class=\"line\">            label <span class=\"string\">'PreDevENV'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    options &#123;</span><br><span class=\"line\">        lock(label: <span class=\"string\">'PreDevENV'</span>, quantity: 1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters &#123;</span><br><span class=\"line\">        choice(</span><br><span class=\"line\">            name: <span class=\"string\">'platform'</span>,</span><br><span class=\"line\">            choices: [<span class=\"string\">'Linux'</span>, <span class=\"string\">'AIX'</span>, <span class=\"string\">'Windows'</span>, <span class=\"string\">'Solris'</span>, <span class=\"string\">'HP-UX'</span>],</span><br><span class=\"line\">            description: <span class=\"string\">'Required: which platform do you want to build'</span>)</span><br><span class=\"line\">        choice(</span><br><span class=\"line\">            name: <span class=\"string\">'repository'</span>,</span><br><span class=\"line\">            choices: [<span class=\"string\">'repo-0.1'</span>, <span class=\"string\">'repo-1.1'</span>, <span class=\"string\">'repo-2.1'</span>, <span class=\"string\">'repo-3.1'</span>, <span class=\"string\">'repo-4.1'</span>],</span><br><span class=\"line\">            description: <span class=\"string\">'Required: which repository do you want to build'</span>)</span><br><span class=\"line\">        string(</span><br><span class=\"line\">            name: <span class=\"string\">'branch'</span>,</span><br><span class=\"line\">            defaultValue: <span class=\"string\">''</span>,</span><br><span class=\"line\">            description: <span class=\"string\">'Required: which branch do you want to build'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">'git clone'</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"git clone source\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'start build'</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"start build\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'install build'</span>)&#123;</span><br><span class=\"line\">            steps&#123;</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"installing\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">'unlock your resource'</span>)&#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                input message: <span class=\"string\">\"do you have finished?\"</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"Yes, I have finished\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"Pipeline","path":"api/tags/Pipeline.json"}]}