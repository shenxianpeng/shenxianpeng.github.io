{"title":"How to implement [skip ci] for Jenkins multi-branch pipeline","slug":"2022/10/jenkins-skip-ci","date":"2022-10-09T07:33:41.000Z","updated":"2025-05-05T19:16:17.151Z","comments":true,"path":"api/articles/2022/10/jenkins-skip-ci.json","excerpt":"When I want to implement [skip ci] or [ci skip] for Jenkins multi-branch pipeline, the existing plugin seems broken.JENKINS-35509","covers":null,"content":"<p>When I want to implement [skip ci] or [ci skip] for Jenkins multi-branch pipeline, the existing plugin seems broken.</p>\n<ul>\n<li><a href=\"https://issues.jenkins.io/browse/JENKINS-35509\">JENKINS-35509</a></li>\n</ul>\n<span id=\"more\"></span>\n<ul>\n<li><a href=\"https://issues.jenkins.io/browse/JENKINS-34130\">JENKINS-34130</a></li>\n</ul>\n<blockquote>\n<p>My advice: try not to use the Jenkins plugin if possible.</p>\n</blockquote>\n<p>Good, it’s time to implement [skip ci] myself.</p>\n<p>If you like me used Jenkins shared library, you can create a function like <code>SkipCI</code> from <code>src/org/cicd/utils.groovy</code>, then other jobs can reused this function.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/org/cicd/utils.groovy</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> SkipCI(number = <span class=\"string\">&quot;all&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">def</span> statusCodeList = []</span><br><span class=\"line\"></span><br><span class=\"line\">  String[] keyWords = [<span class=\"string\">&#x27;ci skip&#x27;</span>, <span class=\"string\">&#x27;skip ci&#x27;</span>] <span class=\"comment\">// add more keywords if need.</span></span><br><span class=\"line\">  keyWords.each &#123; keyWord -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> statusCode = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number == <span class=\"string\">&quot;all&quot;</span>) &#123;</span><br><span class=\"line\">      statusCode = sh <span class=\"attr\">script:</span> <span class=\"string\">&quot;git log --oneline --all | grep \\&#x27;$&#123;keyWord&#125;\\&#x27;&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      statusCode = sh <span class=\"attr\">script:</span> <span class=\"string\">&quot;git log --oneline -n $&#123;number&#125; | grep \\&#x27;$&#123;keyWord&#125;\\&#x27;&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    statusCodeList.add(statusCode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (statusCodeList.contains(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then I can call this function from other jobs.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The following is not the complete code, it is just sample code and may not be run successfully.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.cicd.utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> call()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">      node &#123;</span><br><span class=\"line\">        label <span class=\"string\">&#x27;linux&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters &#123;</span><br><span class=\"line\">      booleanParam <span class=\"attr\">defaultValue:</span> <span class=\"literal\">true</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;Build&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Uncheck to skip build.&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> utils = <span class=\"keyword\">new</span> org.cicd.utils()</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Checkout&quot;</span>) &#123;</span><br><span class=\"line\">      checkout scm</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// just check the latest commit message.</span></span><br><span class=\"line\">      SkipCI = utils.SkipCI(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Build&quot;</span>)&#123;</span><br><span class=\"line\">      when &#123;</span><br><span class=\"line\">        beforeAgent <span class=\"literal\">true</span></span><br><span class=\"line\">        expression &#123; <span class=\"keyword\">return</span> params.Build &amp;&amp; !SkipCI &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        script &#123;</span><br><span class=\"line\">          sh <span class=\"string\">&quot;make build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Please let me know if any questions or suggestions.</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<ul>\n<li><a href=\"https://issues.jenkins.io/browse/JENKINS-34130\">JENKINS-34130</a></li>\n</ul>\n<blockquote>\n<p>My advice: try not to use the Jenkins plugin if possible.</p>\n</blockquote>\n<p>Good, it’s time to implement [skip ci] myself.</p>\n<p>If you like me used Jenkins shared library, you can create a function like <code>SkipCI</code> from <code>src/org/cicd/utils.groovy</code>, then other jobs can reused this function.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/org/cicd/utils.groovy</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> SkipCI(number = <span class=\"string\">&quot;all&quot;</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">def</span> statusCodeList = []</span><br><span class=\"line\"></span><br><span class=\"line\">  String[] keyWords = [<span class=\"string\">&#x27;ci skip&#x27;</span>, <span class=\"string\">&#x27;skip ci&#x27;</span>] <span class=\"comment\">// add more keywords if need.</span></span><br><span class=\"line\">  keyWords.each &#123; keyWord -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> statusCode = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number == <span class=\"string\">&quot;all&quot;</span>) &#123;</span><br><span class=\"line\">      statusCode = sh <span class=\"attr\">script:</span> <span class=\"string\">&quot;git log --oneline --all | grep \\&#x27;$&#123;keyWord&#125;\\&#x27;&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      statusCode = sh <span class=\"attr\">script:</span> <span class=\"string\">&quot;git log --oneline -n $&#123;number&#125; | grep \\&#x27;$&#123;keyWord&#125;\\&#x27;&quot;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    statusCodeList.add(statusCode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (statusCodeList.contains(<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Then I can call this function from other jobs.</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The following is not the complete code, it is just sample code and may not be run successfully.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.cicd.utils</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> call()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  pipeline &#123;</span><br><span class=\"line\">    agent &#123;</span><br><span class=\"line\">      node &#123;</span><br><span class=\"line\">        label <span class=\"string\">&#x27;linux&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    parameters &#123;</span><br><span class=\"line\">      booleanParam <span class=\"attr\">defaultValue:</span> <span class=\"literal\">true</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;Build&#x27;</span>, <span class=\"attr\">description:</span> <span class=\"string\">&#x27;Uncheck to skip build.&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> utils = <span class=\"keyword\">new</span> org.cicd.utils()</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Checkout&quot;</span>) &#123;</span><br><span class=\"line\">      checkout scm</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// just check the latest commit message.</span></span><br><span class=\"line\">      SkipCI = utils.SkipCI(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">&quot;Build&quot;</span>)&#123;</span><br><span class=\"line\">      when &#123;</span><br><span class=\"line\">        beforeAgent <span class=\"literal\">true</span></span><br><span class=\"line\">        expression &#123; <span class=\"keyword\">return</span> params.Build &amp;&amp; !SkipCI &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        script &#123;</span><br><span class=\"line\">          sh <span class=\"string\">&quot;make build&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Please let me know if any questions or suggestions.</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"Jenkins","path":"api/categories/Jenkins.json"}],"tags":[{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"CI","path":"api/tags/CI.json"}]}