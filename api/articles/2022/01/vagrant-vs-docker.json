{"title":"什么是 Vagrant？Vagrant 和 Docker 该怎么选？","slug":"2022/01/vagrant-vs-docker","date":"2022-01-26T14:57:27.000Z","updated":"2022-01-26T06:19:43.855Z","comments":true,"path":"api/articles/2022/01/vagrant-vs-docker.json","excerpt":"什么是 VagrantVagrant 是对传统虚拟机的一层封装，能够让你更方便的使用虚拟机，主要解决环境配置的问题。它可以基于 VirtualBox，VMware，Hyper-V，甚至是 Docker 等提供商来构建你的环境。为什么要用 Vagrant对比按照传统模式如果我们需要在自己的电脑上安装一台虚拟机时，步骤如下：首先，下载对应的 ISO 文件<br>然后，用 VirtualBox 或 VMware 来加载 ISO<br>最后，通过一步步的配置 CPU、内存、磁盘，网络、用户等设置，等待安装完成安装如果使用 vagrant 来创建一台虚拟机，只需要两条命令1<br>2<br>3<br>4<br># 初始化 Vagrant，这时会在你当前目录下生成一个 Vagrantfile<br>vagrant init hashicorp/bionic64<br># 启动虚拟机<br>vagrant up<br>大概几十秒钟就可以完成了（第一次需要下载镜像，时间会长一点，取决于网速）。Vagrant 之所以可以这么方便，其实是它站在了这些巨人（VirtualBox、VMware、AWS、OpenStack 或其他提供商）的肩膀上，然后通过 Shell 脚本、Ansbile、Chef、Puppet 等工具实现自动在虚拟机上安装和配置软件。好处就是：提供易于配置、可重现和便携的工作环境，提高生产力和灵活性。Vagrant 可以说是创建、管理虚拟化环境的最简单、最快捷的方式！Vagrant 和 Docker 区别如果不分场景而直接比对 Vagrant 和 Docker 是不恰当的。在一些简单场景中，它们的作用是重复的，但在更多场景中，它们是无法相互替代的。那么什么情况下应该用 Vagrant，什么情况下用 Docker 呢？所以如果你仅仅是想管理虚拟机，那么你应该使用 Vagrant；如果你想快速开发和部署应用，那么应该使用 Docker。下面具体来说说为什么。","covers":["/2022/01/vagrant-vs-docker/host.jpg","/2022/01/vagrant-vs-docker/vm.jpg","/2022/01/vagrant-vs-docker/docker.jpg","https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true"],"content":"<h2 id=\"什么是-Vagrant\"><a href=\"#什么是-Vagrant\" class=\"headerlink\" title=\"什么是 Vagrant\"></a>什么是 Vagrant</h2><p>Vagrant 是对传统虚拟机的一层封装，能够让你更方便的使用虚拟机，主要解决环境配置的问题。它可以基于 VirtualBox，VMware，Hyper-V，甚至是 Docker 等提供商来构建你的环境。</p>\n<h2 id=\"为什么要用-Vagrant\"><a href=\"#为什么要用-Vagrant\" class=\"headerlink\" title=\"为什么要用 Vagrant\"></a>为什么要用 Vagrant</h2><p>对比按照传统模式如果我们需要在自己的电脑上安装一台虚拟机时，步骤如下：</p>\n<p>首先，下载对应的 ISO 文件<br>然后，用 VirtualBox 或 VMware 来加载 ISO<br>最后，通过一步步的配置 CPU、内存、磁盘，网络、用户等设置，等待安装完成安装</p>\n<p>如果使用 vagrant 来创建一台虚拟机，只需要两条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 初始化 Vagrant，这时会在你当前目录下生成一个 Vagrantfile</span></span><br><span class=\"line\">vagrant init hashicorp/bionic64</span><br><span class=\"line\"><span class=\"comment\"># 启动虚拟机</span></span><br><span class=\"line\">vagrant up</span><br></pre></td></tr></table></figure>\n\n<p>大概几十秒钟就可以完成了（第一次需要下载镜像，时间会长一点，取决于网速）。</p>\n<p>Vagrant 之所以可以这么方便，其实是它站在了这些巨人（VirtualBox、VMware、AWS、OpenStack 或其他提供商）的肩膀上，然后通过 Shell 脚本、Ansbile、Chef、Puppet 等工具实现自动在虚拟机上安装和配置软件。</p>\n<p>好处就是：提供易于配置、可重现和便携的工作环境，提高生产力和灵活性。</p>\n<p>Vagrant 可以说是创建、管理虚拟化环境的最简单、最快捷的方式！</p>\n<h2 id=\"Vagrant-和-Docker-区别\"><a href=\"#Vagrant-和-Docker-区别\" class=\"headerlink\" title=\"Vagrant 和 Docker 区别\"></a>Vagrant 和 Docker 区别</h2><p>如果不分场景而直接比对 Vagrant 和 Docker 是不恰当的。在一些简单场景中，它们的作用是重复的，但在更多场景中，它们是无法相互替代的。</p>\n<p>那么什么情况下应该用 Vagrant，什么情况下用 Docker 呢？</p>\n<p><strong>所以如果你仅仅是想管理虚拟机，那么你应该使用 Vagrant；如果你想快速开发和部署应用，那么应该使用 Docker。</strong></p>\n<p>下面具体来说说为什么。</p>\n<a id=\"more\"></a>\n\n<p>Vagrant 是 VM 的管理工具，或是说编排工具。Docker 是用来构建、运行、管理容器的工具。那么这个问题其实落在了虚拟机（VM）和 容器（Container）的区别。</p>\n<p>引用网络上一组照片来感受一下物理机（Host），虚拟机（VM）和 容器（Container）之间的区别。</p>\n<p>物理机（Host）</p>\n<p><img src=\"/2022/01/vagrant-vs-docker/host.jpg\" alt=\"物理机\"></p>\n<p>虚拟机（VM）</p>\n<p><img src=\"/2022/01/vagrant-vs-docker/vm.jpg\" alt=\"虚拟机\"></p>\n<p>容器（Container）</p>\n<p><img src=\"/2022/01/vagrant-vs-docker/docker.jpg\" alt=\"Docker\"></p>\n<p>从图上我们更容易理解虚拟机（VM）和容器（Container）的这些不同：</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>虚拟机</th>\n<th>容器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隔离级别</td>\n<td>操作系统级</td>\n<td>进程级别</td>\n</tr>\n<tr>\n<td>隔离策略</td>\n<td>Hypervisor</td>\n<td>CGROUPS</td>\n</tr>\n<tr>\n<td>系统资源</td>\n<td>5~15%</td>\n<td>0~5%</td>\n</tr>\n<tr>\n<td>启动时间</td>\n<td>分钟级</td>\n<td>秒级</td>\n</tr>\n<tr>\n<td>镜像存储</td>\n<td>GB</td>\n<td>MB</td>\n</tr>\n</tbody></table>\n<p>总结：Vagrant 和 Docker 的使用场景区别</p>\n<p><strong>Vagrant 设计使用来管理虚拟机的，而 Docker 设计是用来管理应用环境。</strong></p>\n<p>Vagrant 更适合用来做开发、测试，解决环境一致性的问题；Docker 更适合做快速开发和部署（CI/CD）。</p>\n<p>最后，Vagrant 和 Docker 都有大量社区贡献的 <a href=\"https://app.vagrantup.com/boxes/search\" target=\"_blank\" rel=\"noopener\">“Box”</a> 和 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">“Image”</a> 可供选择。</p>\n<hr>\n<p><img src=\"https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true\" alt=\" \"></p>\n","more":"<p>Vagrant 是 VM 的管理工具，或是说编排工具。Docker 是用来构建、运行、管理容器的工具。那么这个问题其实落在了虚拟机（VM）和 容器（Container）的区别。</p>\n<p>引用网络上一组照片来感受一下物理机（Host），虚拟机（VM）和 容器（Container）之间的区别。</p>\n<p>物理机（Host）</p>\n<p><img src=\"/2022/01/vagrant-vs-docker/host.jpg\" alt=\"物理机\"></p>\n<p>虚拟机（VM）</p>\n<p><img src=\"/2022/01/vagrant-vs-docker/vm.jpg\" alt=\"虚拟机\"></p>\n<p>容器（Container）</p>\n<p><img src=\"/2022/01/vagrant-vs-docker/docker.jpg\" alt=\"Docker\"></p>\n<p>从图上我们更容易理解虚拟机（VM）和容器（Container）的这些不同：</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>虚拟机</th>\n<th>容器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隔离级别</td>\n<td>操作系统级</td>\n<td>进程级别</td>\n</tr>\n<tr>\n<td>隔离策略</td>\n<td>Hypervisor</td>\n<td>CGROUPS</td>\n</tr>\n<tr>\n<td>系统资源</td>\n<td>5~15%</td>\n<td>0~5%</td>\n</tr>\n<tr>\n<td>启动时间</td>\n<td>分钟级</td>\n<td>秒级</td>\n</tr>\n<tr>\n<td>镜像存储</td>\n<td>GB</td>\n<td>MB</td>\n</tr>\n</tbody></table>\n<p>总结：Vagrant 和 Docker 的使用场景区别</p>\n<p><strong>Vagrant 设计使用来管理虚拟机的，而 Docker 设计是用来管理应用环境。</strong></p>\n<p>Vagrant 更适合用来做开发、测试，解决环境一致性的问题；Docker 更适合做快速开发和部署（CI/CD）。</p>\n<p>最后，Vagrant 和 Docker 都有大量社区贡献的 <a href=\"https://app.vagrantup.com/boxes/search\" target=\"_blank\" rel=\"noopener\">“Box”</a> 和 <a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\">“Image”</a> 可供选择。</p>\n<hr>\n<p><img src=\"https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true\" alt=\" \"></p>","categories":[{"name":"Vagrant","path":"api/categories/Vagrant.json"}],"tags":[{"name":"VirtualBox","path":"api/tags/VirtualBox.json"},{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Vagrant","path":"api/tags/Vagrant.json"}]}