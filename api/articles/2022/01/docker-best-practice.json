{"title":"你一定要了解这 17 条 Docker 最佳实践！","slug":"2022/01/docker-best-practice","date":"2022-01-12T04:18:16.000Z","updated":"2024-01-31T04:49:00.742Z","comments":true,"path":"api/articles/2022/01/docker-best-practice.json","excerpt":"本篇分享在编写 Dockerfiles 和使用 Docker 时应遵循的一些最佳实践。篇幅较长，建议先收藏慢慢看，保证看完会很有收获。文章目录Dockerfile 最佳实践使用多阶段的构建调整 Dockerfile 命令的顺序使用小型 Docker 基础镜像尽量减少层的数量使用无特权的容器优先选择 COPY 而不是 ADD将 Python 包缓存到 Docker 主机上每个容器只运行一个进程优先选择数组而不是字符串语法理解 ENTRYPOINT 和 CMD 之间的区别添加健康检查 HEALTHCHECKDocker 镜像最佳实践Docker 镜像的版本不要在镜像中存储密钥使用 .dockerignore 文件检查和扫描你的 Docker 文件和镜像签署和验证镜像Dockerfile 最佳实践1. 使用多阶段的构建利用多阶段构建的优势来创建更精简、更安全的Docker镜像。多阶段 Docker 构建(multi-stage builds)允许你将你的 Dockerfile 分成几个阶段。例如，你可以有一个阶段用于编译和构建你的应用程序，然后可以复制到后续阶段。由于只有最后一个阶段被用来创建镜像，与构建应用程序相关的依赖关系和工具就会被丢弃，因此可以留下一个精简的、模块化的、可用于生产的镜像。Web 开发示例：","covers":["https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true"],"content":"<p>本篇分享在编写 Dockerfiles 和使用 Docker 时应遵循的一些最佳实践。篇幅较长，建议先收藏慢慢看，保证看完会很有收获。</p>\n<h2 id=\"文章目录\"><a href=\"#文章目录\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2><p>Dockerfile 最佳实践</p>\n<ol>\n<li>使用多阶段的构建</li>\n<li>调整 Dockerfile 命令的顺序</li>\n<li>使用小型 Docker 基础镜像</li>\n<li>尽量减少层的数量</li>\n<li>使用无特权的容器</li>\n<li>优先选择 <code>COPY</code> 而不是 <code>ADD</code></li>\n<li>将 <code>Python</code> 包缓存到 Docker 主机上</li>\n<li>每个容器只运行一个进程</li>\n<li>优先选择数组而不是字符串语法</li>\n<li>理解 <code>ENTRYPOINT</code> 和 <code>CMD</code> 之间的区别</li>\n<li>添加健康检查 <code>HEALTHCHECK</code></li>\n</ol>\n<p>Docker 镜像最佳实践</p>\n<ol>\n<li>Docker 镜像的版本</li>\n<li>不要在镜像中存储密钥</li>\n<li>使用 <code>.dockerignore</code> 文件</li>\n<li>检查和扫描你的 Docker 文件和镜像</li>\n<li>签署和验证镜像</li>\n</ol>\n<h2 id=\"Dockerfile-最佳实践\"><a href=\"#Dockerfile-最佳实践\" class=\"headerlink\" title=\"Dockerfile 最佳实践\"></a>Dockerfile 最佳实践</h2><h3 id=\"1-使用多阶段的构建\"><a href=\"#1-使用多阶段的构建\" class=\"headerlink\" title=\"1. 使用多阶段的构建\"></a>1. 使用多阶段的构建</h3><p>利用多阶段构建的优势来创建更精简、更安全的Docker镜像。多阶段 Docker 构建(<a href=\"https://docs.docker.com/develop/develop-images/multistage-build/\">multi-stage builds</a>)允许你将你的 Dockerfile 分成几个阶段。</p>\n<p>例如，你可以有一个阶段用于编译和构建你的应用程序，然后可以复制到后续阶段。由于只有最后一个阶段被用来创建镜像，与构建应用程序相关的依赖关系和工具就会被丢弃，因此可以留下一个精简的、模块化的、可用于生产的镜像。</p>\n<p>Web 开发示例：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    apt-get install -y --no-install-recommends gcc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/wheels /wheels</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --no-cache /wheels/*</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，GCC 编译器在安装某些 Python 包时是必需的，所以我们添加了一个临时的、构建时的阶段来处理构建阶段。</p>\n<p>由于最终的运行时映像不包含 GCC，所以它更轻，也更安全。镜像大小比较：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY                 TAG                    IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">docker-single              latest                 8d6b6a4d7fb6   16 seconds ago   259MB</span><br><span class=\"line\">docker-multi               latest                 813c2fa9b114   3 minutes ago    156MB</span><br></pre></td></tr></table></figure>\n\n<p>再来看一个例子：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span> as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip wheel --no-cache-dir --no-deps --wheel-dir /wheels jupyter pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /notebooks</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /wheels /wheels</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --no-cache /wheels/*</span></span><br></pre></td></tr></table></figure>\n\n<p>镜像大小比较：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY                  TAG                   IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">ds-multi                    latest                b4195deac742   2 minutes ago   357MB</span><br><span class=\"line\">ds-single                   latest                7c23c43aeda6   6 minutes ago   969MB</span><br></pre></td></tr></table></figure>\n\n<p>总之，多阶段构建可以减少你的生产镜像的大小，帮助你节省时间和金钱。此外，这将简化你的生产容器。由于尺寸较小和简单，相对会有较小的攻击面。</p>\n<h3 id=\"2-调整-Dockerfile-命令的顺序\"><a href=\"#2-调整-Dockerfile-命令的顺序\" class=\"headerlink\" title=\"2. 调整 Dockerfile 命令的顺序\"></a>2. 调整 Dockerfile 命令的顺序</h3><p>密切注意你的 Dockerfile 命令的顺序，以利用层缓存。</p>\n<p>Docker 在一个特定的 Docker 文件中缓存每个步骤（或层），以加快后续的构建。当一个步骤发生变化时，不仅该步骤，而且所有后续步骤的缓存都将被废止。</p>\n<p>例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> sample.py .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install -r /requirements.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个 Dockerfile 中，我们在安装需求之前复制了应用程序的代码。现在，每次我们改变 sample.py 时，构建都会重新安装软件包。这是非常低效的，特别是在使用 Docker 容器作为开发环境时。因此，把经常变化的文件放在 Dockerfile 的末尾是很关键的。</p>\n<blockquote>\n<p>你也可以通过使用 .dockerignore 文件来排除不必要的文件，使其不被添加到 Docker 构建环境和最终镜像中，从而帮助防止不必要的缓存失效。更多信息后面会提到。</p>\n</blockquote>\n<p>因此，在上面的 Dockerfile 中，你应该把 <code>COPY sample.py .</code> 命令移到底部，如下所示：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install -r /requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> sample.py .</span></span><br></pre></td></tr></table></figure>\n\n<p>注意。</p>\n<ol>\n<li>总是把可能发生变化的层放在 Dockerfile 中尽可能的低。</li>\n<li>将多个 <code>RUN apt-get update</code>，<code>RUN apt-get install</code> 等命令结合到一起执行。(这也有助于减少镜像的大小，后面会很快就会提到这一点)。</li>\n<li>如果你想关闭某个 Docker 构建的缓存，可以添加 <code>--no-cache=True</code> 标志。</li>\n</ol>\n<h3 id=\"3-使用小型-Docker-基础镜像\"><a href=\"#3-使用小型-Docker-基础镜像\" class=\"headerlink\" title=\"3. 使用小型 Docker 基础镜像\"></a>3. 使用小型 Docker 基础镜像</h3><p>较小的 Docker 镜像更具有模块化和安全性。较小的 Docker 基础镜像在构建、推送和拉动镜像的速度较小，它们也往往更安全，因为它们只包括运行应用程序所需的必要库和系统依赖。</p>\n<p>你应该使用哪个 Docker 基础镜像？这个没有一个固定的答案，它这取决于你要做什么。下面是 Python 的各种 Docker 基础镜像的大小比较。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY   TAG                 IMAGE ID       CREATED      SIZE</span><br><span class=\"line\">python       3.9.6-alpine3.14    f773016f760e   3 days ago   45.1MB</span><br><span class=\"line\">python       3.9.6-slim          907fc13ca8e7   3 days ago   115MB</span><br><span class=\"line\">python       3.9.6-slim-buster   907fc13ca8e7   3 days ago   115MB</span><br><span class=\"line\">python       3.9.6               cba42c28d9b8   3 days ago   886MB</span><br><span class=\"line\">python       3.9.6-buster        cba42c28d9b8   3 days ago   886MB</span><br></pre></td></tr></table></figure>\n\n<p>虽然基于 Alpine Linux 的 Alpine flavor 是最小的，但如果你找不到可以与之配合的编译二进制文件，往往会导致构建时间的增加。因此，你最终可能不得不自己构建二进制文件，这可能会增加镜像的大小（取决于所需的系统级依赖）和构建时间（由于必须从源头编译）。</p>\n<blockquote>\n<p>关于为什么最好不要使用基于 Alpine 的基础镜像，请参考<a href=\"https://pythonspeed.com/articles/base-image-python-docker-images/\">适用于 Python 应用程序的最佳 Docker 基础映像</a> 和 <a href=\"https://pythonspeed.com/articles/alpine-docker-python/\">使用 Alpine 可以使 Python Docker 构建速度慢 50 倍</a> 了解更多关于为什么最好避免使用基于 Alpine 的基础镜像。</p>\n</blockquote>\n<p>归根结底，这都是关于平衡的问题。如果有疑问，从 <code>*-slim</code> flavor 开始，特别是在开发模式下，因为你正在构建你的应用程序。你想避免在添加新的 <code>Python</code> 包时不得不不断地更新 Dockerfile 以安装必要的系统级依赖。当你为生产强化你的应用程序和 Dockerfile 时，你可能想探索使用 Alpine 来完成多阶段构建的最终镜像。</p>\n<p>另外，别忘了定期更新你的基础镜像，以提高安全性和性能。当一个基础镜像的新版本发布时，例如：<code>3.9.6-slim</code> –&gt; <code>3.9.7-slim</code>，你应该拉出新的镜像并更新你正在运行的容器以获得所有最新的安全补丁。</p>\n<h3 id=\"4-尽量减少层的数量\"><a href=\"#4-尽量减少层的数量\" class=\"headerlink\" title=\"4. 尽量减少层的数量\"></a>4. 尽量减少层的数量</h3><p>尽量把 <code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 命令结合起来使用，因为它们会创建层。每一层都会增加镜像的大小，因为它们是被缓存的。因此，随着层数的增加，镜像大小也会增加。</p>\n<p>你可以用 <code>docker history</code> 命令来测试一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">dockerfile   latest    180f98132d02   51 seconds ago   259MB</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">history</span> 180f98132d02</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">180f98132d02   58 seconds ago       COPY . . <span class=\"comment\"># buildkit                             6.71kB    buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      58 seconds ago       RUN /bin/sh -c pip install -r requirements.t…   35.5MB    buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      About a minute ago   COPY requirements.txt . <span class=\"comment\"># buildkit              58B       buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      About a minute ago   WORKDIR /app</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>请注意尺寸。只有 <code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 命令增加了镜像的尺寸，你可以尽可能地通过合并命令来减少镜像的大小。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y gcc</span></span><br></pre></td></tr></table></figure>\n\n<p>可以合并成一个 <code>RUN</code> 命令：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y gcc</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，创建一个单层而不是两个，这就减少了最终镜像的大小。虽然减少层数是个好主意，但更重要的是，这本身不是一个目标，而是减少镜像大小和构建时间的一个副作用。换句话说呢，与其试图优化每一条命令，你更应该关注前面的三种做法！！！</p>\n<ol>\n<li>多阶段构建</li>\n<li>Dockerfile命令的顺序</li>\n<li>以及使用一个小的基础镜像。</li>\n</ol>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li><code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 都会创建图层</li>\n<li>每个图层都包含与前一个图层的差异</li>\n<li>图层会增加最终镜像的大小</li>\n</ol>\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><ol>\n<li>合并相关命令</li>\n<li>在创建过程中执行 <code>RUN</code> 步骤中删除不必要的文件</li>\n<li>尽量减少运行 <code>apt-get upgrade</code> 的次数，因为它将所有软件包升级到最新版本。</li>\n<li>对于多阶段的构建，不要太担心过度优化临时阶段的命令</li>\n</ol>\n<p>最后，为了便于阅读，建议将多行参数按字母数字排序。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    git \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    gcc \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    matplotlib \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    pillow  \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用无特权的容器\"><a href=\"#5-使用无特权的容器\" class=\"headerlink\" title=\"5. 使用无特权的容器\"></a>5. 使用无特权的容器</h3><p>默认情况下，Docker 在容器内以 root 身份运行容器进程。然而，这是一个糟糕的做法，因为在容器内以 root 身份运行的进程在 Docker 主机中也是以 root 身份运行。</p>\n<p>因此，如果攻击者获得了对容器的访问权，他们就可以获得所有的 root 权限，并可以对 Docker 主机进行一些攻击，例如：</p>\n<ol>\n<li>将敏感信息从主机的文件系统复制到容器中</li>\n<li>执行远程命令</li>\n</ol>\n<p>为了防止这种情况，确保以非 root 用户运行容器进程。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> addgroup --system app &amp;&amp; adduser --system --group app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> app</span><br></pre></td></tr></table></figure>\n\n<p>你可以更进一步，删除 shell 权限，确保没有主目录。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> addgroup --gid 1001 --system app &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    adduser --no-create-home --shell /bin/false --disabled-password --uid 1001 --system --group app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> app</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -i sample <span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">uid=1001(app) gid=1001(app) <span class=\"built_in\">groups</span>=1001(app)</span><br></pre></td></tr></table></figure>\n\n<p>在这里，容器内的应用程序在一个非 root 用户下运行。然而，请记住，Docker 守护进程和容器本身仍然是以 root 权限运行的。</p>\n<p>请务必查看以非根用户身份运行 Docker 守护进程，以获得以非根用户身份运行守护进程和容器的帮助。</p>\n<h3 id=\"6-优先选择-COPY-而不是-ADD\"><a href=\"#6-优先选择-COPY-而不是-ADD\" class=\"headerlink\" title=\"6. 优先选择 COPY 而不是 ADD\"></a>6. 优先选择 <code>COPY</code> 而不是 <code>ADD</code></h3><p>除非你确定你需要 <code>ADD</code> 所带来的额外功能，否则请使用 <code>COPY</code>。</p>\n<p>那么 <code>COPY</code> 和 <code>ADD</code> 的区别是什么？</p>\n<p>首先，这两个命令都允许你从一个特定的位置复制文件到 Docker 镜像中。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> &lt;src&gt; &lt;dest&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> &lt;src&gt; &lt;dest&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然它们看起来作用相同，但 <code>ADD</code> 有一些额外的功能。</p>\n<ul>\n<li><code>COPY</code> 用于将本地文件或目录从 Docker 主机复制到镜像上。</li>\n<li><code>ADD</code> 可以用于同样的事情，也可以用于下载外部文件。另外，如果你使用压缩文件（tar、gzip、bzip2等）作为 <src> 参数，<code>ADD</code> 会自动将内容解压到指定位置。</src></li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将主机上的本地文件复制到目的地</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> /source/path  /destination/path</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> /source/path  /destination/path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载外部文件并复制到目的地</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> http://external.file/url  /destination/path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制和提取本地压缩文件</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> source.file.tar.gz /destination/path</span></span><br></pre></td></tr></table></figure>\n\n<p>最后 <code>COPY</code> 在语义上比 <code>ADD</code> 更加明确和更容易理解。</p>\n<h3 id=\"7-缓存安装包到-Docker-主机上\"><a href=\"#7-缓存安装包到-Docker-主机上\" class=\"headerlink\" title=\"7. 缓存安装包到 Docker 主机上\"></a>7. 缓存安装包到 Docker 主机上</h3><p>当一个需求文件被改变时，镜像需要被重建以安装新的包。先前的步骤将被缓存，正如在最小化层数中提到的。在重建镜像时下载所有的包会导致大量的网络活动，并需要大量的时间。每次重建都要占用同等的时间来下载不同构建中的通用包。</p>\n<p>以 Python 为例，你可以通过将 pip 缓存目录映射到主机上的一个目录来避免这种情况。所以对于每次重建，缓存的版本会持续存在，这可以提高构建速度。</p>\n<p>在 Docker 运行中添加一个卷，作为 <code>-v $HOME/.cache/pip-docker/:/root/.cache/pip</code> 或者作为 Docker Compose 文件中的映射。</p>\n<p>上面介绍的目录只供参考，要确保你映射的是 cache 目录，而不是 site-packages（内置包所在的位置）。</p>\n<p>将缓存从 docker 镜像中移到主机上可以为你节省最终镜像的空间。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> --mount=<span class=\"built_in\">type</span>=cache,target=/root/.cache/pip \\</span></span><br><span class=\"line\"><span class=\"language-bash\">        pip install -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-每个容器只运行一个进程\"><a href=\"#8-每个容器只运行一个进程\" class=\"headerlink\" title=\"8. 每个容器只运行一个进程\"></a>8. 每个容器只运行一个进程</h3><p>为什么建议每个容器只运行一个进程？</p>\n<p>让我们假设你的应用程序栈由两个 Web 服务器和一个数据库组成。虽然你可以很容易地从一个容器中运行所有三个，但你应该在一个单独的容器中运行每个服务，以便更容易重复使用和扩展每个单独的服务。</p>\n<ul>\n<li>扩展性 - 由于每个服务都在一个单独的容器中，你可以根据需要水平地扩展你的一个网络服务器来处理更多的流量。</li>\n<li>可重用性 - 也许你有另一个服务需要一个容器化的数据库，你可以简单地重复使用同一个数据库容器，而不需要带着两个不必要的服务。</li>\n<li>日志 - 耦合容器会让日志变得更加复杂。（我们将在本文后面进一步详细讨论这个问题）</li>\n<li>可移植性和可预测性 - 当容器有较少的部分在工作时，制作安全补丁或调试问题就会容易得多。</li>\n</ul>\n<h3 id=\"9-优先选择数组而不是字符串语法\"><a href=\"#9-优先选择数组而不是字符串语法\" class=\"headerlink\" title=\"9. 优先选择数组而不是字符串语法\"></a>9. 优先选择数组而不是字符串语法</h3><p>你可以在你的 Dockerfiles 中以数组（exec）或字符串（shell）格式</p>\n<p>在 Dockerfile 中，你可以以数组（exec）或字符串（shell）格式来使用 <code>CMD</code> 和 <code>ENTRYPOINT</code> 命令</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组（exec）</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;-w&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;-k&quot;</span>, <span class=\"string\">&quot;uvicorn.workers.UvicornWorker&quot;</span>, <span class=\"string\">&quot;main:app&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串（shell）</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"string\">&quot;gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>两者都是正确的，并且实现了几乎相同的事情；但是，你应该尽可能地使用 exec 格式。</p>\n<p>以下来自 <a href=\"https://docs.docker.com/compose/faq/#why-do-my-services-take-10-seconds-to-recreate-or-stop\">Docker的官方文档</a>内容：</p>\n<ul>\n<li>确保你在 Dockerfile 中使用 <code>CMD</code> 和 <code>ENTRYPOINT</code> 的 exec 形式。</li>\n<li>例如，使用 <code>[&quot;program&quot;, &quot;arg1&quot;, &quot;arg2&quot;]</code> 而不是 <code>&quot;program arg1 arg2&quot;</code>。使用字符串形式会导致 Docker 使用 <code>bash</code> 运行你的进程，而 <code>bash</code> 并不能正确处理信号。Compose 总是使用 JSON 形式，所以不用担心如果你在你的 Compose 文件中覆盖了命令或入口。</li>\n</ul>\n<p>因此，由于大多数 shell 不处理对子进程的信号，如果你使用 shell 格式，CTRL-C（产生 <code>SIGTERM</code>）可能不会停止一个子进程。</p>\n<p>例子:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">18.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BAD: 字符串（shell）格式</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> top -d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GOOD: 数组（exec）格式</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;top&quot;</span>, <span class=\"string\">&quot;-d&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>这两种情况执行效果一样。但请注意，在字符串（shell）格式的情况下，<code>CTRL-C</code> 不会杀死这个进程。相反，你会看到 <code>^C^C^C^C^C^C^C^C^C^C</code>。</p>\n<p>另一个注意事项是，字符串（shell）格式携带的是 shell 的 PID，而不是进程本身。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组格式</span></span><br><span class=\"line\">root@<span class=\"number\">18</span>d8fd3fd4d2:/app<span class=\"comment\"># ps ax</span></span><br><span class=\"line\">  PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\">    <span class=\"number\">1</span> ?        Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"number\">7</span> ?        Sl     <span class=\"number\">0</span>:<span class=\"number\">02</span> /usr/local/bin/python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">   <span class=\"number\">25</span> pts/<span class=\"number\">0</span>    Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> bash</span><br><span class=\"line\">  <span class=\"number\">356</span> pts/<span class=\"number\">0</span>    R+     <span class=\"number\">0</span>:<span class=\"number\">00</span> ps ax</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串格式</span></span><br><span class=\"line\">root@ede24a5ef536:/app<span class=\"comment\"># ps ax</span></span><br><span class=\"line\">  PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\">    <span class=\"number\">1</span> ?        Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> /bin/sh -c python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"number\">8</span> ?        S      <span class=\"number\">0</span>:<span class=\"number\">00</span> python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"number\">9</span> ?        Sl     <span class=\"number\">0</span>:<span class=\"number\">01</span> /usr/local/bin/python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">   <span class=\"number\">13</span> pts/<span class=\"number\">0</span>    Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> bash</span><br><span class=\"line\">  <span class=\"number\">342</span> pts/<span class=\"number\">0</span>    R+     <span class=\"number\">0</span>:<span class=\"number\">00</span> ps ax</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-了解-ENTRYPOINT-和-CMD-之间的区别\"><a href=\"#10-了解-ENTRYPOINT-和-CMD-之间的区别\" class=\"headerlink\" title=\"10. 了解 ENTRYPOINT 和 CMD 之间的区别\"></a>10. 了解 <code>ENTRYPOINT</code> 和 <code>CMD</code> 之间的区别</h4><p>我应该使用 <code>ENTRYPOINT</code> 还是 <code>CMD</code> 来运行容器进程？有两种方法可以在容器中运行命令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;config.wsgi&quot;</span>, <span class=\"string\">&quot;-b&quot;</span>, <span class=\"string\">&quot;0.0.0.0:8000&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;config.wsgi&quot;</span>, <span class=\"string\">&quot;-b&quot;</span>, <span class=\"string\">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>两者本质上做的是同一件事：用 <code>Gunicorn</code> 服务器在 <code>config.wsgi</code> 启动应用程序，并将其绑定到 <code>0.0.0.0:8000</code>。</p>\n<p><code>CMD</code> 很容易被重写。如果你运行 <code>docker run &lt;image_name&gt; uvicorn config.asgi</code>，上述 <code>CMD</code> 就会被新的参数所取代。</p>\n<p>例如，<code>uvicorn config.asgi</code>。而要覆盖 <code>ENTRYPOINT</code> 命令，必须指定 <code>--entrypoint</code> 选项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --entrypoint uvicorn config.asgi &lt;image_name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，很明显，我们正在覆盖入口点。所以，建议使用 <code>ENTRYPOINT</code> 而不是 <code>CMD</code>，以防止意外地覆盖命令。</p>\n<p>它们也可以一起使用。比如说</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;config.wsgi&quot;</span>, <span class=\"string\">&quot;-w&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;4&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>当像这样一起使用时，为启动容器所运行的命令就变成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gunicorn config.wsgi -w 4</span><br></pre></td></tr></table></figure>\n\n<p>如上所述，<code>CMD</code> 很容易被重写。因此，<code>CMD</code> 可以被用来向 <code>ENTRYPOINT</code> 命令传递参数。比如很容易更改 workers 的数量，就像这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run &lt;image_name&gt; 6</span><br></pre></td></tr></table></figure>\n\n<p>这样就将有 6 个 Gunicorn workers 启动容器，而不是默认的 4 个。</p>\n<h3 id=\"11-添加健康检查-HEALTHCHECK\"><a href=\"#11-添加健康检查-HEALTHCHECK\" class=\"headerlink\" title=\"11. 添加健康检查 HEALTHCHECK\"></a>11. 添加健康检查 <code>HEALTHCHECK</code></h3><p>使用 <code>HEALTHCHECK</code> 来确定容器中运行的进程是否不仅已启动并正在运行，而且是“健康”的。</p>\n<p>Docker 公开了一个 API 来检查容器中运行的进程的状态，它提供的信息不仅仅是进程是否“正在运行”，因为“运行”涵盖了“它正在运行”、“仍在启动”、甚至“陷入某种无限循环错误状态”。你可以通过 <a href=\"https://docs.docker.com/engine/reference/builder/#healthcheck\"><code>HEALTHCHECK</code></a> 指令与此 API 交互。</p>\n<p>例如，如果你正在提供 Web 应用程序，则可以使用以下内容来确定 <code>/</code> 端点是否已启动并可以处理服务请求：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">HEALTHCHECK</span><span class=\"language-bash\"> CMD curl --fail http://localhost:8000 || <span class=\"built_in\">exit</span> 1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你运行 <code>docker ps</code>，你可以看到 <code>HEALTHCHECK</code> 的状态。</p>\n<p>健康的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                            PORTS                                       NAMES</span><br><span class=\"line\">09c2eb4970d4   healthcheck   <span class=\"string\">&quot;python manage.py ru…&quot;</span>   10 seconds ago   Up 8 seconds (health: starting)   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp   xenodochial_clarke</span><br></pre></td></tr></table></figure>\n\n<p>不健康的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS                          PORTS                                       NAMES</span><br><span class=\"line\">09c2eb4970d4   healthcheck   <span class=\"string\">&quot;python manage.py ru…&quot;</span>   About a minute ago   Up About a minute (unhealthy)   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp   xenodochial_clarke</span><br></pre></td></tr></table></figure>\n\n<p>你可以更进一步，设置一个仅用于健康检查的自定义端点，然后配置 <code>HEALTHCHECK</code> 以针对返回的数据进行测试。</p>\n<p>例如，如果端点返回 <code>&#123;&quot;ping&quot;: &quot;pong&quot;&#125;</code> 的 JSON 响应，你可以指示 <code>HEALTHCHECK</code> 验证响应正文。</p>\n<p>以下是使用 <code>docker inspect</code> 查看运行状况检查状态的方法：</p>\n<blockquote>\n<p>这里省略了部分输出。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ docker inspect --format <span class=\"string\">&quot;&#123;&#123;json .State.Health &#125;&#125;&quot;</span> ab94f2ac7889</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Status&quot;</span>: <span class=\"string\">&quot;healthy&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;FailingStreak&quot;</span>: 0,</span><br><span class=\"line\">  <span class=\"string\">&quot;Log&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Start&quot;</span>: <span class=\"string\">&quot;2021-09-28T15:22:57.5764644Z&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;End&quot;</span>: <span class=\"string\">&quot;2021-09-28T15:22:57.7825527Z&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ExitCode&quot;</span>: 0,</span><br><span class=\"line\">      <span class=\"string\">&quot;Output&quot;</span>: <span class=\"string\">&quot;...&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>你还可以向 Docker Compose 文件添加运行状况检查：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;8000:8000&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> <span class=\"string\">curl</span> <span class=\"string\">--fail</span> <span class=\"string\">http://localhost:8000</span> <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>选项：</p>\n<ul>\n<li><code>test</code>：要测试的命令。</li>\n<li><code>interval</code>：要测试的间隔 - 即，测试每 x 时间单位。</li>\n<li><code>timeout</code>：等待响应的最长时间。</li>\n<li><code>start_period</code>：何时开始健康检查。它可以在容器准备就绪之前执行其他任务时使用，例如运行迁移。</li>\n<li><code>retries</code>：在将测试指定为失败之前的最大重试次数。</li>\n</ul>\n<p>如果你使用的是 Docker Swarm 以外的编排工具（比如 Kubernetes 或 AWS ECS），它们很可能有自己的内部系统来处理健康检查。在添加 <code>HEALTHCHECK</code> 指令之前，请参阅特定工具的文档。</p>\n<h2 id=\"Docker-镜像最佳实践\"><a href=\"#Docker-镜像最佳实践\" class=\"headerlink\" title=\"Docker 镜像最佳实践\"></a>Docker 镜像最佳实践</h2><h3 id=\"1-Docker-镜像版本\"><a href=\"#1-Docker-镜像版本\" class=\"headerlink\" title=\"1. Docker 镜像版本\"></a>1. Docker 镜像版本</h3><p>只要有可能，就要避免使用 <code>latest</code> 标签的镜像。</p>\n<p>如果你依赖 <code>latest</code> 标签（这并不是一个真正的 “标签”，因为当镜像没有明确的标签时，它是默认应用的），你无法根据镜像标签来判断你的代码正在运行哪个版本。</p>\n<p>如果你想回滚就变得很困难，并且很容易被覆盖（无论是意外还是恶意的）。标签，就像你的基础设施和部署，应该是不可改变的。</p>\n<p>所以无论你如何对待你的内部镜像，都不应该对基本镜像使用 <code>latest</code> 标签，因为你可能会无意中把一个带有破坏性变化的新版本部署到生产中。</p>\n<p>对于内部镜像，应使用描述性的标签，以便更容易分辨哪个版本的代码正在运行，处理回滚，并避免命名冲突。例如，你可以使用以下描述符来组成一个标签。</p>\n<ol>\n<li>时间戳</li>\n<li>Docker 镜像 ID</li>\n<li>Git 提交哈希值</li>\n<li>语义版本 (Semantic version)</li>\n</ol>\n<p>关于更多的选择，也可以参考 Stack Overflow <a href=\"https://stackoverflow.com/a/56213290/1799408\">问题</a> “Properly Versioning Docker Images” 中的这个答案。</p>\n<p>比如说</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t web-prod-b25a262-1.0.0 .</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们用下面的内容来形成标签</p>\n<ol>\n<li>项目名称：web</li>\n<li>环境名称: prod</li>\n<li>Git commit short hash: b25a262 (通过命令 <code>git rev-parse --short HEAD</code> 来获得)</li>\n<li>语义学版本：1.0.0</li>\n</ol>\n<p>选择一个标签方案并与之保持一致是至关重要的。由于提交哈希值（commit hashes）可以很容易地将镜像标签与代码联系起来，建议将它们纳入你的标签方案。</p>\n<h3 id=\"2-不要在镜像中存储机密信息\"><a href=\"#2-不要在镜像中存储机密信息\" class=\"headerlink\" title=\"2. 不要在镜像中存储机密信息\"></a>2. 不要在镜像中存储机密信息</h3><p>Secrets 是敏感的信息，如密码、数据库凭证、SSH密钥、令牌和 TLS 证书等。这些信息不应该在没有加密的情况下被放入你的镜像中，因为未经授权的用户如果获得了镜像的访问权，只需要检查这些层就可以提取密钥。</p>\n<p>因此不要在 Docker 文件中添加明文的密钥，尤其是当你把镜像推送到像 Docker Hub 这样的公共仓库！！</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> DATABASE_PASSWORD <span class=\"string\">&quot;SuperSecretSauce&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>相反，它们应该通过以下方式注入</p>\n<ol>\n<li>环境变量（在运行时)</li>\n<li>构建时参数（在构建时)</li>\n<li>协调工具，如 Docker Swarm（通过 Docker secrets）或 Kubernetes（通过 Kubernetes secrets）。</li>\n</ol>\n<p>此外，你还可以通过在你的 <code>.dockerignore</code> 文件中添加常见的密钥文件和文件夹来帮助防止密钥的泄露。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">**/.env</span><br><span class=\"line\">**/.aws</span><br><span class=\"line\">**/.ssh</span><br></pre></td></tr></table></figure>\n\n<p>最后，要明确哪些文件会被复制到镜像中，而不是递归地复制所有文件。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不好的做法</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 好的做法</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./app.py .</span></span><br></pre></td></tr></table></figure>\n\n<p>明确的做法也有助于限制缓存的破坏。</p>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>你可以通过环境变量来传递密钥，但它们会在所有子进程、链接的容器和日志以及 <code>docker inspect</code> 中可见。要更新它们也很困难。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --detach --<span class=\"built_in\">env</span> <span class=\"string\">&quot;DATABASE_PASSWORD=SuperSecretSauce&quot;</span> python：3.9-slim</span><br><span class=\"line\"></span><br><span class=\"line\">b25a262f870eb0fdbf03c666e7fcf18f9664314b79ad58bc7618ea3445e39239</span><br><span class=\"line\"></span><br><span class=\"line\">docker inspect --format=<span class=\"string\">&#x27;&#123;&#123;range .Config.Env&#125;&#125;&#123;&#123;println .&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> b25a262f870eb0fdbf03c666e7fcf18f9664314b79ad58bc7618ea3445e39239</span><br><span class=\"line\"></span><br><span class=\"line\">DATABASE_PASSWORD=SuperSecretSauce</span><br><span class=\"line\">PATH=/usr/local/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class=\"line\">LANG=C.UTF-8</span><br><span class=\"line\">GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568</span><br><span class=\"line\">python_version=3.9.7</span><br><span class=\"line\">python_pip_version=21.2.4</span><br><span class=\"line\">python_setuptools_version=57.5.0</span><br><span class=\"line\">python_get_pip_url=https://github.com/pypa/get-pip/raw/c20b0cfd643cd4a19246ccf204e2997af70f6b21/public/get-pip.py</span><br><span class=\"line\">PYTHON_GET_PIP_SHA256=fa6f3fb93cce234cd4e8dd2beb54a51ab9c247653b52855a48dd44e6b21ff28b</span><br></pre></td></tr></table></figure>\n\n<p>这是最直接的密钥管理方法。虽然它不是最安全的，但它会让诚实的人保持诚实，因为它提供了一个薄薄的保护层，有助于使密钥不被好奇的游荡的眼睛发现。</p>\n<p>使用共享卷传递密钥是一个更好的解决方案，但它们应该被加密，通过 Vault 或 AWS密钥管理服务（KMS），因为它们被保存到磁盘。</p>\n<h4 id=\"构建时参数\"><a href=\"#构建时参数\" class=\"headerlink\" title=\"构建时参数\"></a>构建时参数</h4><p>你可以在构建时使用构建时参数来传递密钥，但这些密钥对于那些可以通过 docker 历史访问镜像的人来说是可见的。</p>\n<p>例子</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> DATABASE_PASSWORD</span><br></pre></td></tr></table></figure>\n\n<p>构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build --build-arg <span class=\"string\">&quot;DATABASE_PASSWORD=SuperSecretSauce&quot;</span> .</span><br></pre></td></tr></table></figure>\n\n<p>如果你只需要临时使用密钥作为构建的一部分。例如，用于克隆私有 repo 或下载私有软件包的 SSH 密钥。你应该使用多阶段构建，因为构建者的历史会被临时阶段忽略。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 密钥参数</span></span><br><span class=\"line\"><span class=\"keyword\">arg</span> ssh_private_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 git</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; （运行 apt-get update）。</span></span><br><span class=\"line\">    apt-get install -y --no-install-recommends git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 ssh 密钥来克隆 repo</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /root/.ssh/ &amp;&amp; \\\\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;PRIVATE_SSH_KEY&#125;</span>&quot;</span> &gt; /root/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">touch</span> /root/.ssh/known_hosts &amp; &amp;</span></span><br><span class=\"line\">    ssh-keyscan bitbucket.org &gt;&gt; /root/.ssh/known_hosts</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> git <span class=\"built_in\">clone</span> git@github.com:testdrivenio/not-real.git</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\">工作目录 /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从临时镜像中复制版本库</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /your-repo /app/your-repo</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>多阶段构建只保留了最终镜像的历史。你可以把这个功能用于你的应用程序需要的永久密钥，比如数据库凭证。</p>\n<p>你也可以使用 docker build 中新的 <code>--secret</code> 选项来向 Docker 镜像传递密钥，这些密钥不会被存储在镜像中。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &quot;docker_is_awesome&quot; &gt; secrets.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从默认的密钥位置显示密钥。</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> --mount=<span class=\"built_in\">type</span>=secret,<span class=\"built_in\">id</span>=mysecret <span class=\"built_in\">cat</span> /run/secrets/mysecret</span></span><br></pre></td></tr></table></figure>\n\n<p>这将装载 <code>secrets.txt</code> 文件中的密钥。</p>\n<p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build --no-cache --progress=plain --secret <span class=\"built_in\">id</span>=mysecret,src=secrets.txt .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">#4 [1/2] FROM docker.io/library/alpine</span></span><br><span class=\"line\"><span class=\"comment\">#4 sha256:665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7</span></span><br><span class=\"line\"><span class=\"comment\">#4 缓存的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5 [2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/myecret</span></span><br><span class=\"line\"><span class=\"comment\">#5 sha256:75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de</span></span><br><span class=\"line\"><span class=\"comment\">#5 0.635 docker_is_awesome#5 DONE 0.7s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#6 导出到镜像</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，检查历史记录，看看密钥是否泄露了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ docker <span class=\"built_in\">history</span> 49574a19241c</span><br><span class=\"line\">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">49574a19241c   5 minutes ago   CMD [<span class=\"string\">&quot;/bin/sh&quot;</span>]                                 0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      5 minutes ago   RUN /bin/sh -c <span class=\"built_in\">cat</span> /run/secrets/mysecret <span class=\"comment\"># b…   0B        buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      4 weeks ago     /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class=\"line\">&lt;missing&gt;      4 weeks ago     /bin/sh -c <span class=\"comment\">#(nop) ADD file:aad4290d27580cc1a…   5.6MB</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-密钥\"><a href=\"#Docker-密钥\" class=\"headerlink\" title=\"Docker 密钥\"></a>Docker 密钥</h4><p>如果你正在使用 Docker Swarm，你可以用 Docker secrets 来管理密钥。</p>\n<p>例如，启动 Docker Swarm 模式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker swarm init</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 docker 密钥。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;supersecretpassword&quot;</span> | docker secret create postgres_password -</span><br><span class=\"line\">qdqmbpizeef0lfhyttxqfbty0</span><br><span class=\"line\"></span><br><span class=\"line\">docker secret <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID                          NAME                DRIVER    CREATED         UPDATED</span><br><span class=\"line\">qdqmbpizeef0lfhyttxqfbty0   postgres_password             4 seconds ago   4 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>当一个容器被赋予上述密钥的访问权时，它将挂载在 <code>/run/secrets/postgres_password</code>。这个文件将包含明文的密钥的实际值。</p>\n<p>使用其他的编排工具？</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/eks/latest/userguide/manage-secrets.html\">使用 AWS Secrets Manager 的密钥与 Kubernetes 的密钥</a></li>\n<li>DigitalOcean Kubernetes - <a href=\"https://www.digitalocean.com/community/tutorials/recommended-steps-to-secure-a-digitalocean-kubernetes-cluster\">保护 DigitalOcean Kubernetes 集群的推荐步骤</a></li>\n<li>Google Kubernetes引擎 - <a href=\"https://cloud.google.com/secret-manager/docs/using-other-products#google-kubernetes-engine\">与其他产品一起使用密钥管理器</a></li>\n<li>Nomad - <a href=\"https://learn.hashicorp.com/tutorials/nomad/vault-postgres?in=nomad/integrate-vault\">Vault 集成和检索动态密钥</a></li>\n</ul>\n<h3 id=\"3-使用-dockerignore-文件\"><a href=\"#3-使用-dockerignore-文件\" class=\"headerlink\" title=\"3. 使用 .dockerignore 文件\"></a>3. 使用 .dockerignore 文件</h3><p>之前已经提到过几次使用 <code>.dockerignore</code> 文件。这个文件用来指定你不希望被添加到发送给 Docker 守护进程的初始构建上下文中的文件和文件夹，后者将构建你的镜像。换句话说，你可以用它来定义你需要的构建环境。</p>\n<p>当一个 Docker 镜像被构建时，整个 Docker 上下文 - 即你的项目的根在 <code>COPY</code> 或 <code>ADD</code> 命令执行之前就被发送给了 Docker 守护进程。</p>\n<p>这可能是相当费资源，尤其是当你的项目中有许多依赖关系、大量的数据文件或构建工件时。</p>\n<p>另外，当 Docker CLI 和守护程序不在同一台机器上。比如守护进程是在远程机器上执行的，你就更应该注意构建环境的大小了。</p>\n<p>你应该在 <code>.dockerignore</code> 文件中添加什么？</p>\n<ol>\n<li>临时文件和文件夹</li>\n<li>构建日志</li>\n<li>本地 secrets</li>\n<li>本地开发文件，如 <code>docker-compose.yml</code></li>\n<li>版本控制文件夹，如 “.git”、”.hg” 和 “.vscode” 等</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">**/.git</span><br><span class=\"line\">**/.gitignore</span><br><span class=\"line\">**/.vscode</span><br><span class=\"line\">**/coverage</span><br><span class=\"line\">**/.env</span><br><span class=\"line\">**/.aws</span><br><span class=\"line\">**/.ssh</span><br><span class=\"line\">Dockerfile</span><br><span class=\"line\">README.md</span><br><span class=\"line\">docker-compose.yml</span><br><span class=\"line\">**/.DS_Store</span><br><span class=\"line\">**/venv</span><br><span class=\"line\">**/env</span><br></pre></td></tr></table></figure>\n\n<p>总之，结构合理的 .dockerignore 可以帮助</p>\n<ol>\n<li>减少 Docker 镜像的大小</li>\n<li>加快构建过程</li>\n<li>防止不必要的缓存失效</li>\n<li>防止泄密</li>\n</ol>\n<h3 id=\"4-检查并扫描你的-Dockerfile-和镜像\"><a href=\"#4-检查并扫描你的-Dockerfile-和镜像\" class=\"headerlink\" title=\"4. 检查并扫描你的 Dockerfile 和镜像\"></a>4. 检查并扫描你的 Dockerfile 和镜像</h3><p>Linting 是检查源代码中是否存在可能导致潜在缺陷的编程和风格错误以及不良做法的过程。就像编程语言一样，静态文件也可以被 lint。特别是对于你的 Dockerfile，linter 可以帮助确保它们的可维护性、避免弃用语法并遵守最佳实践。整理镜像应该是 CI 管道的标准部分。</p>\n<p><a href=\"https://github.com/hadolint/hadolint\">Hadolint</a> 是最流行的 Dockerfile linter：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hadolint Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\">Dockerfile:1 DL3006 warning: Always tag the version of an image explicitly</span><br><span class=\"line\">Dockerfile:7 DL3042 warning: Avoid the use of cache directory with pip. Use `pip install --no-cache-dir &lt;package&gt;`</span><br><span class=\"line\">Dockerfile:9 DL3059 info: Multiple consecutive `RUN` instructions. Consider consolidation.</span><br><span class=\"line\">Dockerfile:17 DL3025 warning: Use arguments JSON notation <span class=\"keyword\">for</span> CMD and ENTRYPOINT arguments</span><br></pre></td></tr></table></figure>\n\n<p>这是 Hadolint 一个在线的链接 <a href=\"https://hadolint.github.io/hadolint/\">https://hadolint.github.io/hadolint/</a> 也可以安装 VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=exiasr.hadolint\">插件</a></p>\n<p>你可以将 Dockerfile 与扫描镜像和容器的漏洞结合使用。</p>\n<p>以下是一些有影响力的镜像扫描工具：</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/scan/\">Snyk</a> 是 Docker 本地漏洞扫描的独家提供商。你可以使用 <code>docker scan</code> CLI 命令来扫描镜像。</li>\n<li><a href=\"https://aquasecurity.github.io/trivy/\">Trivy</a> 可用于扫描容器镜像、文件系统、git 存储库和其他配置文件。</li>\n<li><a href=\"https://github.com/quay/clair\">Clair</a> 是一个开源项目，用于对应用程序容器中的漏洞进行静态分析。</li>\n<li><a href=\"https://github.com/anchore/anchore-engine\">Anchore</a> 是一个开源项目，为容器镜像的检查、分析和认证提供集中式服务。</li>\n</ul>\n<p>总而言之，对你的 Dockerfile 和镜像进行 lint 和扫描，来发现任何偏离最佳实践的潜在问题。</p>\n<h3 id=\"5-签名和验证镜像\"><a href=\"#5-签名和验证镜像\" class=\"headerlink\" title=\"5. 签名和验证镜像\"></a>5. 签名和验证镜像</h3><p>你怎么知道用于运行生产代码的镜像没有被篡改？</p>\n<p>篡改可以通过中间人（MITM）攻击或注册表被完全破坏来实现。Docker 内容信任（DCT）可以对来自远程注册中心的 Docker 镜像进行签名和验证。</p>\n<p>为了验证镜像的完整性和真实性，请设置以下环境变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DOCKER_CONTENT_TRUST=1</span><br></pre></td></tr></table></figure>\n\n<p>现在，如果你试图拉一个没有被签名的镜像，你会收到以下错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: remote trust data does not exist <span class=\"keyword\">for</span> docker.io/namespace/unsigned-image:</span><br><span class=\"line\">notary.docker.io does not have trust data <span class=\"keyword\">for</span> docker.io/namespace/unsigned-image</span><br></pre></td></tr></table></figure>\n\n<p>你可以从使用 Docker 内容信任签署镜像文档中了解签署镜像的情况。</p>\n<p>当从 Docker Hub下 载镜像时，确保使用官方镜像或来自可信来源的经过验证的镜像。较大的团队应该使用他们自己的内部私有容器仓库</p>\n<h3 id=\"6-设置内存和-CPU-的限制\"><a href=\"#6-设置内存和-CPU-的限制\" class=\"headerlink\" title=\"6. 设置内存和 CPU 的限制\"></a>6. 设置内存和 CPU 的限制</h3><p>限制 Docker 容器的内存使用是一个好主意，特别是当你在一台机器上运行多个容器时。这可以防止任何一个容器使用所有可用的内存，从而削弱其他容器的功能。</p>\n<p>限制内存使用的最简单方法是在 Docker cli 中使用 <code>--memory</code> 和 <code>--cpu</code> 选项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --cpus=2 -m 512m nginx</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将容器的使用限制在 2 个 CPU 和 512 兆的内存。</p>\n<p>你可以在 Docker Compose 文件中做同样的事情，像这样。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.9&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">deploy:</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">limits:</span></span><br><span class=\"line\">          <span class=\"attr\">cpus:</span> <span class=\"number\">2</span></span><br><span class=\"line\">          <span class=\"attr\">memory:</span> <span class=\"string\">512M</span></span><br><span class=\"line\">        <span class=\"attr\">reservations:</span></span><br><span class=\"line\">          <span class=\"attr\">cpus:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">memory:</span> <span class=\"string\">256M</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意 <code>reservations</code> 字段。它是用来设置软限制的，当主机的内存或CPU资源不足时，它就会优先考虑。</p>\n<p>其他相关资源</p>\n<ol>\n<li>带有内存、CPU和GPU的运行时选项：<a href=\"https://docs.docker.com/config/containers/resource_constraints/\">https://docs.docker.com/config/containers/resource_constraints/</a></li>\n<li>Docker Compose 的资源限制：<a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/#resources\">https://docs.docker.com/compose/compose-file/compose-file-v3/#resources</a></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是本文介绍的 17 条最佳实践，掌握这些最佳实践一定会让你的 Dockerfile 和 Docker Image 变得精简，干净，和安全。</p>\n<p>本文出自 <a href=\"https://testdriven.io/blog/docker-best-practices/\">Docker Best Practices for Python Developers</a>。</p>\n<hr>\n<p>欢迎扫码关注公众号「DevOps攻城狮」- 专注于DevOps领域知识分享。</p>\n<p><img src=\"https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true\" alt=\" \"></p>\n","more":"<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    apt-get install -y --no-install-recommends gcc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/wheels /wheels</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --no-cache /wheels/*</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，GCC 编译器在安装某些 Python 包时是必需的，所以我们添加了一个临时的、构建时的阶段来处理构建阶段。</p>\n<p>由于最终的运行时映像不包含 GCC，所以它更轻，也更安全。镜像大小比较：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY                 TAG                    IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">docker-single              latest                 8d6b6a4d7fb6   16 seconds ago   259MB</span><br><span class=\"line\">docker-multi               latest                 813c2fa9b114   3 minutes ago    156MB</span><br></pre></td></tr></table></figure>\n\n<p>再来看一个例子：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span> as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip wheel --no-cache-dir --no-deps --wheel-dir /wheels jupyter pandas</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最终阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /notebooks</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /wheels /wheels</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install --no-cache /wheels/*</span></span><br></pre></td></tr></table></figure>\n\n<p>镜像大小比较：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY                  TAG                   IMAGE ID       CREATED         SIZE</span><br><span class=\"line\">ds-multi                    latest                b4195deac742   2 minutes ago   357MB</span><br><span class=\"line\">ds-single                   latest                7c23c43aeda6   6 minutes ago   969MB</span><br></pre></td></tr></table></figure>\n\n<p>总之，多阶段构建可以减少你的生产镜像的大小，帮助你节省时间和金钱。此外，这将简化你的生产容器。由于尺寸较小和简单，相对会有较小的攻击面。</p>\n<h3 id=\"2-调整-Dockerfile-命令的顺序\"><a href=\"#2-调整-Dockerfile-命令的顺序\" class=\"headerlink\" title=\"2. 调整 Dockerfile 命令的顺序\"></a>2. 调整 Dockerfile 命令的顺序</h3><p>密切注意你的 Dockerfile 命令的顺序，以利用层缓存。</p>\n<p>Docker 在一个特定的 Docker 文件中缓存每个步骤（或层），以加快后续的构建。当一个步骤发生变化时，不仅该步骤，而且所有后续步骤的缓存都将被废止。</p>\n<p>例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> sample.py .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install -r /requirements.txt</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个 Dockerfile 中，我们在安装需求之前复制了应用程序的代码。现在，每次我们改变 sample.py 时，构建都会重新安装软件包。这是非常低效的，特别是在使用 Docker 容器作为开发环境时。因此，把经常变化的文件放在 Dockerfile 的末尾是很关键的。</p>\n<blockquote>\n<p>你也可以通过使用 .dockerignore 文件来排除不必要的文件，使其不被添加到 Docker 构建环境和最终镜像中，从而帮助防止不必要的缓存失效。更多信息后面会提到。</p>\n</blockquote>\n<p>因此，在上面的 Dockerfile 中，你应该把 <code>COPY sample.py .</code> 命令移到底部，如下所示：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> pip install -r /requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> sample.py .</span></span><br></pre></td></tr></table></figure>\n\n<p>注意。</p>\n<ol>\n<li>总是把可能发生变化的层放在 Dockerfile 中尽可能的低。</li>\n<li>将多个 <code>RUN apt-get update</code>，<code>RUN apt-get install</code> 等命令结合到一起执行。(这也有助于减少镜像的大小，后面会很快就会提到这一点)。</li>\n<li>如果你想关闭某个 Docker 构建的缓存，可以添加 <code>--no-cache=True</code> 标志。</li>\n</ol>\n<h3 id=\"3-使用小型-Docker-基础镜像\"><a href=\"#3-使用小型-Docker-基础镜像\" class=\"headerlink\" title=\"3. 使用小型 Docker 基础镜像\"></a>3. 使用小型 Docker 基础镜像</h3><p>较小的 Docker 镜像更具有模块化和安全性。较小的 Docker 基础镜像在构建、推送和拉动镜像的速度较小，它们也往往更安全，因为它们只包括运行应用程序所需的必要库和系统依赖。</p>\n<p>你应该使用哪个 Docker 基础镜像？这个没有一个固定的答案，它这取决于你要做什么。下面是 Python 的各种 Docker 基础镜像的大小比较。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">REPOSITORY   TAG                 IMAGE ID       CREATED      SIZE</span><br><span class=\"line\">python       3.9.6-alpine3.14    f773016f760e   3 days ago   45.1MB</span><br><span class=\"line\">python       3.9.6-slim          907fc13ca8e7   3 days ago   115MB</span><br><span class=\"line\">python       3.9.6-slim-buster   907fc13ca8e7   3 days ago   115MB</span><br><span class=\"line\">python       3.9.6               cba42c28d9b8   3 days ago   886MB</span><br><span class=\"line\">python       3.9.6-buster        cba42c28d9b8   3 days ago   886MB</span><br></pre></td></tr></table></figure>\n\n<p>虽然基于 Alpine Linux 的 Alpine flavor 是最小的，但如果你找不到可以与之配合的编译二进制文件，往往会导致构建时间的增加。因此，你最终可能不得不自己构建二进制文件，这可能会增加镜像的大小（取决于所需的系统级依赖）和构建时间（由于必须从源头编译）。</p>\n<blockquote>\n<p>关于为什么最好不要使用基于 Alpine 的基础镜像，请参考<a href=\"https://pythonspeed.com/articles/base-image-python-docker-images/\">适用于 Python 应用程序的最佳 Docker 基础映像</a> 和 <a href=\"https://pythonspeed.com/articles/alpine-docker-python/\">使用 Alpine 可以使 Python Docker 构建速度慢 50 倍</a> 了解更多关于为什么最好避免使用基于 Alpine 的基础镜像。</p>\n</blockquote>\n<p>归根结底，这都是关于平衡的问题。如果有疑问，从 <code>*-slim</code> flavor 开始，特别是在开发模式下，因为你正在构建你的应用程序。你想避免在添加新的 <code>Python</code> 包时不得不不断地更新 Dockerfile 以安装必要的系统级依赖。当你为生产强化你的应用程序和 Dockerfile 时，你可能想探索使用 Alpine 来完成多阶段构建的最终镜像。</p>\n<p>另外，别忘了定期更新你的基础镜像，以提高安全性和性能。当一个基础镜像的新版本发布时，例如：<code>3.9.6-slim</code> –&gt; <code>3.9.7-slim</code>，你应该拉出新的镜像并更新你正在运行的容器以获得所有最新的安全补丁。</p>\n<h3 id=\"4-尽量减少层的数量\"><a href=\"#4-尽量减少层的数量\" class=\"headerlink\" title=\"4. 尽量减少层的数量\"></a>4. 尽量减少层的数量</h3><p>尽量把 <code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 命令结合起来使用，因为它们会创建层。每一层都会增加镜像的大小，因为它们是被缓存的。因此，随着层数的增加，镜像大小也会增加。</p>\n<p>你可以用 <code>docker history</code> 命令来测试一下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker images</span><br><span class=\"line\">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class=\"line\">dockerfile   latest    180f98132d02   51 seconds ago   259MB</span><br><span class=\"line\"></span><br><span class=\"line\">docker <span class=\"built_in\">history</span> 180f98132d02</span><br><span class=\"line\"></span><br><span class=\"line\">IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">180f98132d02   58 seconds ago       COPY . . <span class=\"comment\"># buildkit                             6.71kB    buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      58 seconds ago       RUN /bin/sh -c pip install -r requirements.t…   35.5MB    buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      About a minute ago   COPY requirements.txt . <span class=\"comment\"># buildkit              58B       buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      About a minute ago   WORKDIR /app</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>请注意尺寸。只有 <code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 命令增加了镜像的尺寸，你可以尽可能地通过合并命令来减少镜像的大小。比如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get install -y gcc</span></span><br></pre></td></tr></table></figure>\n\n<p>可以合并成一个 <code>RUN</code> 命令：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y gcc</span></span><br></pre></td></tr></table></figure>\n\n<p>因此，创建一个单层而不是两个，这就减少了最终镜像的大小。虽然减少层数是个好主意，但更重要的是，这本身不是一个目标，而是减少镜像大小和构建时间的一个副作用。换句话说呢，与其试图优化每一条命令，你更应该关注前面的三种做法！！！</p>\n<ol>\n<li>多阶段构建</li>\n<li>Dockerfile命令的顺序</li>\n<li>以及使用一个小的基础镜像。</li>\n</ol>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ol>\n<li><code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 都会创建图层</li>\n<li>每个图层都包含与前一个图层的差异</li>\n<li>图层会增加最终镜像的大小</li>\n</ol>\n<h4 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h4><ol>\n<li>合并相关命令</li>\n<li>在创建过程中执行 <code>RUN</code> 步骤中删除不必要的文件</li>\n<li>尽量减少运行 <code>apt-get upgrade</code> 的次数，因为它将所有软件包升级到最新版本。</li>\n<li>对于多阶段的构建，不要太担心过度优化临时阶段的命令</li>\n</ol>\n<p>最后，为了便于阅读，建议将多行参数按字母数字排序。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; apt-get install -y \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    git \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    gcc \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    matplotlib \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    pillow  \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    &amp;&amp; <span class=\"built_in\">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用无特权的容器\"><a href=\"#5-使用无特权的容器\" class=\"headerlink\" title=\"5. 使用无特权的容器\"></a>5. 使用无特权的容器</h3><p>默认情况下，Docker 在容器内以 root 身份运行容器进程。然而，这是一个糟糕的做法，因为在容器内以 root 身份运行的进程在 Docker 主机中也是以 root 身份运行。</p>\n<p>因此，如果攻击者获得了对容器的访问权，他们就可以获得所有的 root 权限，并可以对 Docker 主机进行一些攻击，例如：</p>\n<ol>\n<li>将敏感信息从主机的文件系统复制到容器中</li>\n<li>执行远程命令</li>\n</ol>\n<p>为了防止这种情况，确保以非 root 用户运行容器进程。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> addgroup --system app &amp;&amp; adduser --system --group app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> app</span><br></pre></td></tr></table></figure>\n\n<p>你可以更进一步，删除 shell 权限，确保没有主目录。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> addgroup --gid 1001 --system app &amp;&amp; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    adduser --no-create-home --shell /bin/false --disabled-password --uid 1001 --system --group app</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">USER</span> app</span><br></pre></td></tr></table></figure>\n\n<p>验证</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -i sample <span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\">uid=1001(app) gid=1001(app) <span class=\"built_in\">groups</span>=1001(app)</span><br></pre></td></tr></table></figure>\n\n<p>在这里，容器内的应用程序在一个非 root 用户下运行。然而，请记住，Docker 守护进程和容器本身仍然是以 root 权限运行的。</p>\n<p>请务必查看以非根用户身份运行 Docker 守护进程，以获得以非根用户身份运行守护进程和容器的帮助。</p>\n<h3 id=\"6-优先选择-COPY-而不是-ADD\"><a href=\"#6-优先选择-COPY-而不是-ADD\" class=\"headerlink\" title=\"6. 优先选择 COPY 而不是 ADD\"></a>6. 优先选择 <code>COPY</code> 而不是 <code>ADD</code></h3><p>除非你确定你需要 <code>ADD</code> 所带来的额外功能，否则请使用 <code>COPY</code>。</p>\n<p>那么 <code>COPY</code> 和 <code>ADD</code> 的区别是什么？</p>\n<p>首先，这两个命令都允许你从一个特定的位置复制文件到 Docker 镜像中。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> &lt;src&gt; &lt;dest&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> &lt;src&gt; &lt;dest&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>虽然它们看起来作用相同，但 <code>ADD</code> 有一些额外的功能。</p>\n<ul>\n<li><code>COPY</code> 用于将本地文件或目录从 Docker 主机复制到镜像上。</li>\n<li><code>ADD</code> 可以用于同样的事情，也可以用于下载外部文件。另外，如果你使用压缩文件（tar、gzip、bzip2等）作为 <src> 参数，<code>ADD</code> 会自动将内容解压到指定位置。</src></li>\n</ul>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将主机上的本地文件复制到目的地</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> /source/path  /destination/path</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> /source/path  /destination/path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下载外部文件并复制到目的地</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> http://external.file/url  /destination/path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制和提取本地压缩文件</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> source.file.tar.gz /destination/path</span></span><br></pre></td></tr></table></figure>\n\n<p>最后 <code>COPY</code> 在语义上比 <code>ADD</code> 更加明确和更容易理解。</p>\n<h3 id=\"7-缓存安装包到-Docker-主机上\"><a href=\"#7-缓存安装包到-Docker-主机上\" class=\"headerlink\" title=\"7. 缓存安装包到 Docker 主机上\"></a>7. 缓存安装包到 Docker 主机上</h3><p>当一个需求文件被改变时，镜像需要被重建以安装新的包。先前的步骤将被缓存，正如在最小化层数中提到的。在重建镜像时下载所有的包会导致大量的网络活动，并需要大量的时间。每次重建都要占用同等的时间来下载不同构建中的通用包。</p>\n<p>以 Python 为例，你可以通过将 pip 缓存目录映射到主机上的一个目录来避免这种情况。所以对于每次重建，缓存的版本会持续存在，这可以提高构建速度。</p>\n<p>在 Docker 运行中添加一个卷，作为 <code>-v $HOME/.cache/pip-docker/:/root/.cache/pip</code> 或者作为 Docker Compose 文件中的映射。</p>\n<p>上面介绍的目录只供参考，要确保你映射的是 cache 目录，而不是 site-packages（内置包所在的位置）。</p>\n<p>将缓存从 docker 镜像中移到主机上可以为你节省最终镜像的空间。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> requirements.txt .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> --mount=<span class=\"built_in\">type</span>=cache,target=/root/.cache/pip \\</span></span><br><span class=\"line\"><span class=\"language-bash\">        pip install -r requirements.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 忽略 ...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-每个容器只运行一个进程\"><a href=\"#8-每个容器只运行一个进程\" class=\"headerlink\" title=\"8. 每个容器只运行一个进程\"></a>8. 每个容器只运行一个进程</h3><p>为什么建议每个容器只运行一个进程？</p>\n<p>让我们假设你的应用程序栈由两个 Web 服务器和一个数据库组成。虽然你可以很容易地从一个容器中运行所有三个，但你应该在一个单独的容器中运行每个服务，以便更容易重复使用和扩展每个单独的服务。</p>\n<ul>\n<li>扩展性 - 由于每个服务都在一个单独的容器中，你可以根据需要水平地扩展你的一个网络服务器来处理更多的流量。</li>\n<li>可重用性 - 也许你有另一个服务需要一个容器化的数据库，你可以简单地重复使用同一个数据库容器，而不需要带着两个不必要的服务。</li>\n<li>日志 - 耦合容器会让日志变得更加复杂。（我们将在本文后面进一步详细讨论这个问题）</li>\n<li>可移植性和可预测性 - 当容器有较少的部分在工作时，制作安全补丁或调试问题就会容易得多。</li>\n</ul>\n<h3 id=\"9-优先选择数组而不是字符串语法\"><a href=\"#9-优先选择数组而不是字符串语法\" class=\"headerlink\" title=\"9. 优先选择数组而不是字符串语法\"></a>9. 优先选择数组而不是字符串语法</h3><p>你可以在你的 Dockerfiles 中以数组（exec）或字符串（shell）格式</p>\n<p>在 Dockerfile 中，你可以以数组（exec）或字符串（shell）格式来使用 <code>CMD</code> 和 <code>ENTRYPOINT</code> 命令</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组（exec）</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;-w&quot;</span>, <span class=\"string\">&quot;4&quot;</span>, <span class=\"string\">&quot;-k&quot;</span>, <span class=\"string\">&quot;uvicorn.workers.UvicornWorker&quot;</span>, <span class=\"string\">&quot;main:app&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串（shell）</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> <span class=\"string\">&quot;gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>两者都是正确的，并且实现了几乎相同的事情；但是，你应该尽可能地使用 exec 格式。</p>\n<p>以下来自 <a href=\"https://docs.docker.com/compose/faq/#why-do-my-services-take-10-seconds-to-recreate-or-stop\">Docker的官方文档</a>内容：</p>\n<ul>\n<li>确保你在 Dockerfile 中使用 <code>CMD</code> 和 <code>ENTRYPOINT</code> 的 exec 形式。</li>\n<li>例如，使用 <code>[&quot;program&quot;, &quot;arg1&quot;, &quot;arg2&quot;]</code> 而不是 <code>&quot;program arg1 arg2&quot;</code>。使用字符串形式会导致 Docker 使用 <code>bash</code> 运行你的进程，而 <code>bash</code> 并不能正确处理信号。Compose 总是使用 JSON 形式，所以不用担心如果你在你的 Compose 文件中覆盖了命令或入口。</li>\n</ul>\n<p>因此，由于大多数 shell 不处理对子进程的信号，如果你使用 shell 格式，CTRL-C（产生 <code>SIGTERM</code>）可能不会停止一个子进程。</p>\n<p>例子:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> ubuntu:<span class=\"number\">18.04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># BAD: 字符串（shell）格式</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> top -d</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># GOOD: 数组（exec）格式</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;top&quot;</span>, <span class=\"string\">&quot;-d&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>这两种情况执行效果一样。但请注意，在字符串（shell）格式的情况下，<code>CTRL-C</code> 不会杀死这个进程。相反，你会看到 <code>^C^C^C^C^C^C^C^C^C^C</code>。</p>\n<p>另一个注意事项是，字符串（shell）格式携带的是 shell 的 PID，而不是进程本身。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 数组格式</span></span><br><span class=\"line\">root@<span class=\"number\">18</span>d8fd3fd4d2:/app<span class=\"comment\"># ps ax</span></span><br><span class=\"line\">  PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\">    <span class=\"number\">1</span> ?        Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"number\">7</span> ?        Sl     <span class=\"number\">0</span>:<span class=\"number\">02</span> /usr/local/bin/python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">   <span class=\"number\">25</span> pts/<span class=\"number\">0</span>    Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> bash</span><br><span class=\"line\">  <span class=\"number\">356</span> pts/<span class=\"number\">0</span>    R+     <span class=\"number\">0</span>:<span class=\"number\">00</span> ps ax</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字符串格式</span></span><br><span class=\"line\">root@ede24a5ef536:/app<span class=\"comment\"># ps ax</span></span><br><span class=\"line\">  PID TTY      STAT   TIME COMMAND</span><br><span class=\"line\">    <span class=\"number\">1</span> ?        Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> /bin/sh -c python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"number\">8</span> ?        S      <span class=\"number\">0</span>:<span class=\"number\">00</span> python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"number\">9</span> ?        Sl     <span class=\"number\">0</span>:<span class=\"number\">01</span> /usr/local/bin/python manage.py runserver <span class=\"number\">0.0</span>.<span class=\"number\">0.0</span>:<span class=\"number\">8000</span></span><br><span class=\"line\">   <span class=\"number\">13</span> pts/<span class=\"number\">0</span>    Ss     <span class=\"number\">0</span>:<span class=\"number\">00</span> bash</span><br><span class=\"line\">  <span class=\"number\">342</span> pts/<span class=\"number\">0</span>    R+     <span class=\"number\">0</span>:<span class=\"number\">00</span> ps ax</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-了解-ENTRYPOINT-和-CMD-之间的区别\"><a href=\"#10-了解-ENTRYPOINT-和-CMD-之间的区别\" class=\"headerlink\" title=\"10. 了解 ENTRYPOINT 和 CMD 之间的区别\"></a>10. 了解 <code>ENTRYPOINT</code> 和 <code>CMD</code> 之间的区别</h4><p>我应该使用 <code>ENTRYPOINT</code> 还是 <code>CMD</code> 来运行容器进程？有两种方法可以在容器中运行命令。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;config.wsgi&quot;</span>, <span class=\"string\">&quot;-b&quot;</span>, <span class=\"string\">&quot;0.0.0.0:8000&quot;</span>]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 和</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;config.wsgi&quot;</span>, <span class=\"string\">&quot;-b&quot;</span>, <span class=\"string\">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>两者本质上做的是同一件事：用 <code>Gunicorn</code> 服务器在 <code>config.wsgi</code> 启动应用程序，并将其绑定到 <code>0.0.0.0:8000</code>。</p>\n<p><code>CMD</code> 很容易被重写。如果你运行 <code>docker run &lt;image_name&gt; uvicorn config.asgi</code>，上述 <code>CMD</code> 就会被新的参数所取代。</p>\n<p>例如，<code>uvicorn config.asgi</code>。而要覆盖 <code>ENTRYPOINT</code> 命令，必须指定 <code>--entrypoint</code> 选项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --entrypoint uvicorn config.asgi &lt;image_name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在这里，很明显，我们正在覆盖入口点。所以，建议使用 <code>ENTRYPOINT</code> 而不是 <code>CMD</code>，以防止意外地覆盖命令。</p>\n<p>它们也可以一起使用。比如说</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;gunicorn&quot;</span>, <span class=\"string\">&quot;config.wsgi&quot;</span>, <span class=\"string\">&quot;-w&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"string\">&quot;4&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<p>当像这样一起使用时，为启动容器所运行的命令就变成了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gunicorn config.wsgi -w 4</span><br></pre></td></tr></table></figure>\n\n<p>如上所述，<code>CMD</code> 很容易被重写。因此，<code>CMD</code> 可以被用来向 <code>ENTRYPOINT</code> 命令传递参数。比如很容易更改 workers 的数量，就像这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run &lt;image_name&gt; 6</span><br></pre></td></tr></table></figure>\n\n<p>这样就将有 6 个 Gunicorn workers 启动容器，而不是默认的 4 个。</p>\n<h3 id=\"11-添加健康检查-HEALTHCHECK\"><a href=\"#11-添加健康检查-HEALTHCHECK\" class=\"headerlink\" title=\"11. 添加健康检查 HEALTHCHECK\"></a>11. 添加健康检查 <code>HEALTHCHECK</code></h3><p>使用 <code>HEALTHCHECK</code> 来确定容器中运行的进程是否不仅已启动并正在运行，而且是“健康”的。</p>\n<p>Docker 公开了一个 API 来检查容器中运行的进程的状态，它提供的信息不仅仅是进程是否“正在运行”，因为“运行”涵盖了“它正在运行”、“仍在启动”、甚至“陷入某种无限循环错误状态”。你可以通过 <a href=\"https://docs.docker.com/engine/reference/builder/#healthcheck\"><code>HEALTHCHECK</code></a> 指令与此 API 交互。</p>\n<p>例如，如果你正在提供 Web 应用程序，则可以使用以下内容来确定 <code>/</code> 端点是否已启动并可以处理服务请求：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">HEALTHCHECK</span><span class=\"language-bash\"> CMD curl --fail http://localhost:8000 || <span class=\"built_in\">exit</span> 1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果你运行 <code>docker ps</code>，你可以看到 <code>HEALTHCHECK</code> 的状态。</p>\n<p>健康的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                            PORTS                                       NAMES</span><br><span class=\"line\">09c2eb4970d4   healthcheck   <span class=\"string\">&quot;python manage.py ru…&quot;</span>   10 seconds ago   Up 8 seconds (health: starting)   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp   xenodochial_clarke</span><br></pre></td></tr></table></figure>\n\n<p>不健康的示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS                          PORTS                                       NAMES</span><br><span class=\"line\">09c2eb4970d4   healthcheck   <span class=\"string\">&quot;python manage.py ru…&quot;</span>   About a minute ago   Up About a minute (unhealthy)   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp   xenodochial_clarke</span><br></pre></td></tr></table></figure>\n\n<p>你可以更进一步，设置一个仅用于健康检查的自定义端点，然后配置 <code>HEALTHCHECK</code> 以针对返回的数据进行测试。</p>\n<p>例如，如果端点返回 <code>&#123;&quot;ping&quot;: &quot;pong&quot;&#125;</code> 的 JSON 响应，你可以指示 <code>HEALTHCHECK</code> 验证响应正文。</p>\n<p>以下是使用 <code>docker inspect</code> 查看运行状况检查状态的方法：</p>\n<blockquote>\n<p>这里省略了部分输出。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ docker inspect --format <span class=\"string\">&quot;&#123;&#123;json .State.Health &#125;&#125;&quot;</span> ab94f2ac7889</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Status&quot;</span>: <span class=\"string\">&quot;healthy&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;FailingStreak&quot;</span>: 0,</span><br><span class=\"line\">  <span class=\"string\">&quot;Log&quot;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Start&quot;</span>: <span class=\"string\">&quot;2021-09-28T15:22:57.5764644Z&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;End&quot;</span>: <span class=\"string\">&quot;2021-09-28T15:22:57.7825527Z&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;ExitCode&quot;</span>: 0,</span><br><span class=\"line\">      <span class=\"string\">&quot;Output&quot;</span>: <span class=\"string\">&quot;...&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>你还可以向 Docker Compose 文件添加运行状况检查：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.8&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span> <span class=\"string\">.</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;8000:8000&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> <span class=\"string\">curl</span> <span class=\"string\">--fail</span> <span class=\"string\">http://localhost:8000</span> <span class=\"string\">||</span> <span class=\"string\">exit</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>选项：</p>\n<ul>\n<li><code>test</code>：要测试的命令。</li>\n<li><code>interval</code>：要测试的间隔 - 即，测试每 x 时间单位。</li>\n<li><code>timeout</code>：等待响应的最长时间。</li>\n<li><code>start_period</code>：何时开始健康检查。它可以在容器准备就绪之前执行其他任务时使用，例如运行迁移。</li>\n<li><code>retries</code>：在将测试指定为失败之前的最大重试次数。</li>\n</ul>\n<p>如果你使用的是 Docker Swarm 以外的编排工具（比如 Kubernetes 或 AWS ECS），它们很可能有自己的内部系统来处理健康检查。在添加 <code>HEALTHCHECK</code> 指令之前，请参阅特定工具的文档。</p>\n<h2 id=\"Docker-镜像最佳实践\"><a href=\"#Docker-镜像最佳实践\" class=\"headerlink\" title=\"Docker 镜像最佳实践\"></a>Docker 镜像最佳实践</h2><h3 id=\"1-Docker-镜像版本\"><a href=\"#1-Docker-镜像版本\" class=\"headerlink\" title=\"1. Docker 镜像版本\"></a>1. Docker 镜像版本</h3><p>只要有可能，就要避免使用 <code>latest</code> 标签的镜像。</p>\n<p>如果你依赖 <code>latest</code> 标签（这并不是一个真正的 “标签”，因为当镜像没有明确的标签时，它是默认应用的），你无法根据镜像标签来判断你的代码正在运行哪个版本。</p>\n<p>如果你想回滚就变得很困难，并且很容易被覆盖（无论是意外还是恶意的）。标签，就像你的基础设施和部署，应该是不可改变的。</p>\n<p>所以无论你如何对待你的内部镜像，都不应该对基本镜像使用 <code>latest</code> 标签，因为你可能会无意中把一个带有破坏性变化的新版本部署到生产中。</p>\n<p>对于内部镜像，应使用描述性的标签，以便更容易分辨哪个版本的代码正在运行，处理回滚，并避免命名冲突。例如，你可以使用以下描述符来组成一个标签。</p>\n<ol>\n<li>时间戳</li>\n<li>Docker 镜像 ID</li>\n<li>Git 提交哈希值</li>\n<li>语义版本 (Semantic version)</li>\n</ol>\n<p>关于更多的选择，也可以参考 Stack Overflow <a href=\"https://stackoverflow.com/a/56213290/1799408\">问题</a> “Properly Versioning Docker Images” 中的这个答案。</p>\n<p>比如说</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t web-prod-b25a262-1.0.0 .</span><br></pre></td></tr></table></figure>\n\n<p>在这里，我们用下面的内容来形成标签</p>\n<ol>\n<li>项目名称：web</li>\n<li>环境名称: prod</li>\n<li>Git commit short hash: b25a262 (通过命令 <code>git rev-parse --short HEAD</code> 来获得)</li>\n<li>语义学版本：1.0.0</li>\n</ol>\n<p>选择一个标签方案并与之保持一致是至关重要的。由于提交哈希值（commit hashes）可以很容易地将镜像标签与代码联系起来，建议将它们纳入你的标签方案。</p>\n<h3 id=\"2-不要在镜像中存储机密信息\"><a href=\"#2-不要在镜像中存储机密信息\" class=\"headerlink\" title=\"2. 不要在镜像中存储机密信息\"></a>2. 不要在镜像中存储机密信息</h3><p>Secrets 是敏感的信息，如密码、数据库凭证、SSH密钥、令牌和 TLS 证书等。这些信息不应该在没有加密的情况下被放入你的镜像中，因为未经授权的用户如果获得了镜像的访问权，只需要检查这些层就可以提取密钥。</p>\n<p>因此不要在 Docker 文件中添加明文的密钥，尤其是当你把镜像推送到像 Docker Hub 这样的公共仓库！！</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> DATABASE_PASSWORD <span class=\"string\">&quot;SuperSecretSauce&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>相反，它们应该通过以下方式注入</p>\n<ol>\n<li>环境变量（在运行时)</li>\n<li>构建时参数（在构建时)</li>\n<li>协调工具，如 Docker Swarm（通过 Docker secrets）或 Kubernetes（通过 Kubernetes secrets）。</li>\n</ol>\n<p>此外，你还可以通过在你的 <code>.dockerignore</code> 文件中添加常见的密钥文件和文件夹来帮助防止密钥的泄露。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">**/.env</span><br><span class=\"line\">**/.aws</span><br><span class=\"line\">**/.ssh</span><br></pre></td></tr></table></figure>\n\n<p>最后，要明确哪些文件会被复制到镜像中，而不是递归地复制所有文件。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 不好的做法</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 好的做法</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./app.py .</span></span><br></pre></td></tr></table></figure>\n\n<p>明确的做法也有助于限制缓存的破坏。</p>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>你可以通过环境变量来传递密钥，但它们会在所有子进程、链接的容器和日志以及 <code>docker inspect</code> 中可见。要更新它们也很困难。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --detach --<span class=\"built_in\">env</span> <span class=\"string\">&quot;DATABASE_PASSWORD=SuperSecretSauce&quot;</span> python：3.9-slim</span><br><span class=\"line\"></span><br><span class=\"line\">b25a262f870eb0fdbf03c666e7fcf18f9664314b79ad58bc7618ea3445e39239</span><br><span class=\"line\"></span><br><span class=\"line\">docker inspect --format=<span class=\"string\">&#x27;&#123;&#123;range .Config.Env&#125;&#125;&#123;&#123;println .&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> b25a262f870eb0fdbf03c666e7fcf18f9664314b79ad58bc7618ea3445e39239</span><br><span class=\"line\"></span><br><span class=\"line\">DATABASE_PASSWORD=SuperSecretSauce</span><br><span class=\"line\">PATH=/usr/local/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class=\"line\">LANG=C.UTF-8</span><br><span class=\"line\">GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568</span><br><span class=\"line\">python_version=3.9.7</span><br><span class=\"line\">python_pip_version=21.2.4</span><br><span class=\"line\">python_setuptools_version=57.5.0</span><br><span class=\"line\">python_get_pip_url=https://github.com/pypa/get-pip/raw/c20b0cfd643cd4a19246ccf204e2997af70f6b21/public/get-pip.py</span><br><span class=\"line\">PYTHON_GET_PIP_SHA256=fa6f3fb93cce234cd4e8dd2beb54a51ab9c247653b52855a48dd44e6b21ff28b</span><br></pre></td></tr></table></figure>\n\n<p>这是最直接的密钥管理方法。虽然它不是最安全的，但它会让诚实的人保持诚实，因为它提供了一个薄薄的保护层，有助于使密钥不被好奇的游荡的眼睛发现。</p>\n<p>使用共享卷传递密钥是一个更好的解决方案，但它们应该被加密，通过 Vault 或 AWS密钥管理服务（KMS），因为它们被保存到磁盘。</p>\n<h4 id=\"构建时参数\"><a href=\"#构建时参数\" class=\"headerlink\" title=\"构建时参数\"></a>构建时参数</h4><p>你可以在构建时使用构建时参数来传递密钥，但这些密钥对于那些可以通过 docker 历史访问镜像的人来说是可见的。</p>\n<p>例子</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> DATABASE_PASSWORD</span><br></pre></td></tr></table></figure>\n\n<p>构建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build --build-arg <span class=\"string\">&quot;DATABASE_PASSWORD=SuperSecretSauce&quot;</span> .</span><br></pre></td></tr></table></figure>\n\n<p>如果你只需要临时使用密钥作为构建的一部分。例如，用于克隆私有 repo 或下载私有软件包的 SSH 密钥。你应该使用多阶段构建，因为构建者的历史会被临时阶段忽略。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 临时阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim as builder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 密钥参数</span></span><br><span class=\"line\"><span class=\"keyword\">arg</span> ssh_private_key</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 git</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> apt-get update &amp;&amp; （运行 apt-get update）。</span></span><br><span class=\"line\">    apt-get install -y --no-install-recommends git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 ssh 密钥来克隆 repo</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /root/.ssh/ &amp;&amp; \\\\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;PRIVATE_SSH_KEY&#125;</span>&quot;</span> &gt; /root/.ssh/id_rsa</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">touch</span> /root/.ssh/known_hosts &amp; &amp;</span></span><br><span class=\"line\">    ssh-keyscan bitbucket.org &gt;&gt; /root/.ssh/known_hosts</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> git <span class=\"built_in\">clone</span> git@github.com:testdrivenio/not-real.git</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后阶段</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> python:<span class=\"number\">3.9</span>-slim</span><br><span class=\"line\"></span><br><span class=\"line\">工作目录 /app</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从临时镜像中复制版本库</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /your-repo /app/your-repo</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>多阶段构建只保留了最终镜像的历史。你可以把这个功能用于你的应用程序需要的永久密钥，比如数据库凭证。</p>\n<p>你也可以使用 docker build 中新的 <code>--secret</code> 选项来向 Docker 镜像传递密钥，这些密钥不会被存储在镜像中。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># &quot;docker_is_awesome&quot; &gt; secrets.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> alpine</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 从默认的密钥位置显示密钥。</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> --mount=<span class=\"built_in\">type</span>=secret,<span class=\"built_in\">id</span>=mysecret <span class=\"built_in\">cat</span> /run/secrets/mysecret</span></span><br></pre></td></tr></table></figure>\n\n<p>这将装载 <code>secrets.txt</code> 文件中的密钥。</p>\n<p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build --no-cache --progress=plain --secret <span class=\"built_in\">id</span>=mysecret,src=secrets.txt .</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">#4 [1/2] FROM docker.io/library/alpine</span></span><br><span class=\"line\"><span class=\"comment\">#4 sha256:665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7</span></span><br><span class=\"line\"><span class=\"comment\">#4 缓存的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#5 [2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/myecret</span></span><br><span class=\"line\"><span class=\"comment\">#5 sha256:75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de</span></span><br><span class=\"line\"><span class=\"comment\">#5 0.635 docker_is_awesome#5 DONE 0.7s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#6 导出到镜像</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，检查历史记录，看看密钥是否泄露了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ docker <span class=\"built_in\">history</span> 49574a19241c</span><br><span class=\"line\">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class=\"line\">49574a19241c   5 minutes ago   CMD [<span class=\"string\">&quot;/bin/sh&quot;</span>]                                 0B        buildkit.dockerfile.v0</span><br><span class=\"line\">&lt;missing&gt;      5 minutes ago   RUN /bin/sh -c <span class=\"built_in\">cat</span> /run/secrets/mysecret <span class=\"comment\"># b…   0B        buildkit.dockerfile.v0</span></span><br><span class=\"line\">&lt;missing&gt;      4 weeks ago     /bin/sh -c <span class=\"comment\">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class=\"line\">&lt;missing&gt;      4 weeks ago     /bin/sh -c <span class=\"comment\">#(nop) ADD file:aad4290d27580cc1a…   5.6MB</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Docker-密钥\"><a href=\"#Docker-密钥\" class=\"headerlink\" title=\"Docker 密钥\"></a>Docker 密钥</h4><p>如果你正在使用 Docker Swarm，你可以用 Docker secrets 来管理密钥。</p>\n<p>例如，启动 Docker Swarm 模式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker swarm init</span><br></pre></td></tr></table></figure>\n\n<p>创建一个 docker 密钥。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;supersecretpassword&quot;</span> | docker secret create postgres_password -</span><br><span class=\"line\">qdqmbpizeef0lfhyttxqfbty0</span><br><span class=\"line\"></span><br><span class=\"line\">docker secret <span class=\"built_in\">ls</span></span><br><span class=\"line\">ID                          NAME                DRIVER    CREATED         UPDATED</span><br><span class=\"line\">qdqmbpizeef0lfhyttxqfbty0   postgres_password             4 seconds ago   4 seconds ago</span><br></pre></td></tr></table></figure>\n\n<p>当一个容器被赋予上述密钥的访问权时，它将挂载在 <code>/run/secrets/postgres_password</code>。这个文件将包含明文的密钥的实际值。</p>\n<p>使用其他的编排工具？</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/eks/latest/userguide/manage-secrets.html\">使用 AWS Secrets Manager 的密钥与 Kubernetes 的密钥</a></li>\n<li>DigitalOcean Kubernetes - <a href=\"https://www.digitalocean.com/community/tutorials/recommended-steps-to-secure-a-digitalocean-kubernetes-cluster\">保护 DigitalOcean Kubernetes 集群的推荐步骤</a></li>\n<li>Google Kubernetes引擎 - <a href=\"https://cloud.google.com/secret-manager/docs/using-other-products#google-kubernetes-engine\">与其他产品一起使用密钥管理器</a></li>\n<li>Nomad - <a href=\"https://learn.hashicorp.com/tutorials/nomad/vault-postgres?in=nomad/integrate-vault\">Vault 集成和检索动态密钥</a></li>\n</ul>\n<h3 id=\"3-使用-dockerignore-文件\"><a href=\"#3-使用-dockerignore-文件\" class=\"headerlink\" title=\"3. 使用 .dockerignore 文件\"></a>3. 使用 .dockerignore 文件</h3><p>之前已经提到过几次使用 <code>.dockerignore</code> 文件。这个文件用来指定你不希望被添加到发送给 Docker 守护进程的初始构建上下文中的文件和文件夹，后者将构建你的镜像。换句话说，你可以用它来定义你需要的构建环境。</p>\n<p>当一个 Docker 镜像被构建时，整个 Docker 上下文 - 即你的项目的根在 <code>COPY</code> 或 <code>ADD</code> 命令执行之前就被发送给了 Docker 守护进程。</p>\n<p>这可能是相当费资源，尤其是当你的项目中有许多依赖关系、大量的数据文件或构建工件时。</p>\n<p>另外，当 Docker CLI 和守护程序不在同一台机器上。比如守护进程是在远程机器上执行的，你就更应该注意构建环境的大小了。</p>\n<p>你应该在 <code>.dockerignore</code> 文件中添加什么？</p>\n<ol>\n<li>临时文件和文件夹</li>\n<li>构建日志</li>\n<li>本地 secrets</li>\n<li>本地开发文件，如 <code>docker-compose.yml</code></li>\n<li>版本控制文件夹，如 “.git”、”.hg” 和 “.vscode” 等</li>\n</ol>\n<p>例子：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">**/.git</span><br><span class=\"line\">**/.gitignore</span><br><span class=\"line\">**/.vscode</span><br><span class=\"line\">**/coverage</span><br><span class=\"line\">**/.env</span><br><span class=\"line\">**/.aws</span><br><span class=\"line\">**/.ssh</span><br><span class=\"line\">Dockerfile</span><br><span class=\"line\">README.md</span><br><span class=\"line\">docker-compose.yml</span><br><span class=\"line\">**/.DS_Store</span><br><span class=\"line\">**/venv</span><br><span class=\"line\">**/env</span><br></pre></td></tr></table></figure>\n\n<p>总之，结构合理的 .dockerignore 可以帮助</p>\n<ol>\n<li>减少 Docker 镜像的大小</li>\n<li>加快构建过程</li>\n<li>防止不必要的缓存失效</li>\n<li>防止泄密</li>\n</ol>\n<h3 id=\"4-检查并扫描你的-Dockerfile-和镜像\"><a href=\"#4-检查并扫描你的-Dockerfile-和镜像\" class=\"headerlink\" title=\"4. 检查并扫描你的 Dockerfile 和镜像\"></a>4. 检查并扫描你的 Dockerfile 和镜像</h3><p>Linting 是检查源代码中是否存在可能导致潜在缺陷的编程和风格错误以及不良做法的过程。就像编程语言一样，静态文件也可以被 lint。特别是对于你的 Dockerfile，linter 可以帮助确保它们的可维护性、避免弃用语法并遵守最佳实践。整理镜像应该是 CI 管道的标准部分。</p>\n<p><a href=\"https://github.com/hadolint/hadolint\">Hadolint</a> 是最流行的 Dockerfile linter：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hadolint Dockerfile</span><br><span class=\"line\"></span><br><span class=\"line\">Dockerfile:1 DL3006 warning: Always tag the version of an image explicitly</span><br><span class=\"line\">Dockerfile:7 DL3042 warning: Avoid the use of cache directory with pip. Use `pip install --no-cache-dir &lt;package&gt;`</span><br><span class=\"line\">Dockerfile:9 DL3059 info: Multiple consecutive `RUN` instructions. Consider consolidation.</span><br><span class=\"line\">Dockerfile:17 DL3025 warning: Use arguments JSON notation <span class=\"keyword\">for</span> CMD and ENTRYPOINT arguments</span><br></pre></td></tr></table></figure>\n\n<p>这是 Hadolint 一个在线的链接 <a href=\"https://hadolint.github.io/hadolint/\">https://hadolint.github.io/hadolint/</a> 也可以安装 VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=exiasr.hadolint\">插件</a></p>\n<p>你可以将 Dockerfile 与扫描镜像和容器的漏洞结合使用。</p>\n<p>以下是一些有影响力的镜像扫描工具：</p>\n<ul>\n<li><a href=\"https://docs.docker.com/engine/scan/\">Snyk</a> 是 Docker 本地漏洞扫描的独家提供商。你可以使用 <code>docker scan</code> CLI 命令来扫描镜像。</li>\n<li><a href=\"https://aquasecurity.github.io/trivy/\">Trivy</a> 可用于扫描容器镜像、文件系统、git 存储库和其他配置文件。</li>\n<li><a href=\"https://github.com/quay/clair\">Clair</a> 是一个开源项目，用于对应用程序容器中的漏洞进行静态分析。</li>\n<li><a href=\"https://github.com/anchore/anchore-engine\">Anchore</a> 是一个开源项目，为容器镜像的检查、分析和认证提供集中式服务。</li>\n</ul>\n<p>总而言之，对你的 Dockerfile 和镜像进行 lint 和扫描，来发现任何偏离最佳实践的潜在问题。</p>\n<h3 id=\"5-签名和验证镜像\"><a href=\"#5-签名和验证镜像\" class=\"headerlink\" title=\"5. 签名和验证镜像\"></a>5. 签名和验证镜像</h3><p>你怎么知道用于运行生产代码的镜像没有被篡改？</p>\n<p>篡改可以通过中间人（MITM）攻击或注册表被完全破坏来实现。Docker 内容信任（DCT）可以对来自远程注册中心的 Docker 镜像进行签名和验证。</p>\n<p>为了验证镜像的完整性和真实性，请设置以下环境变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">DOCKER_CONTENT_TRUST=1</span><br></pre></td></tr></table></figure>\n\n<p>现在，如果你试图拉一个没有被签名的镜像，你会收到以下错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: remote trust data does not exist <span class=\"keyword\">for</span> docker.io/namespace/unsigned-image:</span><br><span class=\"line\">notary.docker.io does not have trust data <span class=\"keyword\">for</span> docker.io/namespace/unsigned-image</span><br></pre></td></tr></table></figure>\n\n<p>你可以从使用 Docker 内容信任签署镜像文档中了解签署镜像的情况。</p>\n<p>当从 Docker Hub下 载镜像时，确保使用官方镜像或来自可信来源的经过验证的镜像。较大的团队应该使用他们自己的内部私有容器仓库</p>\n<h3 id=\"6-设置内存和-CPU-的限制\"><a href=\"#6-设置内存和-CPU-的限制\" class=\"headerlink\" title=\"6. 设置内存和 CPU 的限制\"></a>6. 设置内存和 CPU 的限制</h3><p>限制 Docker 容器的内存使用是一个好主意，特别是当你在一台机器上运行多个容器时。这可以防止任何一个容器使用所有可用的内存，从而削弱其他容器的功能。</p>\n<p>限制内存使用的最简单方法是在 Docker cli 中使用 <code>--memory</code> 和 <code>--cpu</code> 选项。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --cpus=2 -m 512m nginx</span><br></pre></td></tr></table></figure>\n\n<p>上述命令将容器的使用限制在 2 个 CPU 和 512 兆的内存。</p>\n<p>你可以在 Docker Compose 文件中做同样的事情，像这样。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.9&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis:alpine</span></span><br><span class=\"line\">    <span class=\"attr\">deploy:</span></span><br><span class=\"line\">      <span class=\"attr\">resources:</span></span><br><span class=\"line\">        <span class=\"attr\">limits:</span></span><br><span class=\"line\">          <span class=\"attr\">cpus:</span> <span class=\"number\">2</span></span><br><span class=\"line\">          <span class=\"attr\">memory:</span> <span class=\"string\">512M</span></span><br><span class=\"line\">        <span class=\"attr\">reservations:</span></span><br><span class=\"line\">          <span class=\"attr\">cpus:</span> <span class=\"number\">1</span></span><br><span class=\"line\">          <span class=\"attr\">memory:</span> <span class=\"string\">256M</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意 <code>reservations</code> 字段。它是用来设置软限制的，当主机的内存或CPU资源不足时，它就会优先考虑。</p>\n<p>其他相关资源</p>\n<ol>\n<li>带有内存、CPU和GPU的运行时选项：<a href=\"https://docs.docker.com/config/containers/resource_constraints/\">https://docs.docker.com/config/containers/resource_constraints/</a></li>\n<li>Docker Compose 的资源限制：<a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/#resources\">https://docs.docker.com/compose/compose-file/compose-file-v3/#resources</a></li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是本文介绍的 17 条最佳实践，掌握这些最佳实践一定会让你的 Dockerfile 和 Docker Image 变得精简，干净，和安全。</p>\n<p>本文出自 <a href=\"https://testdriven.io/blog/docker-best-practices/\">Docker Best Practices for Python Developers</a>。</p>\n<hr>\n<p>欢迎扫码关注公众号「DevOps攻城狮」- 专注于DevOps领域知识分享。</p>\n<p><img src=\"https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true\" alt=\" \"></p>","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Dokerfile","path":"api/tags/Dokerfile.json"}]}