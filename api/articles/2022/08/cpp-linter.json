{"title":"C/C++ 代码格式化和静态分析检查的一站式工作流 Cpp Linter","slug":"2022/08/cpp-linter","date":"2022-08-23T09:27:31.000Z","updated":"2024-09-09T09:02:28.875Z","comments":true,"path":"api/articles/2022/08/cpp-linter.json","excerpt":"本篇是关于 C&#x2F;C++ 代码格式化和静态分析检查的实践分享。目前 C&#x2F;C++ 语言的代码格式化和检查工具使用的最为广泛的是 LLVM 项目中的 Clang-Format 和 Clang-Tidy。LLVM 项目是模块化和可重用的编译器和工具链技术的集合。对于 C&#x2F;C++ 代码格式化和静态分析检查用到是 LLVM 项目中 clang-format 和 clang-tidy，放在一起我们称它为 clang-tools。虽然我们有了工具，但如何把工具更好的集成到我们的工作流中才是本篇重点要讨论的。cpp-linter 组织的诞生就是为 C&#x2F;C++ 代码格式化和静态分析检查提供一站式的工作流，包括：方便下载 clang-tools，提供了 Docker images 和 binaries 两种使用方式；方便与工作流进行集成，包括与 CI 以及 git hooks 的集成。下面介绍如何使用 clang-tools 下载工具，以及集成到工作流中。","covers":["/2022/08/cpp-linter/annotations.png","/2022/08/cpp-linter/comment.png"],"content":"<p>本篇是关于 C&#x2F;C++ 代码格式化和静态分析检查的实践分享。</p>\n<p>目前 C&#x2F;C++ 语言的代码格式化和检查工具使用的最为广泛的是 <a href=\"https://llvm.org/\">LLVM</a> 项目中的 <a href=\"https://clang.llvm.org/docs/ClangFormat.html\">Clang-Format</a> 和 <a href=\"https://clang.llvm.org/extra/clang-tidy/\">Clang-Tidy</a>。</p>\n<blockquote>\n<p>LLVM 项目是模块化和可重用的编译器和工具链技术的集合。</p>\n</blockquote>\n<p>对于 C&#x2F;C++ 代码格式化和静态分析检查用到是 LLVM 项目中 clang-format 和 clang-tidy，放在一起我们称它为 clang-tools。</p>\n<p>虽然我们有了工具，但<strong>如何把工具更好的集成到我们的工作流中</strong>才是本篇重点要讨论的。</p>\n<p><a href=\"https://github.com/cpp-linter\">cpp-linter</a> 组织的诞生就是为 C&#x2F;C++ 代码格式化和静态分析检查提供一站式的工作流，包括：</p>\n<ol>\n<li>方便下载 clang-tools，提供了 Docker images 和 binaries 两种使用方式；</li>\n<li>方便与工作流进行集成，包括与 CI 以及 git hooks 的集成。</li>\n</ol>\n<p>下面介绍如何使用 clang-tools 下载工具，以及集成到工作流中。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"clang-tools-Docker-images\"><a href=\"#clang-tools-Docker-images\" class=\"headerlink\" title=\"clang-tools Docker images\"></a>clang-tools Docker images</h2><p>如果你想通过 Docker 来使用 clang-format 和 clang-tidy，<a href=\"https://github.com/cpp-linter/clang-tools\">clang-tools</a> 项目是专门用来提供 Docker 镜像的。</p>\n<p>只要下载 clang-tools Docker 镜像，然后就可以使用 clang-format 和 clang-tidy 了。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 clang-format 版本</span></span><br><span class=\"line\">$ docker run xianpengshen/clang-tools:12 clang-format --version</span><br><span class=\"line\">Ubuntu clang-format version 12.0.0-3ubuntu1~20.04.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化代码 (helloworld.c 在仓库的 demo 目录下)</span></span><br><span class=\"line\">$ docker run -v <span class=\"variable\">$PWD</span>:/src xianpengshen/clang-tools:12 clang-format --dry-run -i helloworld.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 clang-tidy 版本</span></span><br><span class=\"line\">$ docker run xianpengshen/clang-tools:12 clang-tidy --version</span><br><span class=\"line\">LLVM (http://llvm.org/):</span><br><span class=\"line\">  LLVM version 12.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">  Optimized build.</span><br><span class=\"line\">  Default target: x86_64-pc-linux-gnu</span><br><span class=\"line\">  Host CPU: cascadelake</span><br><span class=\"line\"><span class=\"comment\"># 诊断代码 (helloworld.c 在仓库的 demo 目录下)</span></span><br><span class=\"line\">$ docker run -v <span class=\"variable\">$PWD</span>:/src xianpengshen/clang-tools:12 clang-tidy helloworld.c \\</span><br><span class=\"line\">-checks=boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-cplusplus-*,clang-analyzer-*,cppcoreguidelines-*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clang-tools-binaries\"><a href=\"#clang-tools-binaries\" class=\"headerlink\" title=\"clang-tools binaries\"></a>clang-tools binaries</h2><p>如果你需要使用 clang-tools binaries，以 Windows 为例，通常下载指定版本的 clang-tools 需要先安装 LLVM 这个大的安装包才能获得 clang-format &amp; clang-tidy 这些工具；在 Linux 上会方便很多，可以使用命令来下载，但如果想下载指定版本的 clang-format &amp; clang-tidy 可能要面临手动下载和安装。</p>\n<p><a href=\"https://github.com/cpp-linter/clang-tools-pip\">clang-tools-pip</a> 提供并支持在 Windows，Linux，MacOs 上通过命令行下载任何指定版本的 clang-tools 可执行文件。</p>\n<p>只需要使用 <code>pip</code> 安装 <code>clang-tools</code> （即 <code>pip install clang-tools</code>）后，然后通过 <code>clang-tools</code> 命令就可以安装任何版本的可执行文件了。</p>\n<p>例如，安装 clang-tools 版本 13：</p>\n<p><code>$ clang-tools --install 13</code></p>\n<p>也可以将它安装到指定目录下面：</p>\n<p><code>$ clang-tools --install 13 --directory .</code></p>\n<p>安装成功后，可以查看安装版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ clang-format-13 --version</span><br><span class=\"line\">clang-format version 13.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ clang-tidy-13 --version</span><br><span class=\"line\">LLVM (http://llvm.org/):</span><br><span class=\"line\">  LLVM version 13.0.0</span><br><span class=\"line\">  Optimized build.</span><br><span class=\"line\">  Default target: x86_64-unknown-linux-gnu</span><br><span class=\"line\">  Host CPU: skylake</span><br></pre></td></tr></table></figure>\n\n<p><code>clang-tools</code> CLI 还提供了其他选项，比如自动帮你创建链接等，可以查看它的 CLI <a href=\"https://cpp-linter.github.io/clang-tools-pip/cli_args.html\">文档</a>来获得帮助。</p>\n<h2 id=\"把-clang-tools-集成到工作流\"><a href=\"#把-clang-tools-集成到工作流\" class=\"headerlink\" title=\"把 clang-tools 集成到工作流\"></a>把 clang-tools 集成到工作流</h2><p>上面介绍了方便下载 clang-tools 的 Docker images 和 binaries 这两种方式，如何把它们集成到工作流中是我们最终所关心的。</p>\n<p>当前的主流 IDE 可以通过插件的方式来使用 clang-format 和 clang-tidy，但这样的问题是：</p>\n<ol>\n<li>不同的开发可能会使用不同的 IDE，这样在不同的 IDE 上安装插件需要比较高的学习成本；</li>\n<li>没法保证所有开发人员在提交代码的时候都会去执行 Clang-Format 或 Clang-Tidy。</li>\n</ol>\n<p>那么怎样确保每次提交代码都做了 Clang-Format 或 Clang-Tidy 检查呢？</p>\n<ol>\n<li><a href=\"https://github.com/cpp-linter/cpp-linter-action\">cpp-linter-action</a> 提供了通过 CI 进行检查，当发现没有格式化或有诊断错误的代码时 CI 会失败，来防止合并到主分的代码没有通过代码检查；</li>\n<li><a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 通过 git hook 在提交代码的时候自动运行 clang-format 和 clang-tidy，如果不符合规范则提交失败，并提示并自动格式化。</li>\n</ol>\n<h2 id=\"cpp-linter-action-在代码合并前做自动检查\"><a href=\"#cpp-linter-action-在代码合并前做自动检查\" class=\"headerlink\" title=\"cpp-linter-action 在代码合并前做自动检查\"></a>cpp-linter-action 在代码合并前做自动检查</h2><p>如果你使用的是 GitHub，那么非常推荐你使用 <a href=\"https://github.com/cpp-linter/cpp-linter-action\">cpp-linter-action</a> 这个 GitHub Action。</p>\n<blockquote>\n<p>目前 <a href=\"https://github.com/cpp-linter/cpp-linter\">cpp-linter</a> 还没有跟其他除 GitHub 以外的 SCM 做 API 集成。</p>\n</blockquote>\n<p>以下是它的一些重要特性：</p>\n<ol>\n<li>运行结果支持 Annotations 和 Thread Comment 两种方式展示</li>\n<li>支持 GitHub 的 public 和 private 仓库</li>\n<li>支持绝大多数 Clang 版本</li>\n<li>还有很多其他的 <a href=\"https://github.com/cpp-linter/cpp-linter-action#optional-inputs\">optional-inputs</a></li>\n</ol>\n<p>使用这个 Action 只需要在 <code>.github/workflows/</code> 下面创建一个 cpp-linter.yml，内容如下：</p>\n<blockquote>\n<p>当然也可以把下面的配置加到一个已经存在的 Workflow，例如 build。</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">cpp-linter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">types:</span> [<span class=\"string\">opened</span>, <span class=\"string\">reopened</span>]</span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">cpp-linter:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">cpp-linter/cpp-linter-action@v1</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">linter</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">style:</span> <span class=\"string\">file</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Fail</span> <span class=\"string\">fast?!</span></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">steps.linter.outputs.checks-failed</span> <span class=\"string\">&gt;</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;Some files failed the linting checks!&quot;</span></span><br><span class=\"line\"><span class=\"string\">          exit 1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果发现存在没有进行格式化或是静代码态检查，CI workflow 会失败，并且会有如下注释说明，annotations 默认是开启的。</p>\n<p><img src=\"/2022/08/cpp-linter/annotations.png\" alt=\"annotations\"></p>\n<p>如果开启了 Thread Comment 选项（即 <code>thread-comments: true</code>）就会将在 Pull Request 中自动添加如下错误评论。</p>\n<p><img src=\"/2022/08/cpp-linter/comment.png\" alt=\"comment\"></p>\n<p>目前已经有很多知名项目依赖这个 Action，它在 GitHub Marketplace 上面搜索它的排名也非常靠前，可以放心使用。</p>\n<blockquote>\n<p>注：annotations 和 comment 这两个功能目前只支持 GitHub，该项目未来考虑支持其他 SCM，像 Bitbucket，GitLab。</p>\n</blockquote>\n<h2 id=\"cpp-linter-hooks-在提交代码时自动检查\"><a href=\"#cpp-linter-hooks-在提交代码时自动检查\" class=\"headerlink\" title=\"cpp-linter-hooks 在提交代码时自动检查\"></a>cpp-linter-hooks 在提交代码时自动检查</h2><p><a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 是通过 git hook 在提交代码时做自动检查，这种方式不限制使用任何 SCM。</p>\n<p>只需要在项目仓库中添加一个 <code>.pre-commit-config.yaml</code> 配置文件，然后将 <a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 这个 hook 添加到 <code>.pre-commit-config.yaml</code> 中，具体设置如下：</p>\n<blockquote>\n<p><code>.pre-commit-config.yaml</code> 是 <a href=\"https://pre-commit.com/\"><code>pre-commit</code></a> framework 的默认配置文件。</p>\n</blockquote>\n<ol>\n<li><p>安装 pre-commit</p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pre-commit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建配置文件 <code>.pre-commit-config.yaml</code>，设置如下：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">repos:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/cpp-linter/cpp-linter-hooks</span></span><br><span class=\"line\">  <span class=\"attr\">rev:</span> <span class=\"string\">v0.2.1</span></span><br><span class=\"line\">  <span class=\"attr\">hooks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">clang-format</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span> [<span class=\"string\">--style=file</span>]  <span class=\"comment\"># to load .clang-format</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">clang-tidy</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span> [<span class=\"string\">--checks=.clang-tidy</span>] <span class=\"comment\"># path/to/.clang-tidy</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的 file 是指 <code>.clang-format</code>, clang-format 默认支持的编码格式包括 LLVM, GNU, Google, Chromium, Microsoft, Mozilla, WebKit，如果需要特殊设置可以在仓库的根目录下面创建配置文件 <code>.clang-format</code>。同理，如果默认的静态分析设置不满足要求，可以在仓库的根目录下创建 <code>.clang-tidy</code> 配置文件。</p>\n</blockquote>\n<p> 更多配置可以参考 <a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">README</a></p>\n</li>\n<li><p>安装 git hook 脚本</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pre-commit install</span><br><span class=\"line\">pre-commit installed at .git/hooks/pre-commit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>之后每次 <code>git commit</code> 都会自动执行 clang-format 和 chang-tidy。</p>\n<p> 如果检查到没有格式化或有静态分析错误，会提示如下错误信息：</p>\n<p> chang-format 的输出</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">clang-format.............................................................Failed</span><br><span class=\"line\">- hook <span class=\"built_in\">id</span>: clang-format</span><br><span class=\"line\">- files were modified by this hook</span><br></pre></td></tr></table></figure>\n\n<p> 并自动帮你进行格式化</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- a/testing/main.c</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/testing/main.c</span></span><br><span class=\"line\"><span class=\"meta\">@@ -1,3 +1,6 @@</span></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"><span class=\"deletion\">-int main() &#123;for (;;) break; printf(&quot;Hello world!\\n&quot;);return 0;&#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\"><span class=\"addition\">+int main() &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  for (;;) break;</span></span><br><span class=\"line\"><span class=\"addition\">+  printf(&quot;Hello world!\\n&quot;);</span></span><br><span class=\"line\"><span class=\"addition\">+  return 0;</span></span><br><span class=\"line\"><span class=\"addition\">+&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> chang-tidy 的输出</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">clang-tidy...............................................................Failed</span><br><span class=\"line\">- hook <span class=\"built_in\">id</span>: clang-tidy</span><br><span class=\"line\">- <span class=\"built_in\">exit</span> code: 1</span><br><span class=\"line\"></span><br><span class=\"line\">418 warnings and 1 error generated.</span><br><span class=\"line\">Error <span class=\"keyword\">while</span> processing /home/ubuntu/cpp-linter-hooks/testing/main.c.</span><br><span class=\"line\">Suppressed 417 warnings (417 <span class=\"keyword\">in</span> non-user code).</span><br><span class=\"line\">Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.</span><br><span class=\"line\">Found compiler error(s).</span><br><span class=\"line\">/home/ubuntu/cpp-linter-hooks/testing/main.c:3:11: warning: statement should be inside braces [readability-braces-around-statements]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;) <span class=\"built_in\">break</span>;</span><br><span class=\"line\">          ^</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">/usr/include/stdio.h:33:10: error: <span class=\"string\">&#x27;stddef.h&#x27;</span> file not found [clang-diagnostic-error]</span><br><span class=\"line\"><span class=\"comment\">#include &lt;stddef.h&gt;</span></span><br><span class=\"line\">        ^~~~~~~~~~</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>选择 CI 还是 git hook？</p>\n<ul>\n<li>如果你的团队已经在使用 pre-commit，那么推荐使用 git hook 这种方式，只需要添加 <a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 即可</li>\n<li>如果不希望引入 pre-commit 则可以通过添加 CI 来进行检查。当然也可以两个都选。</li>\n</ul>\n<p>cpp-linter organization 是我创建的，由 <a href=\"https://github.com/2bndy5\">Brendan Doherty</a> 和我为主要贡献者共同维护的开源项目，我们都是追求代码质量、力求构建最好的软件的开发者，为此我花费了很多业余时间在上面，但也学到了很多，后面我会分享其中一些有意思的实现方式。</p>\n<p>目前 cpp-linter 在 GitHub 上提供了最好用的 C&#x2F;C++ Linter Action 和 clang-tools，欢迎大家使用，有什么意见或问题都可以通过 Issue 反馈。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"clang-tools-Docker-images\"><a href=\"#clang-tools-Docker-images\" class=\"headerlink\" title=\"clang-tools Docker images\"></a>clang-tools Docker images</h2><p>如果你想通过 Docker 来使用 clang-format 和 clang-tidy，<a href=\"https://github.com/cpp-linter/clang-tools\">clang-tools</a> 项目是专门用来提供 Docker 镜像的。</p>\n<p>只要下载 clang-tools Docker 镜像，然后就可以使用 clang-format 和 clang-tidy 了。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 检查 clang-format 版本</span></span><br><span class=\"line\">$ docker run xianpengshen/clang-tools:12 clang-format --version</span><br><span class=\"line\">Ubuntu clang-format version 12.0.0-3ubuntu1~20.04.4</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化代码 (helloworld.c 在仓库的 demo 目录下)</span></span><br><span class=\"line\">$ docker run -v <span class=\"variable\">$PWD</span>:/src xianpengshen/clang-tools:12 clang-format --dry-run -i helloworld.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 clang-tidy 版本</span></span><br><span class=\"line\">$ docker run xianpengshen/clang-tools:12 clang-tidy --version</span><br><span class=\"line\">LLVM (http://llvm.org/):</span><br><span class=\"line\">  LLVM version 12.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">  Optimized build.</span><br><span class=\"line\">  Default target: x86_64-pc-linux-gnu</span><br><span class=\"line\">  Host CPU: cascadelake</span><br><span class=\"line\"><span class=\"comment\"># 诊断代码 (helloworld.c 在仓库的 demo 目录下)</span></span><br><span class=\"line\">$ docker run -v <span class=\"variable\">$PWD</span>:/src xianpengshen/clang-tools:12 clang-tidy helloworld.c \\</span><br><span class=\"line\">-checks=boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-cplusplus-*,clang-analyzer-*,cppcoreguidelines-*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clang-tools-binaries\"><a href=\"#clang-tools-binaries\" class=\"headerlink\" title=\"clang-tools binaries\"></a>clang-tools binaries</h2><p>如果你需要使用 clang-tools binaries，以 Windows 为例，通常下载指定版本的 clang-tools 需要先安装 LLVM 这个大的安装包才能获得 clang-format &amp; clang-tidy 这些工具；在 Linux 上会方便很多，可以使用命令来下载，但如果想下载指定版本的 clang-format &amp; clang-tidy 可能要面临手动下载和安装。</p>\n<p><a href=\"https://github.com/cpp-linter/clang-tools-pip\">clang-tools-pip</a> 提供并支持在 Windows，Linux，MacOs 上通过命令行下载任何指定版本的 clang-tools 可执行文件。</p>\n<p>只需要使用 <code>pip</code> 安装 <code>clang-tools</code> （即 <code>pip install clang-tools</code>）后，然后通过 <code>clang-tools</code> 命令就可以安装任何版本的可执行文件了。</p>\n<p>例如，安装 clang-tools 版本 13：</p>\n<p><code>$ clang-tools --install 13</code></p>\n<p>也可以将它安装到指定目录下面：</p>\n<p><code>$ clang-tools --install 13 --directory .</code></p>\n<p>安装成功后，可以查看安装版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ clang-format-13 --version</span><br><span class=\"line\">clang-format version 13.0.0</span><br><span class=\"line\"></span><br><span class=\"line\">$ clang-tidy-13 --version</span><br><span class=\"line\">LLVM (http://llvm.org/):</span><br><span class=\"line\">  LLVM version 13.0.0</span><br><span class=\"line\">  Optimized build.</span><br><span class=\"line\">  Default target: x86_64-unknown-linux-gnu</span><br><span class=\"line\">  Host CPU: skylake</span><br></pre></td></tr></table></figure>\n\n<p><code>clang-tools</code> CLI 还提供了其他选项，比如自动帮你创建链接等，可以查看它的 CLI <a href=\"https://cpp-linter.github.io/clang-tools-pip/cli_args.html\">文档</a>来获得帮助。</p>\n<h2 id=\"把-clang-tools-集成到工作流\"><a href=\"#把-clang-tools-集成到工作流\" class=\"headerlink\" title=\"把 clang-tools 集成到工作流\"></a>把 clang-tools 集成到工作流</h2><p>上面介绍了方便下载 clang-tools 的 Docker images 和 binaries 这两种方式，如何把它们集成到工作流中是我们最终所关心的。</p>\n<p>当前的主流 IDE 可以通过插件的方式来使用 clang-format 和 clang-tidy，但这样的问题是：</p>\n<ol>\n<li>不同的开发可能会使用不同的 IDE，这样在不同的 IDE 上安装插件需要比较高的学习成本；</li>\n<li>没法保证所有开发人员在提交代码的时候都会去执行 Clang-Format 或 Clang-Tidy。</li>\n</ol>\n<p>那么怎样确保每次提交代码都做了 Clang-Format 或 Clang-Tidy 检查呢？</p>\n<ol>\n<li><a href=\"https://github.com/cpp-linter/cpp-linter-action\">cpp-linter-action</a> 提供了通过 CI 进行检查，当发现没有格式化或有诊断错误的代码时 CI 会失败，来防止合并到主分的代码没有通过代码检查；</li>\n<li><a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 通过 git hook 在提交代码的时候自动运行 clang-format 和 clang-tidy，如果不符合规范则提交失败，并提示并自动格式化。</li>\n</ol>\n<h2 id=\"cpp-linter-action-在代码合并前做自动检查\"><a href=\"#cpp-linter-action-在代码合并前做自动检查\" class=\"headerlink\" title=\"cpp-linter-action 在代码合并前做自动检查\"></a>cpp-linter-action 在代码合并前做自动检查</h2><p>如果你使用的是 GitHub，那么非常推荐你使用 <a href=\"https://github.com/cpp-linter/cpp-linter-action\">cpp-linter-action</a> 这个 GitHub Action。</p>\n<blockquote>\n<p>目前 <a href=\"https://github.com/cpp-linter/cpp-linter\">cpp-linter</a> 还没有跟其他除 GitHub 以外的 SCM 做 API 集成。</p>\n</blockquote>\n<p>以下是它的一些重要特性：</p>\n<ol>\n<li>运行结果支持 Annotations 和 Thread Comment 两种方式展示</li>\n<li>支持 GitHub 的 public 和 private 仓库</li>\n<li>支持绝大多数 Clang 版本</li>\n<li>还有很多其他的 <a href=\"https://github.com/cpp-linter/cpp-linter-action#optional-inputs\">optional-inputs</a></li>\n</ol>\n<p>使用这个 Action 只需要在 <code>.github/workflows/</code> 下面创建一个 cpp-linter.yml，内容如下：</p>\n<blockquote>\n<p>当然也可以把下面的配置加到一个已经存在的 Workflow，例如 build。</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">cpp-linter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">types:</span> [<span class=\"string\">opened</span>, <span class=\"string\">reopened</span>]</span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">cpp-linter:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v3</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">cpp-linter/cpp-linter-action@v1</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">linter</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">style:</span> <span class=\"string\">file</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Fail</span> <span class=\"string\">fast?!</span></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">steps.linter.outputs.checks-failed</span> <span class=\"string\">&gt;</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          echo &quot;Some files failed the linting checks!&quot;</span></span><br><span class=\"line\"><span class=\"string\">          exit 1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果发现存在没有进行格式化或是静代码态检查，CI workflow 会失败，并且会有如下注释说明，annotations 默认是开启的。</p>\n<p><img src=\"/2022/08/cpp-linter/annotations.png\" alt=\"annotations\"></p>\n<p>如果开启了 Thread Comment 选项（即 <code>thread-comments: true</code>）就会将在 Pull Request 中自动添加如下错误评论。</p>\n<p><img src=\"/2022/08/cpp-linter/comment.png\" alt=\"comment\"></p>\n<p>目前已经有很多知名项目依赖这个 Action，它在 GitHub Marketplace 上面搜索它的排名也非常靠前，可以放心使用。</p>\n<blockquote>\n<p>注：annotations 和 comment 这两个功能目前只支持 GitHub，该项目未来考虑支持其他 SCM，像 Bitbucket，GitLab。</p>\n</blockquote>\n<h2 id=\"cpp-linter-hooks-在提交代码时自动检查\"><a href=\"#cpp-linter-hooks-在提交代码时自动检查\" class=\"headerlink\" title=\"cpp-linter-hooks 在提交代码时自动检查\"></a>cpp-linter-hooks 在提交代码时自动检查</h2><p><a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 是通过 git hook 在提交代码时做自动检查，这种方式不限制使用任何 SCM。</p>\n<p>只需要在项目仓库中添加一个 <code>.pre-commit-config.yaml</code> 配置文件，然后将 <a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 这个 hook 添加到 <code>.pre-commit-config.yaml</code> 中，具体设置如下：</p>\n<blockquote>\n<p><code>.pre-commit-config.yaml</code> 是 <a href=\"https://pre-commit.com/\"><code>pre-commit</code></a> framework 的默认配置文件。</p>\n</blockquote>\n<ol>\n<li><p>安装 pre-commit</p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pre-commit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建配置文件 <code>.pre-commit-config.yaml</code>，设置如下：</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">repos:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/cpp-linter/cpp-linter-hooks</span></span><br><span class=\"line\">  <span class=\"attr\">rev:</span> <span class=\"string\">v0.2.1</span></span><br><span class=\"line\">  <span class=\"attr\">hooks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">clang-format</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span> [<span class=\"string\">--style=file</span>]  <span class=\"comment\"># to load .clang-format</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">clang-tidy</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span> [<span class=\"string\">--checks=.clang-tidy</span>] <span class=\"comment\"># path/to/.clang-tidy</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里的 file 是指 <code>.clang-format</code>, clang-format 默认支持的编码格式包括 LLVM, GNU, Google, Chromium, Microsoft, Mozilla, WebKit，如果需要特殊设置可以在仓库的根目录下面创建配置文件 <code>.clang-format</code>。同理，如果默认的静态分析设置不满足要求，可以在仓库的根目录下创建 <code>.clang-tidy</code> 配置文件。</p>\n</blockquote>\n<p> 更多配置可以参考 <a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">README</a></p>\n</li>\n<li><p>安装 git hook 脚本</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ pre-commit install</span><br><span class=\"line\">pre-commit installed at .git/hooks/pre-commit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>之后每次 <code>git commit</code> 都会自动执行 clang-format 和 chang-tidy。</p>\n<p> 如果检查到没有格式化或有静态分析错误，会提示如下错误信息：</p>\n<p> chang-format 的输出</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">clang-format.............................................................Failed</span><br><span class=\"line\">- hook <span class=\"built_in\">id</span>: clang-format</span><br><span class=\"line\">- files were modified by this hook</span><br></pre></td></tr></table></figure>\n\n<p> 并自动帮你进行格式化</p>\n <figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- a/testing/main.c</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/testing/main.c</span></span><br><span class=\"line\"><span class=\"meta\">@@ -1,3 +1,6 @@</span></span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"><span class=\"deletion\">-int main() &#123;for (;;) break; printf(&quot;Hello world!\\n&quot;);return 0;&#125;</span></span><br><span class=\"line\"><span class=\"deletion\">-</span></span><br><span class=\"line\"><span class=\"addition\">+int main() &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  for (;;) break;</span></span><br><span class=\"line\"><span class=\"addition\">+  printf(&quot;Hello world!\\n&quot;);</span></span><br><span class=\"line\"><span class=\"addition\">+  return 0;</span></span><br><span class=\"line\"><span class=\"addition\">+&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p> chang-tidy 的输出</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">clang-tidy...............................................................Failed</span><br><span class=\"line\">- hook <span class=\"built_in\">id</span>: clang-tidy</span><br><span class=\"line\">- <span class=\"built_in\">exit</span> code: 1</span><br><span class=\"line\"></span><br><span class=\"line\">418 warnings and 1 error generated.</span><br><span class=\"line\">Error <span class=\"keyword\">while</span> processing /home/ubuntu/cpp-linter-hooks/testing/main.c.</span><br><span class=\"line\">Suppressed 417 warnings (417 <span class=\"keyword\">in</span> non-user code).</span><br><span class=\"line\">Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.</span><br><span class=\"line\">Found compiler error(s).</span><br><span class=\"line\">/home/ubuntu/cpp-linter-hooks/testing/main.c:3:11: warning: statement should be inside braces [readability-braces-around-statements]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;) <span class=\"built_in\">break</span>;</span><br><span class=\"line\">          ^</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">/usr/include/stdio.h:33:10: error: <span class=\"string\">&#x27;stddef.h&#x27;</span> file not found [clang-diagnostic-error]</span><br><span class=\"line\"><span class=\"comment\">#include &lt;stddef.h&gt;</span></span><br><span class=\"line\">        ^~~~~~~~~~</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>选择 CI 还是 git hook？</p>\n<ul>\n<li>如果你的团队已经在使用 pre-commit，那么推荐使用 git hook 这种方式，只需要添加 <a href=\"https://github.com/cpp-linter/cpp-linter-hooks\">cpp-linter-hooks</a> 即可</li>\n<li>如果不希望引入 pre-commit 则可以通过添加 CI 来进行检查。当然也可以两个都选。</li>\n</ul>\n<p>cpp-linter organization 是我创建的，由 <a href=\"https://github.com/2bndy5\">Brendan Doherty</a> 和我为主要贡献者共同维护的开源项目，我们都是追求代码质量、力求构建最好的软件的开发者，为此我花费了很多业余时间在上面，但也学到了很多，后面我会分享其中一些有意思的实现方式。</p>\n<p>目前 cpp-linter 在 GitHub 上提供了最好用的 C&#x2F;C++ Linter Action 和 clang-tools，欢迎大家使用，有什么意见或问题都可以通过 Issue 反馈。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"cpp-linter","path":"api/categories/cpp-linter.json"}],"tags":[{"name":"clang-format","path":"api/tags/clang-format.json"},{"name":"clang-tidy","path":"api/tags/clang-tidy.json"},{"name":"clang","path":"api/tags/clang.json"},{"name":"cpp-linter","path":"api/tags/cpp-linter.json"}]}