{"title":"Code coverage testing of C/C++ projects using Gcov and LCOV","slug":"2021/07/gcov-example","date":"2021-07-11T14:49:39.000Z","updated":"2024-06-13T15:28:05.970Z","comments":true,"path":"api/articles/2021/07/gcov-example.json","excerpt":null,"covers":["/2021/07/gcov-example/gcov-flow.jpg","/2021/07/gcov-example/index.png","/2021/07/gcov-example/example.png","/2021/07/gcov-example/main.c.png","/2021/07/gcov-example/foo.c.png"],"content":"<p>This article shares how to use Gcov and LCOV to metrics code coverage for C&#x2F;C++ projects.<br>If you want to know how Gcov works, or you need to metrics code coverage for C&#x2F;C++ projects later,<br>I hope this article is useful to you.</p>\n<h2 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h2><p>The problem I’m having: A C&#x2F;C++ project from decades ago has no unit tests, only regression tests,<br>but you want to know what code is tested by regression tests? Which code is untested?<br>What is the code coverage? Where do I need to improve automated test cases in the future?</p>\n<p>Can code coverage be measured without unit tests? Yes.</p>\n<h2 id=\"Code-coverage-tools-for-C-C\"><a href=\"#Code-coverage-tools-for-C-C\" class=\"headerlink\" title=\"Code coverage tools for C&#x2F;C++\"></a>Code coverage tools for C&#x2F;C++</h2><p>There are some tools on the market that can measure the code coverage of black-box testing,<br>such as Squish Coco, Bullseye, etc. Their principle is to insert instrumentation when build product.</p>\n<p>I’ve done some research on <a href=\"https://shenxianpeng.github.io/2019/05/squishcoco/\">Squish Coco</a>,<br>because of some unresolved compilation issues that I didn’t buy a license for this expensive tool.</p>\n<p>When I investigated code coverage again, I found out that GCC has a built-in code coverage tool called<br><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Gcov.html\">Gcov</a>.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>For those who want to use Gcov, to illustrate how it works, I have prepared a sample program that<br>requires GCC and LCOV to be installed before running the program.</p>\n<p>If you don’t have an environment or don’t want to install it, you can check out this example<br><a href=\"https://github.com/shenxianpeng/gcov-example\">repository</a></p>\n<p>Note: The source code is under the <code>master</code> branch master, and code coverage result html under branch <code>coverage</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the version of GCC and lcov on my test environment.</span></span><br><span class=\"line\">sh-4.2$ gcc --version</span><br><span class=\"line\">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br><span class=\"line\">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class=\"line\"></span><br><span class=\"line\">sh-4.2$ lcov -v</span><br><span class=\"line\">lcov: LCOV version 1.14</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"How-Gcov-works\"><a href=\"#How-Gcov-works\" class=\"headerlink\" title=\"How Gcov works\"></a>How Gcov works</h2><p>Gcov workflow diagram</p>\n<p><img src=\"/2021/07/gcov-example/gcov-flow.jpg\" alt=\"flow\"></p>\n<p>There are three main steps:</p>\n<ol>\n<li>Adding special compilation options to the GCC compilation to generate the executable, and <code>*.gcno</code>.</li>\n<li>Running (testing) the generated executable, which generates the <code>*.gcda</code> data file.</li>\n<li>With <code>*.gcno</code> and <code>*.gcda</code>, generate the <code>gcov</code> file from the source code, and finally generate the code coverage report.</li>\n</ol>\n<p>Here’s how each of these steps is done exactly.</p>\n<h3 id=\"1-Compile\"><a href=\"#1-Compile\" class=\"headerlink\" title=\"1. Compile\"></a>1. Compile</h3><p>The first step is to compile. The parameters and files used for compilation are already written in the <code>makefile</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make build</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>Click to see the output of the make command</summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ make build</span><br><span class=\"line\">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror main.c</span><br><span class=\"line\">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror foo.c</span><br><span class=\"line\">gcc -fPIC -fprofile-arcs -ftest-coverage -o main main.o foo.o</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>As you can see from the output, this program is compiled with two compile options <code>-fprofile-arcs</code> and <code>-ftest-coverage</code>.<br>After successful compilation, not only the <code>main</code> and <code>.o</code> files are generated, but also two <code>.gcno</code> files are generated.</p>\n<blockquote>\n<p>The <code>.gcno</code> record file is generated after adding the GCC compile option <code>-ftest-coverage</code>, which contains information<br>for reconstructing the base block map and assigning source line numbers to blocks during the compilation process.</p>\n</blockquote>\n<h3 id=\"2-Running-the-executable\"><a href=\"#2-Running-the-executable\" class=\"headerlink\" title=\"2. Running the executable\"></a>2. Running the executable</h3><p>After compilation, the executable <code>main</code> is generated, which is run (tested) as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>Click to see the output when running main</summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ ./main</span><br><span class=\"line\">Start calling foo() ...</span><br><span class=\"line\">when num is equal to 1...</span><br><span class=\"line\">when num is equal to 2...</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>When <code>main</code> is run, the results are recorded in the <code>.gcda</code> data file, and if you look in the current directory,<br>you can see that two <code>.gcda</code> files have been generated.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">foo.c  foo.gcda  foo.gcno  foo.h  foo.o  img  main  main.c  main.gcda  main.gcno  main.o  makefile  README.md</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>.gcda</code> record data files are generated because the program is compiled with the <code>-fprofile-arcs</code> option introduced.<br>It contains arc transition counts, value distribution counts, and some summary information.</p>\n</blockquote>\n<h3 id=\"3-Generating-reports\"><a href=\"#3-Generating-reports\" class=\"headerlink\" title=\"3. Generating reports\"></a>3. Generating reports</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make report</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary> Click to see the output of the generated report </summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ make report</span><br><span class=\"line\">gcov main.c foo.c</span><br><span class=\"line\">File <span class=\"string\">&#x27;main.c&#x27;</span></span><br><span class=\"line\">Lines executed:100.00% of 5</span><br><span class=\"line\">Creating <span class=\"string\">&#x27;main.c.gcov&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">File <span class=\"string\">&#x27;foo.c&#x27;</span></span><br><span class=\"line\">Lines executed:85.71% of 7</span><br><span class=\"line\">Creating <span class=\"string\">&#x27;foo.c.gcov&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Lines executed:91.67% of 12</span><br><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\">Capturing coverage data from .</span><br><span class=\"line\">Found gcov version: 4.8.5</span><br><span class=\"line\">Scanning . <span class=\"keyword\">for</span> .gcda files ...</span><br><span class=\"line\">Found 2 data files <span class=\"keyword\">in</span> .</span><br><span class=\"line\">Processing foo.gcda</span><br><span class=\"line\">geninfo: WARNING: cannot find an entry <span class=\"keyword\">for</span> main.c.gcov <span class=\"keyword\">in</span> .gcno file, skipping file!</span><br><span class=\"line\">Processing main.gcda</span><br><span class=\"line\">Finished .info-file creation</span><br><span class=\"line\">genhtml coverage.info --output-directory out</span><br><span class=\"line\">Reading data file coverage.info</span><br><span class=\"line\">Found 2 entries.</span><br><span class=\"line\">Found common filename prefix <span class=\"string\">&quot;/workspace/coco&quot;</span></span><br><span class=\"line\">Writing .css and .png files.</span><br><span class=\"line\">Generating output.</span><br><span class=\"line\">Processing file gcov-example/main.c</span><br><span class=\"line\">Processing file gcov-example/foo.c</span><br><span class=\"line\">Writing directory view page.</span><br><span class=\"line\">Overall coverage rate:</span><br><span class=\"line\">  lines......: 91.7% (11 of 12 lines)</span><br><span class=\"line\">  <span class=\"built_in\">functions</span>..: 100.0% (2 of 2 <span class=\"built_in\">functions</span>)</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>Executing <code>make report</code> to generate an HTML report actually performs two main steps behind this command.</p>\n<ol>\n<li><p>With the <code>.gcno</code> and <code>.gcda</code> files generated at compile and run time, execute the command<br><code>gcov main.c foo.c</code> to generate the <code>.gcov</code> code coverage file.</p>\n</li>\n<li><p>With the code coverage <code>.gcov</code> file, generate a visual code coverage report via<br><a href=\"http://ltp.sourceforge.net/coverage/lcov.php\">LCOV</a>.</p>\n</li>\n</ol>\n<p>The steps to generate the HTML result report are as follows.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. Generate the coverage.info data file</span></span><br><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\"><span class=\"comment\"># 2. Generate a report from this data file</span></span><br><span class=\"line\">genhtml coverage.info --output-directory out</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Delete-all-generated-files\"><a href=\"#Delete-all-generated-files\" class=\"headerlink\" title=\"Delete all generated files\"></a>Delete all generated files</h3><p>All the generated files can be removed by executing <code>make clean</code> command.</p>\n<details>\n<summary> Click to see the output of the make clean command </summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ make clean</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf main *.o *.so *.gcno *.gcda *.gcov coverage.info out</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<h2 id=\"Code-coverage-report\"><a href=\"#Code-coverage-report\" class=\"headerlink\" title=\"Code coverage report\"></a>Code coverage report</h2><p><img src=\"/2021/07/gcov-example/index.png\" alt=\"index\"></p>\n<p>The home page is displayed in a directory structure</p>\n<p><img src=\"/2021/07/gcov-example/example.png\" alt=\"example\"></p>\n<p>After entering the directory, the source files in that directory are displayed</p>\n<p><img src=\"/2021/07/gcov-example/main.c.png\" alt=\"main.c\"></p>\n<p>The blue color indicates that these statements are overwritten</p>\n<p><img src=\"/2021/07/gcov-example/foo.c.png\" alt=\"foo.c\"></p>\n<p>Red indicates statements that are not overridden</p>\n<blockquote>\n<p>LCOV supports statement, function, and branch coverage metrics.</p>\n</blockquote>\n<p>Side notes:</p>\n<p>There is another tool for generating HTML reports called <a href=\"https://github.com/gcovr/gcovr\">gcovr</a>, developed in Python,<br>whose reports are displayed slightly differently from LCOV. For example, LCOV displays it in a directory structure,<br>while gcovr displays it in a file path, which is always the same as the code structure, so I prefer to use the former.</p>\n","more":"<p>This article shares how to use Gcov and LCOV to metrics code coverage for C&#x2F;C++ projects.<br>If you want to know how Gcov works, or you need to metrics code coverage for C&#x2F;C++ projects later,<br>I hope this article is useful to you.</p>\n<h2 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h2><p>The problem I’m having: A C&#x2F;C++ project from decades ago has no unit tests, only regression tests,<br>but you want to know what code is tested by regression tests? Which code is untested?<br>What is the code coverage? Where do I need to improve automated test cases in the future?</p>\n<p>Can code coverage be measured without unit tests? Yes.</p>\n<h2 id=\"Code-coverage-tools-for-C-C\"><a href=\"#Code-coverage-tools-for-C-C\" class=\"headerlink\" title=\"Code coverage tools for C&#x2F;C++\"></a>Code coverage tools for C&#x2F;C++</h2><p>There are some tools on the market that can measure the code coverage of black-box testing,<br>such as Squish Coco, Bullseye, etc. Their principle is to insert instrumentation when build product.</p>\n<p>I’ve done some research on <a href=\"https://shenxianpeng.github.io/2019/05/squishcoco/\">Squish Coco</a>,<br>because of some unresolved compilation issues that I didn’t buy a license for this expensive tool.</p>\n<p>When I investigated code coverage again, I found out that GCC has a built-in code coverage tool called<br><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Gcov.html\">Gcov</a>.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><p>For those who want to use Gcov, to illustrate how it works, I have prepared a sample program that<br>requires GCC and LCOV to be installed before running the program.</p>\n<p>If you don’t have an environment or don’t want to install it, you can check out this example<br><a href=\"https://github.com/shenxianpeng/gcov-example\">repository</a></p>\n<p>Note: The source code is under the <code>master</code> branch master, and code coverage result html under branch <code>coverage</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is the version of GCC and lcov on my test environment.</span></span><br><span class=\"line\">sh-4.2$ gcc --version</span><br><span class=\"line\">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br><span class=\"line\">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class=\"line\">This is free software; see the <span class=\"built_in\">source</span> <span class=\"keyword\">for</span> copying conditions.  There is NO</span><br><span class=\"line\">warranty; not even <span class=\"keyword\">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class=\"line\"></span><br><span class=\"line\">sh-4.2$ lcov -v</span><br><span class=\"line\">lcov: LCOV version 1.14</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"How-Gcov-works\"><a href=\"#How-Gcov-works\" class=\"headerlink\" title=\"How Gcov works\"></a>How Gcov works</h2><p>Gcov workflow diagram</p>\n<p><img src=\"/2021/07/gcov-example/gcov-flow.jpg\" alt=\"flow\"></p>\n<p>There are three main steps:</p>\n<ol>\n<li>Adding special compilation options to the GCC compilation to generate the executable, and <code>*.gcno</code>.</li>\n<li>Running (testing) the generated executable, which generates the <code>*.gcda</code> data file.</li>\n<li>With <code>*.gcno</code> and <code>*.gcda</code>, generate the <code>gcov</code> file from the source code, and finally generate the code coverage report.</li>\n</ol>\n<p>Here’s how each of these steps is done exactly.</p>\n<h3 id=\"1-Compile\"><a href=\"#1-Compile\" class=\"headerlink\" title=\"1. Compile\"></a>1. Compile</h3><p>The first step is to compile. The parameters and files used for compilation are already written in the <code>makefile</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make build</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>Click to see the output of the make command</summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ make build</span><br><span class=\"line\">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror main.c</span><br><span class=\"line\">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror foo.c</span><br><span class=\"line\">gcc -fPIC -fprofile-arcs -ftest-coverage -o main main.o foo.o</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>As you can see from the output, this program is compiled with two compile options <code>-fprofile-arcs</code> and <code>-ftest-coverage</code>.<br>After successful compilation, not only the <code>main</code> and <code>.o</code> files are generated, but also two <code>.gcno</code> files are generated.</p>\n<blockquote>\n<p>The <code>.gcno</code> record file is generated after adding the GCC compile option <code>-ftest-coverage</code>, which contains information<br>for reconstructing the base block map and assigning source line numbers to blocks during the compilation process.</p>\n</blockquote>\n<h3 id=\"2-Running-the-executable\"><a href=\"#2-Running-the-executable\" class=\"headerlink\" title=\"2. Running the executable\"></a>2. Running the executable</h3><p>After compilation, the executable <code>main</code> is generated, which is run (tested) as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./main</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>Click to see the output when running main</summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ ./main</span><br><span class=\"line\">Start calling foo() ...</span><br><span class=\"line\">when num is equal to 1...</span><br><span class=\"line\">when num is equal to 2...</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>When <code>main</code> is run, the results are recorded in the <code>.gcda</code> data file, and if you look in the current directory,<br>you can see that two <code>.gcda</code> files have been generated.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">ls</span></span><br><span class=\"line\">foo.c  foo.gcda  foo.gcno  foo.h  foo.o  img  main  main.c  main.gcda  main.gcno  main.o  makefile  README.md</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>.gcda</code> record data files are generated because the program is compiled with the <code>-fprofile-arcs</code> option introduced.<br>It contains arc transition counts, value distribution counts, and some summary information.</p>\n</blockquote>\n<h3 id=\"3-Generating-reports\"><a href=\"#3-Generating-reports\" class=\"headerlink\" title=\"3. Generating reports\"></a>3. Generating reports</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make report</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary> Click to see the output of the generated report </summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ make report</span><br><span class=\"line\">gcov main.c foo.c</span><br><span class=\"line\">File <span class=\"string\">&#x27;main.c&#x27;</span></span><br><span class=\"line\">Lines executed:100.00% of 5</span><br><span class=\"line\">Creating <span class=\"string\">&#x27;main.c.gcov&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">File <span class=\"string\">&#x27;foo.c&#x27;</span></span><br><span class=\"line\">Lines executed:85.71% of 7</span><br><span class=\"line\">Creating <span class=\"string\">&#x27;foo.c.gcov&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Lines executed:91.67% of 12</span><br><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\">Capturing coverage data from .</span><br><span class=\"line\">Found gcov version: 4.8.5</span><br><span class=\"line\">Scanning . <span class=\"keyword\">for</span> .gcda files ...</span><br><span class=\"line\">Found 2 data files <span class=\"keyword\">in</span> .</span><br><span class=\"line\">Processing foo.gcda</span><br><span class=\"line\">geninfo: WARNING: cannot find an entry <span class=\"keyword\">for</span> main.c.gcov <span class=\"keyword\">in</span> .gcno file, skipping file!</span><br><span class=\"line\">Processing main.gcda</span><br><span class=\"line\">Finished .info-file creation</span><br><span class=\"line\">genhtml coverage.info --output-directory out</span><br><span class=\"line\">Reading data file coverage.info</span><br><span class=\"line\">Found 2 entries.</span><br><span class=\"line\">Found common filename prefix <span class=\"string\">&quot;/workspace/coco&quot;</span></span><br><span class=\"line\">Writing .css and .png files.</span><br><span class=\"line\">Generating output.</span><br><span class=\"line\">Processing file gcov-example/main.c</span><br><span class=\"line\">Processing file gcov-example/foo.c</span><br><span class=\"line\">Writing directory view page.</span><br><span class=\"line\">Overall coverage rate:</span><br><span class=\"line\">  lines......: 91.7% (11 of 12 lines)</span><br><span class=\"line\">  <span class=\"built_in\">functions</span>..: 100.0% (2 of 2 <span class=\"built_in\">functions</span>)</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>Executing <code>make report</code> to generate an HTML report actually performs two main steps behind this command.</p>\n<ol>\n<li><p>With the <code>.gcno</code> and <code>.gcda</code> files generated at compile and run time, execute the command<br><code>gcov main.c foo.c</code> to generate the <code>.gcov</code> code coverage file.</p>\n</li>\n<li><p>With the code coverage <code>.gcov</code> file, generate a visual code coverage report via<br><a href=\"http://ltp.sourceforge.net/coverage/lcov.php\">LCOV</a>.</p>\n</li>\n</ol>\n<p>The steps to generate the HTML result report are as follows.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1. Generate the coverage.info data file</span></span><br><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\"><span class=\"comment\"># 2. Generate a report from this data file</span></span><br><span class=\"line\">genhtml coverage.info --output-directory out</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Delete-all-generated-files\"><a href=\"#Delete-all-generated-files\" class=\"headerlink\" title=\"Delete all generated files\"></a>Delete all generated files</h3><p>All the generated files can be removed by executing <code>make clean</code> command.</p>\n<details>\n<summary> Click to see the output of the make clean command </summary>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sh-4.2$ make clean</span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf main *.o *.so *.gcno *.gcda *.gcov coverage.info out</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<h2 id=\"Code-coverage-report\"><a href=\"#Code-coverage-report\" class=\"headerlink\" title=\"Code coverage report\"></a>Code coverage report</h2><p><img src=\"/2021/07/gcov-example/index.png\" alt=\"index\"></p>\n<p>The home page is displayed in a directory structure</p>\n<p><img src=\"/2021/07/gcov-example/example.png\" alt=\"example\"></p>\n<p>After entering the directory, the source files in that directory are displayed</p>\n<p><img src=\"/2021/07/gcov-example/main.c.png\" alt=\"main.c\"></p>\n<p>The blue color indicates that these statements are overwritten</p>\n<p><img src=\"/2021/07/gcov-example/foo.c.png\" alt=\"foo.c\"></p>\n<p>Red indicates statements that are not overridden</p>\n<blockquote>\n<p>LCOV supports statement, function, and branch coverage metrics.</p>\n</blockquote>\n<p>Side notes:</p>\n<p>There is another tool for generating HTML reports called <a href=\"https://github.com/gcovr/gcovr\">gcovr</a>, developed in Python,<br>whose reports are displayed slightly differently from LCOV. For example, LCOV displays it in a directory structure,<br>while gcovr displays it in a file path, which is always the same as the code structure, so I prefer to use the former.</p>\n","categories":[{"name":"Coverage","path":"api/categories/Coverage.json"}],"tags":[{"name":"Gcov","path":"api/tags/Gcov.json"},{"name":"LCOV","path":"api/tags/LCOV.json"}]}