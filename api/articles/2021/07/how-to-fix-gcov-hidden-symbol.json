{"title":"How to fix \"hidden symbol `__gcov_init' in ../libgcov.a(_gcov.o) is referenced by DSO\"","slug":"2021/07/how-to-fix-gcov-hidden-symbol","date":"2021-07-27T02:40:21.000Z","updated":"2024-06-13T15:39:13.459Z","comments":true,"path":"api/articles/2021/07/how-to-fix-gcov-hidden-symbol.json","excerpt":null,"covers":null,"content":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>When we introduced Gocv to build my project for code coverage, I encountered the following error message:</p>\n<h3 id=\"error-1\"><a href=\"#error-1\" class=\"headerlink\" title=\"error 1\"></a>error 1</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++     -m64 -z muldefs -L/lib64 -L/usr/lib64 -lglib-2.0 -m64 -DUV_64PORT -DU2_64_BUILD -fPIC -g  DU_starter.o</span><br><span class=\"line\">NFA_msghandle.o NFA_svr_exit.o du_err_printf.o  -L/workspace/code/myproject/src/home/x64debug/bin/</span><br><span class=\"line\">-L/workspace/code/myproject/src/home/x64debug/bin/lib/ -lundata -lutcallc_nfasvr</span><br><span class=\"line\">-Wl,-rpath=/workspace/code/myproject/src/home/x64debug/bin/ -Wl,-rpath=/.dulibs28  -Wl,--enable-new-dtags</span><br><span class=\"line\">-L/.dulibs28 -lodbc  -lm -lncurses -lrt -lcrypt -lgdbm -ldl -lpam -lpthread  -ldl -lglib-2.0</span><br><span class=\"line\">-lstdc++ -lnsl -lrt -lgcov -o /workspace/code/myproject/src/home/x64debug/objs/du/share/dutsvr</span><br><span class=\"line\">/usr/bin/ld: /workspace/code/myproject/src/home/x64debug/objs/du/share/dutsvr:</span><br><span class=\"line\">hidden symbol `__gcov_init<span class=\"string\">&#x27; in /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcov.a(_gcov.o) is referenced by DSO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"error-2\"><a href=\"#error-2\" class=\"headerlink\" title=\"error 2\"></a>error 2</h3><p>It may also be such an error</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/p7539c/cutest/CuTest.c:379: undefined reference to `__gcov_init<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CuTest.o:(.data+0x184): undefined reference to `__gcov_merge_add&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Positioning-problem\"><a href=\"#Positioning-problem\" class=\"headerlink\" title=\"Positioning problem\"></a>Positioning problem</h2><p>Let’s take the <strong>error 1</strong>.</p>\n<p>From the error message, I noticed <code>-lundata -lutcallc_nfasvr</code> are all the linked libraries (-l<em>library</em>)</p>\n<p>I checked libraries <code>undata</code> and <code>utcallc_nfasvr</code> one by one, and found it displayed <code>U __gcov_init</code> and <code>U</code> means undefined symbols.</p>\n<blockquote>\n<p>Use the <code>find</code> command to search the library and the <code>nm</code> command to list symbols in the library.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-sh-4.2$ find -name *utcallc_nfasvr*</span><br><span class=\"line\">./bin/libutcallc_nfasvr.so</span><br><span class=\"line\">./objs/du/work/libutcallc_nfasvr.so</span><br><span class=\"line\">-sh-4.2$ nm ./bin/libutcallc_nfasvr.so | grep __gcov_init</span><br><span class=\"line\">                 U __gcov_init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"How-to-fix\"><a href=\"#How-to-fix\" class=\"headerlink\" title=\"How to fix\"></a>How to fix</h2><p>In my case, I just added the following code <code>LIB_1_LIBS := -lgcov</code> to allow the <code>utcallc_nfasvr</code> library to call gcov.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">LIB_1 := utcallc_nfasvr</span><br><span class=\"line\"><span class=\"comment\"># added below code to my makefile</span></span><br><span class=\"line\">LIB_1_LIBS := -lgcov</span><br></pre></td></tr></table></figure>\n\n<p>Rebuild, the error is gone, then checked library, it displayed <code>t __gcov_init</code> this time, it means symbol value exists not hidden.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-sh-4.2$ nm ./bin/libutcallc_nfasvr.so | grep __gcov_init</span><br><span class=\"line\">                 t __gcov_init</span><br></pre></td></tr></table></figure>\n\n<p>Or in your case may build a shared library like so, similarly, just add the compile parameter <code>-lgcov</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++   -shared -o libMyLib.so src_a.o src_b.o src_c.o -lgcov</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>I have encountered the following problems many times</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">undefined reference to `__gcov_init<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">undefined reference to `__gcov_merge_add&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">`hidden symbol `__gcov_init<span class=\"string\">&#x27; in /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcov.a(_gcov.o) is referenced by DSO`</span></span><br></pre></td></tr></table></figure>\n\n<p>Each time I can fix it by adding <code>-glcov</code> then recompile. the error has gone after rebuild. (you use the <code>nm</code> command to double-check whether the symbol has been added successfully.)</p>\n<p>Hopes it can help you.</p>\n","more":"<h2 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h2><p>When we introduced Gocv to build my project for code coverage, I encountered the following error message:</p>\n<h3 id=\"error-1\"><a href=\"#error-1\" class=\"headerlink\" title=\"error 1\"></a>error 1</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++     -m64 -z muldefs -L/lib64 -L/usr/lib64 -lglib-2.0 -m64 -DUV_64PORT -DU2_64_BUILD -fPIC -g  DU_starter.o</span><br><span class=\"line\">NFA_msghandle.o NFA_svr_exit.o du_err_printf.o  -L/workspace/code/myproject/src/home/x64debug/bin/</span><br><span class=\"line\">-L/workspace/code/myproject/src/home/x64debug/bin/lib/ -lundata -lutcallc_nfasvr</span><br><span class=\"line\">-Wl,-rpath=/workspace/code/myproject/src/home/x64debug/bin/ -Wl,-rpath=/.dulibs28  -Wl,--enable-new-dtags</span><br><span class=\"line\">-L/.dulibs28 -lodbc  -lm -lncurses -lrt -lcrypt -lgdbm -ldl -lpam -lpthread  -ldl -lglib-2.0</span><br><span class=\"line\">-lstdc++ -lnsl -lrt -lgcov -o /workspace/code/myproject/src/home/x64debug/objs/du/share/dutsvr</span><br><span class=\"line\">/usr/bin/ld: /workspace/code/myproject/src/home/x64debug/objs/du/share/dutsvr:</span><br><span class=\"line\">hidden symbol `__gcov_init<span class=\"string\">&#x27; in /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcov.a(_gcov.o) is referenced by DSO</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"error-2\"><a href=\"#error-2\" class=\"headerlink\" title=\"error 2\"></a>error 2</h3><p>It may also be such an error</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/home/p7539c/cutest/CuTest.c:379: undefined reference to `__gcov_init<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">CuTest.o:(.data+0x184): undefined reference to `__gcov_merge_add&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Positioning-problem\"><a href=\"#Positioning-problem\" class=\"headerlink\" title=\"Positioning problem\"></a>Positioning problem</h2><p>Let’s take the <strong>error 1</strong>.</p>\n<p>From the error message, I noticed <code>-lundata -lutcallc_nfasvr</code> are all the linked libraries (-l<em>library</em>)</p>\n<p>I checked libraries <code>undata</code> and <code>utcallc_nfasvr</code> one by one, and found it displayed <code>U __gcov_init</code> and <code>U</code> means undefined symbols.</p>\n<blockquote>\n<p>Use the <code>find</code> command to search the library and the <code>nm</code> command to list symbols in the library.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-sh-4.2$ find -name *utcallc_nfasvr*</span><br><span class=\"line\">./bin/libutcallc_nfasvr.so</span><br><span class=\"line\">./objs/du/work/libutcallc_nfasvr.so</span><br><span class=\"line\">-sh-4.2$ nm ./bin/libutcallc_nfasvr.so | grep __gcov_init</span><br><span class=\"line\">                 U __gcov_init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"How-to-fix\"><a href=\"#How-to-fix\" class=\"headerlink\" title=\"How to fix\"></a>How to fix</h2><p>In my case, I just added the following code <code>LIB_1_LIBS := -lgcov</code> to allow the <code>utcallc_nfasvr</code> library to call gcov.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">LIB_1 := utcallc_nfasvr</span><br><span class=\"line\"><span class=\"comment\"># added below code to my makefile</span></span><br><span class=\"line\">LIB_1_LIBS := -lgcov</span><br></pre></td></tr></table></figure>\n\n<p>Rebuild, the error is gone, then checked library, it displayed <code>t __gcov_init</code> this time, it means symbol value exists not hidden.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-sh-4.2$ nm ./bin/libutcallc_nfasvr.so | grep __gcov_init</span><br><span class=\"line\">                 t __gcov_init</span><br></pre></td></tr></table></figure>\n\n<p>Or in your case may build a shared library like so, similarly, just add the compile parameter <code>-lgcov</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">g++   -shared -o libMyLib.so src_a.o src_b.o src_c.o -lgcov</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>I have encountered the following problems many times</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">undefined reference to `__gcov_init<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">undefined reference to `__gcov_merge_add&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">`hidden symbol `__gcov_init<span class=\"string\">&#x27; in /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcov.a(_gcov.o) is referenced by DSO`</span></span><br></pre></td></tr></table></figure>\n\n<p>Each time I can fix it by adding <code>-glcov</code> then recompile. the error has gone after rebuild. (you use the <code>nm</code> command to double-check whether the symbol has been added successfully.)</p>\n<p>Hopes it can help you.</p>\n","categories":[{"name":"Coverage","path":"api/categories/Coverage.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"Coverage","path":"api/tags/Coverage.json"},{"name":"Gcov","path":"api/tags/Gcov.json"}]}