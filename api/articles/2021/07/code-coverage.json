{"title":"关于代码覆盖率 (About Code Coverage)","slug":"2021/07/code-coverage","date":"2021-07-14T14:49:39.000Z","updated":"2023-05-09T08:34:35.897Z","comments":true,"path":"api/articles/2021/07/code-coverage.json","excerpt":null,"covers":null,"content":"<p>本篇简要介绍：什么是代码覆盖率？为什么要做代码覆盖率？代码覆盖率的指标、工作原理，主流的代码覆盖率工具以及不要高估代码覆盖率指标。</p>\n<h2 id=\"什么是代码覆盖率？\"><a href=\"#什么是代码覆盖率？\" class=\"headerlink\" title=\"什么是代码覆盖率？\"></a>什么是代码覆盖率？</h2><p>代码覆盖率是对整个测试过程中被执行的代码的衡量，它能测量源代码中的哪些语句在测试中被执行，哪些语句尚未被执行。</p>\n<h2 id=\"为什么要测量代码覆盖率？\"><a href=\"#为什么要测量代码覆盖率？\" class=\"headerlink\" title=\"为什么要测量代码覆盖率？\"></a>为什么要测量代码覆盖率？</h2><p>众所周知，测试可以提高软件版本的质量和可预测性。但是，你知道你的单元测试甚至是你的功能测试实际测试代码的效果如何吗？是否还需要更多的测试？</p>\n<p>这些是代码覆盖率可以试图回答的问题。总之，出于以下原因我们需要测量代码覆盖率：</p>\n<ul>\n<li>了解我们的测试用例对源代码的测试效果</li>\n<li>了解我们是否进行了足够的测试</li>\n<li>在软件的整个生命周期内保持测试质量</li>\n</ul>\n<p>注：代码覆盖率不是灵丹妙药，覆盖率测量不能替代良好的代码审查和优秀的编程实践。</p>\n<p>通常，我们应该采用合理的覆盖目标，力求在代码覆盖率在所有模块中实现均匀覆盖，而不是只看最终数字的是否高到令人满意。</p>\n<p>举例：假设代码覆盖率只在某一些模块代码覆盖率很高，但在一些关键模块并没有足够的测试用例覆盖，那样虽然代码覆盖率很高，但并不能说明产品质量就很高。</p>\n<h2 id=\"代码覆盖率的指标种类\"><a href=\"#代码覆盖率的指标种类\" class=\"headerlink\" title=\"代码覆盖率的指标种类\"></a>代码覆盖率的指标种类</h2><p>代码覆盖率工具通常使用一个或多个标准来确定你的代码在被自动化测试后是否得到了执行，常见的覆盖率报告中看到的指标包括：</p>\n<ul>\n<li>函数覆盖率：定义的函数中有多少被调用</li>\n<li>语句覆盖率：程序中的语句有多少被执行</li>\n<li>分支覆盖率：有多少控制结构的分支（例如if语句）被执行</li>\n<li>条件覆盖率：有多少布尔子表达式被测试为真值和假值</li>\n<li>行覆盖率：有多少行的源代码被测试过</li>\n</ul>\n<h2 id=\"代码覆盖率是如何工作的？\"><a href=\"#代码覆盖率是如何工作的？\" class=\"headerlink\" title=\"代码覆盖率是如何工作的？\"></a>代码覆盖率是如何工作的？</h2><p>代码覆盖率测量主要有以下三种方式：</p>\n<h3 id=\"1-Source-code-instrumentation-源代码检测\"><a href=\"#1-Source-code-instrumentation-源代码检测\" class=\"headerlink\" title=\"1. Source code instrumentation - 源代码检测\"></a>1. Source code instrumentation - 源代码检测</h3><p>将检测语句添加到源代码中，并使用正常的编译工具链编译代码以生成检测的程序集。这是我们常说的插桩，Gcov 是属于这一类的代码覆盖率工具。</p>\n<h3 id=\"2-Runtime-instrumentation-运行时收集\"><a href=\"#2-Runtime-instrumentation-运行时收集\" class=\"headerlink\" title=\"2. Runtime instrumentation - 运行时收集\"></a>2. Runtime instrumentation - 运行时收集</h3><p>这种方法在代码执行时从运行时环境收集信息以确定覆盖率信息。以我的理解 JaCoCo 和 Coverage 这两个工具的原理属于这一类别。</p>\n<h3 id=\"3-Intermediate-code-instrumentation-中间代码检测\"><a href=\"#3-Intermediate-code-instrumentation-中间代码检测\" class=\"headerlink\" title=\"3. Intermediate code instrumentation - 中间代码检测\"></a>3. Intermediate code instrumentation - 中间代码检测</h3><p>通过添加新的字节码来检测编译后的类文件，并生成一个新的检测类。说实话，我 Google 了很多文章并找到确定的说明哪个工具是属于这一类的。</p>\n<p>了解这些工具的基本原理，结合现有的测试用例，有助于正确的选择代码覆盖率工具。比如：</p>\n<ul>\n<li>产品的源代码只有 E2E（端到端）测试用例，通常只能选择第一类工具，即通过插桩编译出的可执行文件，然后进行测试和结果收集。</li>\n<li>产品的源代码有单元测试用例，通常选择第二类工具，即运行时收集。这类工具的执行效率高，易于做持续集成。</li>\n</ul>\n<h2 id=\"当前主流代码覆盖率工具\"><a href=\"#当前主流代码覆盖率工具\" class=\"headerlink\" title=\"当前主流代码覆盖率工具\"></a>当前主流代码覆盖率工具</h2><p>代码覆盖率的工具有很多，以下是我用过的不同编程语言的代码覆盖率工具。在选择工具时，力求去选择那些开源、流行（活跃）、好用的工具。</p>\n<table>\n<thead>\n<tr>\n<th>编程语言</th>\n<th>代码覆盖率工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C&#x2F;C++</td>\n<td>Gcov</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>JaCoCo</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>Istanbul</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>Coverage.py</td>\n</tr>\n<tr>\n<td>Golang</td>\n<td>cover</td>\n</tr>\n</tbody></table>\n<h2 id=\"不要高估代码覆盖率指标\"><a href=\"#不要高估代码覆盖率指标\" class=\"headerlink\" title=\"不要高估代码覆盖率指标\"></a>不要高估代码覆盖率指标</h2><p>代码覆盖率不是灵丹妙药，它只是告诉我们有哪些代码没有被测试用例“执行到”而已，高百分比的代码覆盖率不等于高质量的有效测试。</p>\n<p>首先，高代码覆盖率不足以衡量有效测试。相反，代码覆盖率更准确地给出了代码未被测试程度的度量。这意味着，如果我们的代码覆盖率指标较低，那么我们可以确定代码的重要部分没有经过测试，然而反过来不一定正确。具有高代码覆盖率并不能充分表明我们的代码已经过充分测试。</p>\n<p>其次，<code>100%</code> 的代码覆盖率不应该是我们明确努力的目标之一。这是因为在实现 <code>100%</code> 的代码覆盖率与实际测试重要的代码之间总是需要权衡。虽然可以测试所有代码，但考虑到为了满足覆盖率要求而编写更多无意义测试的趋势，当你接近此限制时，测试的价值也很可能会减少。</p>\n<p>借 Martin Fowler 在这篇<a href=\"https://www.martinfowler.com/bliki/TestCoverage.html\">测试覆盖率</a>的文章说的一句话：</p>\n<blockquote>\n<p>代码覆盖率是查找代码库中未测试部分的有用工具，然而它作为一个数字说明你的测试有多好用处不大。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://www.lambdatest.com/blog/code-coverage-vs-test-coverage/\">https://www.lambdatest.com/blog/code-coverage-vs-test-coverage/</a><br><a href=\"https://www.atlassian.com/continuous-delivery/software-testing/code-coverage\">https://www.atlassian.com/continuous-delivery/software-testing/code-coverage</a><br><a href=\"https://www.thoughtworks.com/insights/blog/are-test-coverage-metrics-overrated\">https://www.thoughtworks.com/insights/blog/are-test-coverage-metrics-overrated</a></p>\n</blockquote>\n","more":"<p>本篇简要介绍：什么是代码覆盖率？为什么要做代码覆盖率？代码覆盖率的指标、工作原理，主流的代码覆盖率工具以及不要高估代码覆盖率指标。</p>\n<h2 id=\"什么是代码覆盖率？\"><a href=\"#什么是代码覆盖率？\" class=\"headerlink\" title=\"什么是代码覆盖率？\"></a>什么是代码覆盖率？</h2><p>代码覆盖率是对整个测试过程中被执行的代码的衡量，它能测量源代码中的哪些语句在测试中被执行，哪些语句尚未被执行。</p>\n<h2 id=\"为什么要测量代码覆盖率？\"><a href=\"#为什么要测量代码覆盖率？\" class=\"headerlink\" title=\"为什么要测量代码覆盖率？\"></a>为什么要测量代码覆盖率？</h2><p>众所周知，测试可以提高软件版本的质量和可预测性。但是，你知道你的单元测试甚至是你的功能测试实际测试代码的效果如何吗？是否还需要更多的测试？</p>\n<p>这些是代码覆盖率可以试图回答的问题。总之，出于以下原因我们需要测量代码覆盖率：</p>\n<ul>\n<li>了解我们的测试用例对源代码的测试效果</li>\n<li>了解我们是否进行了足够的测试</li>\n<li>在软件的整个生命周期内保持测试质量</li>\n</ul>\n<p>注：代码覆盖率不是灵丹妙药，覆盖率测量不能替代良好的代码审查和优秀的编程实践。</p>\n<p>通常，我们应该采用合理的覆盖目标，力求在代码覆盖率在所有模块中实现均匀覆盖，而不是只看最终数字的是否高到令人满意。</p>\n<p>举例：假设代码覆盖率只在某一些模块代码覆盖率很高，但在一些关键模块并没有足够的测试用例覆盖，那样虽然代码覆盖率很高，但并不能说明产品质量就很高。</p>\n<h2 id=\"代码覆盖率的指标种类\"><a href=\"#代码覆盖率的指标种类\" class=\"headerlink\" title=\"代码覆盖率的指标种类\"></a>代码覆盖率的指标种类</h2><p>代码覆盖率工具通常使用一个或多个标准来确定你的代码在被自动化测试后是否得到了执行，常见的覆盖率报告中看到的指标包括：</p>\n<ul>\n<li>函数覆盖率：定义的函数中有多少被调用</li>\n<li>语句覆盖率：程序中的语句有多少被执行</li>\n<li>分支覆盖率：有多少控制结构的分支（例如if语句）被执行</li>\n<li>条件覆盖率：有多少布尔子表达式被测试为真值和假值</li>\n<li>行覆盖率：有多少行的源代码被测试过</li>\n</ul>\n<h2 id=\"代码覆盖率是如何工作的？\"><a href=\"#代码覆盖率是如何工作的？\" class=\"headerlink\" title=\"代码覆盖率是如何工作的？\"></a>代码覆盖率是如何工作的？</h2><p>代码覆盖率测量主要有以下三种方式：</p>\n<h3 id=\"1-Source-code-instrumentation-源代码检测\"><a href=\"#1-Source-code-instrumentation-源代码检测\" class=\"headerlink\" title=\"1. Source code instrumentation - 源代码检测\"></a>1. Source code instrumentation - 源代码检测</h3><p>将检测语句添加到源代码中，并使用正常的编译工具链编译代码以生成检测的程序集。这是我们常说的插桩，Gcov 是属于这一类的代码覆盖率工具。</p>\n<h3 id=\"2-Runtime-instrumentation-运行时收集\"><a href=\"#2-Runtime-instrumentation-运行时收集\" class=\"headerlink\" title=\"2. Runtime instrumentation - 运行时收集\"></a>2. Runtime instrumentation - 运行时收集</h3><p>这种方法在代码执行时从运行时环境收集信息以确定覆盖率信息。以我的理解 JaCoCo 和 Coverage 这两个工具的原理属于这一类别。</p>\n<h3 id=\"3-Intermediate-code-instrumentation-中间代码检测\"><a href=\"#3-Intermediate-code-instrumentation-中间代码检测\" class=\"headerlink\" title=\"3. Intermediate code instrumentation - 中间代码检测\"></a>3. Intermediate code instrumentation - 中间代码检测</h3><p>通过添加新的字节码来检测编译后的类文件，并生成一个新的检测类。说实话，我 Google 了很多文章并找到确定的说明哪个工具是属于这一类的。</p>\n<p>了解这些工具的基本原理，结合现有的测试用例，有助于正确的选择代码覆盖率工具。比如：</p>\n<ul>\n<li>产品的源代码只有 E2E（端到端）测试用例，通常只能选择第一类工具，即通过插桩编译出的可执行文件，然后进行测试和结果收集。</li>\n<li>产品的源代码有单元测试用例，通常选择第二类工具，即运行时收集。这类工具的执行效率高，易于做持续集成。</li>\n</ul>\n<h2 id=\"当前主流代码覆盖率工具\"><a href=\"#当前主流代码覆盖率工具\" class=\"headerlink\" title=\"当前主流代码覆盖率工具\"></a>当前主流代码覆盖率工具</h2><p>代码覆盖率的工具有很多，以下是我用过的不同编程语言的代码覆盖率工具。在选择工具时，力求去选择那些开源、流行（活跃）、好用的工具。</p>\n<table>\n<thead>\n<tr>\n<th>编程语言</th>\n<th>代码覆盖率工具</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C&#x2F;C++</td>\n<td>Gcov</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>JaCoCo</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>Istanbul</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>Coverage.py</td>\n</tr>\n<tr>\n<td>Golang</td>\n<td>cover</td>\n</tr>\n</tbody></table>\n<h2 id=\"不要高估代码覆盖率指标\"><a href=\"#不要高估代码覆盖率指标\" class=\"headerlink\" title=\"不要高估代码覆盖率指标\"></a>不要高估代码覆盖率指标</h2><p>代码覆盖率不是灵丹妙药，它只是告诉我们有哪些代码没有被测试用例“执行到”而已，高百分比的代码覆盖率不等于高质量的有效测试。</p>\n<p>首先，高代码覆盖率不足以衡量有效测试。相反，代码覆盖率更准确地给出了代码未被测试程度的度量。这意味着，如果我们的代码覆盖率指标较低，那么我们可以确定代码的重要部分没有经过测试，然而反过来不一定正确。具有高代码覆盖率并不能充分表明我们的代码已经过充分测试。</p>\n<p>其次，<code>100%</code> 的代码覆盖率不应该是我们明确努力的目标之一。这是因为在实现 <code>100%</code> 的代码覆盖率与实际测试重要的代码之间总是需要权衡。虽然可以测试所有代码，但考虑到为了满足覆盖率要求而编写更多无意义测试的趋势，当你接近此限制时，测试的价值也很可能会减少。</p>\n<p>借 Martin Fowler 在这篇<a href=\"https://www.martinfowler.com/bliki/TestCoverage.html\">测试覆盖率</a>的文章说的一句话：</p>\n<blockquote>\n<p>代码覆盖率是查找代码库中未测试部分的有用工具，然而它作为一个数字说明你的测试有多好用处不大。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://www.lambdatest.com/blog/code-coverage-vs-test-coverage/\">https://www.lambdatest.com/blog/code-coverage-vs-test-coverage/</a><br><a href=\"https://www.atlassian.com/continuous-delivery/software-testing/code-coverage\">https://www.atlassian.com/continuous-delivery/software-testing/code-coverage</a><br><a href=\"https://www.thoughtworks.com/insights/blog/are-test-coverage-metrics-overrated\">https://www.thoughtworks.com/insights/blog/are-test-coverage-metrics-overrated</a></p>\n</blockquote>\n","categories":[{"name":"Coverage","path":"api/categories/Coverage.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"Coverage","path":"api/tags/Coverage.json"}]}