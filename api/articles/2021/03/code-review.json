{"title":"基于谷歌代码审查（Code Review）法则的思考与实践","slug":"2021/03/code-review","date":"2021-03-20T09:10:14.000Z","updated":"2024-11-18T13:41:42.559Z","comments":true,"path":"api/articles/2021/03/code-review.json","excerpt":null,"covers":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>代码审查（Code Review），就是让别人来审查你的代码，其目的就是确保代码库的整体代码运行状况随着时间推移而不断改善。</p>\n<p>中国有句古话：三人行必有我师。</p>\n<p>代码审查同样如此：</p>\n<ul>\n<li>他人的审查或许会有不一样的思考和建议；</li>\n<li>人都会犯错，多一个人检查就减少犯错的机率。</li>\n</ul>\n<p>因此代码审查是你编写的代码在合并到主分支前最重要的一项检查工作，也是一项最直接、最低成本的发现软件中的错误绝佳方式。</p>\n<p>既然代码审查这么重要，而且有这样显而易见的收益，但总能听到代码审查在团队里执行起来不容易、效果不理想的问题。问题出在哪呢？</p>\n<p>据我观察有两点原因：</p>\n<p>第一，读别人代码需要花时间，往往还需要代码提交者带着业务为审查者讲一遍，同时占用双方时间；<br>其次，如果代码审查者工作繁重、压力大而没有时间，也很容易造成执行不到位，走过场；</p>\n<p>如何才能比较好的开展代码审查？让我们先来看看大公司是怎么做的，Google 的这篇关于代码审查的文章里给出了具体法则。</p>\n<h2 id=\"Google-的代码审查法则\"><a href=\"#Google-的代码审查法则\" class=\"headerlink\" title=\"Google 的代码审查法则\"></a>Google 的代码审查法则</h2><p>在进行代码审查时，应确保：</p>\n<ul>\n<li>代码经过精心设计</li>\n<li>该功能对代码用户很有帮助</li>\n<li>任何 UI 更改都是明智的，并且看起来不错</li>\n<li>任何并行编程都是安全完成的</li>\n<li>代码没有比需要的复杂</li>\n<li>开发人员没有实现他们将来可能需要的东西</li>\n<li>代码具有适当的单元测试</li>\n<li>测试经过精心设计</li>\n<li>开发人员对所有内容使用了清晰的名称</li>\n<li>注释清晰实用，并且主要说明Why而不是What</li>\n<li>代码已正确文档化</li>\n<li>该代码符合我们的样式指南</li>\n</ul>\n<p>确保检查要求你检查的每一行代码，查看上下文，确保你在改善代码运行状况，并称赞开发人员所做的出色工作。</p>\n<blockquote>\n<p>原文：<a href=\"https://google.github.io/eng-practices/review/reviewer/looking-for.html\">https://google.github.io/eng-practices/review/reviewer/looking-for.html</a></p>\n</blockquote>\n<h2 id=\"代码审查法的落地\"><a href=\"#代码审查法的落地\" class=\"headerlink\" title=\"代码审查法的落地\"></a>代码审查法的落地</h2><p>可见，想要更好的落地代码审查，需要先要确立法则，你可以根据实际情况对上述法则进行借鉴、删减或补充；</p>\n<p>第二，作为技术领导应当积极布道，让开发者了解统一的代码审查法则；</p>\n<p>第三，应当把法则里的具体规则尽可能地通过流程控制、自动化检查则纳入到 Pull Request 中。</p>\n<p>另外提醒作为 Reviewer 要 Peaceful ！！！在代码审查时注意不要带有“教育”性质的去给别人提出修改建议，那样很容易适得其反。</p>\n<p>以下是一些不完全实践，供参考。</p>\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><h3 id=\"规避任何不经-Review-的代码进入到主分支\"><a href=\"#规避任何不经-Review-的代码进入到主分支\" class=\"headerlink\" title=\"规避任何不经 Review 的代码进入到主分支\"></a>规避任何不经 Review 的代码进入到主分支</h3><blockquote>\n<p>以 Bitucket 为例。GitHub，GitLab 在设置上大同小异。</p>\n</blockquote>\n<ul>\n<li><p>打开分支权限设置里的选项 <code>Prevent changes without a pull request</code> 打开它。当然如果有需要可以在这个选项里添加 Exception，被添加的人可以不通过 Pull Reuqest 来提交代码。</p>\n</li>\n<li><p>在 Merge Check 里开启 <code>Minimum approvals</code> 这个选项。比如设置 Number of approvals &#x3D; 1，这样需要至少有一个 Reviewers 点击 Approve 按钮才允许 Merge。</p>\n</li>\n</ul>\n<h3 id=\"自动化检查\"><a href=\"#自动化检查\" class=\"headerlink\" title=\"自动化检查\"></a>自动化检查</h3><h3 id=\"通过CI流水线验证编译和测试\"><a href=\"#通过CI流水线验证编译和测试\" class=\"headerlink\" title=\"通过CI流水线验证编译和测试\"></a>通过CI流水线验证编译和测试</h3><ul>\n<li><p>建立自动化构建和测试 Pipeline，这样在创建 Pull Request 的时候可以自动构建、测试以及检查。Jenkins 的 Multi-branch pipeline 可以满足这个需求。</p>\n</li>\n<li><p>开启 Bitucket 的 Merge Check 里 <code>Minimum successful builds</code> 选项，验证构建&#x2F;测试结果，以防止任何没有通过构建和测试的代码可以 Merge 到主分支。</p>\n</li>\n<li><p>另外，可以通过自行编写工具来实现，或可以集成其他 CI 工具来做检查，例如：</p>\n<ul>\n<li>针对 Pull Request 的修改历史来分析提交历史并推荐 Reiewer；</li>\n<li>通过 Lint 工具来检查编码规范；</li>\n<li>通过 REST API 检查是否需要压缩 Commits 来保证清晰的提交历史；</li>\n<li>通过 SonarQube 检查 Quality Gate 等。</li>\n</ul>\n</li>\n</ul>\n<p>实现自动化检查，可以帮助 Reviewers 将审查的工作精力放在代码的具体实现上，其他的交给工具。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>代码审查做的好不好，跟一个团队有没有良好的技术氛围，或者是否存在有技术领导力，有“品位”的技术大牛也是正相关的。</p>\n<ul>\n<li>如果团队里大多数都是有“品位”的工程师，他们会以写出优秀的代码（或挑刺）乐此不疲。</li>\n<li>相反如果团队不重视规范，只追求短期的绩效达成，只会让技术债越欠越多，产品越做越烂。</li>\n</ul>\n<p>欢迎留言分享你的意见或建议。</p>\n","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>代码审查（Code Review），就是让别人来审查你的代码，其目的就是确保代码库的整体代码运行状况随着时间推移而不断改善。</p>\n<p>中国有句古话：三人行必有我师。</p>\n<p>代码审查同样如此：</p>\n<ul>\n<li>他人的审查或许会有不一样的思考和建议；</li>\n<li>人都会犯错，多一个人检查就减少犯错的机率。</li>\n</ul>\n<p>因此代码审查是你编写的代码在合并到主分支前最重要的一项检查工作，也是一项最直接、最低成本的发现软件中的错误绝佳方式。</p>\n<p>既然代码审查这么重要，而且有这样显而易见的收益，但总能听到代码审查在团队里执行起来不容易、效果不理想的问题。问题出在哪呢？</p>\n<p>据我观察有两点原因：</p>\n<p>第一，读别人代码需要花时间，往往还需要代码提交者带着业务为审查者讲一遍，同时占用双方时间；<br>其次，如果代码审查者工作繁重、压力大而没有时间，也很容易造成执行不到位，走过场；</p>\n<p>如何才能比较好的开展代码审查？让我们先来看看大公司是怎么做的，Google 的这篇关于代码审查的文章里给出了具体法则。</p>\n<h2 id=\"Google-的代码审查法则\"><a href=\"#Google-的代码审查法则\" class=\"headerlink\" title=\"Google 的代码审查法则\"></a>Google 的代码审查法则</h2><p>在进行代码审查时，应确保：</p>\n<ul>\n<li>代码经过精心设计</li>\n<li>该功能对代码用户很有帮助</li>\n<li>任何 UI 更改都是明智的，并且看起来不错</li>\n<li>任何并行编程都是安全完成的</li>\n<li>代码没有比需要的复杂</li>\n<li>开发人员没有实现他们将来可能需要的东西</li>\n<li>代码具有适当的单元测试</li>\n<li>测试经过精心设计</li>\n<li>开发人员对所有内容使用了清晰的名称</li>\n<li>注释清晰实用，并且主要说明Why而不是What</li>\n<li>代码已正确文档化</li>\n<li>该代码符合我们的样式指南</li>\n</ul>\n<p>确保检查要求你检查的每一行代码，查看上下文，确保你在改善代码运行状况，并称赞开发人员所做的出色工作。</p>\n<blockquote>\n<p>原文：<a href=\"https://google.github.io/eng-practices/review/reviewer/looking-for.html\">https://google.github.io/eng-practices/review/reviewer/looking-for.html</a></p>\n</blockquote>\n<h2 id=\"代码审查法的落地\"><a href=\"#代码审查法的落地\" class=\"headerlink\" title=\"代码审查法的落地\"></a>代码审查法的落地</h2><p>可见，想要更好的落地代码审查，需要先要确立法则，你可以根据实际情况对上述法则进行借鉴、删减或补充；</p>\n<p>第二，作为技术领导应当积极布道，让开发者了解统一的代码审查法则；</p>\n<p>第三，应当把法则里的具体规则尽可能地通过流程控制、自动化检查则纳入到 Pull Request 中。</p>\n<p>另外提醒作为 Reviewer 要 Peaceful ！！！在代码审查时注意不要带有“教育”性质的去给别人提出修改建议，那样很容易适得其反。</p>\n<p>以下是一些不完全实践，供参考。</p>\n<h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><h3 id=\"规避任何不经-Review-的代码进入到主分支\"><a href=\"#规避任何不经-Review-的代码进入到主分支\" class=\"headerlink\" title=\"规避任何不经 Review 的代码进入到主分支\"></a>规避任何不经 Review 的代码进入到主分支</h3><blockquote>\n<p>以 Bitucket 为例。GitHub，GitLab 在设置上大同小异。</p>\n</blockquote>\n<ul>\n<li><p>打开分支权限设置里的选项 <code>Prevent changes without a pull request</code> 打开它。当然如果有需要可以在这个选项里添加 Exception，被添加的人可以不通过 Pull Reuqest 来提交代码。</p>\n</li>\n<li><p>在 Merge Check 里开启 <code>Minimum approvals</code> 这个选项。比如设置 Number of approvals &#x3D; 1，这样需要至少有一个 Reviewers 点击 Approve 按钮才允许 Merge。</p>\n</li>\n</ul>\n<h3 id=\"自动化检查\"><a href=\"#自动化检查\" class=\"headerlink\" title=\"自动化检查\"></a>自动化检查</h3><h3 id=\"通过CI流水线验证编译和测试\"><a href=\"#通过CI流水线验证编译和测试\" class=\"headerlink\" title=\"通过CI流水线验证编译和测试\"></a>通过CI流水线验证编译和测试</h3><ul>\n<li><p>建立自动化构建和测试 Pipeline，这样在创建 Pull Request 的时候可以自动构建、测试以及检查。Jenkins 的 Multi-branch pipeline 可以满足这个需求。</p>\n</li>\n<li><p>开启 Bitucket 的 Merge Check 里 <code>Minimum successful builds</code> 选项，验证构建&#x2F;测试结果，以防止任何没有通过构建和测试的代码可以 Merge 到主分支。</p>\n</li>\n<li><p>另外，可以通过自行编写工具来实现，或可以集成其他 CI 工具来做检查，例如：</p>\n<ul>\n<li>针对 Pull Request 的修改历史来分析提交历史并推荐 Reiewer；</li>\n<li>通过 Lint 工具来检查编码规范；</li>\n<li>通过 REST API 检查是否需要压缩 Commits 来保证清晰的提交历史；</li>\n<li>通过 SonarQube 检查 Quality Gate 等。</li>\n</ul>\n</li>\n</ul>\n<p>实现自动化检查，可以帮助 Reviewers 将审查的工作精力放在代码的具体实现上，其他的交给工具。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>代码审查做的好不好，跟一个团队有没有良好的技术氛围，或者是否存在有技术领导力，有“品位”的技术大牛也是正相关的。</p>\n<ul>\n<li>如果团队里大多数都是有“品位”的工程师，他们会以写出优秀的代码（或挑刺）乐此不疲。</li>\n<li>相反如果团队不重视规范，只追求短期的绩效达成，只会让技术债越欠越多，产品越做越烂。</li>\n</ul>\n<p>欢迎留言分享你的意见或建议。</p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"CodeReview","path":"api/tags/CodeReview.json"}]}