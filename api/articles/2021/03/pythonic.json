{"title":"你的 Python 代码够不够 Pythonic？","slug":"2021/03/pythonic","date":"2021-03-28T02:27:57.000Z","updated":"2024-02-18T07:59:34.695Z","comments":true,"path":"api/articles/2021/03/pythonic.json","excerpt":null,"covers":null,"content":"<p>Python 不必多说，它是众多编程语言中最容易学习的动态类型语言。它的跨平台、易读、易写、丰富的 Packages 等众多特性，也是众多DevOps&#x2F;测试&#x2F;开发工程师是最常用的语言之一。</p>\n<p>相信不少人用它完成了很多工作，但你是不是仅仅止步于功能的实现而忽略了去写出更加简洁，优美的 <code>Pythonic</code> 代码呢？</p>\n<p>在我最开始用 Python 时，我还不知道 <code>Pythonic</code> 这个词，直到多年前一位资深的程序员在给我培训的时候提到了项目中有一些代码不够 <code>Pythonic</code>，需要重构。根据语境，我理解他的意思：就是 Python 的代码没有按照 Python 的方式来写。</p>\n<h2 id=\"什么是-Pythonic\"><a href=\"#什么是-Pythonic\" class=\"headerlink\" title=\"什么是 Pythonic\"></a>什么是 Pythonic</h2><p>充分利用 Python 语言的特性来产生清晰、简洁和可维护的代码。<code>Pythonic</code> 的意思是指代码不仅仅是语法正确，而是遵循 Python 社区的惯例，并以其预期的方式使用该语言。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>以下是 C&#x2F;C++ 程序员的一段代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> total_sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (b &gt;= a) &#123;</span><br><span class=\"line\">    total_sum += a;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果没有学习 Python 编程模式，那么将上面的代码改用 Python 来写可能会是这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">100</span></span><br><span class=\"line\">total_sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b &gt;= a:</span><br><span class=\"line\">    total_sum += a</span><br><span class=\"line\">    a += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果用 Pythonic 的方式来写，应该是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">total_sum = <span class=\"built_in\">sum</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure>\n\n<p>再举个常见的例子，如果用 Java 可能是这样写出来一个 For 循环</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> index=<span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    items[index].performAction();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Python中，使用以下方法会更干净一些：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">    item.perform_action()</span><br></pre></td></tr></table></figure>\n\n<p>甚至是一个生成器表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(item.some_attribute <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items)</span><br></pre></td></tr></table></figure>\n\n<p>因此，从本质上讲，当有人说某件事情不符合 <code>pythonic</code> 时，他们是在说这段代码可以用一种更适合 Python 编码风格的方式来重新编写。<br>另外，去了解 Python <a href=\"https://docs.python.org/3/library/functions.html\">Built-in Functions</a>，而不是重新造轮子。</p>\n<h2 id=\"关于-Pythonic-的“官方介绍”\"><a href=\"#关于-Pythonic-的“官方介绍”\" class=\"headerlink\" title=\"关于 Pythonic 的“官方介绍”\"></a>关于 Pythonic 的“官方介绍”</h2><p>其实，Python 命令行里已经秘密“隐藏”了关于 <code>Pythonic</code> 的介绍。只要打开 Python 控制台，输入 <code>import this</code>，你就能看到：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\xshen&gt;python</span><br><span class=\"line\">Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import this</span><br><span class=\"line\">The Zen of Python, by Tim Peters</span><br><span class=\"line\"></span><br><span class=\"line\">Beautiful is better than ugly.</span><br><span class=\"line\">Explicit is better than implicit.</span><br><span class=\"line\">Simple is better than complex.</span><br><span class=\"line\">Complex is better than complicated.</span><br><span class=\"line\">Flat is better than nested.</span><br><span class=\"line\">Sparse is better than dense.</span><br><span class=\"line\">Readability counts.</span><br><span class=\"line\">Special cases aren&#x27;t special enough to break the rules.</span><br><span class=\"line\">Although practicality beats purity.</span><br><span class=\"line\">Errors should never pass silently.</span><br><span class=\"line\">Unless explicitly silenced.</span><br><span class=\"line\">In the face of ambiguity, refuse the temptation to guess.</span><br><span class=\"line\">There should be one-- and preferably only one --obvious way to do it.</span><br><span class=\"line\">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class=\"line\">Now is better than never.</span><br><span class=\"line\">Although never is often better than *right* now.</span><br><span class=\"line\">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class=\"line\">If the implementation is easy to explain, it may be a good idea.</span><br><span class=\"line\">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>直译过来是：Tim Peters 的《Python的禅意》</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">美丽的比丑陋的好。</span><br><span class=\"line\">明确的比含蓄的好。</span><br><span class=\"line\">简单的比复杂的好</span><br><span class=\"line\">复杂的比复杂的好</span><br><span class=\"line\">扁平的比嵌套的好。</span><br><span class=\"line\">稀疏比密集好。</span><br><span class=\"line\">可读性很重要。</span><br><span class=\"line\">特殊情况不特殊，不足以打破规则。</span><br><span class=\"line\">虽然实用性胜过纯粹性。</span><br><span class=\"line\">错误永远不应该默默地通过。</span><br><span class=\"line\">除非明确沉默。</span><br><span class=\"line\">在面对模棱两可的情况下，拒绝猜测的诱惑。</span><br><span class=\"line\">应该有一个--最好只有一个--明显的方法。</span><br><span class=\"line\">虽然这种方式一开始可能并不明显，除非你是荷兰人。</span><br><span class=\"line\">现在总比不做要好。</span><br><span class=\"line\">虽然从不比现在*好。</span><br><span class=\"line\">如果实现很难解释，那就是个坏主意。</span><br><span class=\"line\">如果实现很容易解释，它可能是个好主意。</span><br><span class=\"line\">命名空间是一个非常棒的想法--让我们做更多的命名空间!</span><br></pre></td></tr></table></figure>\n\n<p>关于 <code>Pythonic</code> 你 get 到了吗？</p>\n","more":"<p>Python 不必多说，它是众多编程语言中最容易学习的动态类型语言。它的跨平台、易读、易写、丰富的 Packages 等众多特性，也是众多DevOps&#x2F;测试&#x2F;开发工程师是最常用的语言之一。</p>\n<p>相信不少人用它完成了很多工作，但你是不是仅仅止步于功能的实现而忽略了去写出更加简洁，优美的 <code>Pythonic</code> 代码呢？</p>\n<p>在我最开始用 Python 时，我还不知道 <code>Pythonic</code> 这个词，直到多年前一位资深的程序员在给我培训的时候提到了项目中有一些代码不够 <code>Pythonic</code>，需要重构。根据语境，我理解他的意思：就是 Python 的代码没有按照 Python 的方式来写。</p>\n<h2 id=\"什么是-Pythonic\"><a href=\"#什么是-Pythonic\" class=\"headerlink\" title=\"什么是 Pythonic\"></a>什么是 Pythonic</h2><p>充分利用 Python 语言的特性来产生清晰、简洁和可维护的代码。<code>Pythonic</code> 的意思是指代码不仅仅是语法正确，而是遵循 Python 社区的惯例，并以其预期的方式使用该语言。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>以下是 C&#x2F;C++ 程序员的一段代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> b = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> total_sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (b &gt;= a) &#123;</span><br><span class=\"line\">    total_sum += a;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果没有学习 Python 编程模式，那么将上面的代码改用 Python 来写可能会是这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">100</span></span><br><span class=\"line\">total_sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b &gt;= a:</span><br><span class=\"line\">    total_sum += a</span><br><span class=\"line\">    a += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>如果用 Pythonic 的方式来写，应该是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">total_sum = <span class=\"built_in\">sum</span>(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">101</span>))</span><br></pre></td></tr></table></figure>\n\n<p>再举个常见的例子，如果用 Java 可能是这样写出来一个 For 循环</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> index=<span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    items[index].performAction();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Python中，使用以下方法会更干净一些：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">    item.perform_action()</span><br></pre></td></tr></table></figure>\n\n<p>甚至是一个生成器表达式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(item.some_attribute <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items)</span><br></pre></td></tr></table></figure>\n\n<p>因此，从本质上讲，当有人说某件事情不符合 <code>pythonic</code> 时，他们是在说这段代码可以用一种更适合 Python 编码风格的方式来重新编写。<br>另外，去了解 Python <a href=\"https://docs.python.org/3/library/functions.html\">Built-in Functions</a>，而不是重新造轮子。</p>\n<h2 id=\"关于-Pythonic-的“官方介绍”\"><a href=\"#关于-Pythonic-的“官方介绍”\" class=\"headerlink\" title=\"关于 Pythonic 的“官方介绍”\"></a>关于 Pythonic 的“官方介绍”</h2><p>其实，Python 命令行里已经秘密“隐藏”了关于 <code>Pythonic</code> 的介绍。只要打开 Python 控制台，输入 <code>import this</code>，你就能看到：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\xshen&gt;python</span><br><span class=\"line\">Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\">&gt;&gt;&gt; import this</span><br><span class=\"line\">The Zen of Python, by Tim Peters</span><br><span class=\"line\"></span><br><span class=\"line\">Beautiful is better than ugly.</span><br><span class=\"line\">Explicit is better than implicit.</span><br><span class=\"line\">Simple is better than complex.</span><br><span class=\"line\">Complex is better than complicated.</span><br><span class=\"line\">Flat is better than nested.</span><br><span class=\"line\">Sparse is better than dense.</span><br><span class=\"line\">Readability counts.</span><br><span class=\"line\">Special cases aren&#x27;t special enough to break the rules.</span><br><span class=\"line\">Although practicality beats purity.</span><br><span class=\"line\">Errors should never pass silently.</span><br><span class=\"line\">Unless explicitly silenced.</span><br><span class=\"line\">In the face of ambiguity, refuse the temptation to guess.</span><br><span class=\"line\">There should be one-- and preferably only one --obvious way to do it.</span><br><span class=\"line\">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class=\"line\">Now is better than never.</span><br><span class=\"line\">Although never is often better than *right* now.</span><br><span class=\"line\">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class=\"line\">If the implementation is easy to explain, it may be a good idea.</span><br><span class=\"line\">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>直译过来是：Tim Peters 的《Python的禅意》</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">美丽的比丑陋的好。</span><br><span class=\"line\">明确的比含蓄的好。</span><br><span class=\"line\">简单的比复杂的好</span><br><span class=\"line\">复杂的比复杂的好</span><br><span class=\"line\">扁平的比嵌套的好。</span><br><span class=\"line\">稀疏比密集好。</span><br><span class=\"line\">可读性很重要。</span><br><span class=\"line\">特殊情况不特殊，不足以打破规则。</span><br><span class=\"line\">虽然实用性胜过纯粹性。</span><br><span class=\"line\">错误永远不应该默默地通过。</span><br><span class=\"line\">除非明确沉默。</span><br><span class=\"line\">在面对模棱两可的情况下，拒绝猜测的诱惑。</span><br><span class=\"line\">应该有一个--最好只有一个--明显的方法。</span><br><span class=\"line\">虽然这种方式一开始可能并不明显，除非你是荷兰人。</span><br><span class=\"line\">现在总比不做要好。</span><br><span class=\"line\">虽然从不比现在*好。</span><br><span class=\"line\">如果实现很难解释，那就是个坏主意。</span><br><span class=\"line\">如果实现很容易解释，它可能是个好主意。</span><br><span class=\"line\">命名空间是一个非常棒的想法--让我们做更多的命名空间!</span><br></pre></td></tr></table></figure>\n\n<p>关于 <code>Pythonic</code> 你 get 到了吗？</p>\n","categories":[{"name":"Language","path":"api/categories/Language.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Pythonic","path":"api/tags/Pythonic.json"}]}