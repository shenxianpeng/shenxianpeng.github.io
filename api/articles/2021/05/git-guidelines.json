{"title":"Git 常见设置指北","slug":"2021/05/git-guidelines","date":"2021-05-13T16:19:15.000Z","updated":"2023-06-11T13:29:40.122Z","comments":true,"path":"api/articles/2021/05/git-guidelines.json","excerpt":null,"covers":["/2021/05/git-guidelines/avatar.png"],"content":"<p>在使用 Git 提交代码之前，建议做以下这些设置。</p>\n<p>叫指南有点夸张，因为它在有些情况下下不适用，比如你已经有了 <code>.gitattributes</code> 或 <code>.editorconfig</code> 等文件，那么有些设置就不用做了。</p>\n<p>因此暂且叫他指北吧，它通常情况下还是很有用的。</p>\n<p>废话不多说，看看都需要哪些设置吧。</p>\n<h2 id=\"1-配置-name-和-email\"><a href=\"#1-配置-name-和-email\" class=\"headerlink\" title=\"1. 配置 name 和 email\"></a>1. 配置 name 和 email</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意，你需要将下面示例中我的 name 和 email 换成你自己的</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;shenxianpeng&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;xianpeng.shen@gmail.com&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于，我还推荐你设置头像，这样方便同事间的快速识别。</p>\n<p>当你不设置头像的时候，只有把鼠标放到头像上才知道 Pull Request 的 Reviewers 是谁（来自于Bitubkcet）。</p>\n<p><img src=\"/2021/05/git-guidelines/avatar.png\"></p>\n<h2 id=\"2-设置-core-autocrlf-x3D-false\"><a href=\"#2-设置-core-autocrlf-x3D-false\" class=\"headerlink\" title=\"2. 设置 core.autocrlf&#x3D;false\"></a>2. 设置 core.autocrlf&#x3D;false</h2><p>为了防止 CRLF(windows) 和 LF(UNIX&#x2F;Linux&#x2F;Mac) 的转换问题。为了避免在使用 Git 提交代码时出现历史被掩盖的问题，强烈建议每个使用 Git 的人执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global core.autocrlf <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 检查并查看是否输出 &quot;core.autocrlf=false&quot;，这意味着命令设置成功。</span></span><br><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n\n<p>如果你的项目底下已经有了 <code>.gitattributes</code> 或 <code>.editorconfig</code> 文件，通常这些文件里面都有放置 CRLF 和 LF 的转换问题的设置项。</p>\n<p>这时候你就不必特意执行命令 <code>git config --global core.autocrlf false</code></p>\n<h2 id=\"3-编写有规范的提交\"><a href=\"#3-编写有规范的提交\" class=\"headerlink\" title=\"3. 编写有规范的提交\"></a>3. 编写有规范的提交</h2><p>我在之前的文章里分享过关于如何设置提交信息规范，请参看<a href=\"https://shenxianpeng.github.io/2020/09/commit-messages-specification/\">《Git提交信息和分支创建规范》</a>。</p>\n<h2 id=\"4-提交历史的压缩\"><a href=\"#4-提交历史的压缩\" class=\"headerlink\" title=\"4. 提交历史的压缩\"></a>4. 提交历史的压缩</h2><p>比如你修改一个 bug，假设你通过 3 次提交到你的个人分支才把它改好。这时候你提 Pull Request 就会显示有三个提交。</p>\n<p>如果提交历史不进行压缩，这个 PR 被合并到主分支后，以后别人看到你这个 bug 的修复就是去这三个 commits 里去一一查看，进行对比，才能知道到底修改了什么。</p>\n<p>压缩提交历史就是将三次提交压缩成一次提交。</p>\n<p>可以通过 git rebase 命令进行 commit 的压缩，比如将最近三次提交压缩成一次可以执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-删除已经-merge-的分支\"><a href=\"#5-删除已经-merge-的分支\" class=\"headerlink\" title=\"5. 删除已经 merge 的分支\"></a>5. 删除已经 merge 的分支</h2><p>有些 SCM，比如 Bitbucket 不支持默认勾选 <code>Delete source branch after merging</code>，这个问题终于在 Bitbucket 7.3 版本修复了。详见 <a href=\"https://jira.atlassian.com/browse/BSERV-9254\">BSERV-9254</a> 和 <a href=\"https://jira.atlassian.com/browse/BSERV-3272\">BSERV-3272</a> （2013年创建的）。</p>\n<p>注意在合并代码时勾选删除源分支这一选项，否则会造成大量的开发分支留在 Git 仓库下。</p>\n<hr>\n<p>如果还需要哪些设置这里没有提到的，欢迎补充。</p>\n","more":"<p>在使用 Git 提交代码之前，建议做以下这些设置。</p>\n<p>叫指南有点夸张，因为它在有些情况下下不适用，比如你已经有了 <code>.gitattributes</code> 或 <code>.editorconfig</code> 等文件，那么有些设置就不用做了。</p>\n<p>因此暂且叫他指北吧，它通常情况下还是很有用的。</p>\n<p>废话不多说，看看都需要哪些设置吧。</p>\n<h2 id=\"1-配置-name-和-email\"><a href=\"#1-配置-name-和-email\" class=\"headerlink\" title=\"1. 配置 name 和 email\"></a>1. 配置 name 和 email</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意，你需要将下面示例中我的 name 和 email 换成你自己的</span></span><br><span class=\"line\">$ git config --global user.name <span class=\"string\">&quot;shenxianpeng&quot;</span></span><br><span class=\"line\">$ git config --global user.email <span class=\"string\">&quot;xianpeng.shen@gmail.com&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对于，我还推荐你设置头像，这样方便同事间的快速识别。</p>\n<p>当你不设置头像的时候，只有把鼠标放到头像上才知道 Pull Request 的 Reviewers 是谁（来自于Bitubkcet）。</p>\n<p><img src=\"/2021/05/git-guidelines/avatar.png\"></p>\n<h2 id=\"2-设置-core-autocrlf-x3D-false\"><a href=\"#2-设置-core-autocrlf-x3D-false\" class=\"headerlink\" title=\"2. 设置 core.autocrlf&#x3D;false\"></a>2. 设置 core.autocrlf&#x3D;false</h2><p>为了防止 CRLF(windows) 和 LF(UNIX&#x2F;Linux&#x2F;Mac) 的转换问题。为了避免在使用 Git 提交代码时出现历史被掩盖的问题，强烈建议每个使用 Git 的人执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global core.autocrlf <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 检查并查看是否输出 &quot;core.autocrlf=false&quot;，这意味着命令设置成功。</span></span><br><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n\n<p>如果你的项目底下已经有了 <code>.gitattributes</code> 或 <code>.editorconfig</code> 文件，通常这些文件里面都有放置 CRLF 和 LF 的转换问题的设置项。</p>\n<p>这时候你就不必特意执行命令 <code>git config --global core.autocrlf false</code></p>\n<h2 id=\"3-编写有规范的提交\"><a href=\"#3-编写有规范的提交\" class=\"headerlink\" title=\"3. 编写有规范的提交\"></a>3. 编写有规范的提交</h2><p>我在之前的文章里分享过关于如何设置提交信息规范，请参看<a href=\"https://shenxianpeng.github.io/2020/09/commit-messages-specification/\">《Git提交信息和分支创建规范》</a>。</p>\n<h2 id=\"4-提交历史的压缩\"><a href=\"#4-提交历史的压缩\" class=\"headerlink\" title=\"4. 提交历史的压缩\"></a>4. 提交历史的压缩</h2><p>比如你修改一个 bug，假设你通过 3 次提交到你的个人分支才把它改好。这时候你提 Pull Request 就会显示有三个提交。</p>\n<p>如果提交历史不进行压缩，这个 PR 被合并到主分支后，以后别人看到你这个 bug 的修复就是去这三个 commits 里去一一查看，进行对比，才能知道到底修改了什么。</p>\n<p>压缩提交历史就是将三次提交压缩成一次提交。</p>\n<p>可以通过 git rebase 命令进行 commit 的压缩，比如将最近三次提交压缩成一次可以执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-删除已经-merge-的分支\"><a href=\"#5-删除已经-merge-的分支\" class=\"headerlink\" title=\"5. 删除已经 merge 的分支\"></a>5. 删除已经 merge 的分支</h2><p>有些 SCM，比如 Bitbucket 不支持默认勾选 <code>Delete source branch after merging</code>，这个问题终于在 Bitbucket 7.3 版本修复了。详见 <a href=\"https://jira.atlassian.com/browse/BSERV-9254\">BSERV-9254</a> 和 <a href=\"https://jira.atlassian.com/browse/BSERV-3272\">BSERV-3272</a> （2013年创建的）。</p>\n<p>注意在合并代码时勾选删除源分支这一选项，否则会造成大量的开发分支留在 Git 仓库下。</p>\n<hr>\n<p>如果还需要哪些设置这里没有提到的，欢迎补充。</p>\n","categories":[{"name":"DevOps","path":"api/categories/DevOps.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]}