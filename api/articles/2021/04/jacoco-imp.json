{"title":"JaCoCo 代码覆盖率实践分享","slug":"2021/04/jacoco-imp","date":"2021-04-06T11:18:33.000Z","updated":"2023-12-29T11:10:25.704Z","comments":true,"path":"api/articles/2021/04/jacoco-imp.json","excerpt":"本文适用的是 Gradle 来构建和适用 JaCoCo。分别介绍了 build.gradle 的文件配置，执行测试和生成报告，报告参数说明，以及如何忽略指定的包或类从而影响测试覆盖率的结果。build.gradle 文件配置比如使用 gradle 来管理的项目可以在 build.gradle 里添加如下代码plugins &#123;<br>    id &#x27;jacoco&#x27;<br>&#125;<br><br>jacoco &#123;<br>    toolVersion = &quot;0.8.5&quot;<br>&#125;<br><br>test &#123;<br>    useJUnitPlatform()<br>    exclude &#x27;**/**IgnoreTest.class&#x27;  // 如果有 test case 不通过，如有必要可以通过这样忽略掉<br>    finalizedBy jacocoTestReport       // report is always generated after tests run<br>&#125;<br><br>jacocoTestReport &#123;<br>    dependsOn test // tests are required to run before generating the report<br>    reports &#123;<br>        xml.enabled true<br>        csv.enabled false<br>        html.destination file(&quot;$&#123;buildDir&#125;/reports/jacoco&quot;)<br>    &#125;<br>&#125;<br>执行测试，生成代码覆盖率报告然后执行 gradle test 就可以了。之后可以可以在 build\\reports\\jacoco 目录下找到报告了。 [Figure] 报告参数说明","covers":["/2021/04/jacoco-imp/reports.png","/2021/04/jacoco-imp/index.png"],"content":"<p>本文适用的是 Gradle 来构建和适用 JaCoCo。</p>\n<p>分别介绍了 <code>build.gradle</code> 的文件配置，执行测试和生成报告，报告参数说明，以及如何忽略指定的包或类从而影响测试覆盖率的结果。</p>\n<h2 id=\"build-gradle-文件配置\"><a href=\"#build-gradle-文件配置\" class=\"headerlink\" title=\"build.gradle 文件配置\"></a>build.gradle 文件配置</h2><p>比如使用 gradle 来管理的项目可以在 <code>build.gradle</code> 里添加如下代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&#x27;jacoco&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jacoco &#123;</span><br><span class=\"line\">    toolVersion = <span class=\"string\">&quot;0.8.5&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test &#123;</span><br><span class=\"line\">    useJUnitPlatform()</span><br><span class=\"line\">    exclude <span class=\"string\">&#x27;**/**IgnoreTest.class&#x27;</span>  <span class=\"comment\">// 如果有 test case 不通过，如有必要可以通过这样忽略掉</span></span><br><span class=\"line\">    finalizedBy jacocoTestReport       <span class=\"comment\">// report is always generated after tests run</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">    dependsOn test <span class=\"comment\">// tests are required to run before generating the report</span></span><br><span class=\"line\">    reports &#123;</span><br><span class=\"line\">        xml.enabled <span class=\"literal\">true</span></span><br><span class=\"line\">        csv.enabled <span class=\"literal\">false</span></span><br><span class=\"line\">        html.destination <span class=\"title function_\">file</span><span class=\"params\">(<span class=\"string\">&quot;$&#123;buildDir&#125;/reports/jacoco&quot;</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行测试，生成代码覆盖率报告\"><a href=\"#执行测试，生成代码覆盖率报告\" class=\"headerlink\" title=\"执行测试，生成代码覆盖率报告\"></a>执行测试，生成代码覆盖率报告</h2><p>然后执行 <code>gradle test</code> 就可以了。之后可以可以在 <code>build\\reports\\jacoco</code> 目录下找到报告了。</p>\n<p><img src=\"/2021/04/jacoco-imp/reports.png\" alt=\"JaCoCo报告\"></p>\n<p>重点是如何分析报告。打开 index.html，报告显示如下：</p>\n<p><img src=\"/2021/04/jacoco-imp/index.png\" alt=\"JaCoCo报告首页\"></p>\n<h2 id=\"报告参数说明\"><a href=\"#报告参数说明\" class=\"headerlink\" title=\"报告参数说明\"></a>报告参数说明</h2><span id=\"more\"></span>\n\n<h3 id=\"Coverage-Counters（覆盖计数器）\"><a href=\"#Coverage-Counters（覆盖计数器）\" class=\"headerlink\" title=\"Coverage Counters（覆盖计数器）\"></a>Coverage Counters（覆盖计数器）</h3><p>JaCoCo 使用一组不同的计数器来计算覆盖率指标，所有这些计数器都来自于 Java 类文件中包含的信息，这些信息基本上是 Java 字节码指令和嵌入类文件中的调试信息。这种方法可以在没有源代码的情况下，对应用程序进行有效的即时检测和分析。在大多数情况下，收集到的信息可以映射到源代码，并可视化到行级粒度。</p>\n<p>这种方法也有一定的局限性，就是类文件必须与调试信息一起编译，以计算行级覆盖率并提供源码高亮。但不是所有的 Java 语言结构都可以直接编译成相应的字节码。在这种情况下，Java 编译器会创建所谓的合成代码，有时会导致意外的代码覆盖率结果。</p>\n<h3 id=\"Instructions-C0-Coverage-指令（C0覆盖率）\"><a href=\"#Instructions-C0-Coverage-指令（C0覆盖率）\" class=\"headerlink\" title=\"Instructions (C0 Coverage) - 指令（C0覆盖率）\"></a>Instructions (C0 Coverage) - 指令（C0覆盖率）</h3><p>最小的单位 JaCoCo 计数是单个 Java 字节码指令，指令覆盖率提供了关于被执行或遗漏的代码量的信息，这个指标完全独立于源码格式化，即使在类文件中没有调试信息的情况下也始终可用。</p>\n<h3 id=\"Branches-C1-Coverage-分支（C1覆盖率）\"><a href=\"#Branches-C1-Coverage-分支（C1覆盖率）\" class=\"headerlink\" title=\"Branches (C1 Coverage) - 分支（C1覆盖率）\"></a>Branches (C1 Coverage) - 分支（C1覆盖率）</h3><p>JaCoCo 还计算所有 if 和 switch 语句的分支覆盖率，这个指标计算一个方法中此类分支的总数，并确定执行或遗漏的分支数量。即使在类文件中没有调试信息的情况下，分支覆盖率总是可用的。但请注意在这个计数器定义的上下文中<strong>异常处理不被认为是分支。</strong></p>\n<p>如果类文件没有编译调试信息，决策点可以被映射到源行并相应地高亮显示。</p>\n<ul>\n<li>没有覆盖。行中没有分支被执行（红菱形</li>\n<li>部分覆盖。仅执行了该线的部分分支（黄钻</li>\n<li>全覆盖。线路中的所有分支都已执行（绿色菱形）</li>\n</ul>\n<h3 id=\"Cyclomatic-Complexity-环形复杂度\"><a href=\"#Cyclomatic-Complexity-环形复杂度\" class=\"headerlink\" title=\"Cyclomatic Complexity - 环形复杂度\"></a>Cyclomatic Complexity - 环形复杂度</h3><p>JaCoCo 还计算了每个非抽象方法的循环复杂度并总结了类、包和组的复杂度。循环复杂度是指在（线性）组合中，能够产生通过一个方法的所有可能路径的最小路径数。<br>因此复杂度值可以作为完全覆盖某个软件的单元测试用例数量的指示，即使在类文件中没有调试信息的情况下，也可以计算出复杂度数字。</p>\n<p>循环复杂度v(G)的正式定义是基于将方法的控制流图表示为一个有向图。</p>\n<p>v(G) &#x3D; E - N + 2</p>\n<p>其中E为边数，N为节点数。JaCoCo根据分支数(B)和决策点数(D)计算方法的循环复杂度，其等价公式如下。</p>\n<p>v(G) &#x3D; B - D + 1</p>\n<p>根据每个分支的覆盖状态，JaCoCo还计算每个方法的覆盖和遗漏复杂度。遗漏的复杂度再次表明了完全覆盖一个模块所缺少的测试用例数量。请注意，由于JaCoCo不考虑异常处理作为分支，尝试&#x2F;捕获块也不会增加复杂性。</p>\n<h3 id=\"Lines-行\"><a href=\"#Lines-行\" class=\"headerlink\" title=\"Lines - 行\"></a>Lines - 行</h3><p>对于所有已经编译过调试信息的类文件，可以计算出各个行的覆盖率信息。当至少有一条分配给该行的指令被执行时，就认为该源行已被执行。</p>\n<p>由于单行通常会编译成多条字节码指令，源码高亮显示每行包含源码的三种不同状态。</p>\n<ul>\n<li>No coverage: 该行没有指令被执行（红色背景）。</li>\n<li>部分覆盖。该行中只有部分指令被执行（黄色背景）。</li>\n<li>全覆盖。该行的所有指令都已执行（绿色背景）。</li>\n</ul>\n<p>根据源码的格式，一个源码的一行可能涉及多个方法或多个类。因此，方法的行数不能简单地相加来获得包含类的总行数。同样的道理也适用于一个源文件中多个类的行数。JaCoCo根据实际的源代码行数来计算类和源代码文件的行数。</p>\n<h3 id=\"Method-方法\"><a href=\"#Method-方法\" class=\"headerlink\" title=\"Method - 方法\"></a>Method - 方法</h3><p>每个非抽象方法至少包含一条指令。当至少有一条指令被执行时，一个方法就被认为是被执行的。由于 JaCoCo 工作在字节代码层面，构造函数和静态初始化器也被算作方法，其中一些方法在 Java 源代码中可能没有直接的对应关系，比如隐式的，因此生成了默认的构造函数或常量的初始化器。</p>\n<h3 id=\"Classes-类\"><a href=\"#Classes-类\" class=\"headerlink\" title=\"Classes - 类\"></a>Classes - 类</h3><p>当一个类中至少有一个方法被执行时，该类被认为是被执行的。请注意，JaCoCo 认为构造函数和静态初始化器都是方法。由于 Java 接口类型可能包含静态初始化器，这种接口也被视为可执行类。</p>\n<p><a href=\"https://www.eclemma.org/jacoco/trunk/doc/counters.html\">覆盖率的计算原文</a></p>\n<h2 id=\"从代码覆盖率报告中忽略指定的包或代码\"><a href=\"#从代码覆盖率报告中忽略指定的包或代码\" class=\"headerlink\" title=\"从代码覆盖率报告中忽略指定的包或代码\"></a>从代码覆盖率报告中忽略指定的包或代码</h2><p>对于有些包和代码可能不属于你的项目，但也被统计在内，可以通修改在 <code>build.gradle</code> 将指定的代码或是包从 JaCoCo 报告中忽略掉。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">    dependsOn test <span class=\"comment\">// tests are required to run before generating the report</span></span><br><span class=\"line\">    reports &#123;</span><br><span class=\"line\">        xml.enabled <span class=\"literal\">true</span></span><br><span class=\"line\">        csv.enabled <span class=\"literal\">false</span></span><br><span class=\"line\">        html.destination <span class=\"title function_\">file</span><span class=\"params\">(<span class=\"string\">&quot;$&#123;buildDir&#125;/reports/jacoco&quot;</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    afterEvaluate &#123;</span><br><span class=\"line\">        classDirectories.setFrom(files(classDirectories.files.collect &#123;</span><br><span class=\"line\">            fileTree(dir: it, exclude: [</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;com/vmware/antlr4c3/**&#x27;</span>])</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;com/vmware/antlr4c3/**&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;com/basic/parser/BasicParser*&#x27;</span></span><br><span class=\"line\">            ])</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","more":"<h3 id=\"Coverage-Counters（覆盖计数器）\"><a href=\"#Coverage-Counters（覆盖计数器）\" class=\"headerlink\" title=\"Coverage Counters（覆盖计数器）\"></a>Coverage Counters（覆盖计数器）</h3><p>JaCoCo 使用一组不同的计数器来计算覆盖率指标，所有这些计数器都来自于 Java 类文件中包含的信息，这些信息基本上是 Java 字节码指令和嵌入类文件中的调试信息。这种方法可以在没有源代码的情况下，对应用程序进行有效的即时检测和分析。在大多数情况下，收集到的信息可以映射到源代码，并可视化到行级粒度。</p>\n<p>这种方法也有一定的局限性，就是类文件必须与调试信息一起编译，以计算行级覆盖率并提供源码高亮。但不是所有的 Java 语言结构都可以直接编译成相应的字节码。在这种情况下，Java 编译器会创建所谓的合成代码，有时会导致意外的代码覆盖率结果。</p>\n<h3 id=\"Instructions-C0-Coverage-指令（C0覆盖率）\"><a href=\"#Instructions-C0-Coverage-指令（C0覆盖率）\" class=\"headerlink\" title=\"Instructions (C0 Coverage) - 指令（C0覆盖率）\"></a>Instructions (C0 Coverage) - 指令（C0覆盖率）</h3><p>最小的单位 JaCoCo 计数是单个 Java 字节码指令，指令覆盖率提供了关于被执行或遗漏的代码量的信息，这个指标完全独立于源码格式化，即使在类文件中没有调试信息的情况下也始终可用。</p>\n<h3 id=\"Branches-C1-Coverage-分支（C1覆盖率）\"><a href=\"#Branches-C1-Coverage-分支（C1覆盖率）\" class=\"headerlink\" title=\"Branches (C1 Coverage) - 分支（C1覆盖率）\"></a>Branches (C1 Coverage) - 分支（C1覆盖率）</h3><p>JaCoCo 还计算所有 if 和 switch 语句的分支覆盖率，这个指标计算一个方法中此类分支的总数，并确定执行或遗漏的分支数量。即使在类文件中没有调试信息的情况下，分支覆盖率总是可用的。但请注意在这个计数器定义的上下文中<strong>异常处理不被认为是分支。</strong></p>\n<p>如果类文件没有编译调试信息，决策点可以被映射到源行并相应地高亮显示。</p>\n<ul>\n<li>没有覆盖。行中没有分支被执行（红菱形</li>\n<li>部分覆盖。仅执行了该线的部分分支（黄钻</li>\n<li>全覆盖。线路中的所有分支都已执行（绿色菱形）</li>\n</ul>\n<h3 id=\"Cyclomatic-Complexity-环形复杂度\"><a href=\"#Cyclomatic-Complexity-环形复杂度\" class=\"headerlink\" title=\"Cyclomatic Complexity - 环形复杂度\"></a>Cyclomatic Complexity - 环形复杂度</h3><p>JaCoCo 还计算了每个非抽象方法的循环复杂度并总结了类、包和组的复杂度。循环复杂度是指在（线性）组合中，能够产生通过一个方法的所有可能路径的最小路径数。<br>因此复杂度值可以作为完全覆盖某个软件的单元测试用例数量的指示，即使在类文件中没有调试信息的情况下，也可以计算出复杂度数字。</p>\n<p>循环复杂度v(G)的正式定义是基于将方法的控制流图表示为一个有向图。</p>\n<p>v(G) &#x3D; E - N + 2</p>\n<p>其中E为边数，N为节点数。JaCoCo根据分支数(B)和决策点数(D)计算方法的循环复杂度，其等价公式如下。</p>\n<p>v(G) &#x3D; B - D + 1</p>\n<p>根据每个分支的覆盖状态，JaCoCo还计算每个方法的覆盖和遗漏复杂度。遗漏的复杂度再次表明了完全覆盖一个模块所缺少的测试用例数量。请注意，由于JaCoCo不考虑异常处理作为分支，尝试&#x2F;捕获块也不会增加复杂性。</p>\n<h3 id=\"Lines-行\"><a href=\"#Lines-行\" class=\"headerlink\" title=\"Lines - 行\"></a>Lines - 行</h3><p>对于所有已经编译过调试信息的类文件，可以计算出各个行的覆盖率信息。当至少有一条分配给该行的指令被执行时，就认为该源行已被执行。</p>\n<p>由于单行通常会编译成多条字节码指令，源码高亮显示每行包含源码的三种不同状态。</p>\n<ul>\n<li>No coverage: 该行没有指令被执行（红色背景）。</li>\n<li>部分覆盖。该行中只有部分指令被执行（黄色背景）。</li>\n<li>全覆盖。该行的所有指令都已执行（绿色背景）。</li>\n</ul>\n<p>根据源码的格式，一个源码的一行可能涉及多个方法或多个类。因此，方法的行数不能简单地相加来获得包含类的总行数。同样的道理也适用于一个源文件中多个类的行数。JaCoCo根据实际的源代码行数来计算类和源代码文件的行数。</p>\n<h3 id=\"Method-方法\"><a href=\"#Method-方法\" class=\"headerlink\" title=\"Method - 方法\"></a>Method - 方法</h3><p>每个非抽象方法至少包含一条指令。当至少有一条指令被执行时，一个方法就被认为是被执行的。由于 JaCoCo 工作在字节代码层面，构造函数和静态初始化器也被算作方法，其中一些方法在 Java 源代码中可能没有直接的对应关系，比如隐式的，因此生成了默认的构造函数或常量的初始化器。</p>\n<h3 id=\"Classes-类\"><a href=\"#Classes-类\" class=\"headerlink\" title=\"Classes - 类\"></a>Classes - 类</h3><p>当一个类中至少有一个方法被执行时，该类被认为是被执行的。请注意，JaCoCo 认为构造函数和静态初始化器都是方法。由于 Java 接口类型可能包含静态初始化器，这种接口也被视为可执行类。</p>\n<p><a href=\"https://www.eclemma.org/jacoco/trunk/doc/counters.html\">覆盖率的计算原文</a></p>\n<h2 id=\"从代码覆盖率报告中忽略指定的包或代码\"><a href=\"#从代码覆盖率报告中忽略指定的包或代码\" class=\"headerlink\" title=\"从代码覆盖率报告中忽略指定的包或代码\"></a>从代码覆盖率报告中忽略指定的包或代码</h2><p>对于有些包和代码可能不属于你的项目，但也被统计在内，可以通修改在 <code>build.gradle</code> 将指定的代码或是包从 JaCoCo 报告中忽略掉。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">jacocoTestReport &#123;</span><br><span class=\"line\">    dependsOn test <span class=\"comment\">// tests are required to run before generating the report</span></span><br><span class=\"line\">    reports &#123;</span><br><span class=\"line\">        xml.enabled <span class=\"literal\">true</span></span><br><span class=\"line\">        csv.enabled <span class=\"literal\">false</span></span><br><span class=\"line\">        html.destination <span class=\"title function_\">file</span><span class=\"params\">(<span class=\"string\">&quot;$&#123;buildDir&#125;/reports/jacoco&quot;</span>)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    afterEvaluate &#123;</span><br><span class=\"line\">        classDirectories.setFrom(files(classDirectories.files.collect &#123;</span><br><span class=\"line\">            fileTree(dir: it, exclude: [</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;com/vmware/antlr4c3/**&#x27;</span>])</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;com/vmware/antlr4c3/**&#x27;</span>,</span><br><span class=\"line\">            <span class=\"string\">&#x27;com/basic/parser/BasicParser*&#x27;</span></span><br><span class=\"line\">            ])</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"Coverage","path":"api/categories/Coverage.json"}],"tags":[{"name":"Coverage","path":"api/tags/Coverage.json"},{"name":"JaCoCo","path":"api/tags/JaCoCo.json"},{"name":"Gradle","path":"api/tags/Gradle.json"}]}