{"title":"Gcov 一个免费开源的 C/C++ 代码覆盖率工具以及生成报告","slug":"2021/06/gcov","date":"2021-06-18T08:28:11.000Z","updated":"2021-11-22T13:47:59.143Z","comments":true,"path":"api/articles/2021/06/gcov.json","excerpt":null,"covers":["/2021/06/gcov/lcov.png","/2021/06/gcov/lcov-files.png","/2021/06/gcov/lcov-main.c.png","/2021/06/gcov/lcov-foo.c.png","/2021/06/gcov/gcovr.png","/2021/06/gcov/gcovr-main.c.png","/2021/06/gcov/gcovr-foo.c.png"],"content":"<p>注：这篇文章是边调查边写的，可能存在一些示例、命令输出、以及截图对应不上的情况，因此在调查完成后，我又重新编写了整理的示例代码，并放在 GitHub 上，这是 README: <a href=\"https://github.com/shenxianpeng/gcov-example/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">https://github.com/shenxianpeng/gcov-example/blob/master/README-CN.md</a></p>\n<p>因为这篇文章中有用到 gcovr （上面的链接里没有），因此保留这篇就不删除了。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在很早之前我做过一次 C/C++ 项目的代码覆盖率工具的调查，是一款叫 <a href=\"https://shenxianpeng.github.io/2019/05/squishcoco/\">Squish Coco</a> 的付费工具，当时由于有一些问题没有解决，就搁置了并没有最终购买。最近又开始了这项工作，也有购买工具的预算，但作为个人还是希望有好用的开源软件可以来做这件事，也能为产品减少每年几千刀的 License 的支出。</p>\n<p>本次调查的是 <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Intro\" target=\"_blank\" rel=\"noopener\">Gcov</a>，一个可以与 GCC 结合使用的工具，测试程序中的代码覆盖率。</p>\n<p>本篇文章通过一个最简单的示例来了解 Gcov 是如何工作的，以及通过 gcovr 来生成 Code Coverage 报告。</p>\n<blockquote>\n<p>关于 Squish Coco 与 Gcov/LCOV 的对比，froglogic 官方有一个说明：<a href=\"https://www.froglogic.com/coco/faq/\" target=\"_blank\" rel=\"noopener\">https://www.froglogic.com/coco/faq/</a></p>\n</blockquote>\n<h2 id=\"Gcov-演示示例\"><a href=\"#Gcov-演示示例\" class=\"headerlink\" title=\"Gcov 演示示例\"></a>Gcov 演示示例</h2><ol>\n<li>创建 C 程序</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"foo.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Start testing shared library in main.c ...\\n\"</span>);</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>);</span><br><span class=\"line\">    foo(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foo.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Calling foo() shared library\\n\\n\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Num is not equals to 1...\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foo.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> foo_h__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> foo_h__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">// foo_h__</span></span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后使用 gcc 编译的时候加入 <code>-fprofile-arcs</code> 和 <code>-ftest-coverage</code> 这两个 flags 进行编译</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -shared -fPIC -fprofile-arcs -ftest-coverage -o libfoo.so foo.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /workspace/code/gcov/test 是我的代码路径</span></span><br><span class=\"line\">gcc -lgcov -L/workspace/code/gcov/<span class=\"built_in\">test</span> -o <span class=\"built_in\">test</span> main.c -lfoo</span><br></pre></td></tr></table></figure>\n\n<p>这两个 flags 会让 GCC 在编译出来的二进制文件里加入 instrumentation，也就是我们俗称的插桩，它是用来收集执行的数据。</p>\n<p>注：.gcno 注释文件是在用 GCC <code>-ftest-coverage</code> 选项编译源文件时生成的，它包含了重建基本块图和给块分配源行号的信息。</p>\n<blockquote>\n<p>当前的 GCC 版本是：gcc version 8.3.1 20191121 (Red Hat 8.3.1-5) (GCC)</p>\n</blockquote>\n<ol start=\"3\">\n<li>运行可执行文件 <code>test</code> 进行测试</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>当一个包含用 GCC <code>-fprofile-arcs</code> 选项编译的对象文件的程序被执行时，会产生 .gcda 计数数据文件，也就是这里的 <code>test.gcda</code> 文件。</p>\n<p>每个用该选项编译的对象文件都会创建一个单独的 .gcda 文件，它包含弧线过渡计数、数值剖面计数和一些摘要信息。</p>\n<ol start=\"4\">\n<li>执行 <code>gcov test.c</code> 生成报告文件 <code>test.c.gcov</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[xshen@dendevblr01 gcov]$ gcov test.c</span><br><span class=\"line\">File <span class=\"string\">'test.c'</span></span><br><span class=\"line\">Lines executed:100.00% of 3</span><br><span class=\"line\">Creating <span class=\"string\">'test.c.gcov'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[xshen@dendevblr01 gcov]$ ls</span><br><span class=\"line\">a.out  test.c  test.c.gcov  test.gcda  test.gcno</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 <code>test.c</code> 代码被 100% 执行了。</p>\n<h2 id=\"生成-Code-Coverage-报告\"><a href=\"#生成-Code-Coverage-报告\" class=\"headerlink\" title=\"生成 Code Coverage 报告\"></a>生成 Code Coverage 报告</h2><p>目前我看到有两个对于 GCOV 可以生成报告得工具，一个是 <a href=\"http://ltp.sourceforge.net/coverage/lcov.php\" target=\"_blank\" rel=\"noopener\">LCOV</a>，另外一个是 <a href=\"https://github.com/gcovr/gcovr\" target=\"_blank\" rel=\"noopener\">gcovr</a>。</p>\n<p>前者主要用 Perl 写的，后者用 Python 来写的，但从使用上来说，我觉得 LCOV 能更方便使用一些，对于具体被执行或没被执行的代码显示的更直观。</p>\n<h3 id=\"LCOV\"><a href=\"#LCOV\" class=\"headerlink\" title=\"LCOV\"></a>LCOV</h3><p><a href=\"http://ltp.sourceforge.net/coverage/lcov.php\" target=\"_blank\" rel=\"noopener\">http://ltp.sourceforge.net/coverage/lcov.php</a></p>\n<p>具体安装就不介绍了，可以看官方网站。安装完成后，要用到的两个命令</p>\n<ol>\n<li>收集 coverage 数据</li>\n</ol>\n<p><code>lcov --capture --directory project-dir --output-file coverage.info</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\">Capturing coverage data from .</span><br><span class=\"line\">Found gcov version: 4.8.5</span><br><span class=\"line\">Scanning . <span class=\"keyword\">for</span> .gcda files ...</span><br><span class=\"line\">Found 2 data files <span class=\"keyword\">in</span> .</span><br><span class=\"line\">Processing foo.gcda</span><br><span class=\"line\">geninfo: WARNING: cannot find an entry <span class=\"keyword\">for</span> main.c.gcov <span class=\"keyword\">in</span> .gcno file, skipping file!</span><br><span class=\"line\">Processing main.gcda</span><br><span class=\"line\">Finished .info-file creation</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>生成 HTML 报告</li>\n</ol>\n<p><code>genhtml coverage.info --output-directory out</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-4.2$ genhtml coverage.info --output-directory out</span><br><span class=\"line\">Reading data file coverage.info</span><br><span class=\"line\">Found 2 entries.</span><br><span class=\"line\">Found common filename prefix <span class=\"string\">\"/workspace/mvas-code/coco\"</span></span><br><span class=\"line\">Writing .css and .png files.</span><br><span class=\"line\">Generating output.</span><br><span class=\"line\">Processing file <span class=\"built_in\">test</span>/foo.c</span><br><span class=\"line\">Processing file <span class=\"built_in\">test</span>/main.c</span><br><span class=\"line\">Writing directory view page.</span><br><span class=\"line\">Overall coverage rate:</span><br><span class=\"line\">  lines......: 100.0% (10 of 10 lines)</span><br><span class=\"line\">  <span class=\"built_in\">functions</span>..: 100.0% (2 of 2 <span class=\"built_in\">functions</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看报告</li>\n</ol>\n<p><img src=\"/2021/06/gcov/lcov.png\" alt></p>\n<p><img src=\"/2021/06/gcov/lcov-files.png\" alt></p>\n<p><img src=\"/2021/06/gcov/lcov-main.c.png\" alt></p>\n<p><img src=\"/2021/06/gcov/lcov-foo.c.png\" alt></p>\n<h3 id=\"gcovr\"><a href=\"#gcovr\" class=\"headerlink\" title=\"gcovr\"></a>gcovr</h3><p>这里使用的是 gcovr 这个项目：<a href=\"https://github.com/gcovr/gcovr\" target=\"_blank\" rel=\"noopener\">https://github.com/gcovr/gcovr</a></p>\n<ol>\n<li>安装 <code>gcovr</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gcovr</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>重新编译上面的代码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -fprofile-arcs -ftest-coverage -O0 test.c -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>执行 <code>./test</code></p>\n</li>\n<li><p>执行 <code>gcovr -r .</code> 生成报告</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-sh-4.2$ gcovr -r .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">                           GCC Code Coverage Report</span><br><span class=\"line\">Directory: .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">File                                       Lines    Exec  Cover   Missing</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">test.c                                         3       3   100%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">TOTAL                                          3       3   100%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">-sh-4.2$</span><br></pre></td></tr></table></figure>\n\n<p>生成 html 报告</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir report</span><br><span class=\"line\">gcovr -r . --html --html-details -o report/coverage.html</span><br><span class=\"line\"></span><br><span class=\"line\">-sh-4.2$ ls report</span><br><span class=\"line\">coverage.css  coverage.html  coverage.test.c.d02a618fa88f46a768e6df00dddaad2a.html</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看报告</li>\n</ol>\n<p>打开 coverage.html</p>\n<p><img src=\"/2021/06/gcov/gcovr.png\" alt></p>\n<p><img src=\"/2021/06/gcov/gcovr-main.c.png\" alt></p>\n<p><img src=\"/2021/06/gcov/gcovr-foo.c.png\" alt></p>\n<h2 id=\"更多用法\"><a href=\"#更多用法\" class=\"headerlink\" title=\"更多用法\"></a>更多用法</h2><ol>\n<li><p><code>--coverage</code> <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-coverage\" target=\"_blank\" rel=\"noopener\">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-coverage</a></p>\n</li>\n<li><p><code>GCOV_PREFIX</code>, <code>GCOV_PREFIX_STRIP</code></p>\n</li>\n</ol>\n<p>默认情况下，每个 source 文件编译通过 <code>-fprofile-arcs</code> 参数编译出来的 <code>.gcda</code> 文件时放在 object 文件目录下的，但当你的编译的机器和测试的机器不在同一台机器上的时候，就会出现找不到文件的请看。可以在编译之前通过 <code>GCOV_PREFIX</code> and <code>GCOV_PREFIX_STRIP</code> 这两个参数设置 <code>.gcda</code> 文件的输出位置。</p>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Cross-profiling.html#Cross-profiling\" target=\"_blank\" rel=\"noopener\">https://gcc.gnu.org/onlinedocs/gcc/Cross-profiling.html#Cross-profiling</a></p>\n<p><a href=\"https://stackoverflow.com/questions/7671612/crossprofiling-with-gcov-but-gcov-prefix-and-gcov-prefix-strip-is-ignored\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/7671612/crossprofiling-with-gcov-but-gcov-prefix-and-gcov-prefix-strip-is-ignored</a></p>\n<ol start=\"3\">\n<li>Linux kernel 使用 gcov 的文章，非常好的示例。</li>\n</ol>\n<p><a href=\"https://01.org/linuxgraphics/gfx-docs/drm/dev-tools/gcov.html\" target=\"_blank\" rel=\"noopener\">https://01.org/linuxgraphics/gfx-docs/drm/dev-tools/gcov.html</a></p>\n","more":"<p>注：这篇文章是边调查边写的，可能存在一些示例、命令输出、以及截图对应不上的情况，因此在调查完成后，我又重新编写了整理的示例代码，并放在 GitHub 上，这是 README: <a href=\"https://github.com/shenxianpeng/gcov-example/blob/master/README-CN.md\" target=\"_blank\" rel=\"noopener\">https://github.com/shenxianpeng/gcov-example/blob/master/README-CN.md</a></p>\n<p>因为这篇文章中有用到 gcovr （上面的链接里没有），因此保留这篇就不删除了。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在很早之前我做过一次 C/C++ 项目的代码覆盖率工具的调查，是一款叫 <a href=\"https://shenxianpeng.github.io/2019/05/squishcoco/\">Squish Coco</a> 的付费工具，当时由于有一些问题没有解决，就搁置了并没有最终购买。最近又开始了这项工作，也有购买工具的预算，但作为个人还是希望有好用的开源软件可以来做这件事，也能为产品减少每年几千刀的 License 的支出。</p>\n<p>本次调查的是 <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Gcov-Intro.html#Gcov-Intro\" target=\"_blank\" rel=\"noopener\">Gcov</a>，一个可以与 GCC 结合使用的工具，测试程序中的代码覆盖率。</p>\n<p>本篇文章通过一个最简单的示例来了解 Gcov 是如何工作的，以及通过 gcovr 来生成 Code Coverage 报告。</p>\n<blockquote>\n<p>关于 Squish Coco 与 Gcov/LCOV 的对比，froglogic 官方有一个说明：<a href=\"https://www.froglogic.com/coco/faq/\" target=\"_blank\" rel=\"noopener\">https://www.froglogic.com/coco/faq/</a></p>\n</blockquote>\n<h2 id=\"Gcov-演示示例\"><a href=\"#Gcov-演示示例\" class=\"headerlink\" title=\"Gcov 演示示例\"></a>Gcov 演示示例</h2><ol>\n<li>创建 C 程序</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"foo.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Start testing shared library in main.c ...\\n\"</span>);</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>);</span><br><span class=\"line\">    foo(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foo.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">\"Calling foo() shared library\\n\\n\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Num is not equals to 1...\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// foo.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> foo_h__</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> foo_h__</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  <span class=\"comment\">// foo_h__</span></span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>然后使用 gcc 编译的时候加入 <code>-fprofile-arcs</code> 和 <code>-ftest-coverage</code> 这两个 flags 进行编译</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -shared -fPIC -fprofile-arcs -ftest-coverage -o libfoo.so foo.c</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /workspace/code/gcov/test 是我的代码路径</span></span><br><span class=\"line\">gcc -lgcov -L/workspace/code/gcov/<span class=\"built_in\">test</span> -o <span class=\"built_in\">test</span> main.c -lfoo</span><br></pre></td></tr></table></figure>\n\n<p>这两个 flags 会让 GCC 在编译出来的二进制文件里加入 instrumentation，也就是我们俗称的插桩，它是用来收集执行的数据。</p>\n<p>注：.gcno 注释文件是在用 GCC <code>-ftest-coverage</code> 选项编译源文件时生成的，它包含了重建基本块图和给块分配源行号的信息。</p>\n<blockquote>\n<p>当前的 GCC 版本是：gcc version 8.3.1 20191121 (Red Hat 8.3.1-5) (GCC)</p>\n</blockquote>\n<ol start=\"3\">\n<li>运行可执行文件 <code>test</code> 进行测试</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>当一个包含用 GCC <code>-fprofile-arcs</code> 选项编译的对象文件的程序被执行时，会产生 .gcda 计数数据文件，也就是这里的 <code>test.gcda</code> 文件。</p>\n<p>每个用该选项编译的对象文件都会创建一个单独的 .gcda 文件，它包含弧线过渡计数、数值剖面计数和一些摘要信息。</p>\n<ol start=\"4\">\n<li>执行 <code>gcov test.c</code> 生成报告文件 <code>test.c.gcov</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[xshen@dendevblr01 gcov]$ gcov test.c</span><br><span class=\"line\">File <span class=\"string\">'test.c'</span></span><br><span class=\"line\">Lines executed:100.00% of 3</span><br><span class=\"line\">Creating <span class=\"string\">'test.c.gcov'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[xshen@dendevblr01 gcov]$ ls</span><br><span class=\"line\">a.out  test.c  test.c.gcov  test.gcda  test.gcno</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 <code>test.c</code> 代码被 100% 执行了。</p>\n<h2 id=\"生成-Code-Coverage-报告\"><a href=\"#生成-Code-Coverage-报告\" class=\"headerlink\" title=\"生成 Code Coverage 报告\"></a>生成 Code Coverage 报告</h2><p>目前我看到有两个对于 GCOV 可以生成报告得工具，一个是 <a href=\"http://ltp.sourceforge.net/coverage/lcov.php\" target=\"_blank\" rel=\"noopener\">LCOV</a>，另外一个是 <a href=\"https://github.com/gcovr/gcovr\" target=\"_blank\" rel=\"noopener\">gcovr</a>。</p>\n<p>前者主要用 Perl 写的，后者用 Python 来写的，但从使用上来说，我觉得 LCOV 能更方便使用一些，对于具体被执行或没被执行的代码显示的更直观。</p>\n<h3 id=\"LCOV\"><a href=\"#LCOV\" class=\"headerlink\" title=\"LCOV\"></a>LCOV</h3><p><a href=\"http://ltp.sourceforge.net/coverage/lcov.php\" target=\"_blank\" rel=\"noopener\">http://ltp.sourceforge.net/coverage/lcov.php</a></p>\n<p>具体安装就不介绍了，可以看官方网站。安装完成后，要用到的两个命令</p>\n<ol>\n<li>收集 coverage 数据</li>\n</ol>\n<p><code>lcov --capture --directory project-dir --output-file coverage.info</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lcov --capture --directory . --output-file coverage.info</span><br><span class=\"line\">Capturing coverage data from .</span><br><span class=\"line\">Found gcov version: 4.8.5</span><br><span class=\"line\">Scanning . <span class=\"keyword\">for</span> .gcda files ...</span><br><span class=\"line\">Found 2 data files <span class=\"keyword\">in</span> .</span><br><span class=\"line\">Processing foo.gcda</span><br><span class=\"line\">geninfo: WARNING: cannot find an entry <span class=\"keyword\">for</span> main.c.gcov <span class=\"keyword\">in</span> .gcno file, skipping file!</span><br><span class=\"line\">Processing main.gcda</span><br><span class=\"line\">Finished .info-file creation</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>生成 HTML 报告</li>\n</ol>\n<p><code>genhtml coverage.info --output-directory out</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh-4.2$ genhtml coverage.info --output-directory out</span><br><span class=\"line\">Reading data file coverage.info</span><br><span class=\"line\">Found 2 entries.</span><br><span class=\"line\">Found common filename prefix <span class=\"string\">\"/workspace/mvas-code/coco\"</span></span><br><span class=\"line\">Writing .css and .png files.</span><br><span class=\"line\">Generating output.</span><br><span class=\"line\">Processing file <span class=\"built_in\">test</span>/foo.c</span><br><span class=\"line\">Processing file <span class=\"built_in\">test</span>/main.c</span><br><span class=\"line\">Writing directory view page.</span><br><span class=\"line\">Overall coverage rate:</span><br><span class=\"line\">  lines......: 100.0% (10 of 10 lines)</span><br><span class=\"line\">  <span class=\"built_in\">functions</span>..: 100.0% (2 of 2 <span class=\"built_in\">functions</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>查看报告</li>\n</ol>\n<p><img src=\"/2021/06/gcov/lcov.png\" alt></p>\n<p><img src=\"/2021/06/gcov/lcov-files.png\" alt></p>\n<p><img src=\"/2021/06/gcov/lcov-main.c.png\" alt></p>\n<p><img src=\"/2021/06/gcov/lcov-foo.c.png\" alt></p>\n<h3 id=\"gcovr\"><a href=\"#gcovr\" class=\"headerlink\" title=\"gcovr\"></a>gcovr</h3><p>这里使用的是 gcovr 这个项目：<a href=\"https://github.com/gcovr/gcovr\" target=\"_blank\" rel=\"noopener\">https://github.com/gcovr/gcovr</a></p>\n<ol>\n<li>安装 <code>gcovr</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gcovr</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>重新编译上面的代码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -fprofile-arcs -ftest-coverage -O0 test.c -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>执行 <code>./test</code></p>\n</li>\n<li><p>执行 <code>gcovr -r .</code> 生成报告</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-sh-4.2$ gcovr -r .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">                           GCC Code Coverage Report</span><br><span class=\"line\">Directory: .</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">File                                       Lines    Exec  Cover   Missing</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">test.c                                         3       3   100%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">TOTAL                                          3       3   100%</span><br><span class=\"line\">------------------------------------------------------------------------------</span><br><span class=\"line\">-sh-4.2$</span><br></pre></td></tr></table></figure>\n\n<p>生成 html 报告</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir report</span><br><span class=\"line\">gcovr -r . --html --html-details -o report/coverage.html</span><br><span class=\"line\"></span><br><span class=\"line\">-sh-4.2$ ls report</span><br><span class=\"line\">coverage.css  coverage.html  coverage.test.c.d02a618fa88f46a768e6df00dddaad2a.html</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看报告</li>\n</ol>\n<p>打开 coverage.html</p>\n<p><img src=\"/2021/06/gcov/gcovr.png\" alt></p>\n<p><img src=\"/2021/06/gcov/gcovr-main.c.png\" alt></p>\n<p><img src=\"/2021/06/gcov/gcovr-foo.c.png\" alt></p>\n<h2 id=\"更多用法\"><a href=\"#更多用法\" class=\"headerlink\" title=\"更多用法\"></a>更多用法</h2><ol>\n<li><p><code>--coverage</code> <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-coverage\" target=\"_blank\" rel=\"noopener\">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#index-coverage</a></p>\n</li>\n<li><p><code>GCOV_PREFIX</code>, <code>GCOV_PREFIX_STRIP</code></p>\n</li>\n</ol>\n<p>默认情况下，每个 source 文件编译通过 <code>-fprofile-arcs</code> 参数编译出来的 <code>.gcda</code> 文件时放在 object 文件目录下的，但当你的编译的机器和测试的机器不在同一台机器上的时候，就会出现找不到文件的请看。可以在编译之前通过 <code>GCOV_PREFIX</code> and <code>GCOV_PREFIX_STRIP</code> 这两个参数设置 <code>.gcda</code> 文件的输出位置。</p>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Cross-profiling.html#Cross-profiling\" target=\"_blank\" rel=\"noopener\">https://gcc.gnu.org/onlinedocs/gcc/Cross-profiling.html#Cross-profiling</a></p>\n<p><a href=\"https://stackoverflow.com/questions/7671612/crossprofiling-with-gcov-but-gcov-prefix-and-gcov-prefix-strip-is-ignored\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/7671612/crossprofiling-with-gcov-but-gcov-prefix-and-gcov-prefix-strip-is-ignored</a></p>\n<ol start=\"3\">\n<li>Linux kernel 使用 gcov 的文章，非常好的示例。</li>\n</ol>\n<p><a href=\"https://01.org/linuxgraphics/gfx-docs/drm/dev-tools/gcov.html\" target=\"_blank\" rel=\"noopener\">https://01.org/linuxgraphics/gfx-docs/drm/dev-tools/gcov.html</a></p>\n","categories":[{"name":"Coverage","path":"api/categories/Coverage.json"}],"tags":[{"name":"DevOps","path":"api/tags/DevOps.json"},{"name":"Coverage","path":"api/tags/Coverage.json"},{"name":"Gcov","path":"api/tags/Gcov.json"},{"name":"LCOV","path":"api/tags/LCOV.json"}]}