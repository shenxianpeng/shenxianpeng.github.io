{"title":"Docker Buildx Bake：加速构建和管理多平台镜像的利器","slug":"2023/07/buildx-bake","date":"2023-07-17T14:43:37.000Z","updated":"2025-08-09T17:29:19.211Z","comments":true,"path":"api/articles/2023/07/buildx-bake.json","excerpt":"随着容器化技术的普及和应用场景的增多，构建和管理多平台镜像变得越来越重要。Docker Buildx 是 Docker 官方对于 Docker CLI 的一个扩展，为 Docker 用户提供了更强大和灵活的构建功能。包括：多平台构建：Docker Buildx 允许用户在一个构建命令中为多个不同的平台构建容器镜像。这样，你可以一次性构建适用于多种 CPU 架构的镜像，比如 x86、ARM 等，从而在不同的硬件设备上运行相同的镜像。构建缓存优化：Docker Buildx 改进了构建过程中的缓存机制，通过自动识别 Dockerfile 中哪些部分是可缓存的，从而减少重复构建和加快构建速度。并行构建：Buildx 允许并行构建多个镜像，提高了构建的效率。多种输出格式：Buildx 支持不同的输出格式，包括 Docker 镜像、OCI 镜像、以及 rootfs 等。构建策略：通过支持多种构建策略，用户可以更好地控制构建过程，例如，可以在多个节点上构建、使用远程构建等。使用 docker buildx 需要 Docker Engine 版本不低于 19.03。其中，Docker Buildx Bake 是 Buildx 的一个子命令，也是本篇文章要重点介绍包括概念、优势、使用场景以及如何使用该功能来加速构建和管理多平台镜像。","covers":null,"content":"<p>随着容器化技术的普及和应用场景的增多，构建和管理多平台镜像变得越来越重要。<a href=\"https://github.com/docker/buildx\">Docker Buildx</a> 是 Docker 官方对于 Docker CLI 的一个扩展，为 Docker 用户提供了更强大和灵活的构建功能。包括：</p>\n<ol>\n<li>多平台构建：Docker Buildx 允许用户在一个构建命令中为多个不同的平台构建容器镜像。这样，你可以一次性构建适用于多种 CPU 架构的镜像，比如 x86、ARM 等，从而在不同的硬件设备上运行相同的镜像。</li>\n<li>构建缓存优化：Docker Buildx 改进了构建过程中的缓存机制，通过自动识别 Dockerfile 中哪些部分是可缓存的，从而减少重复构建和加快构建速度。</li>\n<li>并行构建：Buildx 允许并行构建多个镜像，提高了构建的效率。</li>\n<li>多种输出格式：Buildx 支持不同的输出格式，包括 Docker 镜像、OCI 镜像、以及 rootfs 等。</li>\n<li>构建策略：通过支持多种构建策略，用户可以更好地控制构建过程，例如，可以在多个节点上构建、使用远程构建等。</li>\n</ol>\n<blockquote>\n<p>使用 <code>docker buildx</code> 需要 Docker Engine 版本不低于 19.03。</p>\n</blockquote>\n<p>其中，Docker Buildx Bake 是 Buildx 的一个子命令，也是本篇文章要重点介绍包括概念、优势、使用场景以及如何使用该功能来加速构建和管理多平台镜像。</p>\n<span id=\"more\"></span>\n<h2 id=\"什么是-Docker-Buildx-Bake？\"><a href=\"#什么是-Docker-Buildx-Bake？\" class=\"headerlink\" title=\"什么是 Docker Buildx Bake？\"></a>什么是 Docker Buildx Bake？</h2><p>Docker Buildx Bake 是 Docker Buildx 的一项功能，它旨在简化和加速镜像构建过程。Bake 是一种声明式的构建定义方式，它允许用户在一个命令中定义多个构建配置和目标平台，实现自动化批量构建和发布跨平台镜像。</p>\n<h2 id=\"为什么使用-Docker-Buildx-Bake？\"><a href=\"#为什么使用-Docker-Buildx-Bake？\" class=\"headerlink\" title=\"为什么使用 Docker Buildx Bake？\"></a>为什么使用 Docker Buildx Bake？</h2><h3 id=\"1-提高构建效率\"><a href=\"#1-提高构建效率\" class=\"headerlink\" title=\"1. 提高构建效率\"></a>1. 提高构建效率</h3><p>Bake 通过并行构建和缓存机制来提高构建效率。使用 Bake 可以一次性定义和构建多个镜像，而无需为每个镜像分别执行构建过程，这样可以大大节省构建时间，提高工作效率。</p>\n<h3 id=\"2-支持多个平台和架构\"><a href=\"#2-支持多个平台和架构\" class=\"headerlink\" title=\"2. 支持多个平台和架构\"></a>2. 支持多个平台和架构</h3><p>Docker Buildx Bake 的另一个优势是它能够构建多个平台和架构的镜像。通过在 Bake 配置中指定不同的平台参数就可以轻松构建适用于不同操作系统和架构的镜像。这对于跨平台应用程序的开发和部署非常有用。</p>\n<h3 id=\"3-一致的构建环境\"><a href=\"#3-一致的构建环境\" class=\"headerlink\" title=\"3. 一致的构建环境\"></a>3. 一致的构建环境</h3><p>通过 docker-bake.hcl （除了 HCL 配置文件之外还可以是 JSON 或是 YAML 文件）文件描述构建过程确保一致的构建环境，使不同的构建配置和目标平台之间具有相同的构建过程和结果。这种一致性有助于减少构建过程中的错误，而且构建配置更易于维护和管理。</p>\n<h2 id=\"如何使用-Docker-Buildx-Bake？\"><a href=\"#如何使用-Docker-Buildx-Bake？\" class=\"headerlink\" title=\"如何使用 Docker Buildx Bake？\"></a>如何使用 Docker Buildx Bake？</h2><p>以下是使用 Docker Buildx Bake 进行高效构建的基本步骤，首先确保你已经安装了 Docker Engine 或 Docker Desktop 版本 19.03 以及以上。</p>\n<p>然后你的 docker 命令将变成这样 <code>docker buildx bake</code>。以下 <code>docker buildx bake --help</code> 的帮助输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx bake --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker buildx bake [OPTIONS] [TARGET...]</span><br><span class=\"line\"></span><br><span class=\"line\">Build from a file</span><br><span class=\"line\"></span><br><span class=\"line\">Aliases:</span><br><span class=\"line\">  docker buildx bake, docker buildx f</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --builder string         Override the configured builder instance</span><br><span class=\"line\">  -f, --file stringArray       Build definition file</span><br><span class=\"line\">      --load                   Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.output=type=docker&quot;</span></span><br><span class=\"line\">      --metadata-file string   Write build result metadata to the file</span><br><span class=\"line\">      --no-cache               Do not use cache when building the image</span><br><span class=\"line\">      --<span class=\"built_in\">print</span>                  Print the options without building</span><br><span class=\"line\">      --progress string        Set <span class=\"built_in\">type</span> of progress output (<span class=\"string\">&quot;auto&quot;</span>, <span class=\"string\">&quot;plain&quot;</span>, <span class=\"string\">&quot;tty&quot;</span>). Use plain to show container output (default <span class=\"string\">&quot;auto&quot;</span>)</span><br><span class=\"line\">      --provenance string      Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.attest=type=provenance&quot;</span></span><br><span class=\"line\">      --pull                   Always attempt to pull all referenced images</span><br><span class=\"line\">      --push                   Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.output=type=registry&quot;</span></span><br><span class=\"line\">      --sbom string            Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.attest=type=sbom&quot;</span></span><br><span class=\"line\">      --<span class=\"built_in\">set</span> stringArray        Override target value (e.g., <span class=\"string\">&quot;targetpattern.key=value&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来尝试一下如何使用 <code>docker buildx bake</code></p>\n<h3 id=\"1-创建-Bake-配置文件\"><a href=\"#1-创建-Bake-配置文件\" class=\"headerlink\" title=\"1. 创建 Bake 配置文件\"></a>1. 创建 Bake 配置文件</h3><p>比如创建一个名为 <code>docker-bake.dev.hcl</code> 的 Bake 配置文件，并在其中定义构建上下文、目标平台和其他构建选项。以下是一个简单的示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-bake.dev.hcl</span></span><br><span class=\"line\">group <span class=\"string\">&quot;default&quot;</span> &#123;</span><br><span class=\"line\">  targets = [<span class=\"string\">&quot;db&quot;</span>, <span class=\"string\">&quot;webapp-dev&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&quot;db&quot;</span> &#123;</span><br><span class=\"line\">  dockerfile = <span class=\"string\">&quot;Dockerfile.db&quot;</span></span><br><span class=\"line\">  tags = [<span class=\"string\">&quot;xianpengshen/docker-buildx-bake-demo:db&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&quot;webapp-dev&quot;</span> &#123;</span><br><span class=\"line\">  dockerfile = <span class=\"string\">&quot;Dockerfile.webapp&quot;</span></span><br><span class=\"line\">  tags = [<span class=\"string\">&quot;xianpengshen/docker-buildx-bake-demo:webapp&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&quot;webapp-release&quot;</span> &#123;</span><br><span class=\"line\">  inherits = [<span class=\"string\">&quot;webapp-dev&quot;</span>]</span><br><span class=\"line\">  platforms = [<span class=\"string\">&quot;linux/amd64&quot;</span>, <span class=\"string\">&quot;linux/arm64&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-运行-Bake-构建\"><a href=\"#2-运行-Bake-构建\" class=\"headerlink\" title=\"2. 运行 Bake 构建\"></a>2. 运行 Bake 构建</h3><p>运行以下命令开始使用 Bake 构建镜像：</p>\n<p><code>$ docker buildx bake -f docker-bake.dev.hcl db webapp-release</code></p>\n<h3 id=\"3-打印构建选项\"><a href=\"#3-打印构建选项\" class=\"headerlink\" title=\"3. 打印构建选项\"></a>3. 打印构建选项</h3><p>你还可以无需构建打印构建选项，使用用 <code>--print</code> 来查看某个目标构建是否符合预期。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker buildx bake -f docker-bake.dev.hcl --<span class=\"built_in\">print</span> db</span><br><span class=\"line\">[+] Building 0.0s (0/0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;targets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;target&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;db&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;context&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;dockerfile&quot;</span>: <span class=\"string\">&quot;Dockerfile.db&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;tags&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;xianpengshen/docker-buildx-bake-demo:db&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-发布构建镜像\"><a href=\"#4-发布构建镜像\" class=\"headerlink\" title=\"4. 发布构建镜像\"></a>4. 发布构建镜像</h3><p>通过添加 <code>--push</code> 选项可以将构建完成的镜像一键发布的镜像仓库，例如 <code>$ docker buildx bake -f docker-bake.dev.hcl --push db webapp-release</code></p>\n<p>以上示例中的 demo 放在这里了：<a href=\"https://github.com/shenxianpeng/docker-buildx-bake-demo\">https://github.com/shenxianpeng/docker-buildx-bake-demo</a></p>\n<h3 id=\"5-Buildx-Bake-高级用法\"><a href=\"#5-Buildx-Bake-高级用法\" class=\"headerlink\" title=\"5. Buildx Bake 高级用法\"></a>5. Buildx Bake 高级用法</h3><p>Buildx Bake 还有其他更多的使用技巧，比如 <code>variable</code>, <code>function </code>, <code>matrix</code> 等这里就不一一介绍了，详情请参见官方 <a href=\"https://docs.docker.com/build/bake/reference/\">Buildx Bake reference</a> 文档。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Docker Buildx Bake 是一个功能强大的构建工具，它提供了一种简化和加速构建过程的方法。通过使用 Bake 你可以高效地构建和测试多个镜像，并且可以跨多个平台和架构进行构建。所以说 Bake 是开发人员和构建工程师的重要利器，掌握 Docker Buildx Bake 的使用方法将帮助你更好地应对多镜像构建的带来的挑战、加快应用程序的交付速度。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"什么是-Docker-Buildx-Bake？\"><a href=\"#什么是-Docker-Buildx-Bake？\" class=\"headerlink\" title=\"什么是 Docker Buildx Bake？\"></a>什么是 Docker Buildx Bake？</h2><p>Docker Buildx Bake 是 Docker Buildx 的一项功能，它旨在简化和加速镜像构建过程。Bake 是一种声明式的构建定义方式，它允许用户在一个命令中定义多个构建配置和目标平台，实现自动化批量构建和发布跨平台镜像。</p>\n<h2 id=\"为什么使用-Docker-Buildx-Bake？\"><a href=\"#为什么使用-Docker-Buildx-Bake？\" class=\"headerlink\" title=\"为什么使用 Docker Buildx Bake？\"></a>为什么使用 Docker Buildx Bake？</h2><h3 id=\"1-提高构建效率\"><a href=\"#1-提高构建效率\" class=\"headerlink\" title=\"1. 提高构建效率\"></a>1. 提高构建效率</h3><p>Bake 通过并行构建和缓存机制来提高构建效率。使用 Bake 可以一次性定义和构建多个镜像，而无需为每个镜像分别执行构建过程，这样可以大大节省构建时间，提高工作效率。</p>\n<h3 id=\"2-支持多个平台和架构\"><a href=\"#2-支持多个平台和架构\" class=\"headerlink\" title=\"2. 支持多个平台和架构\"></a>2. 支持多个平台和架构</h3><p>Docker Buildx Bake 的另一个优势是它能够构建多个平台和架构的镜像。通过在 Bake 配置中指定不同的平台参数就可以轻松构建适用于不同操作系统和架构的镜像。这对于跨平台应用程序的开发和部署非常有用。</p>\n<h3 id=\"3-一致的构建环境\"><a href=\"#3-一致的构建环境\" class=\"headerlink\" title=\"3. 一致的构建环境\"></a>3. 一致的构建环境</h3><p>通过 docker-bake.hcl （除了 HCL 配置文件之外还可以是 JSON 或是 YAML 文件）文件描述构建过程确保一致的构建环境，使不同的构建配置和目标平台之间具有相同的构建过程和结果。这种一致性有助于减少构建过程中的错误，而且构建配置更易于维护和管理。</p>\n<h2 id=\"如何使用-Docker-Buildx-Bake？\"><a href=\"#如何使用-Docker-Buildx-Bake？\" class=\"headerlink\" title=\"如何使用 Docker Buildx Bake？\"></a>如何使用 Docker Buildx Bake？</h2><p>以下是使用 Docker Buildx Bake 进行高效构建的基本步骤，首先确保你已经安装了 Docker Engine 或 Docker Desktop 版本 19.03 以及以上。</p>\n<p>然后你的 docker 命令将变成这样 <code>docker buildx bake</code>。以下 <code>docker buildx bake --help</code> 的帮助输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx bake --<span class=\"built_in\">help</span></span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker buildx bake [OPTIONS] [TARGET...]</span><br><span class=\"line\"></span><br><span class=\"line\">Build from a file</span><br><span class=\"line\"></span><br><span class=\"line\">Aliases:</span><br><span class=\"line\">  docker buildx bake, docker buildx f</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">      --builder string         Override the configured builder instance</span><br><span class=\"line\">  -f, --file stringArray       Build definition file</span><br><span class=\"line\">      --load                   Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.output=type=docker&quot;</span></span><br><span class=\"line\">      --metadata-file string   Write build result metadata to the file</span><br><span class=\"line\">      --no-cache               Do not use cache when building the image</span><br><span class=\"line\">      --<span class=\"built_in\">print</span>                  Print the options without building</span><br><span class=\"line\">      --progress string        Set <span class=\"built_in\">type</span> of progress output (<span class=\"string\">&quot;auto&quot;</span>, <span class=\"string\">&quot;plain&quot;</span>, <span class=\"string\">&quot;tty&quot;</span>). Use plain to show container output (default <span class=\"string\">&quot;auto&quot;</span>)</span><br><span class=\"line\">      --provenance string      Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.attest=type=provenance&quot;</span></span><br><span class=\"line\">      --pull                   Always attempt to pull all referenced images</span><br><span class=\"line\">      --push                   Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.output=type=registry&quot;</span></span><br><span class=\"line\">      --sbom string            Shorthand <span class=\"keyword\">for</span> <span class=\"string\">&quot;--set=*.attest=type=sbom&quot;</span></span><br><span class=\"line\">      --<span class=\"built_in\">set</span> stringArray        Override target value (e.g., <span class=\"string\">&quot;targetpattern.key=value&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>接下来尝试一下如何使用 <code>docker buildx bake</code></p>\n<h3 id=\"1-创建-Bake-配置文件\"><a href=\"#1-创建-Bake-配置文件\" class=\"headerlink\" title=\"1. 创建 Bake 配置文件\"></a>1. 创建 Bake 配置文件</h3><p>比如创建一个名为 <code>docker-bake.dev.hcl</code> 的 Bake 配置文件，并在其中定义构建上下文、目标平台和其他构建选项。以下是一个简单的示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-bake.dev.hcl</span></span><br><span class=\"line\">group <span class=\"string\">&quot;default&quot;</span> &#123;</span><br><span class=\"line\">  targets = [<span class=\"string\">&quot;db&quot;</span>, <span class=\"string\">&quot;webapp-dev&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&quot;db&quot;</span> &#123;</span><br><span class=\"line\">  dockerfile = <span class=\"string\">&quot;Dockerfile.db&quot;</span></span><br><span class=\"line\">  tags = [<span class=\"string\">&quot;xianpengshen/docker-buildx-bake-demo:db&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&quot;webapp-dev&quot;</span> &#123;</span><br><span class=\"line\">  dockerfile = <span class=\"string\">&quot;Dockerfile.webapp&quot;</span></span><br><span class=\"line\">  tags = [<span class=\"string\">&quot;xianpengshen/docker-buildx-bake-demo:webapp&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">target <span class=\"string\">&quot;webapp-release&quot;</span> &#123;</span><br><span class=\"line\">  inherits = [<span class=\"string\">&quot;webapp-dev&quot;</span>]</span><br><span class=\"line\">  platforms = [<span class=\"string\">&quot;linux/amd64&quot;</span>, <span class=\"string\">&quot;linux/arm64&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-运行-Bake-构建\"><a href=\"#2-运行-Bake-构建\" class=\"headerlink\" title=\"2. 运行 Bake 构建\"></a>2. 运行 Bake 构建</h3><p>运行以下命令开始使用 Bake 构建镜像：</p>\n<p><code>$ docker buildx bake -f docker-bake.dev.hcl db webapp-release</code></p>\n<h3 id=\"3-打印构建选项\"><a href=\"#3-打印构建选项\" class=\"headerlink\" title=\"3. 打印构建选项\"></a>3. 打印构建选项</h3><p>你还可以无需构建打印构建选项，使用用 <code>--print</code> 来查看某个目标构建是否符合预期。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker buildx bake -f docker-bake.dev.hcl --<span class=\"built_in\">print</span> db</span><br><span class=\"line\">[+] Building 0.0s (0/0)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;group&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;default&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;targets&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;db&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;target&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;db&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;context&quot;</span>: <span class=\"string\">&quot;.&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;dockerfile&quot;</span>: <span class=\"string\">&quot;Dockerfile.db&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;tags&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;xianpengshen/docker-buildx-bake-demo:db&quot;</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-发布构建镜像\"><a href=\"#4-发布构建镜像\" class=\"headerlink\" title=\"4. 发布构建镜像\"></a>4. 发布构建镜像</h3><p>通过添加 <code>--push</code> 选项可以将构建完成的镜像一键发布的镜像仓库，例如 <code>$ docker buildx bake -f docker-bake.dev.hcl --push db webapp-release</code></p>\n<p>以上示例中的 demo 放在这里了：<a href=\"https://github.com/shenxianpeng/docker-buildx-bake-demo\">https://github.com/shenxianpeng/docker-buildx-bake-demo</a></p>\n<h3 id=\"5-Buildx-Bake-高级用法\"><a href=\"#5-Buildx-Bake-高级用法\" class=\"headerlink\" title=\"5. Buildx Bake 高级用法\"></a>5. Buildx Bake 高级用法</h3><p>Buildx Bake 还有其他更多的使用技巧，比如 <code>variable</code>, <code>function </code>, <code>matrix</code> 等这里就不一一介绍了，详情请参见官方 <a href=\"https://docs.docker.com/build/bake/reference/\">Buildx Bake reference</a> 文档。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Docker Buildx Bake 是一个功能强大的构建工具，它提供了一种简化和加速构建过程的方法。通过使用 Bake 你可以高效地构建和测试多个镜像，并且可以跨多个平台和架构进行构建。所以说 Bake 是开发人员和构建工程师的重要利器，掌握 Docker Buildx Bake 的使用方法将帮助你更好地应对多镜像构建的带来的挑战、加快应用程序的交付速度。</p>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}