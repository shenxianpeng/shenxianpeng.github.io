{"title":"SLSA 框架与软件供应链安全防护","slug":"2023/03/slsa","date":"2023-03-23T07:09:39.000Z","updated":"2025-05-27T20:25:42.581Z","comments":true,"path":"api/articles/2023/03/slsa.json","excerpt":"随着近些年针对软件供应链发起的攻击次数越来越多，Google 发布了一系列指南来确保软件包的完整性，目的是为了防止未经授权的代码修改影响软件供应链。Google 的 SLSA 框架（Supply-chain Levels for Software Artifacts 软件制品的供应链级别）是通过识别 CI&#x2F;CD 流水线中的问题并减小影响，为实现更安全的软件开发和部署流程提供建议。目录什么是SLSA软件供应链中的问题<br>2.1 供应链攻击包括哪些<br>2.2 真实世界的例子SLSA等级<br>3.1 详细解释<br>3.2 限制SLSA落地其他工具什么是SLSASLSA 全名是 Supply chain Levels for Software Artifacts, or SLSA (发音“salsa”).SLSA 是一个端到端框架，一个标准和控制的清单确保软件构建和部署过程的安全性，防止篡改源代码、构建平台以及构件仓库而产生的威胁。软件供应链中的问题任何软件供应链都可能引入漏洞，随着系统变得越来越复杂，做好最佳实践从而保证交付工件的完整性变得非常重要。如果没有一定的规范和系统发展计划，就很难应对下一次黑客攻击。供应链攻击包括哪些 [Figure] 可以启用和增强其他解决方案。SLSA等级","covers":["/2023/03/slsa/supply-chain-threats.png"],"content":"<p>随着近些年针对软件供应链发起的攻击次数越来越多，Google 发布了一系列指南来确保软件包的完整性，目的是为了防止未经授权的代码修改影响软件供应链。</p>\n<p>Google 的 SLSA 框架（Supply-chain Levels for Software Artifacts 软件制品的供应链级别）是通过识别 CI&#x2F;CD 流水线中的问题并减小影响，为实现更安全的软件开发和部署流程提供建议。</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFSLSA\">什么是SLSA</a></li>\n<li><a href=\"#%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98\">软件供应链中的问题</a><br>2.1 <a href=\"#%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB%E5%8C%85%E6%8B%AC%E5%93%AA%E4%BA%9B\">供应链攻击包括哪些</a><br>2.2 <a href=\"#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E4%BE%8B%E5%AD%90\">真实世界的例子</a></li>\n<li><a href=\"#SLSA%E7%AD%89%E7%BA%A7\">SLSA等级</a><br>3.1 <a href=\"#%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A\">详细解释</a><br>3.2 <a href=\"#%E9%99%90%E5%88%B6\">限制</a></li>\n<li><a href=\"#SLSA%E8%90%BD%E5%9C%B0\">SLSA落地</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7\">其他工具</a></li>\n</ol>\n<h2 id=\"什么是SLSA\"><a href=\"#什么是SLSA\" class=\"headerlink\" title=\"什么是SLSA\"></a>什么是SLSA</h2><p><a href=\"https://slsa.dev/\">SLSA</a> 全名是 Supply chain Levels for Software Artifacts, or SLSA (发音“salsa”).</p>\n<p>SLSA 是一个端到端框架，一个标准和控制的清单确保软件构建和部署过程的安全性，防止篡改源代码、构建平台以及构件仓库而产生的威胁。</p>\n<h2 id=\"软件供应链中的问题\"><a href=\"#软件供应链中的问题\" class=\"headerlink\" title=\"软件供应链中的问题\"></a>软件供应链中的问题</h2><p>任何软件供应链都可能引入漏洞，随着系统变得越来越复杂，做好最佳实践从而保证交付工件的完整性变得非常重要。如果没有一定的规范和系统发展计划，就很难应对下一次黑客攻击。</p>\n<h3 id=\"供应链攻击包括哪些\"><a href=\"#供应链攻击包括哪些\" class=\"headerlink\" title=\"供应链攻击包括哪些\"></a>供应链攻击包括哪些</h3><p><img src=\"/2023/03/slsa/supply-chain-threats.png\" alt=\"Supply Chain Threats\"></p>\n<p>A 提交未经认证的修改<br>B 泄露源码仓库<br>C 从被修改源代码构建<br>D 泄露构建过程<br>E 使用已泄露的依赖<br>F 上传被修改的包<br>G 泄露了包仓库<br>H 使用已泄露的包</p>\n<h3 id=\"真实世界的例子\"><a href=\"#真实世界的例子\" class=\"headerlink\" title=\"真实世界的例子\"></a>真实世界的例子</h3><table>\n<thead>\n<tr>\n<th>完整性威胁</th>\n<th>已知例子</th>\n<th>SLSA 如何提供帮助</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A 提交未经认证的修改</td>\n<td><a href=\"https://lore.kernel.org/lkml/202105051005.49BFABCE@keescook/\">研究人员</a>试图通过邮件列表上的<br>补丁程序故意将漏洞引入 Linux 内核。</td>\n<td>两人审查发现了大部分（但不是全部）漏洞。</td>\n</tr>\n<tr>\n<td>B 泄露源码仓库</td>\n<td><a href=\"https://news-web.php.net/php.internals/113838\">PHP</a>：攻击者破坏了 PHP 的自托管<br> git 服务器并注入了两个恶意提交。</td>\n<td>一个受到更好保护的源代码平台<br>将成为攻击者更难攻击的目标。</td>\n</tr>\n<tr>\n<td>C 从被修改源代码构建</td>\n<td><a href=\"https://www.webmin.com/exploit.html\">Webmin</a>：攻击者修改了构建基础设施<br>以使用与源代码控制不匹配的源文件。</td>\n<td>符合 SLSA 标准的构建服务器会生成出处，<br>以识别实际使用的来源，从而使消费者能够检测到此类篡改。</td>\n</tr>\n<tr>\n<td>D 泄露构建过程</td>\n<td><a href=\"https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/\">SolarWinds</a>：攻击者破坏了构建平台<br>并安装了在每次构建期间注入恶意行为的植入程序。</td>\n<td>更高的 SLSA 级别需要对构建平台进行更强大的安全控制，<br>这使得妥协和获得持久性变得更加困难。</td>\n</tr>\n<tr>\n<td>E 使用已泄露的依赖</td>\n<td><a href=\"https://web.archive.org/web/20210909051737/https://schneider.dev/blog/event-stream-vulnerability-explained/\">event-stream</a>：攻击者添加了一个无害的依赖项，然后更新了该依赖项<br>以添加恶意行为。更新与提交到 GitHub 的代码不匹配（即攻击 F）。</td>\n<td>递归地将 SLSA 应用于所有依赖项会阻止这个特定的向量，因为<br>出处会表明它不是由适当的构建器构建的，或者源不是来自 GitHub。</td>\n</tr>\n<tr>\n<td>F 上传被修改的包</td>\n<td><a href=\"https://about.codecov.io/apr-2021-post-mortem/\">CodeCov</a>：攻击者使用泄露的凭据将恶意工件上传到<br> Google Cloud Storage(GCS)，用户可以从中直接下载。</td>\n<td>GCS 中工件的出处表明工件不是以<br>预期的方式从预期的源代码库中构建的。</td>\n</tr>\n<tr>\n<td>G 泄露了包仓库</td>\n<td><a href=\"https://theupdateframework.io/papers/attacks-on-package-managers-ccs2008.pdf\">对包镜像的攻击</a>：研究人员为几个流行的<br>包存储库运行镜像，这些镜像可能被用来提供恶意包。</td>\n<td>与上面的 (F) 类似，恶意工件的来源表明它们不是<br>按预期构建的，也不是来自预期的源代码库。</td>\n</tr>\n<tr>\n<td>H 使用已泄露的包</td>\n<td><a href=\"https://blog.sonatype.com/damaging-linux-mac-malware-bundled-within-browserify-npm-brandjack-attempt\">Browserify typosquatting</a>：攻击者<br>上传了一个与原始名称相似的恶意包。</td>\n<td>SLSA 不直接解决这种威胁，但将出处链接回源代码控制<br>可以启用和增强其他解决方案。</td>\n</tr>\n</tbody></table>\n<h2 id=\"SLSA等级\"><a href=\"#SLSA等级\" class=\"headerlink\" title=\"SLSA等级\"></a>SLSA等级</h2><span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th>等级</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>构建过程的文档</td>\n<td>无署名的出处</td>\n</tr>\n<tr>\n<td>2</td>\n<td>构建服务的防篡改</td>\n<td>托管源&#x2F;构建，署名出处</td>\n</tr>\n<tr>\n<td>3</td>\n<td>对特定威胁的额外抵抗力</td>\n<td>对主机的安全控制，不可伪造的来源</td>\n</tr>\n<tr>\n<td>4</td>\n<td>最高级别的信心和信任</td>\n<td>两方审查+密封构建</td>\n</tr>\n</tbody></table>\n<h3 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h3><table>\n<thead>\n<tr>\n<th>等级</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>没有保证。 SLSA 0 表示缺少任何 SLSA 级别。</td>\n</tr>\n<tr>\n<td>1</td>\n<td><strong>构建过程必须完全脚本化&#x2F;自动化并生成出处。</strong> <br>出处是关于工件构建方式的元数据，包括构建过程、顶级源和依赖项。<br>了解出处允许软件消费者做出基于风险的安全决策。<br>SLSA 1 的 Provenance 不能防止篡改，但它提供了基本级别的代码源识别并有助于漏洞管理。</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>需要使用版本控制和生成经过身份验证的来源的托管构建服务。</strong> <br>这些附加要求使软件消费者对软件的来源更有信心。<br>在此级别，出处可防止篡改到构建服务受信任的程度。<br>SLSA 2 还提供了一个轻松升级到 SLSA 3 的途径。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>源和构建平台符合特定标准，以分别保证源的可审计性和出处的完整性。</strong> <br>我们设想了一个认证流程，审计员可以通过该流程证明平台符合要求，然后消费者就可以信赖了。 <br>SLSA 3 通过防止特定类别的威胁（例如交叉构建污染），提供比早期级别更强的防篡改保护。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>需要两人审查所有更改和密封、可重现的构建过程。</strong> <br>两人审查是发现错误和阻止不良行为的行业最佳实践。 <br>密封构建保证来源的依赖项列表是完整的。 <br>可重现的构建虽然不是严格要求的，但提供了许多可审计性和可靠性的好处。 <br>总的来说，SLSA 4 让消费者对软件未被篡改具有高度的信心。</td>\n</tr>\n</tbody></table>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><p>SLSA 可以帮助减少软件工件中的供应链威胁，但也有局限性。</p>\n<ul>\n<li>许多工件在供应链中存在大量依赖关系，完整的依赖关系图可能非常大。</li>\n<li>实际上从事安全工作的团队需要确定并关注供应链中的重要组成部分，可以手动执行，但工作量可能很大。</li>\n<li>工件的 SLSA 级别不可传递并且依赖项有自己的 SLSA 评级，这意味着可以从 SLSA 0 依赖项构建 SLSA 4 工件。因此，虽然主要的工件具有很强的安全性，但其他地方可能仍然存在风险。这些风险的总和将帮助软件消费者了解如何以及在何处使用 SLSA 4 工件。</li>\n<li>虽然这些任务的自动化会有所帮助，但对于每个软件消费者来说，全面审查每个工件的整个图表并不切实际。为了缩小这一差距，审计员和认证机构可以验证并断言某些东西符合 SLSA 要求。这对于闭源软件可能特别有价值。</li>\n</ul>\n<p>作为 SLSA 路线图的一部分，SLSA 团队还会继续探讨如何识别重要组成部分、如何确定整个供应链的总体风险以及认证的作用。</p>\n<h2 id=\"SLSA落地\"><a href=\"#SLSA落地\" class=\"headerlink\" title=\"SLSA落地\"></a>SLSA落地</h2><p>SLSA 是一个标准，但如何落地呢？</p>\n<p>我们可以通过 SLSA 的 <a href=\"https://slsa.dev/spec/v0.1/requirements\">Requirements</a> 的汇总表来一一对照进行自检，查看当前的 CI&#x2F;CD 工作流处在哪个安全等级。</p>\n<p>有没有工具能够更好的帮助我们检查并指导我们如何提高安全等级呢？</p>\n<p>目前只有少数可以实现此目的的工具，并且绝大多数只限于 GitHub。</p>\n<p><a href=\"https://github.com/ossf/scorecard\">OpenSSF Scorecard</a> 就是一个来自于开源安全基金会（OpenSSF）针对开源软件安全指标检查的一个自动化工具，它可以帮助开源维护者改进他们的安全最佳实践，并帮助开源消费者判断他们的依赖项是否安全。</p>\n<p>它是通过评估软件安全相关的许多重要项目，并为每个检查分配 0-10 的分数。你可以使用这些分数来了解需要改进的特定领域，以加强项目的安全状况。还可以评估依赖项引入的风险，并就接受这些风险、评估替代解决方案或与维护人员合作进行改进做出明智的决定。</p>\n<h2 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h2><ul>\n<li><a href=\"https://github.com/slsa-framework/slsa-verifier\">slsa-verifier</a> - 验证符合 SLSA 标准的构建出处</li>\n<li><a href=\"https://github.com/sigstore\">Sigstore</a> - 用于签名、验证和保护软件的新标准</li>\n</ul>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<table>\n<thead>\n<tr>\n<th>等级</th>\n<th>描述</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>构建过程的文档</td>\n<td>无署名的出处</td>\n</tr>\n<tr>\n<td>2</td>\n<td>构建服务的防篡改</td>\n<td>托管源&#x2F;构建，署名出处</td>\n</tr>\n<tr>\n<td>3</td>\n<td>对特定威胁的额外抵抗力</td>\n<td>对主机的安全控制，不可伪造的来源</td>\n</tr>\n<tr>\n<td>4</td>\n<td>最高级别的信心和信任</td>\n<td>两方审查+密封构建</td>\n</tr>\n</tbody></table>\n<h3 id=\"详细解释\"><a href=\"#详细解释\" class=\"headerlink\" title=\"详细解释\"></a>详细解释</h3><table>\n<thead>\n<tr>\n<th>等级</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>没有保证。 SLSA 0 表示缺少任何 SLSA 级别。</td>\n</tr>\n<tr>\n<td>1</td>\n<td><strong>构建过程必须完全脚本化&#x2F;自动化并生成出处。</strong> <br>出处是关于工件构建方式的元数据，包括构建过程、顶级源和依赖项。<br>了解出处允许软件消费者做出基于风险的安全决策。<br>SLSA 1 的 Provenance 不能防止篡改，但它提供了基本级别的代码源识别并有助于漏洞管理。</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>需要使用版本控制和生成经过身份验证的来源的托管构建服务。</strong> <br>这些附加要求使软件消费者对软件的来源更有信心。<br>在此级别，出处可防止篡改到构建服务受信任的程度。<br>SLSA 2 还提供了一个轻松升级到 SLSA 3 的途径。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>源和构建平台符合特定标准，以分别保证源的可审计性和出处的完整性。</strong> <br>我们设想了一个认证流程，审计员可以通过该流程证明平台符合要求，然后消费者就可以信赖了。 <br>SLSA 3 通过防止特定类别的威胁（例如交叉构建污染），提供比早期级别更强的防篡改保护。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>需要两人审查所有更改和密封、可重现的构建过程。</strong> <br>两人审查是发现错误和阻止不良行为的行业最佳实践。 <br>密封构建保证来源的依赖项列表是完整的。 <br>可重现的构建虽然不是严格要求的，但提供了许多可审计性和可靠性的好处。 <br>总的来说，SLSA 4 让消费者对软件未被篡改具有高度的信心。</td>\n</tr>\n</tbody></table>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><p>SLSA 可以帮助减少软件工件中的供应链威胁，但也有局限性。</p>\n<ul>\n<li>许多工件在供应链中存在大量依赖关系，完整的依赖关系图可能非常大。</li>\n<li>实际上从事安全工作的团队需要确定并关注供应链中的重要组成部分，可以手动执行，但工作量可能很大。</li>\n<li>工件的 SLSA 级别不可传递并且依赖项有自己的 SLSA 评级，这意味着可以从 SLSA 0 依赖项构建 SLSA 4 工件。因此，虽然主要的工件具有很强的安全性，但其他地方可能仍然存在风险。这些风险的总和将帮助软件消费者了解如何以及在何处使用 SLSA 4 工件。</li>\n<li>虽然这些任务的自动化会有所帮助，但对于每个软件消费者来说，全面审查每个工件的整个图表并不切实际。为了缩小这一差距，审计员和认证机构可以验证并断言某些东西符合 SLSA 要求。这对于闭源软件可能特别有价值。</li>\n</ul>\n<p>作为 SLSA 路线图的一部分，SLSA 团队还会继续探讨如何识别重要组成部分、如何确定整个供应链的总体风险以及认证的作用。</p>\n<h2 id=\"SLSA落地\"><a href=\"#SLSA落地\" class=\"headerlink\" title=\"SLSA落地\"></a>SLSA落地</h2><p>SLSA 是一个标准，但如何落地呢？</p>\n<p>我们可以通过 SLSA 的 <a href=\"https://slsa.dev/spec/v0.1/requirements\">Requirements</a> 的汇总表来一一对照进行自检，查看当前的 CI&#x2F;CD 工作流处在哪个安全等级。</p>\n<p>有没有工具能够更好的帮助我们检查并指导我们如何提高安全等级呢？</p>\n<p>目前只有少数可以实现此目的的工具，并且绝大多数只限于 GitHub。</p>\n<p><a href=\"https://github.com/ossf/scorecard\">OpenSSF Scorecard</a> 就是一个来自于开源安全基金会（OpenSSF）针对开源软件安全指标检查的一个自动化工具，它可以帮助开源维护者改进他们的安全最佳实践，并帮助开源消费者判断他们的依赖项是否安全。</p>\n<p>它是通过评估软件安全相关的许多重要项目，并为每个检查分配 0-10 的分数。你可以使用这些分数来了解需要改进的特定领域，以加强项目的安全状况。还可以评估依赖项引入的风险，并就接受这些风险、评估替代解决方案或与维护人员合作进行改进做出明智的决定。</p>\n<h2 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h2><ul>\n<li><a href=\"https://github.com/slsa-framework/slsa-verifier\">slsa-verifier</a> - 验证符合 SLSA 标准的构建出处</li>\n<li><a href=\"https://github.com/sigstore\">Sigstore</a> - 用于签名、验证和保护软件的新标准</li>\n</ul>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"}],"tags":[{"name":"SLSA","path":"api/tags/SLSA.json"}]}