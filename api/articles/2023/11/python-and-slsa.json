{"title":"Python 和 SLSA 💃","slug":"2023/11/python-and-slsa","date":"2023-11-15T06:25:39.000Z","updated":"2024-04-22T02:16:07.090Z","comments":true,"path":"api/articles/2023/11/python-and-slsa.json","excerpt":"由于近些年针对软件的供应链的攻击越来越频繁，据 SonaType 的统计从 2019 年到 2022 年针对开源软件的攻击增长了 742%，因此 2021 年 Google 提出的解决方案是软件工件供应链级别（Supply chain Levels for Software Artifacts，”SLSA”） [Figure] ","covers":["/2023/11/python-and-slsa/attacks.png","/2023/11/python-and-slsa/workflows.svg","/2023/11/python-and-slsa/publish.svg","/2023/11/python-and-slsa/install.svg"],"content":"<p>由于近些年针对软件的供应链的攻击越来越频繁，据 SonaType 的统计从 2019 年到 2022 年针对开源软件的攻击增长了 742%，因此 2021 年 Google 提出的解决方案是软件工件供应链级别（Supply chain Levels for Software Artifacts，”SLSA”）</p>\n<p><img src=\"/2023/11/python-and-slsa/attacks.png\" alt=\"Software supply chain attacks\"></p>\n<p>本篇将介绍在 Python 生态系统中，我们如何使用 SLSA 框架来生成和验证 Python 工件的来源，从而让你的 SLSA Level 从 L0&#x2F;L1 到 L3。</p>\n<p>注意：本文介绍的是针对<strong>托管在 GitHub 上的 Python 项目</strong>。SLSA 框架可通过 GitHub Actions 来实现开箱即用，只需较少的配置即可完成。</p>\n<p>对于托管在非 GitHub 上的项目（例如 Bitbucket）可以尝试 <a href=\"https://witness.dev/\">Witness</a>，下一篇我将更新关于如何使用 Witness。</p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><ol>\n<li><a href=\"#%E6%9E%84%E5%BB%BA%E7%BA%AF%E5%87%80%E7%9A%84Python%E5%8C%85\">构建纯净的Python包</a></li>\n<li><a href=\"#%E7%94%9F%E6%88%90%E5%87%BA%E5%A4%84%E8%AF%81%E6%98%8E\">生成出处证明</a></li>\n<li><a href=\"#%E4%B8%8A%E4%BC%A0%E5%88%B0PyPI\">上传到PyPI</a></li>\n<li><a href=\"#%E9%AA%8C%E8%AF%81Python%E5%8C%85%E7%9A%84%E6%9D%A5%E6%BA%90\">验证Python包的来源</a></li>\n<li><a href=\"#%E6%96%87%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E9%A1%B9%E7%9B%AE\">文中用到的项目</a></li>\n</ol>\n<p>下面是从维护人员到用户的端到端工作流程：从构建 Wheel package -&gt; 生成出处 -&gt; 验证出处 -&gt; 发布到 PyPI -&gt; 以及用户验证出处 -&gt; 安装 wheel。接下来让我们一起来完成这其中的每一步。</p>\n<p>如果你想了解 Python 打包的流程或是术语可以参见<a href=\"https://packaging.python.org/en/latest/overview/#packaging-python-libraries-and-tools\">Python 打包用户指南</a>。</p>\n<p><img src=\"/2023/11/python-and-slsa/workflows.svg\" alt=\"端到端流程\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"构建纯净的Python包\"><a href=\"#构建纯净的Python包\" class=\"headerlink\" title=\"构建纯净的Python包\"></a>构建纯净的Python包</h2><p>构建纯 Python 包通常只有两个工件：即纯 Python Wheel Package 和源代码 distribution。可以使用命令 <a href=\"https://pypi.org/project/build/\"><code>python3 -m build</code></a> 从源代码构建。</p>\n<p>下面是 GitHub Actions job 定义来构建 Wheel Package 和源代码 distribution，并为每个工件创建 SHA-256 哈希值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@...</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@...</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.</span><span class=\"string\">x</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          # 安装 build，创建 sdist 和 wheel</span></span><br><span class=\"line\"><span class=\"string\">          python -m pip install build</span></span><br><span class=\"line\"><span class=\"string\">          python -m build</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">          <span class=\"comment\"># 收集所有文件的哈希值</span></span><br><span class=\"line\">          <span class=\"string\">cd</span> <span class=\"string\">dist</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;hashes=$(sha256sum * | base64 -w0)&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">$GITHUB_OUTPUT</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-artifacts@...</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">./dist</span></span><br></pre></td></tr></table></figure>\n\n<p>这里将 build 完的 wheel package 上传到 GitHub Artifacts 存起来，用作后续在 “上传到PyPI” job 中使用。另外还将 <code>dist</code> 下的所有文件的哈希值存储在 <code>hashes</code> 用作后续的 <code>provenance</code> job 的输入。</p>\n<blockquote>\n<p>注意： SLSA 使用 <code>sha265sum</code> 的输出作为出处证明中 <code>subject-base64</code> 字段的输入。<code>sha256sum</code> 的输出是一个或多个对散列 + 名称。</p>\n</blockquote>\n<h2 id=\"生成出处证明\"><a href=\"#生成出处证明\" class=\"headerlink\" title=\"生成出处证明\"></a>生成出处证明</h2><p>现在我们已经构建了 sdist 和 wheel，我们可以从文件哈希生成来出处证明。</p>\n<p>因为我们需要将 Build 阶段的的输出作为这里生成出处的输入，因此这里使用了 <a href=\"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds\">needs</a> 选项来作为 <code>provenance</code> job 执行的前提条件。可以看到上面生成的哈希值在这里被 <code>subject-base64</code> 所使用。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">provenance:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> [<span class=\"string\">build</span>]</span><br><span class=\"line\">    <span class=\"attr\">uses:</span> <span class=\"string\">slsa-framework/slsa-github-builder/.github/workflows/generator_generic_slsa3.yml@v1.9.0</span></span><br><span class=\"line\">    <span class=\"attr\">permissions:</span></span><br><span class=\"line\">      <span class=\"comment\"># 需要检测 GitHub 操作环境</span></span><br><span class=\"line\">      <span class=\"attr\">actions:</span> <span class=\"string\">read</span></span><br><span class=\"line\">      <span class=\"comment\"># 需要通过 GitHub OIDC 创建出处</span></span><br><span class=\"line\">      <span class=\"attr\">id-token:</span> <span class=\"string\">write</span></span><br><span class=\"line\">      <span class=\"comment\"># 需要创建并上传到 GitHub Releases</span></span><br><span class=\"line\">      <span class=\"attr\">contents:</span> <span class=\"string\">write</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"comment\"># 生成的 package SHA-256 哈希值</span></span><br><span class=\"line\">      <span class=\"attr\">subject-base64:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">provenance.needs.build.output.hashes</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 将出处文件上传到 GitHub Release</span></span><br><span class=\"line\">      <span class=\"attr\">upload-assets:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>你会注意到 SLSA builders 使用<a href=\"https://docs.github.com/en/actions/using-workflows/reusing-workflows\">可重用工作流</a>功能来证明给定的 builders 行为不能被用户或其他进程修改。</p>\n<p>出处证明文件是 <a href=\"https://jsonlines.org/\">JSON lines</a>，以 <code>.intoto.jsonl</code> 结尾。<code>*.intoto.jsonl</code> 文件可以包含多个工件的证明，也可以在同一文件中包含多个出处证明。该 <code>.jsonl</code> 格式意味着该文件是一个 “JSON lines” 文件，即每行一个 JSON 文档。</p>\n<blockquote>\n<p>注意：这里有一点令人困惑的是 GitHub job 中的 <code>id-token</code> 需要 <code>write</code> 权限才能读取 GitHub OIDC 令牌。<code>read</code> 不允许你读取 OIDC…🤷。有关 <code>id-token</code> 权限的更多信息，请参阅 <a href=\"https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings\">GitHub 文档</a>。</p>\n</blockquote>\n<h2 id=\"上传到PyPI\"><a href=\"#上传到PyPI\" class=\"headerlink\" title=\"上传到PyPI\"></a>上传到PyPI</h2><p>我们使用官方 <a href=\"https://github.com/pypa/gh-action-pypi-publish\">pypa&#x2F;gh-action-pypi-publish</a> GitHub Action 将 wheel 包上传到 PyPI。</p>\n<p>注意：<code>publish</code> job 需要在 <code>build</code> 和 <code>provenance</code> 都完成后开始执行，这意味着我们可以假设  <code>provenance</code> job 已经为我们起草了 GitHub Release（因为 <code>upload-assets: true</code> 的设置），并且我们可以假设该 job 已成功。如果不先创建来 provenance 文件，我们不想将这些 wheel 包上传到 PyPI，因此我们最后上传到 PyPI。</p>\n<p><img src=\"/2023/11/python-and-slsa/publish.svg\" alt=\"发布\"></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">publish:</span></span><br><span class=\"line\">  <span class=\"attr\">needs:</span> [<span class=\"string\">&quot;build&quot;</span>, <span class=\"string\">&quot;provenance&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">permissions:</span></span><br><span class=\"line\">    <span class=\"attr\">contents:</span> <span class=\"string\">write</span></span><br><span class=\"line\">  <span class=\"attr\">runs-on:</span> <span class=\"string\">&quot;ubuntu-latest&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"comment\"># 下载已构建的 distributions</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">&quot;actions/download-artifact@...&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">&quot;dist&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">&quot;dist/&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># 上传 distributions 到 GitHub Release</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">gh</span> <span class=\"string\">release</span> <span class=\"string\">upload</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref_name</span> <span class=\"string\">&#125;&#125;</span> <span class=\"string\">dist/*</span> <span class=\"string\">--repo</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.repository</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># 发布 distributions 到 PyPI</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">&quot;pypa/gh-action-pypi-publish@...&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span> <span class=\"string\">__token__</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.PYPI_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证Python包的来源\"><a href=\"#验证Python包的来源\" class=\"headerlink\" title=\"验证Python包的来源\"></a>验证Python包的来源</h2><p>让我们使用一个真正的 Python 项目来验证它的出处。以 urllib3 项目为例，它在 GitHub Releases 发布了版本中包含出处证明，这里演示的是使用它的最新版本 <a href=\"https://github.com/urllib3/urllib3/releases/tag/2.1.0\"><code>2.1.0</code></a> 。</p>\n<p>首先我们需要下载 <a href=\"https://github.com/slsa-framework/slsa-verifier/releases\">slsa-verifier</a> 用来验证出处。下载完 <code>slsa-verifier</code> 工具后，让我们从 PyPI 获取 urllib3 wheel 包，而不使用 <a href=\"https://pip.pypa.io/en/stable/cli/pip_download/\">pip download</a>. 我们使用该 <a href=\"https://pip.pypa.io/en/stable/cli/pip_install/#cmdoption-only-binary\"><code>--only-binary</code></a> 选项强制 pip 下载 wheel。</p>\n<p><img src=\"/2023/11/python-and-slsa/install.svg\" alt=\"安装\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m pip download --only-binary=:all: urllib3</span><br><span class=\"line\">Collecting urllib3</span><br><span class=\"line\">  Downloading urllib3-2.1.0-py3-none-any.whl.metadata (6.4 kB)</span><br><span class=\"line\">Downloading urllib3-2.1.0-py3-none-any.whl (104 kB)</span><br><span class=\"line\">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 104.6/104.6 kB 761.0 kB/s eta 0:00:00</span><br><span class=\"line\">Saved ./urllib3-2.1.0-py3-none-any.whl</span><br><span class=\"line\">Successfully downloaded urllib3</span><br></pre></td></tr></table></figure>\n\n<p>下载软件包后，我们需要从 GitHub 版本下载出处证明。我们需要使用与包版本相同的 GitHub Release 来确保获得正确的出处证明，因此 tag 也是 2.1.0。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl --location -O https://github.com/urllib3/urllib3/releases/download/2.1.0/multiple.intoto.jsonl</span><br></pre></td></tr></table></figure>\n\n<p>该出处文件的名称为 <code>multiple.intoto.jsonl</code>，这是一个包含多个工件证明的出处证明的标准名称。</p>\n<p>此时，我们当前的工作目录中应该有两个文件：wheel 和出处证明，<code>ls</code> 浏览一下确保已经准备好了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\">multiple.intoto.jsonl  urllib3-2.1.0-py3-none-any.whl</span><br></pre></td></tr></table></figure>\n\n<p>从这里我们可以使用 <code>slsa-verifier</code> 来验证出处。我们可以验证最重要的事情，即哪个 GitHub 仓库实际构建了 wheel，以及其他信息，例如 git 标签、分支和建造者 ID：</p>\n<p>源存储库 (<code>--source-uri</code>)<br>建造者 ID (<code>--builder-id</code>)<br>Git 分支 (<code>--source-branch</code>)<br>git 标签 (<code>--source-tag</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里仅验证 wheel package 的 GitHub 仓库</span></span><br><span class=\"line\">slsa-verifier verify-artifact --provenance-path multiple.intoto.jsonl --source-uri github.com/urllib3/urllib3 urllib3-2.1.0-py3-none-any.whl </span><br><span class=\"line\">Verified signature against tlog entry index 49513169 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77a08c2f012d69948ed5d12e8e020852bb7936ea9208d684688e5108cca859a3302</span><br><span class=\"line\">Verified build using builder <span class=\"string\">&quot;https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.9.0&quot;</span> at commit 69be2992f8a25a1f27e49f339e4d5b98dec07462</span><br><span class=\"line\">Verifying artifact urllib3-2.1.0-py3-none-any.whl: PASSED</span><br><span class=\"line\"></span><br><span class=\"line\">PASSED: Verified SLSA provenance</span><br></pre></td></tr></table></figure>\n\n<p><strong>成功了</strong>！🥳 我们已经验证了这个 wheel 的出处，所以现在我们可以放心的安装它，因为我们知道它是按照我们的预期构建的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m pip install urllib3-2.1.0-py3-none-any.whl </span><br><span class=\"line\">Defaulting to user installation because normal site-packages is not writeable</span><br><span class=\"line\">Processing ./urllib3-2.1.0-py3-none-any.whl</span><br><span class=\"line\">Installing collected packages: urllib3</span><br><span class=\"line\">  Attempting uninstall: urllib3</span><br><span class=\"line\">    Found existing installation: urllib3 2.0.5</span><br><span class=\"line\">    Uninstalling urllib3-2.0.5:</span><br><span class=\"line\">      Successfully uninstalled urllib3-2.0.5</span><br><span class=\"line\">Successfully installed urllib3-2.1.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文中用到的项目\"><a href=\"#文中用到的项目\" class=\"headerlink\" title=\"文中用到的项目\"></a>文中用到的项目</h2><p>以下这些是本文使用的所有项目和工具：</p>\n<ul>\n<li><a href=\"https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md\">SLSA GitHub Builder</a></li>\n<li><a href=\"https://github.com/slsa-framework/slsa-verifier\">slsa-framework&#x2F;slsa-verifier</a></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish\">pypa&#x2F;gha-action-pypi-publish</a></li>\n<li><a href=\"https://github.com/pypa/build\">pypa&#x2F;build</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/blob/main/.github/workflows/publish.yml\">urllib3&#x2F;urllib3</a></li>\n</ul>\n<blockquote>\n<p>英文原文：<a href=\"https://sethmlarson.dev/python-and-slsa\">https://sethmlarson.dev/python-and-slsa</a> </p>\n</blockquote>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"构建纯净的Python包\"><a href=\"#构建纯净的Python包\" class=\"headerlink\" title=\"构建纯净的Python包\"></a>构建纯净的Python包</h2><p>构建纯 Python 包通常只有两个工件：即纯 Python Wheel Package 和源代码 distribution。可以使用命令 <a href=\"https://pypi.org/project/build/\"><code>python3 -m build</code></a> 从源代码构建。</p>\n<p>下面是 GitHub Actions job 定义来构建 Wheel Package 和源代码 distribution，并为每个工件创建 SHA-256 哈希值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@...</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@...</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.</span><span class=\"string\">x</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          # 安装 build，创建 sdist 和 wheel</span></span><br><span class=\"line\"><span class=\"string\">          python -m pip install build</span></span><br><span class=\"line\"><span class=\"string\">          python -m build</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">          <span class=\"comment\"># 收集所有文件的哈希值</span></span><br><span class=\"line\">          <span class=\"string\">cd</span> <span class=\"string\">dist</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;hashes=$(sha256sum * | base64 -w0)&quot;</span> <span class=\"string\">&gt;&gt;</span> <span class=\"string\">$GITHUB_OUTPUT</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-artifacts@...</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">./dist</span></span><br></pre></td></tr></table></figure>\n\n<p>这里将 build 完的 wheel package 上传到 GitHub Artifacts 存起来，用作后续在 “上传到PyPI” job 中使用。另外还将 <code>dist</code> 下的所有文件的哈希值存储在 <code>hashes</code> 用作后续的 <code>provenance</code> job 的输入。</p>\n<blockquote>\n<p>注意： SLSA 使用 <code>sha265sum</code> 的输出作为出处证明中 <code>subject-base64</code> 字段的输入。<code>sha256sum</code> 的输出是一个或多个对散列 + 名称。</p>\n</blockquote>\n<h2 id=\"生成出处证明\"><a href=\"#生成出处证明\" class=\"headerlink\" title=\"生成出处证明\"></a>生成出处证明</h2><p>现在我们已经构建了 sdist 和 wheel，我们可以从文件哈希生成来出处证明。</p>\n<p>因为我们需要将 Build 阶段的的输出作为这里生成出处的输入，因此这里使用了 <a href=\"https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds\">needs</a> 选项来作为 <code>provenance</code> job 执行的前提条件。可以看到上面生成的哈希值在这里被 <code>subject-base64</code> 所使用。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">provenance:</span></span><br><span class=\"line\">    <span class=\"attr\">needs:</span> [<span class=\"string\">build</span>]</span><br><span class=\"line\">    <span class=\"attr\">uses:</span> <span class=\"string\">slsa-framework/slsa-github-builder/.github/workflows/generator_generic_slsa3.yml@v1.9.0</span></span><br><span class=\"line\">    <span class=\"attr\">permissions:</span></span><br><span class=\"line\">      <span class=\"comment\"># 需要检测 GitHub 操作环境</span></span><br><span class=\"line\">      <span class=\"attr\">actions:</span> <span class=\"string\">read</span></span><br><span class=\"line\">      <span class=\"comment\"># 需要通过 GitHub OIDC 创建出处</span></span><br><span class=\"line\">      <span class=\"attr\">id-token:</span> <span class=\"string\">write</span></span><br><span class=\"line\">      <span class=\"comment\"># 需要创建并上传到 GitHub Releases</span></span><br><span class=\"line\">      <span class=\"attr\">contents:</span> <span class=\"string\">write</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"comment\"># 生成的 package SHA-256 哈希值</span></span><br><span class=\"line\">      <span class=\"attr\">subject-base64:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">provenance.needs.build.output.hashes</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"comment\"># 将出处文件上传到 GitHub Release</span></span><br><span class=\"line\">      <span class=\"attr\">upload-assets:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>你会注意到 SLSA builders 使用<a href=\"https://docs.github.com/en/actions/using-workflows/reusing-workflows\">可重用工作流</a>功能来证明给定的 builders 行为不能被用户或其他进程修改。</p>\n<p>出处证明文件是 <a href=\"https://jsonlines.org/\">JSON lines</a>，以 <code>.intoto.jsonl</code> 结尾。<code>*.intoto.jsonl</code> 文件可以包含多个工件的证明，也可以在同一文件中包含多个出处证明。该 <code>.jsonl</code> 格式意味着该文件是一个 “JSON lines” 文件，即每行一个 JSON 文档。</p>\n<blockquote>\n<p>注意：这里有一点令人困惑的是 GitHub job 中的 <code>id-token</code> 需要 <code>write</code> 权限才能读取 GitHub OIDC 令牌。<code>read</code> 不允许你读取 OIDC…🤷。有关 <code>id-token</code> 权限的更多信息，请参阅 <a href=\"https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#adding-permissions-settings\">GitHub 文档</a>。</p>\n</blockquote>\n<h2 id=\"上传到PyPI\"><a href=\"#上传到PyPI\" class=\"headerlink\" title=\"上传到PyPI\"></a>上传到PyPI</h2><p>我们使用官方 <a href=\"https://github.com/pypa/gh-action-pypi-publish\">pypa&#x2F;gh-action-pypi-publish</a> GitHub Action 将 wheel 包上传到 PyPI。</p>\n<p>注意：<code>publish</code> job 需要在 <code>build</code> 和 <code>provenance</code> 都完成后开始执行，这意味着我们可以假设  <code>provenance</code> job 已经为我们起草了 GitHub Release（因为 <code>upload-assets: true</code> 的设置），并且我们可以假设该 job 已成功。如果不先创建来 provenance 文件，我们不想将这些 wheel 包上传到 PyPI，因此我们最后上传到 PyPI。</p>\n<p><img src=\"/2023/11/python-and-slsa/publish.svg\" alt=\"发布\"></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">publish:</span></span><br><span class=\"line\">  <span class=\"attr\">needs:</span> [<span class=\"string\">&quot;build&quot;</span>, <span class=\"string\">&quot;provenance&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">permissions:</span></span><br><span class=\"line\">    <span class=\"attr\">contents:</span> <span class=\"string\">write</span></span><br><span class=\"line\">  <span class=\"attr\">runs-on:</span> <span class=\"string\">&quot;ubuntu-latest&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">steps:</span></span><br><span class=\"line\">  <span class=\"comment\"># 下载已构建的 distributions</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">&quot;actions/download-artifact@...&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">&quot;dist&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">path:</span> <span class=\"string\">&quot;dist/&quot;</span></span><br><span class=\"line\">  <span class=\"comment\"># 上传 distributions 到 GitHub Release</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">&quot;$<span class=\"template-variable\">&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">gh</span> <span class=\"string\">release</span> <span class=\"string\">upload</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref_name</span> <span class=\"string\">&#125;&#125;</span> <span class=\"string\">dist/*</span> <span class=\"string\">--repo</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.repository</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">  <span class=\"comment\"># 发布 distributions 到 PyPI</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">&quot;pypa/gh-action-pypi-publish@...&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with:</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span> <span class=\"string\">__token__</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.PYPI_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证Python包的来源\"><a href=\"#验证Python包的来源\" class=\"headerlink\" title=\"验证Python包的来源\"></a>验证Python包的来源</h2><p>让我们使用一个真正的 Python 项目来验证它的出处。以 urllib3 项目为例，它在 GitHub Releases 发布了版本中包含出处证明，这里演示的是使用它的最新版本 <a href=\"https://github.com/urllib3/urllib3/releases/tag/2.1.0\"><code>2.1.0</code></a> 。</p>\n<p>首先我们需要下载 <a href=\"https://github.com/slsa-framework/slsa-verifier/releases\">slsa-verifier</a> 用来验证出处。下载完 <code>slsa-verifier</code> 工具后，让我们从 PyPI 获取 urllib3 wheel 包，而不使用 <a href=\"https://pip.pypa.io/en/stable/cli/pip_download/\">pip download</a>. 我们使用该 <a href=\"https://pip.pypa.io/en/stable/cli/pip_install/#cmdoption-only-binary\"><code>--only-binary</code></a> 选项强制 pip 下载 wheel。</p>\n<p><img src=\"/2023/11/python-and-slsa/install.svg\" alt=\"安装\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m pip download --only-binary=:all: urllib3</span><br><span class=\"line\">Collecting urllib3</span><br><span class=\"line\">  Downloading urllib3-2.1.0-py3-none-any.whl.metadata (6.4 kB)</span><br><span class=\"line\">Downloading urllib3-2.1.0-py3-none-any.whl (104 kB)</span><br><span class=\"line\">   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 104.6/104.6 kB 761.0 kB/s eta 0:00:00</span><br><span class=\"line\">Saved ./urllib3-2.1.0-py3-none-any.whl</span><br><span class=\"line\">Successfully downloaded urllib3</span><br></pre></td></tr></table></figure>\n\n<p>下载软件包后，我们需要从 GitHub 版本下载出处证明。我们需要使用与包版本相同的 GitHub Release 来确保获得正确的出处证明，因此 tag 也是 2.1.0。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl --location -O https://github.com/urllib3/urllib3/releases/download/2.1.0/multiple.intoto.jsonl</span><br></pre></td></tr></table></figure>\n\n<p>该出处文件的名称为 <code>multiple.intoto.jsonl</code>，这是一个包含多个工件证明的出处证明的标准名称。</p>\n<p>此时，我们当前的工作目录中应该有两个文件：wheel 和出处证明，<code>ls</code> 浏览一下确保已经准备好了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\">multiple.intoto.jsonl  urllib3-2.1.0-py3-none-any.whl</span><br></pre></td></tr></table></figure>\n\n<p>从这里我们可以使用 <code>slsa-verifier</code> 来验证出处。我们可以验证最重要的事情，即哪个 GitHub 仓库实际构建了 wheel，以及其他信息，例如 git 标签、分支和建造者 ID：</p>\n<p>源存储库 (<code>--source-uri</code>)<br>建造者 ID (<code>--builder-id</code>)<br>Git 分支 (<code>--source-branch</code>)<br>git 标签 (<code>--source-tag</code>)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里仅验证 wheel package 的 GitHub 仓库</span></span><br><span class=\"line\">slsa-verifier verify-artifact --provenance-path multiple.intoto.jsonl --source-uri github.com/urllib3/urllib3 urllib3-2.1.0-py3-none-any.whl </span><br><span class=\"line\">Verified signature against tlog entry index 49513169 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77a08c2f012d69948ed5d12e8e020852bb7936ea9208d684688e5108cca859a3302</span><br><span class=\"line\">Verified build using builder <span class=\"string\">&quot;https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.9.0&quot;</span> at commit 69be2992f8a25a1f27e49f339e4d5b98dec07462</span><br><span class=\"line\">Verifying artifact urllib3-2.1.0-py3-none-any.whl: PASSED</span><br><span class=\"line\"></span><br><span class=\"line\">PASSED: Verified SLSA provenance</span><br></pre></td></tr></table></figure>\n\n<p><strong>成功了</strong>！🥳 我们已经验证了这个 wheel 的出处，所以现在我们可以放心的安装它，因为我们知道它是按照我们的预期构建的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m pip install urllib3-2.1.0-py3-none-any.whl </span><br><span class=\"line\">Defaulting to user installation because normal site-packages is not writeable</span><br><span class=\"line\">Processing ./urllib3-2.1.0-py3-none-any.whl</span><br><span class=\"line\">Installing collected packages: urllib3</span><br><span class=\"line\">  Attempting uninstall: urllib3</span><br><span class=\"line\">    Found existing installation: urllib3 2.0.5</span><br><span class=\"line\">    Uninstalling urllib3-2.0.5:</span><br><span class=\"line\">      Successfully uninstalled urllib3-2.0.5</span><br><span class=\"line\">Successfully installed urllib3-2.1.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文中用到的项目\"><a href=\"#文中用到的项目\" class=\"headerlink\" title=\"文中用到的项目\"></a>文中用到的项目</h2><p>以下这些是本文使用的所有项目和工具：</p>\n<ul>\n<li><a href=\"https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md\">SLSA GitHub Builder</a></li>\n<li><a href=\"https://github.com/slsa-framework/slsa-verifier\">slsa-framework&#x2F;slsa-verifier</a></li>\n<li><a href=\"https://github.com/pypa/gh-action-pypi-publish\">pypa&#x2F;gha-action-pypi-publish</a></li>\n<li><a href=\"https://github.com/pypa/build\">pypa&#x2F;build</a></li>\n<li><a href=\"https://github.com/urllib3/urllib3/blob/main/.github/workflows/publish.yml\">urllib3&#x2F;urllib3</a></li>\n</ul>\n<blockquote>\n<p>英文原文：<a href=\"https://sethmlarson.dev/python-and-slsa\">https://sethmlarson.dev/python-and-slsa</a> </p>\n</blockquote>\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"SLSA","path":"api/tags/SLSA.json"}]}