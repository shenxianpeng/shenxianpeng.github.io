{"title":"How to adopt Supply Chain Security for GitHub and Non-GitHub projects","slug":"2023/12/supply-chain-security","date":"2023-12-02T06:25:39.000Z","updated":"2025-06-05T02:03:35.651Z","comments":true,"path":"api/articles/2023/12/supply-chain-security.json","excerpt":"Why Software Supply Chain Security is important?Software supply chain security is the act of securing the components, activities, and practices involved in creating software.Attacks in the software supply chain have become more and more frequent in recent years, SonaType reported more than 700% of attacks in open-source software from 2019 to 2022. [Figure] Based on this background, many organizations want to incorporate best practices from the open-source community into our CICD pipeline.","covers":["/2023/12/supply-chain-security/sonatype.png","/2023/12/supply-chain-security/lf-cncf.png"],"content":"<h2 id=\"Why-Software-Supply-Chain-Security-is-important\"><a href=\"#Why-Software-Supply-Chain-Security-is-important\" class=\"headerlink\" title=\"Why Software Supply Chain Security is important?\"></a>Why Software Supply Chain Security is important?</h2><p>Software supply chain security is the act of securing the components, activities, and practices involved in creating software.</p>\n<p>Attacks in the software supply chain have become more and more frequent in recent years, SonaType reported more than 700% of attacks in open-source software from 2019 to 2022.</p>\n<p><img src=\"/2023/12/supply-chain-security/sonatype.png\" alt=\"SonaType reported\"></p>\n<p>In this <a href=\"https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html\">Google Security Blog</a>, there are many real examples of software supply chain attacks that pose growing threats to users and Google proposed a solution called SLSA in 2021.</p>\n<p>Also, some well-known organizations such as Linux Foundation and CNCF have created standards and tools to address the issue of how to produce trusted software and attestations.</p>\n<p><img src=\"/2023/12/supply-chain-security/lf-cncf.png\" alt=\"LF &amp; CNCF\"></p>\n<p>Based on this background, many organizations want to incorporate best practices from the open-source community into our CICD pipeline.</p>\n<span id=\"more\"></span>\n<h2 id=\"How-to-adopt-Supply-Chain-Security-for-GitHub-and-Non-GitHub-projects\"><a href=\"#How-to-adopt-Supply-Chain-Security-for-GitHub-and-Non-GitHub-projects\" class=\"headerlink\" title=\"How to adopt Supply Chain Security for GitHub and Non-GitHub projects\"></a>How to adopt Supply Chain Security for GitHub and Non-GitHub projects</h2><p>Next, I will show you how to adopt on both GitHub and Rocket Bitbucket as an example to show you how we integrate software supply chain security</p>\n<h3 id=\"GitHub-projects\"><a href=\"#GitHub-projects\" class=\"headerlink\" title=\"GitHub projects\"></a>GitHub projects</h3><p>On GitHub, the easiest and most popular option is to use slsa-github-generator, a tool provided by the official slsa-framework for native GitHub projects to create attestations during the build process and upload signed attestations to Rekor a transparency log system created by Sigstore. Here is the <a href=\"https://github.com/shenxianpeng/slsa-provenance-demo\">demo reposistory</a> for reference.</p>\n<p>Before installing your product package, the user can download the package and verify the provenance file at the end of .intoto.jsonl first, then run the following command manually or in their CI pipeline to verify whether the artifact is tampered with or not</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-4.4$ slsa-verifier verify-artifact test-1.0.0-py3-none-any.whl --provenance-path test-1.0.0-py3-none-any.whl.intoto.jsonl --source-uri github.com/shenxianpeng/slsa-provenance-demo</span><br><span class=\"line\">Verified signature against tlog entry index 49728014 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77af7063689e8760fd7134f37e17251ec1d5adc16af64cb5cb579493278f7686e77</span><br><span class=\"line\">Verified build using builder &quot;https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.9.0&quot; at commit fb7f6df9f8565ed6fa01591df2af0c41e5573798</span><br><span class=\"line\">Verifying artifact test-1.0.0-py3-none-any.whl: PASSED</span><br><span class=\"line\"></span><br><span class=\"line\">PASSED: Verified SLSA provenance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Non-GitHub-projects\"><a href=\"#Non-GitHub-projects\" class=\"headerlink\" title=\"Non-GitHub projects\"></a>Non-GitHub projects</h3><p>However, there are many organizations’ codes are hosted on Non-GitHub SCM, so you can use the Witness, a tool from CNCF in-toto, which can help us generate and verify attestations.</p>\n<p>It’s easy to scale Witness to your products, just integrate witness command into the existing build command it will generate proof of the software build and release execution process and can be verified.</p>\n<p>You can follow <a href=\"https://github.com/shenxianpeng/witness-demo\">this demo to integrate with witness</a>, then will generate the build package along with attestations file, policy-signed.json file, and a public key.</p>\n<p>Before user installing your product package, they can run the following command manually or in their CI pipeline to verify whether the artifact is tampered or not.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">witness verify -f dist/witness_demo-1.0.0-py3-none-any.whl -a witness-demo-att.json -p policy-signed.json -k witness-demo-pub.pem</span><br><span class=\"line\">INFO    Using config file: .witness.yaml</span><br><span class=\"line\">INFO    Verification succeeded</span><br><span class=\"line\">INFO    Evidence:</span><br><span class=\"line\">INFO    0: witness-demo-att.json</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>\n","more":"<h2 id=\"How-to-adopt-Supply-Chain-Security-for-GitHub-and-Non-GitHub-projects\"><a href=\"#How-to-adopt-Supply-Chain-Security-for-GitHub-and-Non-GitHub-projects\" class=\"headerlink\" title=\"How to adopt Supply Chain Security for GitHub and Non-GitHub projects\"></a>How to adopt Supply Chain Security for GitHub and Non-GitHub projects</h2><p>Next, I will show you how to adopt on both GitHub and Rocket Bitbucket as an example to show you how we integrate software supply chain security</p>\n<h3 id=\"GitHub-projects\"><a href=\"#GitHub-projects\" class=\"headerlink\" title=\"GitHub projects\"></a>GitHub projects</h3><p>On GitHub, the easiest and most popular option is to use slsa-github-generator, a tool provided by the official slsa-framework for native GitHub projects to create attestations during the build process and upload signed attestations to Rekor a transparency log system created by Sigstore. Here is the <a href=\"https://github.com/shenxianpeng/slsa-provenance-demo\">demo reposistory</a> for reference.</p>\n<p>Before installing your product package, the user can download the package and verify the provenance file at the end of .intoto.jsonl first, then run the following command manually or in their CI pipeline to verify whether the artifact is tampered with or not</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-4.4$ slsa-verifier verify-artifact test-1.0.0-py3-none-any.whl --provenance-path test-1.0.0-py3-none-any.whl.intoto.jsonl --source-uri github.com/shenxianpeng/slsa-provenance-demo</span><br><span class=\"line\">Verified signature against tlog entry index 49728014 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77af7063689e8760fd7134f37e17251ec1d5adc16af64cb5cb579493278f7686e77</span><br><span class=\"line\">Verified build using builder &quot;https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.9.0&quot; at commit fb7f6df9f8565ed6fa01591df2af0c41e5573798</span><br><span class=\"line\">Verifying artifact test-1.0.0-py3-none-any.whl: PASSED</span><br><span class=\"line\"></span><br><span class=\"line\">PASSED: Verified SLSA provenance</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Non-GitHub-projects\"><a href=\"#Non-GitHub-projects\" class=\"headerlink\" title=\"Non-GitHub projects\"></a>Non-GitHub projects</h3><p>However, there are many organizations’ codes are hosted on Non-GitHub SCM, so you can use the Witness, a tool from CNCF in-toto, which can help us generate and verify attestations.</p>\n<p>It’s easy to scale Witness to your products, just integrate witness command into the existing build command it will generate proof of the software build and release execution process and can be verified.</p>\n<p>You can follow <a href=\"https://github.com/shenxianpeng/witness-demo\">this demo to integrate with witness</a>, then will generate the build package along with attestations file, policy-signed.json file, and a public key.</p>\n<p>Before user installing your product package, they can run the following command manually or in their CI pipeline to verify whether the artifact is tampered or not.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">witness verify -f dist/witness_demo-1.0.0-py3-none-any.whl -a witness-demo-att.json -p policy-signed.json -k witness-demo-pub.pem</span><br><span class=\"line\">INFO    Using config file: .witness.yaml</span><br><span class=\"line\">INFO    Verification succeeded</span><br><span class=\"line\">INFO    Evidence:</span><br><span class=\"line\">INFO    0: witness-demo-att.json</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>","categories":[{"name":"DevSecOps","path":"api/categories/DevSecOps.json"}],"tags":[{"name":"SLSA","path":"api/tags/SLSA.json"},{"name":"Witness","path":"api/tags/Witness.json"}]}