<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World</title>
  
  <subtitle>Weblog of non-famous code farmers.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenxianpeng.github.io/"/>
  <updated>2020-08-16T05:45:17.729Z</updated>
  <id>https://shenxianpeng.github.io/</id>
  
  <author>
    <name>Xianpeng Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Fixed &quot;Remote session was disconnected because there are no Remote Desktop client access licenses available&quot;</title>
    <link href="https://shenxianpeng.github.io/2020/08/rdp-problem/"/>
    <id>https://shenxianpeng.github.io/2020/08/rdp-problem/</id>
    <published>2020-08-10T07:40:04.000Z</published>
    <updated>2020-08-16T05:45:17.729Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Sometime my Windows server 2012 R2 has RDP connect problem below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Remote session was disconnected because there are no Remote Desktop client access licenses available for this computer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Please contact the server administrator.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/2020/08/rdp-problem/RDP-failed.png&quot; alt=&quot;RDP connect problem&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Windows" scheme="https://shenxianpeng.github.io/tags/windows/"/>
    
      <category term="RDP" scheme="https://shenxianpeng.github.io/tags/rdp/"/>
    
  </entry>
  
  <entry>
    <title>通过 generic-webhook-trigger 插件实时获取 Bitbucket Repository Events</title>
    <link href="https://shenxianpeng.github.io/2020/08/bitbucket-pull-request-event/"/>
    <id>https://shenxianpeng.github.io/2020/08/bitbucket-pull-request-event/</id>
    <published>2020-08-07T08:53:03.000Z</published>
    <updated>2020-08-16T05:49:06.311Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。&lt;/p&gt;
&lt;p&gt;使用过 Jenkins Multi-branch pipeline Job 的用户知道，这个 Job 类型的环境变量中可以得到 Pull Request 的相关信息如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/08/bitbucket-pull-request-event/pull-request-env.png&quot; alt=&quot;Multi-branch pipeline Job 环境变量&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了获取这个变量需要创建这种类型的 Job，并且可能需要 clone 该仓库的代码，有点杀鸡宰牛的意思，看起来并不是一个特别恰当的办法。&lt;/p&gt;
&lt;p&gt;如何通过创建一个普通的 Jenkins Job 就能实时获取 Bitbucket 仓库以及 Pull Request 事件呢？通过以下功能和插件可以实现。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Bitbucket" scheme="https://shenxianpeng.github.io/tags/bitbucket/"/>
    
      <category term="webhook" scheme="https://shenxianpeng.github.io/tags/webhook/"/>
    
      <category term="generic" scheme="https://shenxianpeng.github.io/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>如何把自己的 Python 代码打包发布到 PyPI</title>
    <link href="https://shenxianpeng.github.io/2020/08/release-to-pypi/"/>
    <id>https://shenxianpeng.github.io/2020/08/release-to-pypi/</id>
    <published>2020-08-02T00:13:17.000Z</published>
    <updated>2020-08-02T01:52:33.950Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;使用 Python 编程的人都知道，Python 的优势之一就是有大量的第三方库，通常使用如下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install xxxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;就可以轻松下载，真是即酷炫又方便，你有没有想过这个是怎么实现的？最近正好赶上又开始写 Python 借此机会分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://shenxianpeng.github.io/categories/python/"/>
    
    
      <category term="Python" scheme="https://shenxianpeng.github.io/tags/python/"/>
    
      <category term="Release" scheme="https://shenxianpeng.github.io/tags/release/"/>
    
      <category term="PyPI" scheme="https://shenxianpeng.github.io/tags/pypi/"/>
    
  </entry>
  
  <entry>
    <title>Annual work summary from 2019.03 - 2020.07</title>
    <link href="https://shenxianpeng.github.io/2020/07/annual-work-summary/"/>
    <id>https://shenxianpeng.github.io/2020/07/annual-work-summary/</id>
    <published>2020-07-29T05:52:04.000Z</published>
    <updated>2020-07-29T06:14:55.731Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Summarize what did I do from 2019.03 to 2020.07 when I became a Build Release/DevOps engineer.&lt;/p&gt;
&lt;h2 id=&quot;Build-automation&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="MyNotes" scheme="https://shenxianpeng.github.io/categories/mynotes/"/>
    
    
      <category term="Work" scheme="https://shenxianpeng.github.io/tags/work/"/>
    
      <category term="Summary" scheme="https://shenxianpeng.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>程序员的自我修养 —— Git 提交信息规范</title>
    <link href="https://shenxianpeng.github.io/2020/07/commit-messages-specification/"/>
    <id>https://shenxianpeng.github.io/2020/07/commit-messages-specification/</id>
    <published>2020-07-26T00:39:22.000Z</published>
    <updated>2020-08-02T02:53:39.488Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在使用 Git 提交代码的时候，在与他人合作同时开发的项目，一个良好的提交信息规范我总结有三个好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有助于其他人接手，进行 Bug 修复或是新功能的添加都是很好的参考&lt;/li&gt;
&lt;li&gt;并且良好的规范有助于自动化脚本的识别&lt;/li&gt;
&lt;li&gt;最后这也是体现了一个程序员的自我修养&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此对于一个长期发展的项目必须要有良好的信息信息规范的约定。先看两个例子：&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://shenxianpeng.github.io/categories/git/"/>
    
    
      <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
      <category term="Specification" scheme="https://shenxianpeng.github.io/tags/specification/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 执行 Shell 如果返回值不为0，作业(Job)停止并失败怎么办？</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-tips-3/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-tips-3/</id>
    <published>2020-07-22T08:11:36.000Z</published>
    <updated>2020-07-22T09:57:58.657Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Jenkins Tips 3》—— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在使用 Jenkins pipeline 时，如果 Shell 的返回值不为零（也就是 Shell 命令执行时有错误），Jenkins Job 默认会标记当前的 stage 为失败。因此整个 Job 也会失败。&lt;/p&gt;
&lt;p&gt;在有些时候我们希望 Shell 虽然执行失败返回的不为零，但希望Jenkins Job 在执行成功后，要显示成功状态。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Tips" scheme="https://shenxianpeng.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>How to fix &quot;.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service&quot;</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-windows-agent-connect-problem/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-windows-agent-connect-problem/</id>
    <published>2020-07-16T03:28:20.000Z</published>
    <updated>2020-08-16T05:11:32.065Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;When I upgrade Jenkins 2.176.3 to Jenkins 2.235.1, my Windows agent can not connect with master successfully and out come this warining message “.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service”.&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>每个 Jenkins 用户都应该知道这三个最佳实践</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-best-practice-cn/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-best-practice-cn/</id>
    <published>2020-07-06T10:57:02.000Z</published>
    <updated>2020-07-08T07:10:41.575Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​在使用 Jenkins 实施了企业级的 CI/CD 工作，有如下三个最重要的实践和总结。&lt;/p&gt;
&lt;p&gt;第一，Configuration as Code（配置即代码）&lt;br&gt;其次，Jenkins shared libraries（Jenkins 共享库）&lt;br&gt;最后，Multi-Branch Pipeline（多分支流水线）&lt;/p&gt;
&lt;h2 id=&quot;配置即代码&quot;&gt;&lt;a href=&quot;#配置即代码&quot; class=&quot;headerlink&quot; title=&quot;配置即代码&quot;&gt;&lt;/a&gt;配置即代码&lt;/h2&gt;&lt;p&gt;配置即代码(Configuration as Code)是一种在代码仓库里管理配置的方法。&lt;/p&gt;
&lt;h3 id=&quot;它有什么好处&quot;&gt;&lt;a href=&quot;#它有什么好处&quot; class=&quot;headerlink&quot; title=&quot;它有什么好处&quot;&gt;&lt;/a&gt;它有什么好处&lt;/h3&gt;&lt;h4 id=&quot;作业透明化&quot;&gt;&lt;a href=&quot;#作业透明化&quot; class=&quot;headerlink&quot; title=&quot;作业透明化&quot;&gt;&lt;/a&gt;作业透明化&lt;/h4&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Top 3 best practice</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-best-practice/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-best-practice/</id>
    <published>2020-07-03T10:57:02.000Z</published>
    <updated>2020-07-14T10:52:15.092Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;I am Xianpeng, a build engineer. Today, I am going to share with you three Jenkins Practice.&lt;/p&gt;
&lt;p&gt;I will talk about Configuration as code, followed up with shared libraries, and then Multi-Branch Pipeline in the end.&lt;/p&gt;
&lt;h2 id=&quot;Configuration-as-Code&quot;&gt;&lt;a href=&quot;#Configuration-as-Code&quot; class=&quot;headerlink&quot; title=&quot;Configuration as Code&quot;&gt;&lt;/a&gt;Configuration as Code&lt;/h2&gt;&lt;p&gt;What is Configuration as Code?&lt;/p&gt;
&lt;p&gt;Configuration as code (CAC) is an approach that managing configuration resources in a bitbucket repository&lt;/p&gt;
&lt;h3 id=&quot;What-are-the-benefits&quot;&gt;&lt;a href=&quot;#What-are-the-benefits&quot; class=&quot;headerlink&quot; title=&quot;What are the benefits?&quot;&gt;&lt;/a&gt;What are the benefits?&lt;/h3&gt;&lt;h4 id=&quot;First-Jenkins-Job-Transparency&quot;&gt;&lt;a href=&quot;#First-Jenkins-Job-Transparency&quot; class=&quot;headerlink&quot; title=&quot;First, Jenkins Job Transparency&quot;&gt;&lt;/a&gt;First, Jenkins Job Transparency&lt;/h4&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>一名软件测试工程师的成长之路</title>
    <link href="https://shenxianpeng.github.io/2020/06/about-my-wechat-official-account/"/>
    <id>https://shenxianpeng.github.io/2020/06/about-my-wechat-official-account/</id>
    <published>2020-06-30T14:13:26.000Z</published>
    <updated>2020-07-03T05:18:07.554Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关注本公众号的读者们可能会感到困惑，我最开始分享是软件功能测试、自动化测试；之后短暂的分享过一点开发；再之后主要在分享 CI/CD 及 DevOps 相关的内容。&lt;/p&gt;
&lt;p&gt;因此，我想通过本篇简单介绍下自己的公众号以及写公众号带来了哪些收获，通过这个过程展示了作为&lt;strong&gt;一名软件测试工程师的成长之路。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MyNotes" scheme="https://shenxianpeng.github.io/categories/mynotes/"/>
    
    
      <category term="Thought" scheme="https://shenxianpeng.github.io/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>将 Jenkins Shell 返回的字符串处理为字符数组</title>
    <link href="https://shenxianpeng.github.io/2020/06/Jenkins-tips-2/"/>
    <id>https://shenxianpeng.github.io/2020/06/Jenkins-tips-2/</id>
    <published>2020-06-22T06:37:29.000Z</published>
    <updated>2020-07-22T09:59:57.069Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Tips" scheme="https://shenxianpeng.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>忽略 Jenkins Shell 步骤中的故障</title>
    <link href="https://shenxianpeng.github.io/2020/06/Jenkins-tips-1/"/>
    <id>https://shenxianpeng.github.io/2020/06/Jenkins-tips-1/</id>
    <published>2020-06-21T13:42:17.000Z</published>
    <updated>2020-07-22T09:59:11.851Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不希望 Shell 脚本因失败而中止&lt;/li&gt;
&lt;li&gt;想一直运行 Shell 脚本并报告失败&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Tips" scheme="https://shenxianpeng.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job</title>
    <link href="https://shenxianpeng.github.io/2020/06/vm-status-check-via-jenkins/"/>
    <id>https://shenxianpeng.github.io/2020/06/vm-status-check-via-jenkins/</id>
    <published>2020-06-12T19:34:28.000Z</published>
    <updated>2020-07-03T05:19:05.352Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Shell" scheme="https://shenxianpeng.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题</title>
    <link href="https://shenxianpeng.github.io/2020/06/Java-net-SocketException-on-AIX/"/>
    <id>https://shenxianpeng.github.io/2020/06/Java-net-SocketException-on-AIX/</id>
    <published>2020-06-03T11:30:03.000Z</published>
    <updated>2020-07-03T05:17:27.155Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分享一个花了两天时间才解决的一个问题：使用 Jenkins Artifactory 插件上传制品到 https 协议的企业级的 Artifactory 失败。该问题只在 AIX 平台上出现的，其他 Windows，Linux, Unix 均正常。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
      <category term="Artifactory" scheme="https://shenxianpeng.github.io/tags/artifactory/"/>
    
      <category term="JFrog" scheme="https://shenxianpeng.github.io/tags/jfrog/"/>
    
  </entry>
  
  <entry>
    <title>从 “会写程序的干不过会写PPT的” —— 聊程序员写作</title>
    <link href="https://shenxianpeng.github.io/2020/05/programmers-read-and-write/"/>
    <id>https://shenxianpeng.github.io/2020/05/programmers-read-and-write/</id>
    <published>2020-05-30T13:32:08.000Z</published>
    <updated>2020-07-03T05:16:22.498Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在程序员圈子里比较流行这样一句话“会写程序的干不过会写 PPT 的”，还记得 2019 年新东方年会的一首《放飞自我》里有这样一句歌词戳中了绝大大多数程序员的内心&lt;/p&gt;
&lt;p&gt;“干的累死累活，有成果那又如何，到头来干不过写PPT的”。&lt;/p&gt;
&lt;p&gt;一时间大家好像都认同了这个说法，表达着自己的不满和无奈。&lt;/p&gt;
    
    </summary>
    
      <category term="MyNotes" scheme="https://shenxianpeng.github.io/categories/mynotes/"/>
    
    
      <category term="Thought" scheme="https://shenxianpeng.github.io/tags/thought/"/>
    
      <category term="write" scheme="https://shenxianpeng.github.io/tags/write/"/>
    
  </entry>
  
  <entry>
    <title>如何确保提交 Jenkins Pipeline 前没有语法错误</title>
    <link href="https://shenxianpeng.github.io/2020/05/jenkins-pipeline-linter-connector/"/>
    <id>https://shenxianpeng.github.io/2020/05/jenkins-pipeline-linter-connector/</id>
    <published>2020-05-23T06:38:59.000Z</published>
    <updated>2020-07-03T05:17:07.753Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在做 Jenkins 声明式流水线开发时常会遇到的问题是：Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。&lt;/p&gt;
&lt;p&gt;为了减少这种因为语法错误而需要频繁像代码库去提交的情况，最好还是在提交之前进行“编译”检查，来查看当前的 Pipeline 是否存在语法错误。&lt;/p&gt;
&lt;p&gt;经过调查发现 Jenkins 本身提供了这样的 REST API，可以直接使用这个 API 来对 Pipeline 声明式进行语法校验，这个方式需要执行一长串的 &lt;code&gt;curl&lt;/code&gt; 命令，看起来似乎很麻烦，如果能在 IDE 里直接运行就好了。VS Code 作为当前当前最流行 IDE 工具，不负期望，果然是有插件的。&lt;/p&gt;
&lt;p&gt;本文介绍了两种方式来实现如何对 Jenkins 声明式流水线在 Jenkins 构建执行前进行语法错误检查，这两种方式的原理都是通过调用 Jenkins REST API 来实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="vscode" scheme="https://shenxianpeng.github.io/tags/vscode/"/>
    
      <category term="Pipeline" scheme="https://shenxianpeng.github.io/tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>Nightwarch v1.3 介绍</title>
    <link href="https://shenxianpeng.github.io/2020/05/nightwatch-v1-3/"/>
    <id>https://shenxianpeng.github.io/2020/05/nightwatch-v1-3/</id>
    <published>2020-05-17T01:00:00.000Z</published>
    <updated>2020-07-03T05:16:39.263Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Nightwatch js 是我之前写自动化测试用例使用了很长一段时间的测试框架，我当时的使用 v0.9 版本并且对使用和 API 进行了翻译。作为一名前测试工程师，对于自动化的知识不能不更新下自己的知识库，一转眼 Nightwatch 1.3 版本已经发布了，可以看到它在 GitHub 上的使用和关注度还是很高的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/05/nightwatch-v1-3/nightwatch-star.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Nightwarch.js 是一个端到端的基于 Node.js 使用 W3C Webdriver （以前是 Selenium ）的自动化测试框架。它是一个完整的集成解决方案，用于 web 应用程序和网站的端到端测试，以及 Node.js 单元测试和集成测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Automation" scheme="https://shenxianpeng.github.io/categories/automation/"/>
    
    
      <category term="Nightwatch" scheme="https://shenxianpeng.github.io/tags/nightwatch/"/>
    
      <category term="Javascript" scheme="https://shenxianpeng.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>How to use JMeter to do Performance Testing</title>
    <link href="https://shenxianpeng.github.io/2020/05/jmeter-performance-testing/"/>
    <id>https://shenxianpeng.github.io/2020/05/jmeter-performance-testing/</id>
    <published>2020-05-09T06:28:09.000Z</published>
    <updated>2020-07-03T05:16:53.235Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Record-JMeter-Scripts&quot;&gt;&lt;a href=&quot;#Record-JMeter-Scripts&quot; class=&quot;headerlink&quot; title=&quot;Record JMeter Scripts&quot;&gt;&lt;/a&gt;Record JMeter Scripts&lt;/h2&gt;&lt;p&gt;use JMeter’s HTTP(S) Test Script Recorder, please refer to this official document &lt;a href=&quot;https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Running-JMeter-Scripts&quot;&gt;&lt;a href=&quot;#Running-JMeter-Scripts&quot; class=&quot;headerlink&quot; title=&quot;Running JMeter Scripts&quot;&gt;&lt;/a&gt;Running JMeter Scripts&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Debug scripts on JMeter in GUI Mode&lt;/p&gt;
&lt;p&gt;You can debug your record scripts in GUI Mode until there are no errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;run test scripts in Non-GUI Mode(Command Line mode) recommend&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jmeter -n -t ..\extras\Test.jmx -l Test.jtl&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Automation" scheme="https://shenxianpeng.github.io/categories/automation/"/>
    
    
      <category term="JMeter" scheme="https://shenxianpeng.github.io/tags/jmeter/"/>
    
      <category term="performance" scheme="https://shenxianpeng.github.io/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Synchronize from Bitbucket to GitHub via Jenkins</title>
    <link href="https://shenxianpeng.github.io/2020/05/sync-from-bitbucket-to-github/"/>
    <id>https://shenxianpeng.github.io/2020/05/sync-from-bitbucket-to-github/</id>
    <published>2020-05-05T08:54:09.000Z</published>
    <updated>2020-07-03T05:20:19.554Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近我们团队需要将一些示例和例子从内部的 Bitbucket 同步到 GitHub。我了解 GitHub 可以创建公共的或是私人的仓库，但我们需要保持以下两点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只分享我们想给客户分享的内容&lt;/li&gt;
&lt;li&gt;不改变当前的工作流程，即继续使用 Bitbucket&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Bitbucket" scheme="https://shenxianpeng.github.io/tags/bitbucket/"/>
    
      <category term="GitHub" scheme="https://shenxianpeng.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 与 Bitbucket Webhooks 的配置和使用</title>
    <link href="https://shenxianpeng.github.io/2020/04/Bitbucket-webhooks-cn/"/>
    <id>https://shenxianpeng.github.io/2020/04/Bitbucket-webhooks-cn/</id>
    <published>2020-04-28T14:40:21.000Z</published>
    <updated>2020-07-03T05:21:08.270Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;Jenkins 的 multi-branch pipeline 想必很多人已经在用了，使用这种类型的 Jenkins Job 最显著的作用就是可以对 Git 仓库里的任何分支和任何 Pull Request（以下简写为 PR）进行构建。&lt;/p&gt;
&lt;p&gt;在做 Jenkins 与 Bitbucket 的集成时，需要安装插件：Bitbucket Branch Source，可以通过该插件在 Jenkins 里进行 webhook 的配置。这种方式对于没有 Bitbucket 仓库的管理权限，CI/CD 暂且处于变更比较频繁的阶段，不想麻烦的去申请添加 webhook 的同学来说是非常友好的，就是可以不用通过管理员在 Bitbucket 设置里添加 webhook 也可以实现创建 PR 后触发 Jenkins 构建。&lt;/p&gt;
&lt;p&gt;但我最近遭遇了两次：在创建 PR 后没有触发 Jenkins 自动构建，查了 Jenkins 和 Bitbucket Branch Source 插件的配置，并没有任何改动，也各种 Google 之后也没有找到相应的解决办法（如果有遇到此情况的小伙伴欢迎一起交流）。&lt;/p&gt;
&lt;p&gt;那既然这条路不稳定，不好走，那就走一条可以走通的路、直接的硬路，即在 Bitbucket 对应的仓库中添加 webhooks。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Bitbucket" scheme="https://shenxianpeng.github.io/tags/bitbucket/"/>
    
      <category term="Webhooks" scheme="https://shenxianpeng.github.io/tags/webhooks/"/>
    
  </entry>
  
</feed>
