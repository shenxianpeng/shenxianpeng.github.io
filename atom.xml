<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peter Shen</title>
  
  <subtitle>A DevOps engineer&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenxianpeng.github.io/"/>
  <updated>2022-01-11T16:19:05.865Z</updated>
  <id>https://shenxianpeng.github.io/</id>
  
  <author>
    <name>shenxianpeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【必读】Docker 最佳实践</title>
    <link href="https://shenxianpeng.github.io/2022/01/docker-best-practice/"/>
    <id>https://shenxianpeng.github.io/2022/01/docker-best-practice/</id>
    <published>2022-01-12T04:18:16.000Z</published>
    <updated>2022-01-11T16:19:05.865Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇分享在编写 Dockerfiles 和使用 Docker 时应遵循的一些最佳实践。篇幅较长，但保证看完会很有收获。&lt;/p&gt;
&lt;p&gt;下面所列举的大多数做法适用于所有的开发人员，不论使用何种编程语言。但有一些做法只适用于 Python 相关的开发程序。&lt;/p&gt;
&lt;h2 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h2&gt;&lt;h3 id=&quot;关于-Dockerfiles&quot;&gt;&lt;a href=&quot;#关于-Dockerfiles&quot; class=&quot;headerlink&quot; title=&quot;关于 Dockerfiles&quot;&gt;&lt;/a&gt;关于 Dockerfiles&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用多阶段的构建&lt;/li&gt;
&lt;li&gt;调整 Dockerfile 命令的顺序&lt;/li&gt;
&lt;li&gt;使用小型 Docker 基础镜像&lt;/li&gt;
&lt;li&gt;尽量减少层的数量&lt;/li&gt;
&lt;li&gt;使用无特权的容器&lt;/li&gt;
&lt;li&gt;优先选择 &lt;code&gt;COPY&lt;/code&gt; 而不是 &lt;code&gt;ADD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;Python&lt;/code&gt; 包缓存到 Docker 主机上&lt;/li&gt;
&lt;li&gt;每个容器只运行一个进程&lt;/li&gt;
&lt;li&gt;优先选择数组而不是字符串语法&lt;/li&gt;
&lt;li&gt;理解 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 和 &lt;code&gt;CMD&lt;/code&gt; 之间的区别&lt;/li&gt;
&lt;li&gt;添加健康检查 &lt;code&gt;HEALTHCHECK&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关于-Images&quot;&gt;&lt;a href=&quot;#关于-Images&quot; class=&quot;headerlink&quot; title=&quot;关于 Images&quot;&gt;&lt;/a&gt;关于 Images&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Docker 镜像的版本&lt;/li&gt;
&lt;li&gt;不要在图像中存储密钥&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;检查和扫描你的 Docker 文件和镜像&lt;/li&gt;
&lt;li&gt;签署和验证图像&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;更多实践&quot;&gt;&lt;a href=&quot;#更多实践&quot; class=&quot;headerlink&quot; title=&quot;更多实践&quot;&gt;&lt;/a&gt;更多实践&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;Python&lt;/code&gt; 虚拟环境&lt;/li&gt;
&lt;li&gt;设置内存和CPU的限制&lt;/li&gt;
&lt;li&gt;记录到 stdout 或 stderr&lt;/li&gt;
&lt;li&gt;为 Gunicorn Heartbeat 使用共享内存挂载&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://shenxianpeng.github.io/categories/docker/"/>
    
    
      <category term="Docker" scheme="https://shenxianpeng.github.io/tags/docker/"/>
    
      <category term="Dokerfile" scheme="https://shenxianpeng.github.io/tags/dokerfile/"/>
    
  </entry>
  
  <entry>
    <title>2022年序员如何选择显示器？1080p还是2K? 单屏还是多屏？</title>
    <link href="https://shenxianpeng.github.io/2021/12/choose-monitor/"/>
    <id>https://shenxianpeng.github.io/2021/12/choose-monitor/</id>
    <published>2021-12-21T13:19:26.000Z</published>
    <updated>2021-12-21T15:04:34.673Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;工作十几年用过了不少显示器，从最初的 17寸，到后来的 23寸、27寸、32寸、再到现在的 34 寸，根据我自己的使用体验，来个主观推荐：&lt;/p&gt;
&lt;p&gt;第一名，一个34寸曲面显示器&lt;br&gt;第二名，一个27寸 + 一个23寸的双屏组合&lt;br&gt;第三名，一个32寸 + 一个23寸的双屏组合&lt;br&gt;第三名，两个 23 寸的双屏组合（并列第三名）&lt;/p&gt;
&lt;p&gt;以上这些屏幕推荐购买 2K 及以上的分辨率，1080p 的分辨率不推荐。&lt;/p&gt;
&lt;p&gt;下面我就按照时间轴说说我用过的那些显示器。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://shenxianpeng.github.io/categories/others/"/>
    
    
      <category term="Monitor" scheme="https://shenxianpeng.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>组织内如何评估 CI/CD 成熟度</title>
    <link href="https://shenxianpeng.github.io/2021/12/cicd-assessment/"/>
    <id>https://shenxianpeng.github.io/2021/12/cicd-assessment/</id>
    <published>2021-12-07T14:02:53.000Z</published>
    <updated>2021-12-21T15:07:21.920Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在一个组织内，不同的团队之间可能会有不同的维度来评估 CI/CD 的成熟度。这使得对衡量每个团队的 CI/CD
        
      
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="CI" scheme="https://shenxianpeng.github.io/tags/ci/"/>
    
      <category term="CD" scheme="https://shenxianpeng.github.io/tags/cd/"/>
    
      <category term="Badge" scheme="https://shenxianpeng.github.io/tags/badge/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions 还能这么玩？自动将发布的博客文章更新到 GitHub 个人主页</title>
    <link href="https://shenxianpeng.github.io/2021/11/special-repository/"/>
    <id>https://shenxianpeng.github.io/2021/11/special-repository/</id>
    <published>2021-11-09T14:02:15.000Z</published>
    <updated>2021-11-30T02:47:20.803Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近实现了一个很有意思的 Workflow，就是通过 GitHub Actions 自动将每次最新发布的文章自动同步到我的 GitHub 首页。&lt;/p&gt;
&lt;p&gt;就像这样在首页显示最近发布的博客文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/11/special-repository/final.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;要实现这样的工作流需要了解以下这几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要创建一个与 GitHub 同名的个人仓库，这个仓库的 &lt;code&gt;README.md&lt;/code&gt; 信息会显示在首页&lt;/li&gt;
&lt;li&gt;通过 GitHub Actions 自动获取博客的最新文章并更新 &lt;code&gt;README.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只有当有新的文章发布的时候才触发自动获取、更新文章 GitHub Action&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="GitHub" scheme="https://shenxianpeng.github.io/tags/github/"/>
    
      <category term="Actions" scheme="https://shenxianpeng.github.io/tags/actions/"/>
    
  </entry>
  
  <entry>
    <title>2021-22 世界质量报告（World Quality Report）</title>
    <link href="https://shenxianpeng.github.io/2021/11/world-quality-report/"/>
    <id>https://shenxianpeng.github.io/2021/11/world-quality-report/</id>
    <published>2021-11-06T07:57:10.000Z</published>
    <updated>2021-11-22T14:45:37.084Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2021-22 世界质量报告（World Quality Report 简称 WQR）是由 Micro Focus，Capgemini 和 Sogeti 三家公司合作的来分析软件质量和测试趋势在全球范围内唯一的报告。&lt;/p&gt;
&lt;p&gt;这份报告共采访了 1750 名高管和专业人士。从最高管理层到 QA 测试经理和质量工程师，涵盖了来自全球 32 个国家的 10 个行业。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/11/world-quality-report/0.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;世界质量报告（WQR）是一项独一无二的全球研究，今年的调查强调了新部署方法中不断变化的受大流行影响的应用程序需求的影响，以及 QA 对敏捷和 DevOps 实践的采用，AI 的持续增长。&lt;/p&gt;
&lt;p&gt;作为测试关注这类软件质量报告可以帮助我们快速了解软件测试行业的现状和趋势。&lt;/p&gt;
&lt;h2 id=&quot;五大主题&quot;&gt;&lt;a href=&quot;#五大主题&quot; class=&quot;headerlink&quot; title=&quot;五大主题&quot;&gt;&lt;/a&gt;五大主题&lt;/h2&gt;&lt;p&gt;WQR 的一个关键信息：在新冠疫情依旧的今天，我们看到了数字化转型的融合以及敏捷和 DevOps 实践的实时采用。此外，QA 正在成为采用敏捷和 DevOps 实践的领导者，为团队提供工具和流程以促进整个软件生命周期（SDLC）的质量。&lt;/p&gt;
&lt;p&gt;WQR 围绕关键发现和趋势突出了五个特定主题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新冠疫情对 QA 组织和软件测试的影响&lt;/li&gt;
&lt;li&gt;数字化转型与 DevOps 和敏捷采用的实时融合以及 QA 在其中的日益重要的作用&lt;/li&gt;
&lt;li&gt;地理上分散的团队在跨环境部署应用程序时专注于业务成果&lt;/li&gt;
&lt;li&gt;人工智能 (AI) 增强了敏捷和 DevOps 在所有团队中培养不断增长的质量责任文化&lt;/li&gt;
&lt;li&gt;使用 AI 驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Quality" scheme="https://shenxianpeng.github.io/categories/quality/"/>
    
    
      <category term="Report" scheme="https://shenxianpeng.github.io/tags/report/"/>
    
      <category term="Quality" scheme="https://shenxianpeng.github.io/tags/quality/"/>
    
  </entry>
  
  <entry>
    <title>Polaris - 静态代码分析</title>
    <link href="https://shenxianpeng.github.io/2021/10/what-is-polaris/"/>
    <id>https://shenxianpeng.github.io/2021/10/what-is-polaris/</id>
    <published>2021-10-24T13:33:53.000Z</published>
    <updated>2021-11-22T15:46:11.927Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这可能是中文网里介绍Polaris最详细的文章了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是-Polaris？&quot;&gt;&lt;a href=&quot;#什么是-Polaris？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Polaris？&quot;&gt;&lt;/a&gt;什么是 Polaris？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Polaris&lt;/strong&gt; - 托管静态应用程序软件测试(SAST)工具的 SaaS 平台，它是用于分类和修复漏洞并运行报告的 Web 站点。&lt;br&gt;&lt;strong&gt;SAST&lt;/strong&gt; - 一种对源代码分析或构建过程中去寻找安全漏洞的工具，是一种在软件开发的生命周期(SDLC)中确保安全的重要步骤。&lt;br&gt;&lt;strong&gt;Coverity&lt;/strong&gt; - Coverity 是 Synopsys 公司提供的原始静态应用软件测试 (SAST) 工具。Polaris 是 Coverity 的 SaaS 版本。&lt;br&gt;&lt;strong&gt;Synopsys&lt;/strong&gt; - 是开发 Polaris 和其他软件扫描工具的公司，比如 BlackDuck 也是他们的产品。&lt;/p&gt;
&lt;h2 id=&quot;Polaris-支持哪些语言？&quot;&gt;&lt;a href=&quot;#Polaris-支持哪些语言？&quot; class=&quot;headerlink&quot; title=&quot;Polaris 支持哪些语言？&quot;&gt;&lt;/a&gt;Polaris 支持哪些语言？&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C&amp;#x2F;C++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JavaScript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeScript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fortran&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Swift&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...and more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Polaris-SaaS-平台&quot;&gt;&lt;a href=&quot;#Polaris-SaaS-平台&quot; class=&quot;headerlink&quot; title=&quot;Polaris SaaS 平台&quot;&gt;&lt;/a&gt;Polaris SaaS 平台&lt;/h2&gt;&lt;p&gt;通常如果你的组织引入了 Polaris 的 SaaS 服务，你将会有如下网址可供访问 URL: &lt;a href=&quot;https://organization.polaris.synopsys.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://organization.polaris.synopsys.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后登录，你就可以给自己的 Git Repository 创建对应的项目了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议：创建的项目名称与 Git Repository 的名称一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Polaris-如何进行漏洞扫描？&quot;&gt;&lt;a href=&quot;#Polaris-如何进行漏洞扫描？&quot; class=&quot;headerlink&quot; title=&quot;Polaris 如何进行漏洞扫描？&quot;&gt;&lt;/a&gt;Polaris 如何进行漏洞扫描？&lt;/h2&gt;&lt;h3 id=&quot;Polaris-安装&quot;&gt;&lt;a href=&quot;#Polaris-安装&quot; class=&quot;headerlink&quot; title=&quot;Polaris 安装&quot;&gt;&lt;/a&gt;Polaris 安装&lt;/h3&gt;&lt;p&gt;在进行 Polaris 扫描之前，你需要先下载并安装 polaris。&lt;/p&gt;
&lt;p&gt;如果你的 Polaris server URL 为：&lt;code&gt;POLARIS_SERVER_URL=https://organization.polaris.synopsys.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载连接为：&lt;code&gt;$POLARIS_SERVER_URL/api/tools/polaris_cli-linux64.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后将下载到本地的 &lt;code&gt;polaris_cli-linux64.zip&lt;/code&gt; 进行解压，将其 bin 目录添加到 PATH 中。&lt;/p&gt;
&lt;h3 id=&quot;Polaris-YAML-文件配置&quot;&gt;&lt;a href=&quot;#Polaris-YAML-文件配置&quot; class=&quot;headerlink&quot; title=&quot;Polaris YAML 文件配置&quot;&gt;&lt;/a&gt;Polaris YAML 文件配置&lt;/h3&gt;&lt;p&gt;在进行扫描之前，你需要为你的项目创建 YAML 文件。默认配置文件名为 &lt;code&gt;polaris.yml&lt;/code&gt;，位于项目根目录。如果你希望指定不同的配置文件名，你可以在 &lt;code&gt;polaris&lt;/code&gt; 命令中使用 &lt;code&gt;-c&lt;/code&gt; 选项。&lt;/p&gt;
&lt;p&gt;在项目根目录运行 &lt;code&gt;polaris setup&lt;/code&gt; 以生成通用的 &lt;code&gt;polaris.yml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;polaris configure&lt;/code&gt; 以确认你的文件在语法上是正确的并且 &lt;code&gt;polaris&lt;/code&gt; 没有任何问题。&lt;/p&gt;
&lt;h4 id=&quot;Capture-捕获&quot;&gt;&lt;a href=&quot;#Capture-捕获&quot; class=&quot;headerlink&quot; title=&quot;Capture - 捕获&quot;&gt;&lt;/a&gt;Capture - 捕获&lt;/h4&gt;&lt;p&gt;YAML 配置文件可以包含三种类型的 Capture：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build(构建) - 运行构建命令，然后分析结果&lt;/li&gt;
&lt;li&gt;Filesystem(文件系统) - 对于解释型语言，提供项目类型和要分析的扩展列表&lt;/li&gt;
&lt;li&gt;Buildless - 对于一些可以使用依赖管理器的语言，比如 maven&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Languages&lt;/th&gt;
&lt;th&gt;Build Options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;C, C++, ObjectiveC, Objective C++,Go, Scala, Swift&lt;/td&gt;
&lt;td&gt;使用 Build 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP, Python, Ruby&lt;/td&gt;
&lt;td&gt;使用 Buildless 或 Filesystem 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C#, Visual Basic.&lt;/td&gt;
&lt;td&gt;如果想获得更准确的结果使用 Build 捕获；如果寻求简单使用 Buildless 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;如果想获得更准确的结果使用 Build 捕获；如果寻求简单使用 Buildless 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript,TypeScript&lt;/td&gt;
&lt;td&gt;使用 Filesystem 捕获；如果寻求简单使用 Buildless 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&quot;Analyze-分析&quot;&gt;&lt;a href=&quot;#Analyze-分析&quot; class=&quot;headerlink&quot; title=&quot;Analyze - 分析&quot;&gt;&lt;/a&gt;Analyze - 分析&lt;/h4&gt;&lt;p&gt;如果你正在扫描 C/C++ 代码，则应包括此分析部分以充分利用 Polaris 的扫描功能：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;analyze:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;mode:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;central&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;coverity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;cov-analyze:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[&quot;--security&quot;,&quot;--concurrency&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Polaris-YAML-示例文件&quot;&gt;&lt;a href=&quot;#Polaris-YAML-示例文件&quot; class=&quot;headerlink&quot; title=&quot;Polaris YAML 示例文件&quot;&gt;&lt;/a&gt;Polaris YAML 示例文件&lt;/h4&gt;
    
    </summary>
    
      <category term="Polaris" scheme="https://shenxianpeng.github.io/categories/polaris/"/>
    
    
      <category term="Polaris" scheme="https://shenxianpeng.github.io/tags/polaris/"/>
    
      <category term="Static" scheme="https://shenxianpeng.github.io/tags/static/"/>
    
      <category term="Coverity" scheme="https://shenxianpeng.github.io/tags/coverity/"/>
    
      <category term="Security" scheme="https://shenxianpeng.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令备忘录</title>
    <link href="https://shenxianpeng.github.io/2021/10/git-cheatsheet/"/>
    <id>https://shenxianpeng.github.io/2021/10/git-cheatsheet/</id>
    <published>2021-10-23T11:40:06.000Z</published>
    <updated>2021-11-22T15:24:03.032Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;不管是对于 Git 的初学者还是经常使用 Git 的码农们，在日常工作中难免会有遇到有的命令一时想不起来。不妨将下面总结的一些 Git 常用命令及技巧收藏或打印出来，以备需要的时候可以很快找到。&lt;/p&gt;
&lt;h2 id=&quot;git-config&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="Git" scheme="https://shenxianpeng.github.io/categories/git/"/>
    
    
      <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
      <category term="Cheatsheet" scheme="https://shenxianpeng.github.io/tags/cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>How does SonarQube Community Edition integrate with the project</title>
    <link href="https://shenxianpeng.github.io/2021/09/sonarqube-integration/"/>
    <id>https://shenxianpeng.github.io/2021/09/sonarqube-integration/</id>
    <published>2021-09-18T02:19:51.000Z</published>
    <updated>2021-11-22T14:33:25.437Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;After you have set up the SonarQube instance, you will need to integrate SonarQube with project.&lt;/p&gt;
&lt;p&gt;Because I used the community
        
      
    
    </summary>
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/categories/sonarqube/"/>
    
    
      <category term="Gradle" scheme="https://shenxianpeng.github.io/tags/gradle/"/>
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/tags/sonarqube/"/>
    
  </entry>
  
  <entry>
    <title>Run lcov failed &quot;Can&#39;t locate JSON/PP.pm in @INC ...&quot;</title>
    <link href="https://shenxianpeng.github.io/2021/09/lcov-error/"/>
    <id>https://shenxianpeng.github.io/2021/09/lcov-error/</id>
    <published>2021-09-07T02:18:22.000Z</published>
    <updated>2021-09-18T02:15:59.918Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;When execute command: &lt;code&gt;lcov --capture --directory . --no-external --output-file coverage.info&lt;/code&gt; to generate code coverage
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="lcov" scheme="https://shenxianpeng.github.io/tags/lcov/"/>
    
      <category term="perl" scheme="https://shenxianpeng.github.io/tags/perl/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gcov 和 LCOV 做 C/C++ 项目的代码覆盖率</title>
    <link href="https://shenxianpeng.github.io/2021/08/gcov-example-cn/"/>
    <id>https://shenxianpeng.github.io/2021/08/gcov-example-cn/</id>
    <published>2021-08-16T16:10:21.000Z</published>
    <updated>2021-12-22T12:44:47.797Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇分享如何使用 Gcov 和 LCOV 对 C/C++ 项目进行代码覆盖率的度量。&lt;/p&gt;
&lt;p&gt;如果你想了解代码覆盖率工具 Gcov 是如何工作的，或是以后需要做 C/C++ 项目的代码覆盖率，希望本篇对你有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
      <category term="Gcov" scheme="https://shenxianpeng.github.io/tags/gcov/"/>
    
      <category term="LCOV" scheme="https://shenxianpeng.github.io/tags/lcov/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube installation and troubleshootings</title>
    <link href="https://shenxianpeng.github.io/2021/08/sonarqube-setup/"/>
    <id>https://shenxianpeng.github.io/2021/08/sonarqube-setup/</id>
    <published>2021-08-05T04:30:22.000Z</published>
    <updated>2021-11-22T14:55:38.893Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backgroud&quot;&gt;&lt;a href=&quot;#Backgroud&quot; class=&quot;headerlink&quot; title=&quot;Backgroud&quot;&gt;&lt;/a&gt;Backgroud&lt;/h2&gt;&lt;p&gt;In my opinion, SonarQube is not a very easy setup DevOps tool to compare with Jenkins, Artifactory. You can’t just run some script under the bin folder to let the server boot up.&lt;/p&gt;
&lt;p&gt;You must have an installed database, configuration LDAP in the config file, etc.&lt;/p&gt;
&lt;p&gt;So I’d like to document some important steps for myself, like setup LDAP or PostgreSQL when I install SonarQube of v9.0.1. It would be better if it can help others.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisite-and-Download&quot;&gt;&lt;a href=&quot;#Prerequisite-and-Download&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite and Download&quot;&gt;&lt;/a&gt;Prerequisite and Download&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Need to be installed JRE/JDK 11 on the running machine.&lt;/p&gt;
&lt;p&gt; Here is the prerequisites overview: &lt;a href=&quot;https://docs.sonarqube.org/latest/requirements/requirements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.sonarqube.org/latest/requirements/requirements/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download SonarQube: &lt;a href=&quot;https://www.sonarqube.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sonarqube.org/downloads/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; sonarqube/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.0.1.46107.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unzip sonarqube-9.0.1.46107.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;  sonarqube-9.0.1.46107/bin/linux-x86-64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh sonar.sh console&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Change-Java-version&quot;&gt;&lt;a href=&quot;#Change-Java-version&quot; class=&quot;headerlink&quot; title=&quot;Change Java version&quot;&gt;&lt;/a&gt;Change Java version&lt;/h2&gt;&lt;p&gt;I installed SonarQube on CentOS 7 machine, the Java version is OpenJDK 1.8.0_242 by default, but the prerequisite shows at least need JDK 11. There is also JDK 11 available on my machine, so I just need to change the Java version.&lt;/p&gt;
&lt;p&gt;I recommend using the &lt;code&gt;alternatives&lt;/code&gt; command change Java version，refer as following:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openjdk version &lt;span class=&quot;string&quot;&gt;&quot;1.8.0_242&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK Runtime Environment (build 1.8.0_242-b08)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ alternatives --config java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;There are 3 programs &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; provide &lt;span class=&quot;string&quot;&gt;&#39;java&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Selection    Command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1           java-1.7.0-openjdk.x86_64 (/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.251-2.6.21.1.el7.x86_64/jre/bin/java)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*+ 2           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64/jre/bin/java)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   3           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/bin/java)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter to keep the current selection[+], or &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; selection number: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ java -version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openjdk version &lt;span class=&quot;string&quot;&gt;&quot;11.0.12&quot;&lt;/span&gt; 2021-07-20 LTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK Runtime Environment 18.9 (build 11.0.12+7-LTS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK 64-Bit Server VM 18.9 (build 11.0.12+7-LTS, mixed mode, sharing)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Install-Database&quot;&gt;&lt;a href=&quot;#Install-Database&quot; class=&quot;headerlink&quot; title=&quot;Install Database&quot;&gt;&lt;/a&gt;Install Database&lt;/h2&gt;&lt;p&gt;SonarQube needs you to have installed a database. It supports several database engines, like Microsoft SQL Server, Oracle, and PostgreSQL. Since PostgreSQL is open source, light, and easy to install, so I choose PostgreSQL as its database.&lt;/p&gt;
&lt;p&gt;How to download and install PostgreSQL please see this page: &lt;a href=&quot;https://www.postgresql.org/download/linux/redhat/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.postgresql.org/download/linux/redhat/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Troubleshooting&quot;&gt;&lt;a href=&quot;#Troubleshooting&quot; class=&quot;headerlink&quot; title=&quot;Troubleshooting&quot;&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;&lt;h3 id=&quot;1-How-to-establish-a-connection-with-SonarQube-and-PostgreSQL&quot;&gt;&lt;a href=&quot;#1-How-to-establish-a-connection-with-SonarQube-and-PostgreSQL&quot; class=&quot;headerlink&quot; title=&quot;1. How to establish a connection with SonarQube and PostgreSQL&quot;&gt;&lt;/a&gt;1. How to establish a connection with SonarQube and PostgreSQL&lt;/h3&gt;&lt;p&gt;Please refer to the &lt;code&gt;sonar.properties&lt;/code&gt; file at the end of this post.&lt;/p&gt;
&lt;h3 id=&quot;2-How-to-setup-LDAP-for-users-to-log-in&quot;&gt;&lt;a href=&quot;#2-How-to-setup-LDAP-for-users-to-log-in&quot; class=&quot;headerlink&quot; title=&quot;2. How to setup LDAP for users to log in&quot;&gt;&lt;/a&gt;2. How to setup LDAP for users to log in&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sonar.security.realm=LDAP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.url=ldap://den.exmaple-org:389&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.bindDn=user@exmaple-org.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.bindPassword=mypassword&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.authentication=simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.baseDn=DC=exmaple-org,DC=com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.request=(&amp;amp;(objectClass=user)(sAMAccountName=&amp;#123;login&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.realNameAttribute=cn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.emailAttribute=email&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-How-to-fix-LDAP-login-SonarQube-is-very-slowly&quot;&gt;&lt;a href=&quot;#3-How-to-fix-LDAP-login-SonarQube-is-very-slowly&quot; class=&quot;headerlink&quot; title=&quot;3. How to fix LDAP login SonarQube is very slowly&quot;&gt;&lt;/a&gt;3. How to fix LDAP login SonarQube is very slowly&lt;/h3&gt;&lt;p&gt;Comment out &lt;code&gt;ldap.followReferrals=false&lt;/code&gt; in sonar.properties file would be help.&lt;/p&gt;
&lt;p&gt;Related post: &lt;a href=&quot;https://community.sonarsource.com/t/ldap-login-takes-2-minutes-the-first-time/1573/7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://community.sonarsource.com/t/ldap-login-takes-2-minutes-the-first-time/1573/7&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-How-to-fix-‘Could-not-resolve-11-file-paths-in-lcov-info’&quot;&gt;&lt;a href=&quot;#4-How-to-fix-‘Could-not-resolve-11-file-paths-in-lcov-info’&quot; class=&quot;headerlink&quot; title=&quot;4. How to fix ‘Could not resolve 11 file paths in lcov.info’&quot;&gt;&lt;/a&gt;4. How to fix ‘Could not resolve 11 file paths in lcov.info’&lt;/h2&gt;&lt;p&gt;I want to display Javascript code coverage result in SonarQube, so I added &lt;code&gt;sonar.javascript.lcov.reportPaths=coverage/lcov.info&lt;/code&gt; to the &lt;code&gt;sonar-project.properties&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But when I run &lt;code&gt;sonar-scanner.bat&lt;/code&gt; in the command line, the code coverage result can not show in sonar. I noticed the following error from the output:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO: Analysing [C:\workspace\xvm-ide\client\coverage\lcov.info]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WARN: Could not resolve 11 file paths &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [C:\workspace\xvm-ide\client\coverage\lcov.info]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are some posts related to this problem, for example, &lt;a href=&quot;https://github.com/kulshekhar/ts-jest/issues/542&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kulshekhar/ts-jest/issues/542&lt;/a&gt;, but no one works in my case.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# here is an example error path in lcov.info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..\src\auto-group\groupView.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, I have to use the &lt;code&gt;sed&lt;/code&gt; command to remove &lt;code&gt;..\&lt;/code&gt; in front of the paths before running &lt;code&gt;sonar-scanner.bat&lt;/code&gt;, then the problem was solved.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/\..\\//g&#39;&lt;/span&gt; lcov.info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Please comment if you can solve the problem with changing options in the &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id=&quot;4-How-to-output-to-more-logs&quot;&gt;&lt;a href=&quot;#4-How-to-output-to-more-logs&quot; class=&quot;headerlink&quot; title=&quot;4. How to output to more logs&quot;&gt;&lt;/a&gt;4. How to output to more logs&lt;/h3&gt;&lt;p&gt;To output more logs, change &lt;code&gt;sonar.log.level=INFO&lt;/code&gt; to &lt;code&gt;sonar.log.level=DEBUG&lt;/code&gt; in below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: all above changes of &lt;code&gt;sonar.properties&lt;/code&gt; need to restart the SonarQube instance to take effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Final-sonar-properties&quot;&gt;&lt;a href=&quot;#Final-sonar-properties&quot; class=&quot;headerlink&quot; title=&quot;Final sonar.properties&quot;&gt;&lt;/a&gt;Final &lt;code&gt;sonar.properties&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;For the &lt;code&gt;sonar.properties&lt;/code&gt; file, please see below or &lt;a href=&quot;https://gist.github.com/shenxianpeng/a1eec786210b421f8be34e3263f1a002&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/categories/sonarqube/"/>
    
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/tags/sonarqube/"/>
    
      <category term="LDAP" scheme="https://shenxianpeng.github.io/tags/ldap/"/>
    
      <category term="PostgreSQL" scheme="https://shenxianpeng.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>How to fix &quot;hidden symbol `__gcov_init&#39; in ../libgcov.a(_gcov.o) is referenced by DSO&quot;</title>
    <link href="https://shenxianpeng.github.io/2021/07/how-to-fix-gcov-hidden-symbol/"/>
    <id>https://shenxianpeng.github.io/2021/07/how-to-fix-gcov-hidden-symbol/</id>
    <published>2021-07-27T02:40:21.000Z</published>
    <updated>2021-07-27T15:32:44.255Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;When we introduced Gocv to build my project for
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
      <category term="Gcov" scheme="https://shenxianpeng.github.io/tags/gcov/"/>
    
  </entry>
  
  <entry>
    <title>Add or update Bitbucket build status with REST API</title>
    <link href="https://shenxianpeng.github.io/2021/07/update-bitbucket-build-status/"/>
    <id>https://shenxianpeng.github.io/2021/07/update-bitbucket-build-status/</id>
    <published>2021-07-25T12:26:02.000Z</published>
    <updated>2021-07-27T15:24:29.412Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backgorud&quot;&gt;&lt;a href=&quot;#Backgorud&quot; class=&quot;headerlink&quot; title=&quot;Backgorud&quot;&gt;&lt;/a&gt;Backgorud&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you want to &lt;strong&gt;add&lt;/strong&gt; build status to your Bitbucket the specific commit of a branch when you start a build from the branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the build status is wrong, you want to &lt;strong&gt;update&lt;/strong&gt; it manually. for example, update build status from FAILED to SUCCESSFUL&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can call Bitbucket REST API to do these.&lt;/p&gt;
&lt;h2 id=&quot;Code-snippet&quot;&gt;&lt;a href=&quot;#Code-snippet&quot; class=&quot;headerlink&quot; title=&quot;Code snippet&quot;&gt;&lt;/a&gt;Code snippet&lt;/h2&gt;&lt;p&gt;Below is the code snippet to update Bitbucket build status with REST API in the shell script.&lt;/p&gt;
&lt;p&gt;The code on GitHub Gist: &lt;a href=&quot;https://gist.github.com/shenxianpeng/bd5eddc5fb39e54110afb8e2e7a6c4fb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gist.github.com/shenxianpeng/bd5eddc5fb39e54110afb8e2e7a6c4fb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Read More&lt;/strong&gt; to view the code here.&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Shell" scheme="https://shenxianpeng.github.io/tags/shell/"/>
    
      <category term="Bitbucket" scheme="https://shenxianpeng.github.io/tags/bitbucket/"/>
    
  </entry>
  
  <entry>
    <title>关于代码覆盖率 (About Code Coverage)</title>
    <link href="https://shenxianpeng.github.io/2021/07/code-coverage/"/>
    <id>https://shenxianpeng.github.io/2021/07/code-coverage/</id>
    <published>2021-07-14T14:49:39.000Z</published>
    <updated>2021-11-22T13:44:40.350Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇简要介绍：什么是代码覆盖率？为什么要做代码覆盖率？代码覆盖率的指标、工作原理，主流的代码覆盖率工具以及不要高估代码覆盖率指标。&lt;/p&gt;
&lt;h2 id=&quot;什么是代码覆盖率？&quot;&gt;&lt;a href=&quot;#什么是代码覆盖率？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
  </entry>
  
  <entry>
    <title>Use Gcov and LCOV to perform code coverage testing on C/C++ projects</title>
    <link href="https://shenxianpeng.github.io/2021/07/gcov-example/"/>
    <id>https://shenxianpeng.github.io/2021/07/gcov-example/</id>
    <published>2021-07-11T16:10:21.000Z</published>
    <updated>2021-11-22T15:48:58.795Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This article shares how to use Gcov and LCOV to metrics code coverage for C/C++ projects. If you want to know how Gcov works, or you
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
      <category term="Gcov" scheme="https://shenxianpeng.github.io/tags/gcov/"/>
    
      <category term="LCOV" scheme="https://shenxianpeng.github.io/tags/lcov/"/>
    
  </entry>
  
  <entry>
    <title>How to make Jenkins job fail after timeout? (Resolved)</title>
    <link href="https://shenxianpeng.github.io/2021/06/jenkins-timeout/"/>
    <id>https://shenxianpeng.github.io/2021/06/jenkins-timeout/</id>
    <published>2021-06-24T03:00:45.000Z</published>
    <updated>2021-07-15T16:02:04.467Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I’ve run into some situations when the build fails, perhaps because some processes don’t finish, and even setting a timeout doesn’t make
        
      
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>解决两个 AIX 上 Git Clone 失败的问题</title>
    <link href="https://shenxianpeng.github.io/2021/06/git-clone-failed-on-aix/"/>
    <id>https://shenxianpeng.github.io/2021/06/git-clone-failed-on-aix/</id>
    <published>2021-06-20T14:53:26.000Z</published>
    <updated>2021-11-22T15:30:06.387Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇记录两个在做 Jenkins 与 AIX 做持续集成得时候遇到的 Git clone
        
      
    
    </summary>
    
      <category term="AIX" scheme="https://shenxianpeng.github.io/categories/aix/"/>
    
    
      <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="AIX" scheme="https://shenxianpeng.github.io/tags/aix/"/>
    
  </entry>
  
  <entry>
    <title>通过解除文件资源限制：解决在 AIX 使用 Git 下载大容量仓库失败问题</title>
    <link href="https://shenxianpeng.github.io/2021/06/aix-ulimit/"/>
    <id>https://shenxianpeng.github.io/2021/06/aix-ulimit/</id>
    <published>2021-06-17T05:52:44.000Z</published>
    <updated>2021-11-22T15:23:50.142Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近使用 AIX 7.1 从 Bitucket 下载代码的时候遇到了这个错误 &lt;code&gt;fatal: write error: A file cannot be larger than the value set by
        
      
    
    </summary>
    
      <category term="AIX" scheme="https://shenxianpeng.github.io/categories/aix/"/>
    
    
      <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
      <category term="AIX" scheme="https://shenxianpeng.github.io/tags/aix/"/>
    
      <category term="ulimit" scheme="https://shenxianpeng.github.io/tags/ulimit/"/>
    
  </entry>
  
  <entry>
    <title>关于 Artifactory 上传制品变得非常缓慢，偶尔失败的问题分享</title>
    <link href="https://shenxianpeng.github.io/2021/06/artifactory-slow-upload/"/>
    <id>https://shenxianpeng.github.io/2021/06/artifactory-slow-upload/</id>
    <published>2021-06-16T15:44:59.000Z</published>
    <updated>2021-11-01T13:48:33.857Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近在我使用 Artifactory Enterprise 遇到了上传制品非常缓慢的问题，在经过与 IT，Artifactory 管理员一起合作终于解决这个问题，在此分享一下这个问题的解决过程。&lt;/p&gt;
&lt;p&gt;如果你也遇到类似或许有所帮助。&lt;/p&gt;
&lt;h2
        
      
    
    </summary>
    
      <category term="Artifactory" scheme="https://shenxianpeng.github.io/categories/artifactory/"/>
    
    
      <category term="Artifactory" scheme="https://shenxianpeng.github.io/tags/artifactory/"/>
    
  </entry>
  
  <entry>
    <title>Resolved problem that ESlint HTML report is not displayed correctly in Jenkins job</title>
    <link href="https://shenxianpeng.github.io/2021/06/eslint-jenkins/"/>
    <id>https://shenxianpeng.github.io/2021/06/eslint-jenkins/</id>
    <published>2021-06-07T04:30:02.000Z</published>
    <updated>2021-11-22T15:27:26.123Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;I’m just documenting to myself that it was solved by following.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When I want to integrate the ESlint
        
      
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
      <category term="ESlint" scheme="https://shenxianpeng.github.io/tags/eslint/"/>
    
  </entry>
  
</feed>
