<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peter Shen</title>
  
  <subtitle>Share about CI/CD and DevOps</subtitle>
  <link href="https://shenxianpeng.github.io/atom.xml" rel="self"/>
  
  <link href="https://shenxianpeng.github.io/"/>
  <updated>2023-06-11T12:52:11.605Z</updated>
  <id>https://shenxianpeng.github.io/</id>
  
  <author>
    <name>shenxianpeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一篇文章搞清楚什么是 SBOM（Software Bill of Materials）以及它与 SLSA 等概念的区别</title>
    <link href="https://shenxianpeng.github.io/2023/06/sbom/"/>
    <id>https://shenxianpeng.github.io/2023/06/sbom/</id>
    <published>2023-06-10T14:43:37.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;什么是-SBOM&quot;&gt;&lt;a href=&quot;#什么是-SBOM&quot; class=&quot;headerlink&quot; title=&quot;什么是 SBOM&quot;&gt;&lt;/a&gt;什么是 SBOM&lt;/h2&gt;&lt;p&gt;SBOM 是软件构建物料清单（Software Bill of</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
    <category term="SBOM" scheme="https://shenxianpeng.github.io/tags/sbom/"/>
    
  </entry>
  
  <entry>
    <title>如果你是项目成员，是 Fork 原始仓库还是直接原始仓库中修改代码？</title>
    <link href="https://shenxianpeng.github.io/2023/06/fork-or-unfork/"/>
    <id>https://shenxianpeng.github.io/2023/06/fork-or-unfork/</id>
    <published>2023-06-09T05:47:43.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;想必你也见到过很多开源项目中的 CONTRIBUTION.md 文档中通常都会让贡献者 Fork 仓库，然后做修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么如果你是该开源项目中的成员是否需要 Fork</summary>
        
      
    
    
    
    <category term="Git" scheme="https://shenxianpeng.github.io/categories/git/"/>
    
    
    <category term="Fork" scheme="https://shenxianpeng.github.io/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>程序员自我修养之Git提交信息和分支创建规范（工具篇）</title>
    <link href="https://shenxianpeng.github.io/2023/05/commit-check/"/>
    <id>https://shenxianpeng.github.io/2023/05/commit-check/</id>
    <published>2023-05-09T11:00:00.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Git 提交信息和 Git 分支命名规范是团队协作中非常重要的一部分，它们能够使代码库更加规范、易于维护和理解。&lt;/p&gt;
&lt;p&gt;我们需要通过工具来帮助实现Git提交信息和分支创建规范，本篇将介绍如何使用 &lt;a</summary>
        
      
    
    
    
    <category term="Git" scheme="https://shenxianpeng.github.io/categories/git/"/>
    
    
    <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
    <category term="Branch" scheme="https://shenxianpeng.github.io/tags/branch/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins agent service can not start automatically on Windows</title>
    <link href="https://shenxianpeng.github.io/2023/04/jenkins-troubleshooting/"/>
    <id>https://shenxianpeng.github.io/2023/04/jenkins-troubleshooting/</id>
    <published>2023-04-10T19:49:13.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;What’s-the-issue&quot;&gt;&lt;a href=&quot;#What’s-the-issue&quot; class=&quot;headerlink&quot; title=&quot;What’s the issue&quot;&gt;&lt;/a&gt;What’s the issue&lt;/h2&gt;&lt;p&gt;My Windows build machine is regular reboot after Windows updates, but my Jenkins agent service on this Windows can not&lt;br&gt;start automatically even I have set the startup type to Automatic.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/jenkins-troubleshooting/service-general.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution-1&quot;&gt;&lt;a href=&quot;#Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Solution 1&quot;&gt;&lt;/a&gt;Solution 1&lt;/h2&gt;&lt;p&gt;After some research, select “Allow service to interact with desktop” with service properties on Log On tab can fix this problem.&lt;/p&gt;
&lt;p&gt;In service properties -&amp;gt; Log On -&amp;gt; Select “Local System account” and select the checkbox for “Allow service to interact with desktop”. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/jenkins-troubleshooting/service-log-on.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution-2&quot;&gt;&lt;a href=&quot;#Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Solution 2&quot;&gt;&lt;/a&gt;Solution 2&lt;/h2&gt;</summary>
    
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
    <category term="Pipeline" scheme="https://shenxianpeng.github.io/tags/pipeline/"/>
    
    <category term="Troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>SLSA 框架与软件供应链安全防护</title>
    <link href="https://shenxianpeng.github.io/2023/03/slsa/"/>
    <id>https://shenxianpeng.github.io/2023/03/slsa/</id>
    <published>2023-03-23T07:09:39.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;p&gt;随着近些年针对软件供应链发起的攻击次数越来越多，Google 发布了一系列指南来确保软件包的完整性，目的是为了防止未经授权的代码修改影响软件供应链。&lt;/p&gt;
&lt;p&gt;Google 的 SLSA 框架（Supply-chain Levels for Software Artifacts 软件制品的供应链级别）是通过识别 CI&amp;#x2F;CD 流水线中的问题并减小影响，为实现更安全的软件开发和部署流程提供建议。&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%80%E4%B9%88%E6%98%AFSLSA&quot;&gt;什么是SLSA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98&quot;&gt;软件供应链中的问题&lt;/a&gt;&lt;br&gt;2.1 &lt;a href=&quot;#%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB%E5%8C%85%E6%8B%AC%E5%93%AA%E4%BA%9B&quot;&gt;供应链攻击包括哪些&lt;/a&gt;&lt;br&gt;2.2 &lt;a href=&quot;#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E4%BE%8B%E5%AD%90&quot;&gt;真实世界的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SLSA%E7%AD%89%E7%BA%A7&quot;&gt;SLSA等级&lt;/a&gt;&lt;br&gt;3.1 &lt;a href=&quot;#%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A&quot;&gt;详细解释&lt;/a&gt;&lt;br&gt;3.2 &lt;a href=&quot;#%E9%99%90%E5%88%B6&quot;&gt;限制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#SLSA%E8%90%BD%E5%9C%B0&quot;&gt;SLSA落地&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7&quot;&gt;其他工具&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;什么是SLSA&quot;&gt;&lt;a href=&quot;#什么是SLSA&quot; class=&quot;headerlink&quot; title=&quot;什么是SLSA&quot;&gt;&lt;/a&gt;什么是SLSA&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://slsa.dev/&quot;&gt;SLSA&lt;/a&gt; 全名是 Supply chain Levels for Software Artifacts, or SLSA (发音“salsa”).&lt;/p&gt;
&lt;p&gt;SLSA 是一个端到端框架，一个标准和控制的清单确保软件构建和部署过程的安全性，防止篡改源代码、构建平台以及构件仓库而产生的威胁。&lt;/p&gt;
&lt;h2 id=&quot;软件供应链中的问题&quot;&gt;&lt;a href=&quot;#软件供应链中的问题&quot; class=&quot;headerlink&quot; title=&quot;软件供应链中的问题&quot;&gt;&lt;/a&gt;软件供应链中的问题&lt;/h2&gt;&lt;p&gt;任何软件供应链都可能引入漏洞，随着系统变得越来越复杂，做好最佳实践从而保证交付工件的完整性变得非常重要。如果没有一定的规范和系统发展计划，就很难应对下一次黑客攻击。&lt;/p&gt;
&lt;h3 id=&quot;供应链攻击包括哪些&quot;&gt;&lt;a href=&quot;#供应链攻击包括哪些&quot; class=&quot;headerlink&quot; title=&quot;供应链攻击包括哪些&quot;&gt;&lt;/a&gt;供应链攻击包括哪些&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2023/03/slsa/supply-chain-threats.png&quot; alt=&quot;threats&quot;&gt;&lt;/p&gt;
&lt;p&gt;A 提交未经认证的修改&lt;br&gt;B 泄露源码仓库&lt;br&gt;C 从被修改源代码构建&lt;br&gt;D 泄露构建过程&lt;br&gt;E 使用已泄露的依赖&lt;br&gt;F 上传被修改的包&lt;br&gt;G 泄露了包仓库&lt;br&gt;H 使用已泄露的包&lt;/p&gt;
&lt;h3 id=&quot;真实世界的例子&quot;&gt;&lt;a href=&quot;#真实世界的例子&quot; class=&quot;headerlink&quot; title=&quot;真实世界的例子&quot;&gt;&lt;/a&gt;真实世界的例子&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;完整性威胁&lt;/th&gt;
&lt;th&gt;已知例子&lt;/th&gt;
&lt;th&gt;SLSA 如何提供帮助&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;A 提交未经认证的修改&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://lore.kernel.org/lkml/202105051005.49BFABCE@keescook/&quot;&gt;研究人员&lt;/a&gt;试图通过邮件列表上的&lt;br&gt;补丁程序故意将漏洞引入 Linux 内核。&lt;/td&gt;
&lt;td&gt;两人审查发现了大部分（但不是全部）漏洞。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B 泄露源码仓库&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://news-web.php.net/php.internals/113838&quot;&gt;PHP&lt;/a&gt;：攻击者破坏了 PHP 的自托管&lt;br&gt; git 服务器并注入了两个恶意提交。&lt;/td&gt;
&lt;td&gt;一个受到更好保护的源代码平台&lt;br&gt;将成为攻击者更难攻击的目标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C 从被修改源代码构建&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.webmin.com/exploit.html&quot;&gt;Webmin&lt;/a&gt;：攻击者修改了构建基础设施&lt;br&gt;以使用与源代码控制不匹配的源文件。&lt;/td&gt;
&lt;td&gt;符合 SLSA 标准的构建服务器会生成出处，&lt;br&gt;以识别实际使用的来源，从而使消费者能够检测到此类篡改。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D 泄露构建过程&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/&quot;&gt;SolarWinds&lt;/a&gt;：攻击者破坏了构建平台&lt;br&gt;并安装了在每次构建期间注入恶意行为的植入程序。&lt;/td&gt;
&lt;td&gt;更高的 SLSA 级别需要对构建平台进行更强大的安全控制，&lt;br&gt;这使得妥协和获得持久性变得更加困难。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E 使用已泄露的依赖&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://web.archive.org/web/20210909051737/https://schneider.dev/blog/event-stream-vulnerability-explained/&quot;&gt;event-stream&lt;/a&gt;：攻击者添加了一个无害的依赖项，然后更新了该依赖项&lt;br&gt;以添加恶意行为。更新与提交到 GitHub 的代码不匹配（即攻击 F）。&lt;/td&gt;
&lt;td&gt;递归地将 SLSA 应用于所有依赖项会阻止这个特定的向量，因为&lt;br&gt;出处会表明它不是由适当的构建器构建的，或者源不是来自 GitHub。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F 上传被修改的包&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://about.codecov.io/apr-2021-post-mortem/&quot;&gt;CodeCov&lt;/a&gt;：攻击者使用泄露的凭据将恶意工件上传到&lt;br&gt; Google Cloud Storage(GCS)，用户可以从中直接下载。&lt;/td&gt;
&lt;td&gt;GCS 中工件的出处表明工件不是以&lt;br&gt;预期的方式从预期的源代码库中构建的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;G 泄露了包仓库&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://theupdateframework.io/papers/attacks-on-package-managers-ccs2008.pdf&quot;&gt;对包镜像的攻击&lt;/a&gt;：研究人员为几个流行的&lt;br&gt;包存储库运行镜像，这些镜像可能被用来提供恶意包。&lt;/td&gt;
&lt;td&gt;与上面的 (F) 类似，恶意工件的来源表明它们不是&lt;br&gt;按预期构建的，也不是来自预期的源代码库。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H 使用已泄露的包&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://blog.sonatype.com/damaging-linux-mac-malware-bundled-within-browserify-npm-brandjack-attempt&quot;&gt;Browserify typosquatting&lt;/a&gt;：攻击者&lt;br&gt;上传了一个与原始名称相似的恶意包。&lt;/td&gt;
&lt;td&gt;SLSA 不直接解决这种威胁，但将出处链接回源代码控制&lt;br&gt;可以启用和增强其他解决方案。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;SLSA等级&quot;&gt;&lt;a href=&quot;#SLSA等级&quot; class=&quot;headerlink&quot; title=&quot;SLSA等级&quot;&gt;&lt;/a&gt;SLSA等级&lt;/h2&gt;</summary>
    
    
    
    <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
    <category term="SLSA" scheme="https://shenxianpeng.github.io/tags/slsa/"/>
    
  </entry>
  
  <entry>
    <title>如何在 DevOps 任务中使用 ChatGPT?</title>
    <link href="https://shenxianpeng.github.io/2023/02/chatgpt-for-devops/"/>
    <id>https://shenxianpeng.github.io/2023/02/chatgpt-for-devops/</id>
    <published>2023-02-26T13:21:25.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;p&gt;随着 DevOps 的流行，越来越多的开发团队正在寻找一些工具来帮助他们更好地完成任务。ChatGPT 是一款基于人工智能的自然语言处理工具，它可以用来帮助开发团队在 DevOps 任务中更加高效地工作。&lt;/p&gt;
&lt;p&gt;本文将探讨如何在 DevOps 任务中使用 ChatGPT。&lt;/p&gt;
&lt;h2 id=&quot;一、ChatGPT-简介&quot;&gt;&lt;a href=&quot;#一、ChatGPT-简介&quot; class=&quot;headerlink&quot; title=&quot;一、ChatGPT 简介&quot;&gt;&lt;/a&gt;一、ChatGPT 简介&lt;/h2&gt;&lt;p&gt;ChatGPT 是一款由 OpenAI 开发的人工智能自然语言处理工具。它可以用于许多不同的应用程序，例如语音识别、自然语言处理、文本生成等。&lt;br&gt;ChatGPT 使用深度学习技术，可以生成与输入内容相关的文本。它是一款非常强大的工具，可以帮助开发团队更加高效地工作。&lt;/p&gt;
&lt;h2 id=&quot;二、ChatGPT-在-DevOps-中的应用&quot;&gt;&lt;a href=&quot;#二、ChatGPT-在-DevOps-中的应用&quot; class=&quot;headerlink&quot; title=&quot;二、ChatGPT 在 DevOps 中的应用&quot;&gt;&lt;/a&gt;二、ChatGPT 在 DevOps 中的应用&lt;/h2&gt;&lt;p&gt;在 DevOps 中，开发团队通常需要快速解决问题，并与团队成员和客户进行有效沟通。ChatGPT 可以用来帮助解决这些问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自动化代码审查&lt;br&gt;  开发团队通常需要花费大量时间来进行代码审查。ChatGPT 可以用来自动化这个过程。它可以根据代码库中的样本代码，生成与样本代码风格相似的代码，并对新代码进行审查。这可以帮助开发团队更快地进行代码审查，并减少人为错误的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动化测试&lt;br&gt;  测试是 DevOps 中不可或缺的一部分。ChatGPT 可以用来自动化测试。它可以根据测试用例生成相应的测试代码，并对测试结果进行评估。这可以帮助开发团队更快地进行测试，并减少人为错误的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动化部署&lt;br&gt;  部署是 DevOps 中不可或缺的一部分。ChatGPT 可以用来自动化部署。它可以根据部署规则生成相应的部署代码，并对部署结果进行评估。这可以帮助开发团队更快地进行部署，并减少人为错误的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动化文档生成&lt;br&gt;  文档是 DevOps 中不可或缺的一部分。ChatGPT 可以用来自动化文档生成。它可以根据项目的代码库和测试用例生成相应的文档，并对文档的质量进行评估。这可以帮助开发团队更快地生成文档，并减少人为错误的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;三、如何使用-ChatGPT&quot;&gt;&lt;a href=&quot;#三、如何使用-ChatGPT&quot; class=&quot;headerlink&quot; title=&quot;三、如何使用 ChatGPT&quot;&gt;&lt;/a&gt;三、如何使用 ChatGPT&lt;/h2&gt;&lt;p&gt;要使用 ChatGPT，开发团队需要进行以下步骤：&lt;/p&gt;</summary>
    
    
    
    <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
    <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
    <category term="ChatGPT" scheme="https://shenxianpeng.github.io/tags/chatgpt/"/>
    
  </entry>
  
  <entry>
    <title>为什么我的 Jenkins Controller 越来越慢？可能犯了这些错误...</title>
    <link href="https://shenxianpeng.github.io/2023/02/pipeline-best-practices/"/>
    <id>https://shenxianpeng.github.io/2023/02/pipeline-best-practices/</id>
    <published>2023-02-06T13:52:12.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;p&gt;就像标题所说的，为什么我的 Jenkins Controller 越来越慢，可能是因为没有遵循 Jenkins pipeline 编写的一些最佳实践。&lt;/p&gt;
&lt;p&gt;所以主要介绍 Jenkins pipeline 的一些最佳实践，目的是为了向 pipeline 作者和维护者展示一些他们过去可能并没有意识到的“反模式”。&lt;/p&gt;
&lt;p&gt;我会尽量列出所有可能的 Pipeline 最佳实践，并提供一些实践中常见的具体示例。&lt;/p&gt;
&lt;h2 id=&quot;一般问题&quot;&gt;&lt;a href=&quot;#一般问题&quot; class=&quot;headerlink&quot; title=&quot;一般问题&quot;&gt;&lt;/a&gt;一般问题&lt;/h2&gt;&lt;h3 id=&quot;确保在-pipeline-中使用-Groovy-代码作为粘帖剂&quot;&gt;&lt;a href=&quot;#确保在-pipeline-中使用-Groovy-代码作为粘帖剂&quot; class=&quot;headerlink&quot; title=&quot;确保在 pipeline 中使用 Groovy 代码作为粘帖剂&quot;&gt;&lt;/a&gt;确保在 pipeline 中使用 Groovy 代码作为粘帖剂&lt;/h3&gt;&lt;p&gt;使用 Groovy 代码连接一组操作而不是作为 pipeline 的主要功能。&lt;/p&gt;
&lt;p&gt;换句话说，与其依赖 pipeline 功能（Groovy 或 pipeline 步骤）来推动构建过程向前发展，不如使用单个步骤（例如 &lt;code&gt;sh&lt;/code&gt;）来完成构建的多个部分。&lt;/p&gt;
&lt;p&gt;pipeline 随着其复杂性的增加（Groovy 代码量、使用的步骤数等），需要 controller 上的更多资源（CPU、内存、存储）。将 Pipeline 视为完成构建的工具，而不是构建的核心。&lt;/p&gt;
&lt;p&gt;示例：使用单个 Maven 构建步骤通过其构建&amp;#x2F;测试&amp;#x2F;部署过程来驱动构建。&lt;/p&gt;
&lt;h3 id=&quot;在-Jenkins-pipeline-中运行-shell-脚本&quot;&gt;&lt;a href=&quot;#在-Jenkins-pipeline-中运行-shell-脚本&quot; class=&quot;headerlink&quot; title=&quot;在 Jenkins pipeline 中运行 shell 脚本&quot;&gt;&lt;/a&gt;在 Jenkins pipeline 中运行 shell 脚本&lt;/h3&gt;&lt;p&gt;在 Jenkins Pipeline 中使用 shell 脚本可以通过将多个步骤合并到一个阶段来帮助简化构建。shell 脚本还允许用户添加或更新命令，而无需单独修改每个步骤或阶段。&lt;/p&gt;
&lt;p&gt;Jenkins Pipeline 中使用 shell 脚本及其提供的好处：&lt;/p&gt;</summary>
    
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
    <category term="pipeline" scheme="https://shenxianpeng.github.io/tags/pipeline/"/>
    
  </entry>
  
  <entry>
    <title>2022 年终总结</title>
    <link href="https://shenxianpeng.github.io/2022/12/2022-summary/"/>
    <id>https://shenxianpeng.github.io/2022/12/2022-summary/</id>
    <published>2022-12-28T12:26:56.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;时间过得好快，又过完了一年。&lt;/p&gt;
&lt;p&gt;今年想写一些总结回顾一下过去的一年发生在自己身上的重要事件。&lt;/p&gt;
&lt;p&gt;由于 2021 年没有写年终总结，2021</summary>
        
      
    
    
    
    <category term="Others" scheme="https://shenxianpeng.github.io/categories/others/"/>
    
    
    <category term="Thought" scheme="https://shenxianpeng.github.io/tags/thought/"/>
    
    <category term="Summary" scheme="https://shenxianpeng.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>How to implement [skip ci] for Jenkins multi-branch pipeline</title>
    <link href="https://shenxianpeng.github.io/2022/10/jenkins-skip-ci/"/>
    <id>https://shenxianpeng.github.io/2022/10/jenkins-skip-ci/</id>
    <published>2022-10-09T07:33:41.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;When I want to implement [skip ci] or [ci skip] for Jenkins multi-branch pipeline, the existing plugin seems broken.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
    <category term="CI" scheme="https://shenxianpeng.github.io/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>How to fix &quot;Temporary Failure in name resolution&quot; in WSL</title>
    <link href="https://shenxianpeng.github.io/2022/09/fix-wsl-networking-issue/"/>
    <id>https://shenxianpeng.github.io/2022/09/fix-wsl-networking-issue/</id>
    <published>2022-09-27T01:56:50.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;I have encountered a problem when I ping google.com failed and return some error like “Temporary failure in name resolution”&lt;/p&gt;
&lt;h2 id=&quot;How-to-fix&quot;&gt;&lt;a href=&quot;#How-to-fix&quot; class=&quot;headerlink&quot; title=&quot;How to fix&quot;&gt;&lt;/a&gt;How to fix&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Inside WSL2, create or append file: &lt;code&gt;/etc/wsl.conf&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put the following lines in the file in order to ensure the your DNS changes do not get blown away&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo &lt;span class=&quot;built_in&quot;&gt;tee&lt;/span&gt; /etc/wsl.conf &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;[network]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;generateResolvConf = false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="OS" scheme="https://shenxianpeng.github.io/categories/os/"/>
    
    
    <category term="WSL" scheme="https://shenxianpeng.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>Restrict others from login your important Linux machine</title>
    <link href="https://shenxianpeng.github.io/2022/09/restrict-connect-server/"/>
    <id>https://shenxianpeng.github.io/2022/09/restrict-connect-server/</id>
    <published>2022-09-16T02:13:08.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;p&gt;If you have a critical machine like your team’s CI server that runs on Linux, so you don’t want every members in your group to access it.&lt;/p&gt;
&lt;p&gt;Modifying this setting &lt;code&gt;/etc/security/access.conf&lt;/code&gt; on Linux can do it.&lt;/p&gt;
&lt;h2 id=&quot;How-to-setup&quot;&gt;&lt;a href=&quot;#How-to-setup&quot; class=&quot;headerlink&quot; title=&quot;How to setup&quot;&gt;&lt;/a&gt;How to setup&lt;/h2&gt;&lt;p&gt;I commented out the access settings for TEAM A, and add some user accounts can access.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#+ : (SRV_WW_TEAM_A_CompAdmin) : ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ : shenx, map, xiar : ALL&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="OS" scheme="https://shenxianpeng.github.io/categories/os/"/>
    
    
    <category term="Linux" scheme="https://shenxianpeng.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 代码格式化和静态分析检查的一站式工作流 Cpp Linter</title>
    <link href="https://shenxianpeng.github.io/2022/08/cpp-linter/"/>
    <id>https://shenxianpeng.github.io/2022/08/cpp-linter/</id>
    <published>2022-08-23T09:27:31.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇是关于 C&amp;#x2F;C++ 代码格式化和静态分析检查的实践分享。&lt;/p&gt;
&lt;p&gt;目前 C&amp;#x2F;C++ 语言的代码格式化和检查工具使用的最为广泛的是 &lt;a href=&quot;https://llvm.org/&quot;&gt;LLVM&lt;/a&gt; 项目中的 &lt;a href=&quot;https://clang.llvm.org/docs/ClangFormat.html&quot;&gt;Clang-Format&lt;/a&gt; 和 &lt;a href=&quot;https://clang.llvm.org/extra/clang-tidy/&quot;&gt;Clang-Tidy&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LLVM 项目是模块化和可重用的编译器和工具链技术的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于 C&amp;#x2F;C++ 代码格式化和静态分析检查用到是 LLVM 项目中 clang-format 和 clang-tidy，放在一起我们称它为 clang-tools。&lt;/p&gt;
&lt;p&gt;虽然我们有了工具，但&lt;strong&gt;如何把工具更好的集成到我们的工作流中&lt;/strong&gt;才是本篇重点要讨论的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cpp-linter&quot;&gt;cpp-linter&lt;/a&gt; 组织的诞生就是为 C&amp;#x2F;C++ 代码格式化和静态分析检查提供一站式的工作流，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;方便下载 clang-tools，提供了 Docker images 和 binaries 两种使用方式；&lt;/li&gt;
&lt;li&gt;方便与工作流进行集成，包括与 CI 以及 git hooks 的集成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面介绍如何使用 clang-tools 下载工具，以及集成到工作流中。&lt;/p&gt;</summary>
    
    
    
    <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
    <category term="Clang-Format" scheme="https://shenxianpeng.github.io/tags/clang-format/"/>
    
    <category term="Clang-Tidy" scheme="https://shenxianpeng.github.io/tags/clang-tidy/"/>
    
    <category term="Clang" scheme="https://shenxianpeng.github.io/tags/clang/"/>
    
  </entry>
  
  <entry>
    <title>How to create GPG keys and add to GitHub</title>
    <link href="https://shenxianpeng.github.io/2022/07/create-gpg-keys/"/>
    <id>https://shenxianpeng.github.io/2022/07/create-gpg-keys/</id>
    <published>2022-07-28T06:45:04.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;First-List-your-GPG-key&quot;&gt;&lt;a href=&quot;#First-List-your-GPG-key&quot; class=&quot;headerlink&quot; title=&quot;First, List your GPG key&quot;&gt;&lt;/a&gt;First, List your GPG key&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# If folders does not exist will create be related automatically&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --list-keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpg: directory &lt;span class=&quot;string&quot;&gt;&amp;#x27;/home/ubuntu/.gnupg&amp;#x27;&lt;/span&gt; created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpg: keybox &lt;span class=&quot;string&quot;&gt;&amp;#x27;/home/ubuntu/.gnupg/pubring.kbx&amp;#x27;&lt;/span&gt; created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpg: /home/ubuntu/.gnupg/trustdb.gpg: trustdb created&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --list-key&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Second-generate-GPG-key&quot;&gt;&lt;a href=&quot;#Second-generate-GPG-key&quot; class=&quot;headerlink&quot; title=&quot;Second, generate GPG key&quot;&gt;&lt;/a&gt;Second, generate GPG key&lt;/h3&gt;</summary>
    
    
    
    <category term="HowTo" scheme="https://shenxianpeng.github.io/categories/howto/"/>
    
    
    <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
    <category term="GPG" scheme="https://shenxianpeng.github.io/tags/gpg/"/>
    
  </entry>
  
  <entry>
    <title>12 周的陪产假我一刻都没闲着</title>
    <link href="https://shenxianpeng.github.io/2022/06/vacation-weekly-report/"/>
    <id>https://shenxianpeng.github.io/2022/06/vacation-weekly-report/</id>
    <published>2022-06-13T06:57:24.000Z</published>
    <updated>2023-06-11T12:52:11.605Z</updated>
    
    
    <summary type="html">&lt;p&gt;有幸赶上了公司的政策变化，我有 12 周的陪产假来做全职奶爸，照顾家人的同时希望挤出时间来学习，毕竟在职期间很有有机会能有近 3 个月的假期。&lt;/p&gt;
&lt;p&gt;照顾孩子兼顾学习真不是一件轻松的事情，我尽力兼顾了两者，做了如下的流水账记录。&lt;/p&gt;
&lt;h2 id=&quot;计划&quot;&gt;&lt;a href=&quot;#计划&quot; class=&quot;headerlink&quot; title=&quot;计划&quot;&gt;&lt;/a&gt;计划&lt;/h2&gt;&lt;p&gt;我知道 12 周会很快过去，就在已经快要过去了 2 周时我决定有计划的来完成一些任务，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; 完成《代码整洁之道》、《重构》以及《动手学习深度学习这三本书》的阅读和豆瓣评论&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; 为 pre-commit 写一个 clang-format 和 clang-tidy 的 &lt;code&gt;cpp-linter-hooks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; 完成每个月 15 节英语课以及 3~4 的体育锻炼（游泳和足球）&lt;/li&gt;
&lt;li&gt;&lt;input disabled type=&quot;checkbox&quot;&gt; 找一个可以作为长期业余参与的开源项目，例如 pytest，tox，pypa。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是从休假的第 2 周开始，我开始记录每周的完成的小任务。&lt;/p&gt;</summary>
    
    
    
    <category term="Others" scheme="https://shenxianpeng.github.io/categories/others/"/>
    
    
    <category term="Report" scheme="https://shenxianpeng.github.io/tags/report/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 做开发还能这么爽？WSL + VS Code + Docker Desktop 你值得有用</title>
    <link href="https://shenxianpeng.github.io/2022/04/wsl/"/>
    <id>https://shenxianpeng.github.io/2022/04/wsl/</id>
    <published>2022-04-19T14:12:31.000Z</published>
    <updated>2023-06-11T12:52:11.601Z</updated>
    
    
    <summary type="html">&lt;p&gt;很久以来很多程序员都遇到过在 Windows 做开发的各种不便：&lt;/p&gt;
&lt;p&gt;比如设置开发环境不能像 Linux 和 Mac 那样只需要输入一行命令就能安装各种 command 和 package，因此有的程序员从此转到了 Mac 上开发，也有的干脆就使用 Linux 作为开发机，只有那些不得不使用 Windows 作为开发环境程序员还一直留在了 Windows 上继续凑合中。&lt;/p&gt;
&lt;p&gt;直到 WSL 的到来，准确来说是 WSL2。&lt;/p&gt;
&lt;p&gt;WSL + VS Code + Docker Desktop 这三剑客的组合，开始让我觉得在 Windows 上做开发是一件非常爽的事情。&lt;/p&gt;
&lt;h2 id=&quot;什么是-WSL&quot;&gt;&lt;a href=&quot;#什么是-WSL&quot; class=&quot;headerlink&quot; title=&quot;什么是 WSL&quot;&gt;&lt;/a&gt;什么是 WSL&lt;/h2&gt;&lt;p&gt;WSL 是 Windows Subsystem for Linux 的缩写，它是 Windows 10 操作系统的一项功能，使你能够在 Windows 上直接运行 Linux 文件系统，以及 Linux 命令行工具和 GUI 应用程序，并与传统的 Windows 桌面和应用程序一起运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WSL 的最低版本要求是 Windows 10 version 1903 及更高。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WSL 是专为那些需要使用 Linux 的开发人员所开发的，例如从事网络开发人员、开源项目、以及需要部署到 Linux 服务器环境的开发者。&lt;/p&gt;
&lt;p&gt;WSL 适用于喜欢使用 Bash、常用 Linux 工具（sed、awk等）和 Linux 优先框架（Ruby、Python 等），同时也喜欢使用 Windows 作为生产力工具的人。&lt;/p&gt;
&lt;p&gt;下面来看看 WSL 和虚拟机相比有哪些优势。&lt;/p&gt;</summary>
    
    
    
    <category term="HowTo" scheme="https://shenxianpeng.github.io/categories/howto/"/>
    
    
    <category term="Windows" scheme="https://shenxianpeng.github.io/tags/windows/"/>
    
    <category term="Docker" scheme="https://shenxianpeng.github.io/tags/docker/"/>
    
    <category term="WSL" scheme="https://shenxianpeng.github.io/tags/wsl/"/>
    
    <category term="VSCode" scheme="https://shenxianpeng.github.io/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>关于 Docker，containerd，CRI，CRI-O，OCI，runc 的解释以及它们是如何工作在一起的</title>
    <link href="https://shenxianpeng.github.io/2022/03/container-ecosystem/"/>
    <id>https://shenxianpeng.github.io/2022/03/container-ecosystem/</id>
    <published>2022-03-29T12:52:42.000Z</published>
    <updated>2023-06-11T12:52:11.593Z</updated>
    
    
    <summary type="html">&lt;p&gt;自 Docker 开启了使用容器的爆发式增长，有越来越多的工具和标准来帮助管理和使用这项容器化技术，与此同时也造成了有很多术语让人感到困惑。&lt;/p&gt;
&lt;p&gt;比如 Docker, containerd, CRI, CRI-O, OCI, runc，本篇将介绍这些你听过但并不了解的术语，并解释容器生态系统是如何在一起工作的。&lt;/p&gt;
&lt;h2 id=&quot;容器生态系统&quot;&gt;&lt;a href=&quot;#容器生态系统&quot; class=&quot;headerlink&quot; title=&quot;容器生态系统&quot;&gt;&lt;/a&gt;容器生态系统&lt;/h2&gt;&lt;p&gt;容器生态系统是由许多令人兴奋的技术、大量的专业术语和大公司相互争斗组成的。&lt;/p&gt;
&lt;p&gt;幸运的是，这些公司偶尔会在休战中走到一起合作，商定一些标准，这些标准有助于使这个生态系统在不同的平台和操作系统之间更具互操作性，并减少对单一公司或项目的依赖。&lt;/p&gt;
&lt;p&gt;这张图显示了 Docker、Kubernetes、CRI、OCI、containerd 和 runc 在这个生态系统中是如何结合的。&lt;/p&gt;</summary>
    
    
    
    <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
    <category term="Docker" scheme="https://shenxianpeng.github.io/tags/docker/"/>
    
    <category term="containerd" scheme="https://shenxianpeng.github.io/tags/containerd/"/>
    
    <category term="CRI" scheme="https://shenxianpeng.github.io/tags/cri/"/>
    
    <category term="CRI-O" scheme="https://shenxianpeng.github.io/tags/cri-o/"/>
    
    <category term="OCI" scheme="https://shenxianpeng.github.io/tags/oci/"/>
    
    <category term="runc" scheme="https://shenxianpeng.github.io/tags/runc/"/>
    
  </entry>
  
  <entry>
    <title>How to enable, configure and disable Jenkins LDAP</title>
    <link href="https://shenxianpeng.github.io/2022/03/jenkins-ldap-configuration/"/>
    <id>https://shenxianpeng.github.io/2022/03/jenkins-ldap-configuration/</id>
    <published>2022-03-15T05:54:43.000Z</published>
    <updated>2023-06-11T12:52:11.597Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;In organizations, using LDAP login very common way for users to log in with their credentials.&lt;/p&gt;
&lt;h2 id=&quot;How-to-configure-LDAP&quot;&gt;&lt;a href=&quot;#How-to-configure-LDAP&quot; class=&quot;headerlink&quot; title=&quot;How to configure LDAP&quot;&gt;&lt;/a&gt;How to configure LDAP&lt;/h2&gt;&lt;p&gt;Preparation: Installed LDAP Jenkins plugin&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/03/jenkins-ldap-configuration/ldap-plugin.png&quot; alt=&quot;LDAP plugin&quot;&gt;&lt;/p&gt;
&lt;p&gt;About how to configure it, you can refer to Jenkins LDAP Plugin documentation &lt;a href=&quot;https://plugins.jenkins.io/ldap/&quot;&gt;https://plugins.jenkins.io/ldap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my LDAP configuration just for testing.&lt;/p&gt;</summary>
    
    
    
    <category term="HowTo" scheme="https://shenxianpeng.github.io/categories/howto/"/>
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
    <category term="LDAP" scheme="https://shenxianpeng.github.io/tags/ldap/"/>
    
  </entry>
  
  <entry>
    <title>靠谱：在不删除和重建 GitHub 仓库的情况下与父(Fork)仓库分离(Unfork)</title>
    <link href="https://shenxianpeng.github.io/2022/03/unfork-github-repo/"/>
    <id>https://shenxianpeng.github.io/2022/03/unfork-github-repo/</id>
    <published>2022-03-09T03:16:05.000Z</published>
    <updated>2023-06-11T12:52:11.601Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;有开发者、甚至公司可能会遇到过以下几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最开始 Fork 了一个仓库，之后做了大量的修改，从功能到开发语言，已经与父仓库各自发展了&lt;/li&gt;
&lt;li&gt;由于是 Fork 的仓库，在每次提 Pull Request 的默认目标分支是父仓库，一不注意就会提 PR 到父仓库里去了&lt;/li&gt;
&lt;li&gt;Fork 的仓库有人贡献并使用了，但不能显示贡献者，以及该项目被哪些其他的项目所使用，这不利于项目的发展&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于这些问题，开发者会考虑与父仓库进行分离，但目前 GitHub 没有提供 Unfork&amp;#x2F;Detach 的功能。&lt;/p&gt;
&lt;p&gt;如果直接删除项目并重建可以达到分离的目的，但这样会丢失一些重要的信息，比如项目中的 Issues，Wikis 以及 Pull Requests 等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unfork 跟某节旗下某引擎白嫖 Apache SkyWalking 有本质区别，它更像是 Hudson 和 Jenkins 的分道扬镳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h2&gt;&lt;p&gt;在经过一番调查和测试，目前最可行的办法就是通过 GitHub Support 来处理，具体操作如下：&lt;/p&gt;</summary>
    
    
    
    <category term="HowTo" scheme="https://shenxianpeng.github.io/categories/howto/"/>
    
    
    <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
    <category term="GitHub" scheme="https://shenxianpeng.github.io/tags/github/"/>
    
    <category term="Fork" scheme="https://shenxianpeng.github.io/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>在 Jenkins 上用了这么久的 Groovy，是时候认识一下它了</title>
    <link href="https://shenxianpeng.github.io/2022/03/groovy/"/>
    <id>https://shenxianpeng.github.io/2022/03/groovy/</id>
    <published>2022-03-06T14:19:31.000Z</published>
    <updated>2023-06-11T12:52:11.597Z</updated>
    
    
    <summary type="html">&lt;p&gt;在使用 Jenkins 和 Groovy 越久，我就这样的疑问：&lt;/p&gt;
&lt;p&gt;Groovy 到底是什么语言？&lt;br&gt;Groovy 有哪些特性？&lt;br&gt;Groovy 和 Java 有什么区别？&lt;br&gt;Groovy 和 Java 如何选择？&lt;br&gt;Groovy 在整个开发语言中占什么位置？要不要学？&lt;/p&gt;
&lt;p&gt;本篇我的学习结果的分享，希望也能帮助你解答以上的这些问题。&lt;/p&gt;
&lt;h2 id=&quot;什么是-Groovy&quot;&gt;&lt;a href=&quot;#什么是-Groovy&quot; class=&quot;headerlink&quot; title=&quot;什么是 Groovy&quot;&gt;&lt;/a&gt;什么是 Groovy&lt;/h2&gt;&lt;p&gt;Apache Groovy 是一种强大的、可选类型的动态语言，具有静态类型和静态编译功能，适用于 Java 平台，旨在通过简洁、熟悉且易于学习的语法提高开发人员的工作效率。&lt;br&gt;它与任何 Java 程序顺利集成，并立即为你的应用程序提供强大的功能，包括脚本功能、特定领域语言创作、运行时和编译时元编程和函数式编程。&lt;/p&gt;
&lt;h2 id=&quot;Groovy-的特性&quot;&gt;&lt;a href=&quot;#Groovy-的特性&quot; class=&quot;headerlink&quot; title=&quot;Groovy 的特性&quot;&gt;&lt;/a&gt;Groovy 的特性&lt;/h2&gt;&lt;p&gt;翻译官方的说法，Groovy 有以下六大特性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平坦的学习曲线 - 简洁、易读且富有表现力的语法，Java 开发人员易于学习&lt;/li&gt;
&lt;li&gt;强大的功能 - 闭包、构建器、运行时和编译时元编程、函数式编程、类型推断和静态编译&lt;/li&gt;
&lt;li&gt;流畅的 Java 集成 - 与 Java 和任何第三方库无缝、透明地集成和互操作&lt;/li&gt;
&lt;li&gt;领域特定语言 - 灵活可延展的语法，先进的集成和定制机制，在你的应用程序中集成可读的业务规则&lt;/li&gt;
&lt;li&gt;充满活力和丰富的生态系统 - Web 开发、响应式应用程序、并发&amp;#x2F;异步&amp;#x2F;并行库、测试框架、构建工具、代码分析、GUI 构建&lt;/li&gt;
&lt;li&gt;脚本和测试胶水 - 非常适合编写简洁和可维护的测试，以及所有构建和自动化任务&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Groovy-和-Java-的区别&quot;&gt;&lt;a href=&quot;#Groovy-和-Java-的区别&quot; class=&quot;headerlink&quot; title=&quot;Groovy 和 Java 的区别&quot;&gt;&lt;/a&gt;Groovy 和 Java 的区别&lt;/h2&gt;</summary>
    
    
    
    <category term="Groovy" scheme="https://shenxianpeng.github.io/categories/groovy/"/>
    
    
    <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
    <category term="Java" scheme="https://shenxianpeng.github.io/tags/java/"/>
    
    <category term="Groovy" scheme="https://shenxianpeng.github.io/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Resolved - The Pip Inspector tree parse failed to produce output</title>
    <link href="https://shenxianpeng.github.io/2022/03/blackduck-troubleshooting/"/>
    <id>https://shenxianpeng.github.io/2022/03/blackduck-troubleshooting/</id>
    <published>2022-03-02T06:54:11.000Z</published>
    <updated>2023-06-11T12:52:11.593Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Details&quot;&gt;&lt;a href=&quot;#Details&quot; class=&quot;headerlink&quot; title=&quot;Details&quot;&gt;&lt;/a&gt;Details&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Failure: PIP - Pip Inspector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  The Pip Inspector tree parse failed to produce output.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Overall Status: FAILURE_DETECTOR - Detect had one or more detector failures &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; extracting dependencies.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For more output please click to expand.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;👉 Click to see more output 👈&lt;/summary&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[main] --- ======== Detect Issues ========&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- DETECTORS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- 	Detector Issue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- 		/workdir/test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- 		Failure: PIP - Pip Inspector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- 			The Pip Inspector tree parse failed to produce output.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- ======== Detect Result ========&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- Black Duck Project BOM: https://org.blackducksoftware.com/api/projects/246c8952-7cb8-40e9-9987-35f7d4602ae1/versions/e1cb4204-42d0-4445-8675-978df62b150d/components&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- ======== Detect Status ========&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- GIT: SUCCESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- PIP: FAILURE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- Signature scan / Snippet scan on /workdir/test: SUCCESS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- Overall Status: FAILURE_DETECTOR - Detect had one or more detector failures &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; extracting dependencies. Check that all projects build and your environment is configured correctly.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- If you need &lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt; troubleshooting this problem, generate a diagnostic zip file by adding &lt;span class=&quot;string&quot;&gt;&amp;#x27;-d&amp;#x27;&lt;/span&gt; to the &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; line, and provide it to Synopsys Technical Support. See &lt;span class=&quot;string&quot;&gt;&amp;#x27;Diagnostic Mode&amp;#x27;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the Detect documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- ===============================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- Detect duration: 00h 00m 54s 951ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[main] --- Exiting with code 5 - FAILURE_DETECTOR&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/details&gt;

&lt;p&gt;ENVIRONMENT:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Product: synopsys-detect-7.11.1.jar&lt;/li&gt;
&lt;li&gt;Others: OpenJDK 11, Python 3.6 and Python 2.7.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Root-cause&quot;&gt;&lt;a href=&quot;#Root-cause&quot; class=&quot;headerlink&quot; title=&quot;Root cause&quot;&gt;&lt;/a&gt;Root cause&lt;/h2&gt;</summary>
    
    
    
    <category term="BlackDuck" scheme="https://shenxianpeng.github.io/categories/blackduck/"/>
    
    
    <category term="Troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
    <category term="BlackDuck" scheme="https://shenxianpeng.github.io/tags/blackduck/"/>
    
  </entry>
  
</feed>
