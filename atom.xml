<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peter Shen</title>
  
  <subtitle>Share about CI/CD and DevOps</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenxianpeng.github.io/"/>
  <updated>2022-03-02T14:40:02.766Z</updated>
  <id>https://shenxianpeng.github.io/</id>
  
  <author>
    <name>shenxianpeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Resolved - The Pip Inspector tree parse failed to produce output</title>
    <link href="https://shenxianpeng.github.io/2022/03/blackduck-troubleshooting/"/>
    <id>https://shenxianpeng.github.io/2022/03/blackduck-troubleshooting/</id>
    <published>2022-03-02T06:54:11.000Z</published>
    <updated>2022-03-02T14:40:02.766Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Details&quot;&gt;&lt;a href=&quot;#Details&quot; class=&quot;headerlink&quot; title=&quot;Details&quot;&gt;&lt;/a&gt;Details&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
        
      
    
    </summary>
    
      <category term="BlackDuck" scheme="https://shenxianpeng.github.io/categories/blackduck/"/>
    
    
      <category term="Troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
      <category term="BlackDuck" scheme="https://shenxianpeng.github.io/tags/blackduck/"/>
    
  </entry>
  
  <entry>
    <title>2022 年最值得关注的 DevOps 趋势和问答</title>
    <link href="https://shenxianpeng.github.io/2022/02/devops-trends-2022/"/>
    <id>https://shenxianpeng.github.io/2022/02/devops-trends-2022/</id>
    <published>2022-02-24T03:27:18.000Z</published>
    <updated>2022-03-01T15:56:29.634Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;DevOps 是 IT 界最近几年的一个热门话题，而且还会越来越热。&lt;/p&gt;
&lt;p&gt;最近有幸和一位做传播咨询的读者朋友交流关于 2022 年最值得关注的 DevOps 趋势以及一些问题和回答，分享给大家。&lt;/p&gt;
&lt;h2 id=&quot;行业趋势&quot;&gt;&lt;a href=&quot;#行业趋势&quot; class=&quot;headerlink&quot; title=&quot;行业趋势&quot;&gt;&lt;/a&gt;行业趋势&lt;/h2&gt;&lt;h3 id=&quot;趋势一：转向无服务器计算&quot;&gt;&lt;a href=&quot;#趋势一：转向无服务器计算&quot; class=&quot;headerlink&quot; title=&quot;趋势一：转向无服务器计算&quot;&gt;&lt;/a&gt;趋势一：转向无服务器计算&lt;/h3&gt;&lt;p&gt;无服务器计算是一种新兴趋势，实际上已经存在了十多年。企业购买无服务器框架需要一段时间，主要是因为对行业支持和对投资回报的担忧。&lt;/p&gt;
&lt;p&gt;无服务器具有许多越来越难以忽视的优势，主要的两个最大好处是效率和可靠性。没有基础设施管理的负担，企业可以将资源集中在正重要的事项上。此外，无服务器还降低了传统框架可能出现的潜在维护问题的风险。&lt;/p&gt;
&lt;p&gt;无服务器提供固有的可扩展性和可靠性并自动化开发人员不喜欢的日常操作任务，2022 年无服务器计算会经历下一次发展。&lt;/p&gt;
&lt;h3 id=&quot;趋势二：微服务架构增长&quot;&gt;&lt;a href=&quot;#趋势二：微服务架构增长&quot; class=&quot;headerlink&quot; title=&quot;趋势二：微服务架构增长&quot;&gt;&lt;/a&gt;趋势二：微服务架构增长&lt;/h3&gt;&lt;p&gt;随着无服务器计算在 2022 年的发展，微服务也将如此。&lt;/p&gt;
&lt;p&gt;微服务架构是将单体应用分化为小的独立单元，或服务，从而为大型团队提供了更大的灵活性。它有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为企业提供比单体应用程序更好的可扩展性和敏捷性&lt;/li&gt;
&lt;li&gt;开发人员可以使用他们熟悉的编程语言和工具，消除传统应用程序开发的局限&lt;/li&gt;
&lt;li&gt;开发人员能够在不破坏整个代码库的情况下部署小的特性或功能&lt;/li&gt;
&lt;li&gt;DevOps 团队可以根据业务需求来扩展每个应用部分，而不是一次性扩展整个应用&lt;/li&gt;
&lt;li&gt;出现问题微服务可以轻松控制问题，而不会中断整个应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然也必须认识到微服务的一个弊端，如果实施不佳可能导致严重问题，包括数据丢失、可靠性差和安全风险。&lt;/p&gt;
&lt;h3 id=&quot;趋势三：Kubernetes-成为基础架构&quot;&gt;&lt;a href=&quot;#趋势三：Kubernetes-成为基础架构&quot; class=&quot;headerlink&quot; title=&quot;趋势三：Kubernetes 成为基础架构&quot;&gt;&lt;/a&gt;趋势三：Kubernetes 成为基础架构&lt;/h3&gt;&lt;p&gt;Kubernetes，也称 K8s，是容器编排开源平台，它能够与容器组交互，同时管理更多集群。除了容器管理，还提供安全、网络和存储服务，自我监控，节点和容器的健康状况检查。它可以处理从虚拟机集群管理到负载平衡等所有方方面面，提高生产力，简化 DevOps 开发、测试和部署流程。&lt;/p&gt;
&lt;p&gt;根据 Flexera 的 2021 年云计算状况报告，48% 的企业使用 Kubernetes，另有 25% 的企业计划使用它。另外 53% 的组织使用 Docker，21% 的组织计划使用。&lt;/p&gt;
&lt;h3 id=&quot;趋势四：DevSecOps-成为重要组成部分&quot;&gt;&lt;a href=&quot;#趋势四：DevSecOps-成为重要组成部分&quot; class=&quot;headerlink&quot; title=&quot;趋势四：DevSecOps 成为重要组成部分&quot;&gt;&lt;/a&gt;趋势四：DevSecOps 成为重要组成部分&lt;/h3&gt;&lt;p&gt;安全性正在成为 DevOps 领域的另一个日益关注的问题。&lt;/p&gt;
&lt;p&gt;为了避免网络攻击，许多大型企业正在将安全性集成到他们的 DevOps 流程中。从 DevOps 到 DevSecOps 的转变预计在 2022 会有更多公司在软件开发生命周期的早期加入安全控制。&lt;br&gt;这使 DevOps 团队能够在开发阶段持续监控和修复安全缺陷，从而提高交付速度和质量。DevSecOps 正在成为许多公司组织结构图的重要组成部分。&lt;/p&gt;
&lt;h2 id=&quot;行业问答&quot;&gt;&lt;a href=&quot;#行业问答&quot; class=&quot;headerlink&quot; title=&quot;行业问答&quot;&gt;&lt;/a&gt;行业问答&lt;/h2&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
      <category term="Kubernetes" scheme="https://shenxianpeng.github.io/tags/kubernetes/"/>
    
      <category term="DevSecOps" scheme="https://shenxianpeng.github.io/tags/devsecops/"/>
    
  </entry>
  
  <entry>
    <title>从QA到DEV到DEVOPS，码字五年有哪些收获</title>
    <link href="https://shenxianpeng.github.io/2022/02/from-qa-to-dev-to-devops/"/>
    <id>https://shenxianpeng.github.io/2022/02/from-qa-to-dev-to-devops/</id>
    <published>2022-02-20T16:15:00.000Z</published>
    <updated>2022-02-26T06:40:50.402Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在写博客和公众号这件事上，不知不觉已经是我的第五个年头了，没想过能这么久。&lt;/p&gt;
&lt;p&gt;借此分享一下这些年我的职业线路的变化，以及写博客&amp;amp;公众号有什么收获，算是自己过去的一个总结，如果能有点共鸣和帮助就更好了。&lt;/p&gt;
&lt;h2 id=&quot;从QA到DEV到DEVOPS&quot;&gt;&lt;a href=&quot;#从QA到DEV到DEVOPS&quot; class=&quot;headerlink&quot; title=&quot;从QA到DEV到DEVOPS&quot;&gt;&lt;/a&gt;从QA到DEV到DEVOPS&lt;/h2&gt;&lt;p&gt;最早关注我公众号读者朋友大概都是因为软件测试而结缘的。是的，我做了近 10 的软件测试工作，先后在 SIMcom、东软、京东商城、外企从事过功能&amp;amp;自动化&amp;amp;性能测试工作。&lt;/p&gt;
&lt;p&gt;从功能测试入行开始，我慢慢地感受到编程不是开发的独门武功，它也是测试工程师的必备技能，只有具备良好的编码能力，才能去做自动化、Unittest、以及测试开发等工作。&lt;/p&gt;
&lt;p&gt;当我做了自动化测试工程师，我又发现相对于“发现”问题，“解决”问题更令我愉悦。我开始梦想有机会能去做开发，这样不但可以提高自己的编程能力，另外开发、测试都懂也能为自己今后的职业发展找到更多可能性。&lt;/p&gt;
&lt;p&gt;最终是因为有这样的机会+自己的主动+编码过得去，我从测试转到了开发。起初的艰难和压力都是我工作近 10 年来前所未有的，白天看代码、晚上看代码、周末看代码… 天天如此。经过了半年多的努力，才终于上岸，可以做 C/C++ 项目的 Bugfix 了。&lt;/p&gt;
&lt;p&gt;也正是因为有开发、自动化、持续集成的经验，在团队需要一名 Build/Release 工程师的时候，我知道这就是我最适合的岗位，负责产品的自动化构建、发布、基础设施建设、CI/CD 以及提高研发效能的相关开发工作。&lt;/p&gt;
&lt;p&gt;就这样我从 QA 到 DEV 到 DEVOPS。公众号的更名记录也记录了我的职业路线变化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2019年07月28日 “软件测试与开发”改名“DevOps攻城狮”&lt;/li&gt;
&lt;li&gt;2018年12月29日 “DevQA”改名“软件测试与开发”&lt;/li&gt;
&lt;li&gt;2018年12月26日 “软件测试QA”改名“DevQA”&lt;/li&gt;
&lt;li&gt;2017年08月01日 注册“软件测试QA”&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;写作五年有哪些收获&quot;&gt;&lt;a href=&quot;#写作五年有哪些收获&quot; class=&quot;headerlink&quot; title=&quot;写作五年有哪些收获&quot;&gt;&lt;/a&gt;写作五年有哪些收获&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;写作是一项长期收益远超短期收益的事情&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于绝大多数人在短期内几乎不会有什么实质性的收益，还会花费大量的业余时间，妥妥的是用爱在发电。从金钱角度来衡量这件事，这是一件投入和产出完全不成比例的事情，很难坚持。&lt;/p&gt;
&lt;p&gt;如果从长期来看，坚持写作一定会带来价值的，我总结有以五个方面的好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;好记性不如烂笔头 - 当我们弄明白了一个技术难题，虽然当时明白了，但如果没记录下来，很有可能以后遇到同样的问题又不知道该如何解决。&lt;/li&gt;
&lt;li&gt;让别人听懂才是真的懂 - 有时候对于一个问题我们认为自己明白了，当分享给别人的时候，才发现其中有的逻辑说不通，因此不得不继续思考并彻底搞清楚。&lt;/li&gt;
&lt;li&gt;打造学习飞轮 - 当你坚持分享并有人关注到你并与你互动的时候，你就会有动力继续分享，学习新的知识然后再分享，一旦学习的飞轮造好了，坚持下去就变得容易。&lt;/li&gt;
&lt;li&gt;间接收益 - 但凡坚持写点东西，对于以后找工作都或多或少会有些帮助，至少说明你是一个爱学习的人。如果你的分享让同行、未来你的面试官觉得很不错，很可能会给你带来一次新的工作机会。&lt;/li&gt;
&lt;li&gt;直接收益 - 直接利益包括平台流量和广告收益、以及卖专栏、做咨询等。这要求就很高了，不但需要会自媒体运营，还有要超强的输出功力，这背后就是比别人更多的付出。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Others" scheme="https://shenxianpeng.github.io/categories/others/"/>
    
    
      <category term="Thought" scheme="https://shenxianpeng.github.io/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant 和 Docker 的区别，该如何选？</title>
    <link href="https://shenxianpeng.github.io/2022/01/vagrant-vs-docker/"/>
    <id>https://shenxianpeng.github.io/2022/01/vagrant-vs-docker/</id>
    <published>2022-02-14T00:30:00.000Z</published>
    <updated>2022-02-13T14:26:15.313Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关于 Vagrant 的介绍，可以参看前一篇文章：&lt;a href=&quot;https://shenxianpeng.github.io/2022/01/vagrant/&quot;&gt;什么是 Vagrant? Vagrant 和 VirtualBox 的区别&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是-Vagrant&quot;&gt;&lt;a href=&quot;#什么是-Vagrant&quot; class=&quot;headerlink&quot; title=&quot;什么是 Vagrant&quot;&gt;&lt;/a&gt;什么是 Vagrant&lt;/h2&gt;&lt;p&gt;关于 Vagrant 的介绍，可以参看前一篇文章：什么是 Vagrant? Vagrant 和 VirtualBox 的区别&lt;/p&gt;
&lt;h2 id=&quot;Vagrant-和-Docker-区别&quot;&gt;&lt;a href=&quot;#Vagrant-和-Docker-区别&quot; class=&quot;headerlink&quot; title=&quot;Vagrant 和 Docker 区别&quot;&gt;&lt;/a&gt;Vagrant 和 Docker 区别&lt;/h2&gt;&lt;p&gt;关于 Vagrant 被问到最多的问题：Vagrant 和 Docker 之间有什么区别。&lt;/p&gt;
&lt;p&gt;如果不分场景的直接比对 Vagrant 和 Docker 是不恰当的。在一些简单场景中，它们的作用是重复的，但在更多场景中，它们是无法相互替代的。&lt;/p&gt;
&lt;p&gt;那么什么情况下应该用 Vagrant，什么情况下用 Docker 呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以如果你仅仅是想管理虚拟机，那么你应该使用 Vagrant；如果你想快速开发和部署应用，那么应该使用 Docker。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面具体来说说为什么。&lt;/p&gt;
&lt;p&gt;Vagrant 是 VM 的管理工具，或是说编排工具；Docker 是用来构建、运行、管理容器的工具。那么这个问题其实落在了虚拟机（VM）和 容器（Container）的区别。&lt;/p&gt;
&lt;p&gt;引用网络上一组照片来感受一下物理机（Host），虚拟机（VM）和 容器（Container）之间的区别。&lt;/p&gt;
&lt;p&gt;物理机（Host）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/01/vagrant-vs-docker/host.jpg&quot; alt=&quot;物理机&quot;&gt;&lt;/p&gt;
&lt;p&gt;虚拟机（VM）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/01/vagrant-vs-docker/vm.jpg&quot; alt=&quot;虚拟机&quot;&gt;&lt;/p&gt;
&lt;p&gt;容器（Container）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/01/vagrant-vs-docker/docker.jpg&quot; alt=&quot;Docker&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图上我们更容易理解虚拟机（VM）和容器（Container）的这些不同：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;th&gt;虚拟机&lt;/th&gt;
&lt;th&gt;容器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;隔离级别&lt;/td&gt;
&lt;td&gt;操作系统级&lt;/td&gt;
&lt;td&gt;进程级别&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;隔离策略&lt;/td&gt;
&lt;td&gt;Hypervisor&lt;/td&gt;
&lt;td&gt;CGROUPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系统资源&lt;/td&gt;
&lt;td&gt;5 - 15%&lt;/td&gt;
&lt;td&gt;0 - 5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;启动时间&lt;/td&gt;
&lt;td&gt;分钟级&lt;/td&gt;
&lt;td&gt;秒级&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;镜像存储&lt;/td&gt;
&lt;td&gt;GB&lt;/td&gt;
&lt;td&gt;MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;总结：Vagrant 和 Docker 的使用场景区别&lt;/p&gt;
    
    </summary>
    
      <category term="Vagrant" scheme="https://shenxianpeng.github.io/categories/vagrant/"/>
    
    
      <category term="Docker" scheme="https://shenxianpeng.github.io/tags/docker/"/>
    
      <category term="VirtualBox" scheme="https://shenxianpeng.github.io/tags/virtualbox/"/>
    
      <category term="Vagrant" scheme="https://shenxianpeng.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>什么是 Vagrant? Vagrant 和 VirtualBox 的区别</title>
    <link href="https://shenxianpeng.github.io/2022/01/vagrant/"/>
    <id>https://shenxianpeng.github.io/2022/01/vagrant/</id>
    <published>2022-02-11T00:30:00.000Z</published>
    <updated>2022-02-13T14:25:12.877Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Vagrant&quot;&gt;&lt;a href=&quot;#什么是-Vagrant&quot; class=&quot;headerlink&quot; title=&quot;什么是 Vagrant&quot;&gt;&lt;/a&gt;什么是 Vagrant&lt;/h2&gt;&lt;p&gt;Vagrant 是一种&lt;a href=&quot;https://github.com/hashicorp/vagrant&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;开源&lt;/a&gt;软件产品，用来方便构建和维护虚拟软件开发环境。&lt;/p&gt;
&lt;p&gt;例如，它可以基于 VirtualBox、VMware、KVM、Hyper-V 和 AWS 甚至是 Docker 等提供商来构建开发环境。它通过简化虚拟化的软件配置管理，来提高开发效率。&lt;/p&gt;
&lt;p&gt;Vagrant 是用 Ruby 语言开发的，但它的生态系统支持使用其他几种语言进行开发。&lt;/p&gt;
&lt;p&gt;简单来说 Vagrant 是对传统虚拟机的一层封装，能够让你更方便的使用虚拟开发环境。&lt;/p&gt;
&lt;h2 id=&quot;Vagrant-的发展史&quot;&gt;&lt;a href=&quot;#Vagrant-的发展史&quot; class=&quot;headerlink&quot; title=&quot;Vagrant 的发展史&quot;&gt;&lt;/a&gt;Vagrant 的发展史&lt;/h2&gt;&lt;p&gt;Vagrant 最初是由 &lt;a href=&quot;https://www.hashicorp.com/about?name=mitchell-hashimoto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mitchell Hashimoto&lt;/a&gt; 于 2010 年 1 月作为个人项目启动的。&lt;/p&gt;
&lt;p&gt;Vagrant 的第一个版本于 2010 年 3 月发布。2010 年 10 月，Engine Yard 宣布他们将赞助 Vagrant 项目。&lt;/p&gt;
&lt;p&gt;Vagrant 的第一个稳定版本 Vagrant 1.0 于 2012 年 3 月发布，正好是原始版本发布两年后。&lt;/p&gt;
&lt;p&gt;同年 11 月，Mitchell 成立了 HashiCorp 公司，以支持 Vagrant 的全职开发。Vagrant 仍然是开源软件，HashiCorp 公司致力于创建商业版本，并为 Vagrant 提供专业支持和培训。&lt;/p&gt;
&lt;p&gt;现在 HashiCorp 已经成为世界顶级开源公司，它通过一系列的产品，包括 Vagrant，Packer（打包），Momad（部署），Terraform（配置云环境），Vault（权限管理） 以及 Consul（监控），从端到端重新定义了整个 DevOps。&lt;/p&gt;
&lt;p&gt;Vagrant 最初支持 VirtualBox，在 1.1 版增加了对其他虚拟化软件（如 VMware 和 KVM）的支持，以及对 Amazon EC2 等服务器环境的支持。从 1.6 版开始，Vagrant 原生支持 Docker 容器，在某些情况下可以替代完全虚拟化的操作系统。&lt;/p&gt;
&lt;h2 id=&quot;如何使用-Vagrant&quot;&gt;&lt;a href=&quot;#如何使用-Vagrant&quot; class=&quot;headerlink&quot; title=&quot;如何使用 Vagrant&quot;&gt;&lt;/a&gt;如何使用 Vagrant&lt;/h2&gt;&lt;p&gt;使用 Vagrant 的前提条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Vagrant。下载 &lt;a href=&quot;https://www.vagrantup.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安装 &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当以上两个都准备好了，你就可以通过命令行创建并使用你的虚拟机了。&lt;/p&gt;
&lt;p&gt;比如你需要一个 &lt;a href=&quot;https://app.vagrantup.com/hashicorp/boxes/bionic64&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu 18.04 LTS 64-bit&lt;/a&gt;的虚拟机。更多其他的虚拟机可以到 &lt;a href=&quot;https://app.vagrantup.com/boxes/search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Box&lt;/a&gt; 网站上去搜索查找，它类似于 Docker Hub，用户可以在上面下载和上传各种 Vagrant Box。&lt;/p&gt;
&lt;p&gt;你只需执行一些简单的命令就可以完成启动、登录、退出、及销毁。&lt;/p&gt;
&lt;p&gt;初始化 Vagrant&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant init hashicorp/bionic64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;启动虚拟机。大概几十秒钟就可以完成了（第一次需要下载镜像，时间会长一点，取决于网速）。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;登录你的虚拟机，然后可以使用你创建的 Ubuntu 虚拟机了&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant ssh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当你不想用的时候，执行 &lt;code&gt;logout&lt;/code&gt; 就可以退出登录了。&lt;/p&gt;
&lt;h2 id=&quot;Vagrant-和传统虚拟机软件的区别&quot;&gt;&lt;a href=&quot;#Vagrant-和传统虚拟机软件的区别&quot; class=&quot;headerlink&quot; title=&quot;Vagrant 和传统虚拟机软件的区别&quot;&gt;&lt;/a&gt;Vagrant 和传统虚拟机软件的区别&lt;/h2&gt;
    
    </summary>
    
      <category term="Vagrant" scheme="https://shenxianpeng.github.io/categories/vagrant/"/>
    
    
      <category term="VirtualBox" scheme="https://shenxianpeng.github.io/tags/virtualbox/"/>
    
      <category term="Vagrant" scheme="https://shenxianpeng.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>什么是 Go ？Go 的优势和现状。初学者应该学习 Python 还是 Go？</title>
    <link href="https://shenxianpeng.github.io/2022/01/what-is-go/"/>
    <id>https://shenxianpeng.github.io/2022/01/what-is-go/</id>
    <published>2022-01-18T14:01:31.000Z</published>
    <updated>2022-01-28T08:29:18.504Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Go 是一种开源编程语言，可以轻松构建简单、可靠和高效的软件。&lt;/p&gt;
&lt;h2 id=&quot;Go-还是-Golang&quot;&gt;&lt;a href=&quot;#Go-还是-Golang&quot; class=&quot;headerlink&quot; title=&quot;Go 还是 Golang&quot;&gt;&lt;/a&gt;Go 还是 Golang&lt;/h2&gt;&lt;p&gt;先问一个大多数人可能会忽略的问题：Google 的这门开源编程语言叫 Go 还是 Golang？还是两个都行？给你三秒钟想一下 …&lt;/p&gt;
&lt;p&gt;Google 说：它叫 Go。之所以有人称它为 Golang 是由于之前的 Go 语言官网是 golang.org（因为 go.org 已经被别人用了），因此有人将 Golang 和 Go 混用了。&lt;/p&gt;
&lt;p&gt;现在输入 golang.org 会直接跳转到 go.dev 这个网址，这也算是彻底给自家孩子正个名。&lt;/p&gt;
&lt;h2 id=&quot;Go-语言有哪些优势&quot;&gt;&lt;a href=&quot;#Go-语言有哪些优势&quot; class=&quot;headerlink&quot; title=&quot;Go 语言有哪些优势&quot;&gt;&lt;/a&gt;Go 语言有哪些优势&lt;/h2&gt;&lt;p&gt;官网是这样介绍 Go 语言的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 适合大规模快速构建，可靠、高效的软件&lt;/li&gt;
&lt;li&gt;Go 是 Google 在背后支持的一门开源编程语言&lt;/li&gt;
&lt;li&gt;易于学习和入门&lt;/li&gt;
&lt;li&gt;内置并发和强大的标准库&lt;/li&gt;
&lt;li&gt;不断发展的合作伙伴、社区和工具生态系统&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天，Go 被用于各种应用程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 在基于云或服务器端的应用程序中很受欢迎&lt;/li&gt;
&lt;li&gt;云基础设施方面。当今最流行的基础设施工具是用 Go 编写的，例如 Kubernetes、Docker 和 Prometheus&lt;/li&gt;
&lt;li&gt;许多命令行工具都是用 Go 编写的&lt;/li&gt;
&lt;li&gt;DevOps 和 Web 可靠性自动化也常常用 Go 来写&lt;/li&gt;
&lt;li&gt;Go 也被用于人工智能和数据科学领域&lt;/li&gt;
&lt;li&gt;微控制器编程、机器人技术和游戏中使用也会使用 Go&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也就是为什么 Go 越来越流行。&lt;/p&gt;
&lt;p&gt;正是因为这些优势以及在工作上的需要写一个 CLI，我就入门 Go 语言了。&lt;/p&gt;
&lt;h2 id=&quot;Go-语言的排名&quot;&gt;&lt;a href=&quot;#Go-语言的排名&quot; class=&quot;headerlink&quot; title=&quot;Go 语言的排名&quot;&gt;&lt;/a&gt;Go 语言的排名&lt;/h2&gt;&lt;p&gt;Go 语言在国内热度可谓是非常高了，我们来看看 Go 语言目前最新的排名怎么样。&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="https://shenxianpeng.github.io/categories/go/"/>
    
    
      <category term="Go" scheme="https://shenxianpeng.github.io/tags/go/"/>
    
      <category term="CLI" scheme="https://shenxianpeng.github.io/tags/cli/"/>
    
  </entry>
  
  <entry>
    <title>你一定要了解这 17 条 Docker 最佳实践！</title>
    <link href="https://shenxianpeng.github.io/2022/01/docker-best-practice/"/>
    <id>https://shenxianpeng.github.io/2022/01/docker-best-practice/</id>
    <published>2022-01-12T04:18:16.000Z</published>
    <updated>2022-01-28T06:04:47.751Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇分享在编写 Dockerfiles 和使用 Docker 时应遵循的一些最佳实践。篇幅较长，建议先收藏慢慢看，保证看完会很有收获。&lt;/p&gt;
&lt;h2 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h2&gt;&lt;p&gt;Dockerfile 最佳实践&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用多阶段的构建&lt;/li&gt;
&lt;li&gt;调整 Dockerfile 命令的顺序&lt;/li&gt;
&lt;li&gt;使用小型 Docker 基础镜像&lt;/li&gt;
&lt;li&gt;尽量减少层的数量&lt;/li&gt;
&lt;li&gt;使用无特权的容器&lt;/li&gt;
&lt;li&gt;优先选择 &lt;code&gt;COPY&lt;/code&gt; 而不是 &lt;code&gt;ADD&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;Python&lt;/code&gt; 包缓存到 Docker 主机上&lt;/li&gt;
&lt;li&gt;每个容器只运行一个进程&lt;/li&gt;
&lt;li&gt;优先选择数组而不是字符串语法&lt;/li&gt;
&lt;li&gt;理解 &lt;code&gt;ENTRYPOINT&lt;/code&gt; 和 &lt;code&gt;CMD&lt;/code&gt; 之间的区别&lt;/li&gt;
&lt;li&gt;添加健康检查 &lt;code&gt;HEALTHCHECK&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker 镜像最佳实践&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker 镜像的版本&lt;/li&gt;
&lt;li&gt;不要在镜像中存储密钥&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;.dockerignore&lt;/code&gt; 文件&lt;/li&gt;
&lt;li&gt;检查和扫描你的 Docker 文件和镜像&lt;/li&gt;
&lt;li&gt;签署和验证镜像&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Dockerfile-最佳实践&quot;&gt;&lt;a href=&quot;#Dockerfile-最佳实践&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 最佳实践&quot;&gt;&lt;/a&gt;Dockerfile 最佳实践&lt;/h2&gt;&lt;h3 id=&quot;1-使用多阶段的构建&quot;&gt;&lt;a href=&quot;#1-使用多阶段的构建&quot; class=&quot;headerlink&quot; title=&quot;1. 使用多阶段的构建&quot;&gt;&lt;/a&gt;1. 使用多阶段的构建&lt;/h3&gt;&lt;p&gt;利用多阶段构建的优势来创建更精简、更安全的Docker镜像。多阶段 Docker 构建(&lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;multi-stage builds&lt;/a&gt;)允许你将你的 Dockerfile 分成几个阶段。&lt;/p&gt;
&lt;p&gt;例如，你可以有一个阶段用于编译和构建你的应用程序，然后可以复制到后续阶段。由于只有最后一个阶段被用来创建镜像，与构建应用程序相关的依赖关系和工具就会被丢弃，因此可以留下一个精简的、模块化的、可用于生产的镜像。&lt;/p&gt;
&lt;p&gt;Web 开发示例：&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://shenxianpeng.github.io/categories/docker/"/>
    
    
      <category term="Docker" scheme="https://shenxianpeng.github.io/tags/docker/"/>
    
      <category term="Dokerfile" scheme="https://shenxianpeng.github.io/tags/dokerfile/"/>
    
  </entry>
  
  <entry>
    <title>2022年序员如何选择显示器？1080p还是2K? 单屏还是多屏？</title>
    <link href="https://shenxianpeng.github.io/2021/12/choose-monitor/"/>
    <id>https://shenxianpeng.github.io/2021/12/choose-monitor/</id>
    <published>2021-12-21T13:19:26.000Z</published>
    <updated>2021-12-21T15:04:34.673Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;工作十几年用过了不少显示器，从最初的 17寸，到后来的 23寸、27寸、32寸、再到现在的 34 寸，根据我自己的使用体验，来个主观推荐：&lt;/p&gt;
&lt;p&gt;第一名，一个34寸曲面显示器&lt;br&gt;第二名，一个27寸 + 一个23寸的双屏组合&lt;br&gt;第三名，一个32寸 + 一个23寸的双屏组合&lt;br&gt;第三名，两个 23 寸的双屏组合（并列第三名）&lt;/p&gt;
&lt;p&gt;以上这些屏幕推荐购买 2K 及以上的分辨率，1080p 的分辨率不推荐。&lt;/p&gt;
&lt;p&gt;下面我就按照时间轴说说我用过的那些显示器。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="https://shenxianpeng.github.io/categories/others/"/>
    
    
      <category term="Monitor" scheme="https://shenxianpeng.github.io/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>组织内如何评估 CI/CD 成熟度</title>
    <link href="https://shenxianpeng.github.io/2021/12/cicd-assessment/"/>
    <id>https://shenxianpeng.github.io/2021/12/cicd-assessment/</id>
    <published>2021-12-07T14:02:53.000Z</published>
    <updated>2021-12-21T15:07:21.920Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在一个组织内，不同的团队之间可能会有不同的维度来评估 CI/CD 的成熟度。这使得对衡量每个团队的 CI/CD
        
      
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="CI" scheme="https://shenxianpeng.github.io/tags/ci/"/>
    
      <category term="CD" scheme="https://shenxianpeng.github.io/tags/cd/"/>
    
      <category term="Badge" scheme="https://shenxianpeng.github.io/tags/badge/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Actions 还能这么玩？自动将发布的博客文章更新到 GitHub 个人主页</title>
    <link href="https://shenxianpeng.github.io/2021/11/special-repository/"/>
    <id>https://shenxianpeng.github.io/2021/11/special-repository/</id>
    <published>2021-11-09T14:02:15.000Z</published>
    <updated>2021-11-30T02:47:20.803Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近实现了一个很有意思的 Workflow，就是通过 GitHub Actions 自动将每次最新发布的文章自动同步到我的 GitHub 首页。&lt;/p&gt;
&lt;p&gt;就像这样在首页显示最近发布的博客文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/11/special-repository/final.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;要实现这样的工作流需要了解以下这几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要创建一个与 GitHub 同名的个人仓库，这个仓库的 &lt;code&gt;README.md&lt;/code&gt; 信息会显示在首页&lt;/li&gt;
&lt;li&gt;通过 GitHub Actions 自动获取博客的最新文章并更新 &lt;code&gt;README.md&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只有当有新的文章发布的时候才触发自动获取、更新文章 GitHub Action&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Actions" scheme="https://shenxianpeng.github.io/tags/actions/"/>
    
      <category term="GitHub" scheme="https://shenxianpeng.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>2021-22 世界质量报告（World Quality Report）</title>
    <link href="https://shenxianpeng.github.io/2021/11/world-quality-report/"/>
    <id>https://shenxianpeng.github.io/2021/11/world-quality-report/</id>
    <published>2021-11-06T07:57:10.000Z</published>
    <updated>2021-11-22T14:45:37.084Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;2021-22 世界质量报告（World Quality Report 简称 WQR）是由 Micro Focus，Capgemini 和 Sogeti 三家公司合作的来分析软件质量和测试趋势在全球范围内唯一的报告。&lt;/p&gt;
&lt;p&gt;这份报告共采访了 1750 名高管和专业人士。从最高管理层到 QA 测试经理和质量工程师，涵盖了来自全球 32 个国家的 10 个行业。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/11/world-quality-report/0.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;世界质量报告（WQR）是一项独一无二的全球研究，今年的调查强调了新部署方法中不断变化的受大流行影响的应用程序需求的影响，以及 QA 对敏捷和 DevOps 实践的采用，AI 的持续增长。&lt;/p&gt;
&lt;p&gt;作为测试关注这类软件质量报告可以帮助我们快速了解软件测试行业的现状和趋势。&lt;/p&gt;
&lt;h2 id=&quot;五大主题&quot;&gt;&lt;a href=&quot;#五大主题&quot; class=&quot;headerlink&quot; title=&quot;五大主题&quot;&gt;&lt;/a&gt;五大主题&lt;/h2&gt;&lt;p&gt;WQR 的一个关键信息：在新冠疫情依旧的今天，我们看到了数字化转型的融合以及敏捷和 DevOps 实践的实时采用。此外，QA 正在成为采用敏捷和 DevOps 实践的领导者，为团队提供工具和流程以促进整个软件生命周期（SDLC）的质量。&lt;/p&gt;
&lt;p&gt;WQR 围绕关键发现和趋势突出了五个特定主题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新冠疫情对 QA 组织和软件测试的影响&lt;/li&gt;
&lt;li&gt;数字化转型与 DevOps 和敏捷采用的实时融合以及 QA 在其中的日益重要的作用&lt;/li&gt;
&lt;li&gt;地理上分散的团队在跨环境部署应用程序时专注于业务成果&lt;/li&gt;
&lt;li&gt;人工智能 (AI) 增强了敏捷和 DevOps 在所有团队中培养不断增长的质量责任文化&lt;/li&gt;
&lt;li&gt;使用 AI 驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Quality" scheme="https://shenxianpeng.github.io/categories/quality/"/>
    
    
      <category term="Report" scheme="https://shenxianpeng.github.io/tags/report/"/>
    
      <category term="Quality" scheme="https://shenxianpeng.github.io/tags/quality/"/>
    
  </entry>
  
  <entry>
    <title>Polaris - 静态代码分析</title>
    <link href="https://shenxianpeng.github.io/2021/10/what-is-polaris/"/>
    <id>https://shenxianpeng.github.io/2021/10/what-is-polaris/</id>
    <published>2021-10-24T13:33:53.000Z</published>
    <updated>2021-11-22T15:46:11.927Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这可能是中文网里介绍Polaris最详细的文章了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是-Polaris？&quot;&gt;&lt;a href=&quot;#什么是-Polaris？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Polaris？&quot;&gt;&lt;/a&gt;什么是 Polaris？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Polaris&lt;/strong&gt; - 托管静态应用程序软件测试(SAST)工具的 SaaS 平台，它是用于分类和修复漏洞并运行报告的 Web 站点。&lt;br&gt;&lt;strong&gt;SAST&lt;/strong&gt; - 一种对源代码分析或构建过程中去寻找安全漏洞的工具，是一种在软件开发的生命周期(SDLC)中确保安全的重要步骤。&lt;br&gt;&lt;strong&gt;Coverity&lt;/strong&gt; - Coverity 是 Synopsys 公司提供的原始静态应用软件测试 (SAST) 工具。Polaris 是 Coverity 的 SaaS 版本。&lt;br&gt;&lt;strong&gt;Synopsys&lt;/strong&gt; - 是开发 Polaris 和其他软件扫描工具的公司，比如 BlackDuck 也是他们的产品。&lt;/p&gt;
&lt;h2 id=&quot;Polaris-支持哪些语言？&quot;&gt;&lt;a href=&quot;#Polaris-支持哪些语言？&quot; class=&quot;headerlink&quot; title=&quot;Polaris 支持哪些语言？&quot;&gt;&lt;/a&gt;Polaris 支持哪些语言？&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C&amp;#x2F;C++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C#&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JavaScript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TypeScript&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PHP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fortran&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Swift&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...and more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Polaris-SaaS-平台&quot;&gt;&lt;a href=&quot;#Polaris-SaaS-平台&quot; class=&quot;headerlink&quot; title=&quot;Polaris SaaS 平台&quot;&gt;&lt;/a&gt;Polaris SaaS 平台&lt;/h2&gt;&lt;p&gt;通常如果你的组织引入了 Polaris 的 SaaS 服务，你将会有如下网址可供访问 URL: &lt;a href=&quot;https://organization.polaris.synopsys.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://organization.polaris.synopsys.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后登录，你就可以给自己的 Git Repository 创建对应的项目了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议：创建的项目名称与 Git Repository 的名称一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Polaris-如何进行漏洞扫描？&quot;&gt;&lt;a href=&quot;#Polaris-如何进行漏洞扫描？&quot; class=&quot;headerlink&quot; title=&quot;Polaris 如何进行漏洞扫描？&quot;&gt;&lt;/a&gt;Polaris 如何进行漏洞扫描？&lt;/h2&gt;&lt;h3 id=&quot;Polaris-安装&quot;&gt;&lt;a href=&quot;#Polaris-安装&quot; class=&quot;headerlink&quot; title=&quot;Polaris 安装&quot;&gt;&lt;/a&gt;Polaris 安装&lt;/h3&gt;&lt;p&gt;在进行 Polaris 扫描之前，你需要先下载并安装 polaris。&lt;/p&gt;
&lt;p&gt;如果你的 Polaris server URL 为：&lt;code&gt;POLARIS_SERVER_URL=https://organization.polaris.synopsys.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载连接为：&lt;code&gt;$POLARIS_SERVER_URL/api/tools/polaris_cli-linux64.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后将下载到本地的 &lt;code&gt;polaris_cli-linux64.zip&lt;/code&gt; 进行解压，将其 bin 目录添加到 PATH 中。&lt;/p&gt;
&lt;h3 id=&quot;Polaris-YAML-文件配置&quot;&gt;&lt;a href=&quot;#Polaris-YAML-文件配置&quot; class=&quot;headerlink&quot; title=&quot;Polaris YAML 文件配置&quot;&gt;&lt;/a&gt;Polaris YAML 文件配置&lt;/h3&gt;&lt;p&gt;在进行扫描之前，你需要为你的项目创建 YAML 文件。默认配置文件名为 &lt;code&gt;polaris.yml&lt;/code&gt;，位于项目根目录。如果你希望指定不同的配置文件名，你可以在 &lt;code&gt;polaris&lt;/code&gt; 命令中使用 &lt;code&gt;-c&lt;/code&gt; 选项。&lt;/p&gt;
&lt;p&gt;在项目根目录运行 &lt;code&gt;polaris setup&lt;/code&gt; 以生成通用的 &lt;code&gt;polaris.yml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;polaris configure&lt;/code&gt; 以确认你的文件在语法上是正确的并且 &lt;code&gt;polaris&lt;/code&gt; 没有任何问题。&lt;/p&gt;
&lt;h4 id=&quot;Capture-捕获&quot;&gt;&lt;a href=&quot;#Capture-捕获&quot; class=&quot;headerlink&quot; title=&quot;Capture - 捕获&quot;&gt;&lt;/a&gt;Capture - 捕获&lt;/h4&gt;&lt;p&gt;YAML 配置文件可以包含三种类型的 Capture：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build(构建) - 运行构建命令，然后分析结果&lt;/li&gt;
&lt;li&gt;Filesystem(文件系统) - 对于解释型语言，提供项目类型和要分析的扩展列表&lt;/li&gt;
&lt;li&gt;Buildless - 对于一些可以使用依赖管理器的语言，比如 maven&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Languages&lt;/th&gt;
&lt;th&gt;Build Options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;C, C++, ObjectiveC, Objective C++,Go, Scala, Swift&lt;/td&gt;
&lt;td&gt;使用 Build 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP, Python, Ruby&lt;/td&gt;
&lt;td&gt;使用 Buildless 或 Filesystem 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C#, Visual Basic.&lt;/td&gt;
&lt;td&gt;如果想获得更准确的结果使用 Build 捕获；如果寻求简单使用 Buildless 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;如果想获得更准确的结果使用 Build 捕获；如果寻求简单使用 Buildless 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JavaScript,TypeScript&lt;/td&gt;
&lt;td&gt;使用 Filesystem 捕获；如果寻求简单使用 Buildless 捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&quot;Analyze-分析&quot;&gt;&lt;a href=&quot;#Analyze-分析&quot; class=&quot;headerlink&quot; title=&quot;Analyze - 分析&quot;&gt;&lt;/a&gt;Analyze - 分析&lt;/h4&gt;&lt;p&gt;如果你正在扫描 C/C++ 代码，则应包括此分析部分以充分利用 Polaris 的扫描功能：&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;analyze:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;mode:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;central&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;coverity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;cov-analyze:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[&quot;--security&quot;,&quot;--concurrency&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;Polaris-YAML-示例文件&quot;&gt;&lt;a href=&quot;#Polaris-YAML-示例文件&quot; class=&quot;headerlink&quot; title=&quot;Polaris YAML 示例文件&quot;&gt;&lt;/a&gt;Polaris YAML 示例文件&lt;/h4&gt;
    
    </summary>
    
      <category term="Polaris" scheme="https://shenxianpeng.github.io/categories/polaris/"/>
    
    
      <category term="Polaris" scheme="https://shenxianpeng.github.io/tags/polaris/"/>
    
      <category term="Static" scheme="https://shenxianpeng.github.io/tags/static/"/>
    
      <category term="Coverity" scheme="https://shenxianpeng.github.io/tags/coverity/"/>
    
      <category term="Security" scheme="https://shenxianpeng.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令备忘录</title>
    <link href="https://shenxianpeng.github.io/2021/10/git-cheatsheet/"/>
    <id>https://shenxianpeng.github.io/2021/10/git-cheatsheet/</id>
    <published>2021-10-23T11:40:06.000Z</published>
    <updated>2021-11-22T15:24:03.032Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;不管是对于 Git 的初学者还是经常使用 Git 的码农们，在日常工作中难免会有遇到有的命令一时想不起来。不妨将下面总结的一些 Git 常用命令及技巧收藏或打印出来，以备需要的时候可以很快找到。&lt;/p&gt;
&lt;h2 id=&quot;git-config&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="Git" scheme="https://shenxianpeng.github.io/categories/git/"/>
    
    
      <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
      <category term="Cheatsheet" scheme="https://shenxianpeng.github.io/tags/cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>How does SonarQube Community Edition integrate with the project</title>
    <link href="https://shenxianpeng.github.io/2021/09/sonarqube-integration/"/>
    <id>https://shenxianpeng.github.io/2021/09/sonarqube-integration/</id>
    <published>2021-09-18T02:19:51.000Z</published>
    <updated>2021-11-22T14:33:25.437Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;After you have set up the SonarQube instance, you will need to integrate SonarQube with project.&lt;/p&gt;
&lt;p&gt;Because I used the community
        
      
    
    </summary>
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/categories/sonarqube/"/>
    
    
      <category term="Gradle" scheme="https://shenxianpeng.github.io/tags/gradle/"/>
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/tags/sonarqube/"/>
    
  </entry>
  
  <entry>
    <title>Run lcov failed &quot;Can&#39;t locate JSON/PP.pm in @INC ...&quot;</title>
    <link href="https://shenxianpeng.github.io/2021/09/lcov-error/"/>
    <id>https://shenxianpeng.github.io/2021/09/lcov-error/</id>
    <published>2021-09-07T02:18:22.000Z</published>
    <updated>2021-09-18T02:15:59.918Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;When execute command: &lt;code&gt;lcov --capture --directory . --no-external --output-file coverage.info&lt;/code&gt; to generate code coverage
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="lcov" scheme="https://shenxianpeng.github.io/tags/lcov/"/>
    
      <category term="perl" scheme="https://shenxianpeng.github.io/tags/perl/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gcov 和 LCOV 做 C/C++ 项目的代码覆盖率</title>
    <link href="https://shenxianpeng.github.io/2021/08/gcov-example-cn/"/>
    <id>https://shenxianpeng.github.io/2021/08/gcov-example-cn/</id>
    <published>2021-08-16T16:10:21.000Z</published>
    <updated>2022-03-02T14:33:29.841Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇分享如何使用 Gcov 和 LCOV 对 C/C++ 项目进行代码覆盖率的度量。&lt;/p&gt;
&lt;p&gt;如果你想了解代码覆盖率工具 Gcov 是如何工作的，或是以后需要做 C/C++ 项目的代码覆盖率，希望本篇对你有所帮助。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
      <category term="Gcov" scheme="https://shenxianpeng.github.io/tags/gcov/"/>
    
      <category term="LCOV" scheme="https://shenxianpeng.github.io/tags/lcov/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube installation and troubleshootings</title>
    <link href="https://shenxianpeng.github.io/2021/08/sonarqube-setup/"/>
    <id>https://shenxianpeng.github.io/2021/08/sonarqube-setup/</id>
    <published>2021-08-05T04:30:22.000Z</published>
    <updated>2021-11-22T14:55:38.893Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backgroud&quot;&gt;&lt;a href=&quot;#Backgroud&quot; class=&quot;headerlink&quot; title=&quot;Backgroud&quot;&gt;&lt;/a&gt;Backgroud&lt;/h2&gt;&lt;p&gt;In my opinion, SonarQube is not a very easy setup DevOps tool to compare with Jenkins, Artifactory. You can’t just run some script under the bin folder to let the server boot up.&lt;/p&gt;
&lt;p&gt;You must have an installed database, configuration LDAP in the config file, etc.&lt;/p&gt;
&lt;p&gt;So I’d like to document some important steps for myself, like setup LDAP or PostgreSQL when I install SonarQube of v9.0.1. It would be better if it can help others.&lt;/p&gt;
&lt;h2 id=&quot;Prerequisite-and-Download&quot;&gt;&lt;a href=&quot;#Prerequisite-and-Download&quot; class=&quot;headerlink&quot; title=&quot;Prerequisite and Download&quot;&gt;&lt;/a&gt;Prerequisite and Download&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Need to be installed JRE/JDK 11 on the running machine.&lt;/p&gt;
&lt;p&gt; Here is the prerequisites overview: &lt;a href=&quot;https://docs.sonarqube.org/latest/requirements/requirements/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://docs.sonarqube.org/latest/requirements/requirements/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download SonarQube: &lt;a href=&quot;https://www.sonarqube.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sonarqube.org/downloads/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; sonarqube/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.0.1.46107.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unzip sonarqube-9.0.1.46107.zip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt;  sonarqube-9.0.1.46107/bin/linux-x86-64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sh sonar.sh console&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Change-Java-version&quot;&gt;&lt;a href=&quot;#Change-Java-version&quot; class=&quot;headerlink&quot; title=&quot;Change Java version&quot;&gt;&lt;/a&gt;Change Java version&lt;/h2&gt;&lt;p&gt;I installed SonarQube on CentOS 7 machine, the Java version is OpenJDK 1.8.0_242 by default, but the prerequisite shows at least need JDK 11. There is also JDK 11 available on my machine, so I just need to change the Java version.&lt;/p&gt;
&lt;p&gt;I recommend using the &lt;code&gt;alternatives&lt;/code&gt; command change Java version，refer as following:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ java -version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openjdk version &lt;span class=&quot;string&quot;&gt;&quot;1.8.0_242&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK Runtime Environment (build 1.8.0_242-b08)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ alternatives --config java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;There are 3 programs &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt; provide &lt;span class=&quot;string&quot;&gt;&#39;java&#39;&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Selection    Command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   1           java-1.7.0-openjdk.x86_64 (/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.251-2.6.21.1.el7.x86_64/jre/bin/java)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*+ 2           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64/jre/bin/java)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   3           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/bin/java)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter to keep the current selection[+], or &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt; selection number: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ java -version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openjdk version &lt;span class=&quot;string&quot;&gt;&quot;11.0.12&quot;&lt;/span&gt; 2021-07-20 LTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK Runtime Environment 18.9 (build 11.0.12+7-LTS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OpenJDK 64-Bit Server VM 18.9 (build 11.0.12+7-LTS, mixed mode, sharing)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Install-Database&quot;&gt;&lt;a href=&quot;#Install-Database&quot; class=&quot;headerlink&quot; title=&quot;Install Database&quot;&gt;&lt;/a&gt;Install Database&lt;/h2&gt;&lt;p&gt;SonarQube needs you to have installed a database. It supports several database engines, like Microsoft SQL Server, Oracle, and PostgreSQL. Since PostgreSQL is open source, light, and easy to install, so I choose PostgreSQL as its database.&lt;/p&gt;
&lt;p&gt;How to download and install PostgreSQL please see this page: &lt;a href=&quot;https://www.postgresql.org/download/linux/redhat/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.postgresql.org/download/linux/redhat/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Troubleshooting&quot;&gt;&lt;a href=&quot;#Troubleshooting&quot; class=&quot;headerlink&quot; title=&quot;Troubleshooting&quot;&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;&lt;h3 id=&quot;1-How-to-establish-a-connection-with-SonarQube-and-PostgreSQL&quot;&gt;&lt;a href=&quot;#1-How-to-establish-a-connection-with-SonarQube-and-PostgreSQL&quot; class=&quot;headerlink&quot; title=&quot;1. How to establish a connection with SonarQube and PostgreSQL&quot;&gt;&lt;/a&gt;1. How to establish a connection with SonarQube and PostgreSQL&lt;/h3&gt;&lt;p&gt;Please refer to the &lt;code&gt;sonar.properties&lt;/code&gt; file at the end of this post.&lt;/p&gt;
&lt;h3 id=&quot;2-How-to-setup-LDAP-for-users-to-log-in&quot;&gt;&lt;a href=&quot;#2-How-to-setup-LDAP-for-users-to-log-in&quot; class=&quot;headerlink&quot; title=&quot;2. How to setup LDAP for users to log in&quot;&gt;&lt;/a&gt;2. How to setup LDAP for users to log in&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sonar.security.realm=LDAP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.url=ldap://den.exmaple-org:389&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.bindDn=user@exmaple-org.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.bindPassword=mypassword&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.authentication=simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.baseDn=DC=exmaple-org,DC=com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.request=(&amp;amp;(objectClass=user)(sAMAccountName=&amp;#123;login&amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.realNameAttribute=cn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ldap.user.emailAttribute=email&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-How-to-fix-LDAP-login-SonarQube-is-very-slowly&quot;&gt;&lt;a href=&quot;#3-How-to-fix-LDAP-login-SonarQube-is-very-slowly&quot; class=&quot;headerlink&quot; title=&quot;3. How to fix LDAP login SonarQube is very slowly&quot;&gt;&lt;/a&gt;3. How to fix LDAP login SonarQube is very slowly&lt;/h3&gt;&lt;p&gt;Comment out &lt;code&gt;ldap.followReferrals=false&lt;/code&gt; in sonar.properties file would be help.&lt;/p&gt;
&lt;p&gt;Related post: &lt;a href=&quot;https://community.sonarsource.com/t/ldap-login-takes-2-minutes-the-first-time/1573/7&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://community.sonarsource.com/t/ldap-login-takes-2-minutes-the-first-time/1573/7&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-How-to-fix-‘Could-not-resolve-11-file-paths-in-lcov-info’&quot;&gt;&lt;a href=&quot;#4-How-to-fix-‘Could-not-resolve-11-file-paths-in-lcov-info’&quot; class=&quot;headerlink&quot; title=&quot;4. How to fix ‘Could not resolve 11 file paths in lcov.info’&quot;&gt;&lt;/a&gt;4. How to fix ‘Could not resolve 11 file paths in lcov.info’&lt;/h2&gt;&lt;p&gt;I want to display Javascript code coverage result in SonarQube, so I added &lt;code&gt;sonar.javascript.lcov.reportPaths=coverage/lcov.info&lt;/code&gt; to the &lt;code&gt;sonar-project.properties&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;But when I run &lt;code&gt;sonar-scanner.bat&lt;/code&gt; in the command line, the code coverage result can not show in sonar. I noticed the following error from the output:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INFO: Analysing [C:\workspace\xvm-ide\client\coverage\lcov.info]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;WARN: Could not resolve 11 file paths &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [C:\workspace\xvm-ide\client\coverage\lcov.info]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;There are some posts related to this problem, for example, &lt;a href=&quot;https://github.com/kulshekhar/ts-jest/issues/542&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/kulshekhar/ts-jest/issues/542&lt;/a&gt;, but no one works in my case.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# here is an example error path in lcov.info&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;..\src\auto-group\groupView.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Finally, I have to use the &lt;code&gt;sed&lt;/code&gt; command to remove &lt;code&gt;..\&lt;/code&gt; in front of the paths before running &lt;code&gt;sonar-scanner.bat&lt;/code&gt;, then the problem was solved.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/\..\\//g&#39;&lt;/span&gt; lcov.info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Please comment if you can solve the problem with changing options in the &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h3 id=&quot;4-How-to-output-to-more-logs&quot;&gt;&lt;a href=&quot;#4-How-to-output-to-more-logs&quot; class=&quot;headerlink&quot; title=&quot;4. How to output to more logs&quot;&gt;&lt;/a&gt;4. How to output to more logs&lt;/h3&gt;&lt;p&gt;To output more logs, change &lt;code&gt;sonar.log.level=INFO&lt;/code&gt; to &lt;code&gt;sonar.log.level=DEBUG&lt;/code&gt; in below.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: all above changes of &lt;code&gt;sonar.properties&lt;/code&gt; need to restart the SonarQube instance to take effect.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Final-sonar-properties&quot;&gt;&lt;a href=&quot;#Final-sonar-properties&quot; class=&quot;headerlink&quot; title=&quot;Final sonar.properties&quot;&gt;&lt;/a&gt;Final &lt;code&gt;sonar.properties&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;For the &lt;code&gt;sonar.properties&lt;/code&gt; file, please see below or &lt;a href=&quot;https://gist.github.com/shenxianpeng/a1eec786210b421f8be34e3263f1a002&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/categories/sonarqube/"/>
    
    
      <category term="SonarQube" scheme="https://shenxianpeng.github.io/tags/sonarqube/"/>
    
      <category term="LDAP" scheme="https://shenxianpeng.github.io/tags/ldap/"/>
    
      <category term="PostgreSQL" scheme="https://shenxianpeng.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>How to fix &quot;hidden symbol `__gcov_init&#39; in ../libgcov.a(_gcov.o) is referenced by DSO&quot;</title>
    <link href="https://shenxianpeng.github.io/2021/07/how-to-fix-gcov-hidden-symbol/"/>
    <id>https://shenxianpeng.github.io/2021/07/how-to-fix-gcov-hidden-symbol/</id>
    <published>2021-07-27T02:40:21.000Z</published>
    <updated>2021-07-27T15:32:44.255Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;When we introduced Gocv to build my project for
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
      <category term="Gcov" scheme="https://shenxianpeng.github.io/tags/gcov/"/>
    
  </entry>
  
  <entry>
    <title>Add or update Bitbucket build status with REST API</title>
    <link href="https://shenxianpeng.github.io/2021/07/update-bitbucket-build-status/"/>
    <id>https://shenxianpeng.github.io/2021/07/update-bitbucket-build-status/</id>
    <published>2021-07-25T12:26:02.000Z</published>
    <updated>2021-07-27T15:24:29.412Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backgorud&quot;&gt;&lt;a href=&quot;#Backgorud&quot; class=&quot;headerlink&quot; title=&quot;Backgorud&quot;&gt;&lt;/a&gt;Backgorud&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you want to &lt;strong&gt;add&lt;/strong&gt; build status to your Bitbucket the specific commit of a branch when you start a build from the branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the build status is wrong, you want to &lt;strong&gt;update&lt;/strong&gt; it manually. for example, update build status from FAILED to SUCCESSFUL&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can call Bitbucket REST API to do these.&lt;/p&gt;
&lt;h2 id=&quot;Code-snippet&quot;&gt;&lt;a href=&quot;#Code-snippet&quot; class=&quot;headerlink&quot; title=&quot;Code snippet&quot;&gt;&lt;/a&gt;Code snippet&lt;/h2&gt;&lt;p&gt;Below is the code snippet to update Bitbucket build status with REST API in the shell script.&lt;/p&gt;
&lt;p&gt;The code on GitHub Gist: &lt;a href=&quot;https://gist.github.com/shenxianpeng/bd5eddc5fb39e54110afb8e2e7a6c4fb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://gist.github.com/shenxianpeng/bd5eddc5fb39e54110afb8e2e7a6c4fb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Read More&lt;/strong&gt; to view the code here.&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Bitbucket" scheme="https://shenxianpeng.github.io/tags/bitbucket/"/>
    
      <category term="Shell" scheme="https://shenxianpeng.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>关于代码覆盖率 (About Code Coverage)</title>
    <link href="https://shenxianpeng.github.io/2021/07/code-coverage/"/>
    <id>https://shenxianpeng.github.io/2021/07/code-coverage/</id>
    <published>2021-07-14T14:49:39.000Z</published>
    <updated>2021-11-22T13:44:40.350Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇简要介绍：什么是代码覆盖率？为什么要做代码覆盖率？代码覆盖率的指标、工作原理，主流的代码覆盖率工具以及不要高估代码覆盖率指标。&lt;/p&gt;
&lt;h2 id=&quot;什么是代码覆盖率？&quot;&gt;&lt;a href=&quot;#什么是代码覆盖率？&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/categories/coverage/"/>
    
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
      <category term="Coverage" scheme="https://shenxianpeng.github.io/tags/coverage/"/>
    
  </entry>
  
</feed>
