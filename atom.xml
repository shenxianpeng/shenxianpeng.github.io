<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World</title>
  
  <subtitle>From QA to Dev, now DevOps.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenxianpeng.github.io/"/>
  <updated>2020-11-17T11:32:40.562Z</updated>
  <id>https://shenxianpeng.github.io/</id>
  
  <author>
    <name>Xianpeng Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JaCoCo 实践</title>
    <link href="https://shenxianpeng.github.io/2020/11/jacoco-imp/"/>
    <id>https://shenxianpeng.github.io/2020/11/jacoco-imp/</id>
    <published>2020-11-17T11:18:33.000Z</published>
    <updated>2020-11-17T11:32:40.562Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;比如使用 gradle 来管理的项目可以在 &lt;code&gt;build.gradle&lt;/code&gt; 里添加如下代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="JaCoCo" scheme="https://shenxianpeng.github.io/tags/jacoco/"/>
    
  </entry>
  
  <entry>
    <title>JaCoCo 实现原理 (JaCoCo Implementation Design)</title>
    <link href="https://shenxianpeng.github.io/2020/11/jacoco/"/>
    <id>https://shenxianpeng.github.io/2020/11/jacoco/</id>
    <published>2020-11-17T10:26:14.000Z</published>
    <updated>2020-11-17T11:37:34.775Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;提到Java代码覆盖率的测试，我很容易想到的就是JaCoCo这个免费的代码覆盖率分析工具。没有多想，直接使用它来做代码覆盖率分析，顺便也翻译了一下JaCoCo的实现设计文档。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方文档地址：&lt;a
        
      
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="JaCoCo" scheme="https://shenxianpeng.github.io/tags/jacoco/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 实践（一）</title>
    <link href="https://shenxianpeng.github.io/2020/10/ansible-practice1/"/>
    <id>https://shenxianpeng.github.io/2020/10/ansible-practice1/</id>
    <published>2020-10-28T02:09:41.000Z</published>
    <updated>2020-11-05T02:09:28.534Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近在思考如何将团队里的所有的虚拟机都很好的管理并监控起来，但是由于我们的虚拟机的操作系统繁多，包括 Windows, Linux, AIX, HP-UX, Solaris SPARC 和 Solaris x86.
        
      
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Ansible" scheme="https://shenxianpeng.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>写给那些想使用 JFrog Artifactory 管理制品的人</title>
    <link href="https://shenxianpeng.github.io/2020/10/what-is-artifactory/"/>
    <id>https://shenxianpeng.github.io/2020/10/what-is-artifactory/</id>
    <published>2020-10-04T12:43:46.000Z</published>
    <updated>2020-11-17T10:25:56.744Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在使用 Artifactory 做持续集成已经有一段时间了，对企业级 Artifactory 也有了一些经验和总结，希望能通过本篇的分享帮助刚接触这个工具的人了解什么是Artifactory，它能做什么，为什么要选择它，以及在使用过程中应该注意什么。&lt;/p&gt;
&lt;h2 id=&quot;什么是Artifactory&quot;&gt;&lt;a href=&quot;#什么是Artifactory&quot; class=&quot;headerlink&quot; title=&quot;什么是Artifactory&quot;&gt;&lt;/a&gt;什么是Artifactory&lt;/h2&gt;&lt;p&gt;一句话概括：Artifactory 是一个存放制品（Artifacts）的工具。当前，Artifactory 是一个非常有影响力，功能非常强大的工具。&lt;/p&gt;
&lt;h2 id=&quot;Artifactory有哪些优势&quot;&gt;&lt;a href=&quot;#Artifactory有哪些优势&quot; class=&quot;headerlink&quot; title=&quot;Artifactory有哪些优势&quot;&gt;&lt;/a&gt;Artifactory有哪些优势&lt;/h2&gt;&lt;p&gt;可能你的团队已经有了自己的管理制品的方式，比如 FTP 等。Artifactory 能带来什么呢？让我先来看看它有哪些优势。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：以下优势都是针对 JFrog Aritifacvtory 企业版来介绍的。开源版，即 OSS 版本不具备以下丰富的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;优势1：它是一个通用管理仓库&quot;&gt;&lt;a href=&quot;#优势1：它是一个通用管理仓库&quot; class=&quot;headerlink&quot; title=&quot;优势1：它是一个通用管理仓库&quot;&gt;&lt;/a&gt;优势1：它是一个通用管理仓库&lt;/h3&gt;&lt;p&gt;JFrog Artifactory 企业版完全支持所有主要包格式的存储库管理器。它不但可以管理二进制文件，也可以对市面上几乎所有语言的包的依赖进行管理，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/10/what-is-artifactory/support-package-formats.png&quot; alt=&quot;主要的包格式&quot;&gt;&lt;/p&gt;
&lt;p&gt;因此，使用 Artifactory 能够将所有的二进制文件和包存储在&lt;strong&gt;一个地方&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Artifactory" scheme="https://shenxianpeng.github.io/tags/artifactory/"/>
    
      <category term="JFrog" scheme="https://shenxianpeng.github.io/tags/jfrog/"/>
    
  </entry>
  
  <entry>
    <title>程序员自我修养之Git提交信息和分支创建规范</title>
    <link href="https://shenxianpeng.github.io/2020/09/commit-messages-specification/"/>
    <id>https://shenxianpeng.github.io/2020/09/commit-messages-specification/</id>
    <published>2020-09-24T12:39:22.000Z</published>
    <updated>2020-09-30T05:48:26.332Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要制定规范&quot;&gt;&lt;a href=&quot;#为什么要制定规范&quot; class=&quot;headerlink&quot; title=&quot;为什么要制定规范&quot;&gt;&lt;/a&gt;为什么要制定规范&lt;/h2&gt;&lt;p&gt;古话说，没有规矩不成方圆。在团队协作开发时，每个人提交代码时都会写 commit message，但如果没有规范，每个人都会有自己的书写风格，因此在翻看 git log 时经常看到的是五花八门，十分不利于阅读和维护。&lt;/p&gt;
&lt;p&gt;通过下面两个例子来看看没规范和有规范的对比，以及有规范能带来哪些好处。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提交信息 没规范 vs 有规范&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/09/commit-messages-specification/bad-commit-message.png&quot; alt=&quot;没有规范的 Git 提交信息&quot;&gt;&lt;/p&gt;
&lt;p&gt;从这个提交信息里你不知道他修改了什么，修改意图是什么。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://shenxianpeng.github.io/categories/git/"/>
    
    
      <category term="Git" scheme="https://shenxianpeng.github.io/tags/git/"/>
    
      <category term="Branch" scheme="https://shenxianpeng.github.io/tags/branch/"/>
    
      <category term="Specification" scheme="https://shenxianpeng.github.io/tags/specification/"/>
    
      <category term="Conventional Commits" scheme="https://shenxianpeng.github.io/tags/conventional-commits/"/>
    
  </entry>
  
  <entry>
    <title>初识 Ansible</title>
    <link href="https://shenxianpeng.github.io/2020/09/getting-to-know-ansible/"/>
    <id>https://shenxianpeng.github.io/2020/09/getting-to-know-ansible/</id>
    <published>2020-09-21T10:40:17.000Z</published>
    <updated>2020-09-24T11:04:48.970Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.edureka.co/blog/chef-vs-puppet-vs-ansible-vs-saltstack/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Ansible" scheme="https://shenxianpeng.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>在 GitHub 上发布一个 Python 项目需要注意哪些</title>
    <link href="https://shenxianpeng.github.io/2020/09/how-to-release-python-project/"/>
    <id>https://shenxianpeng.github.io/2020/09/how-to-release-python-project/</id>
    <published>2020-09-13T08:13:17.000Z</published>
    <updated>2020-11-01T09:00:38.687Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍个人或企业在 GitHub 上发布一个 Python 项目需要了解和注意哪些内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#配置setup.py&quot;&gt;如何配置setup.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#发布到PyPI&quot;&gt;如何发布到PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于pydoc&quot;&gt;生成pydoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#关于版本号&quot;&gt;版本号的选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#选择License&quot;&gt;License的选择&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;配置setup-py&quot;&gt;&lt;a href=&quot;#配置setup-py&quot; class=&quot;headerlink&quot; title=&quot;配置setup.py&quot;&gt;&lt;/a&gt;配置setup.py&lt;/h2&gt;&lt;p&gt;打包和发布一项都是通过准备一个 &lt;code&gt;setup.py&lt;/code&gt; 文件来完成的。假设你的项目目录结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── LICENSE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── MANIFEST.in &lt;span class=&quot;comment&quot;&gt;# 打包时，用来定制化生成 `dist/*.tar.gz` 里的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── __init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── setup.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── __init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── __pycache__/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── docs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在使用打包命令 &lt;code&gt;python setup.py sdist bdist_wheel&lt;/code&gt;，将会生成在 dist 目录下生成两个文件 &lt;code&gt;demo-1.0.0-py3-none-any.whl&lt;/code&gt; 和 &lt;code&gt;demo-1.0.0.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.whl&lt;/code&gt; 文件是用于执行 &lt;code&gt;pip install dist/demo-1.0.0-py3-none-any.whl&lt;/code&gt; 将其安装到 &lt;code&gt;...\Python38\Lib\site-packages\demo&lt;/code&gt; 目录时使用的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.tar.gz&lt;/code&gt; 是打包后的源代码的存档文件。而 &lt;code&gt;MANIFEST.in&lt;/code&gt; 则是用来控制这个文件里到底要有哪些内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://shenxianpeng.github.io/categories/python/"/>
    
    
      <category term="Python" scheme="https://shenxianpeng.github.io/tags/python/"/>
    
      <category term="Release" scheme="https://shenxianpeng.github.io/tags/release/"/>
    
      <category term="PyPI" scheme="https://shenxianpeng.github.io/tags/pypi/"/>
    
  </entry>
  
  <entry>
    <title>About Python pip install and versioning</title>
    <link href="https://shenxianpeng.github.io/2020/08/about-pip-install-and-versioning/"/>
    <id>https://shenxianpeng.github.io/2020/08/about-pip-install-and-versioning/</id>
    <published>2020-08-30T14:30:50.000Z</published>
    <updated>2020-11-01T09:00:51.021Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backgroup&quot;&gt;&lt;a href=&quot;#Backgroup&quot; class=&quot;headerlink&quot; title=&quot;Backgroup&quot;&gt;&lt;/a&gt;Backgroup&lt;/h2&gt;&lt;p&gt;If you want to release python project on PyPI, you must need to know about PyPI usage characteristics, then I did some test about pip install command. &lt;/p&gt;
&lt;p&gt;For example: I have a Python project called &lt;code&gt;demo-pip&lt;/code&gt;. and beta release would like &lt;code&gt;1.1.0.xxxx&lt;/code&gt;, offical release version is &lt;code&gt;1.1.0&lt;/code&gt; to see if could success upgrade when using &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Base on the below test results, I summarized as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install a specific version of demo-pip from PyPI, with &lt;code&gt;--upgrade&lt;/code&gt; option or not, they’ll all both success.&lt;/li&gt;
&lt;li&gt;Install the latest package version of demo-pip from PyPI that version is large than the locally installed package version, with &lt;code&gt;--upgrade&lt;/code&gt; option installs successfully. without &lt;code&gt;--upgrade&lt;/code&gt; option install failed.&lt;/li&gt;
&lt;li&gt;Install the latest package version of demo-pip from PyPI that version is less than the locally installed package version, with &lt;code&gt;--upgrade&lt;/code&gt; option or not, install failed.&lt;/li&gt;
&lt;li&gt;1.1.0.xxxx version naming is OK, but when the beta version is larger than 1.1.0, for example, the beta version is 1.1.0.1000, pip install with &lt;code&gt;--upgrade&lt;/code&gt; not work when our official release version is 1.1.0.&lt;br&gt;a.    One option is the official release version start from 1.1.0.1000, beta version starts from 1.1.0.0001, 1.1.0.0002… Or the beta version should be less than 1.1.0, maybe 1.0.0.xxxx&lt;br&gt;b.    Another option is follow up &lt;a href=&quot;https://www.python.org/dev/peps/pep-0440/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python official versioning&lt;/a&gt; that is the best practice, then the beta release version will be 1.1.b1, 1.1.b2, 1.1.bN… (it passed No.5 test below)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;My-Test-Case&quot;&gt;&lt;a href=&quot;#My-Test-Case&quot; class=&quot;headerlink&quot; title=&quot;My Test Case&quot;&gt;&lt;/a&gt;My Test Case&lt;/h2&gt;
    
    </summary>
    
      <category term="Python" scheme="https://shenxianpeng.github.io/categories/python/"/>
    
    
      <category term="Python" scheme="https://shenxianpeng.github.io/tags/python/"/>
    
      <category term="pip" scheme="https://shenxianpeng.github.io/tags/pip/"/>
    
      <category term="versioning" scheme="https://shenxianpeng.github.io/tags/versioning/"/>
    
  </entry>
  
  <entry>
    <title>Update Jira server account avatar with rest API</title>
    <link href="https://shenxianpeng.github.io/2020/08/update-jira-server-account-avatar-with-rest-api/"/>
    <id>https://shenxianpeng.github.io/2020/08/update-jira-server-account-avatar-with-rest-api/</id>
    <published>2020-08-17T06:17:10.000Z</published>
    <updated>2020-11-01T09:00:27.471Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Backgroud&quot;&gt;&lt;a href=&quot;#Backgroud&quot; class=&quot;headerlink&quot; title=&quot;Backgroud&quot;&gt;&lt;/a&gt;Backgroud&lt;/h2&gt;&lt;p&gt;When you are using a server account for CI/CD, if you want to make the server account avatar to looks professional on Jira update but the server account may not allowed to log to Jira, so you can not update the avatar though GUI, you could use Jira REST API to do this.&lt;/p&gt;
&lt;p&gt;I assume you have an account called &lt;code&gt;robot&lt;/code&gt;, here are the examples of how to update though REST API.&lt;/p&gt;
&lt;h2 id=&quot;Example-in-Python&quot;&gt;&lt;a href=&quot;#Example-in-Python&quot; class=&quot;headerlink&quot; title=&quot;Example in Python&quot;&gt;&lt;/a&gt;Example in Python&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; http.client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn = http.client.HTTPSConnection(&lt;span class=&quot;string&quot;&gt;&quot;jira.your-company.com&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;payload = &lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;\r\n\t\&quot;id\&quot;: \&quot;24880\&quot;,\r\n\t\&quot;isSelected\&quot;: false,\r\n\t\&quot;isSystemAvatar\&quot;: true,\r\n\t\&quot;urls\&quot;: &amp;#123;\r\n\t\t\&quot;16x16\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?size=xsmall&amp;amp;avatarId=24880\&quot;,\r\n\t\t\&quot;24x24\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?size=small&amp;amp;avatarId=24880\&quot;,\r\n\t\t\&quot;32x32\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?size=medium&amp;amp;avatarId=24880\&quot;,\r\n\t\t\&quot;48x48\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?avatarId=24880\&quot;&amp;#125;\r\n&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;content-type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;authorization&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Basic Ymx3bXY6SzhNcnk5ZGI=&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;cache-control&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;postman-token&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ecfc3260-9c9f-e80c-e3e8-d413f48dfbf4&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.request(&lt;span class=&quot;string&quot;&gt;&quot;PUT&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;/rest/api/latest/user/avatar?username=robot&quot;&lt;/span&gt;, payload, headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res = conn.getresponse()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = res.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(data.decode(&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Example-in-Postman&quot;&gt;&lt;a href=&quot;#Example-in-Postman&quot; class=&quot;headerlink&quot; title=&quot;Example in Postman&quot;&gt;&lt;/a&gt;Example in Postman&lt;/h2&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Jira" scheme="https://shenxianpeng.github.io/tags/jira/"/>
    
      <category term="REST-API" scheme="https://shenxianpeng.github.io/tags/rest-api/"/>
    
  </entry>
  
  <entry>
    <title>Fixed &quot;Remote session was disconnected because there are no Remote Desktop client access licenses available&quot;</title>
    <link href="https://shenxianpeng.github.io/2020/08/rdp-problem/"/>
    <id>https://shenxianpeng.github.io/2020/08/rdp-problem/</id>
    <published>2020-08-10T07:40:04.000Z</published>
    <updated>2020-08-16T05:45:17.729Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Sometime my Windows server 2012 R2 has RDP connect problem below:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Remote session was disconnected because there are no Remote Desktop client access licenses available for this computer.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Please contact the server administrator.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/2020/08/rdp-problem/RDP-failed.png&quot; alt=&quot;RDP connect problem&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Windows" scheme="https://shenxianpeng.github.io/tags/windows/"/>
    
      <category term="RDP" scheme="https://shenxianpeng.github.io/tags/rdp/"/>
    
  </entry>
  
  <entry>
    <title>通过 generic-webhook-trigger 插件实时获取 Bitbucket Repository Events</title>
    <link href="https://shenxianpeng.github.io/2020/08/bitbucket-pull-request-event/"/>
    <id>https://shenxianpeng.github.io/2020/08/bitbucket-pull-request-event/</id>
    <published>2020-08-07T08:53:03.000Z</published>
    <updated>2020-08-16T05:49:06.311Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。&lt;/p&gt;
&lt;p&gt;使用过 Jenkins Multi-branch pipeline Job 的用户知道，这个 Job 类型的环境变量中可以得到 Pull Request 的相关信息如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/08/bitbucket-pull-request-event/pull-request-env.png&quot; alt=&quot;Multi-branch pipeline Job 环境变量&quot;&gt;&lt;/p&gt;
&lt;p&gt;为了获取这个变量需要创建这种类型的 Job，并且可能需要 clone 该仓库的代码，有点杀鸡宰牛的意思，看起来并不是一个特别恰当的办法。&lt;/p&gt;
&lt;p&gt;如何通过创建一个普通的 Jenkins Job 就能实时获取 Bitbucket 仓库以及 Pull Request 事件呢？通过以下功能和插件可以实现。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Bitbucket" scheme="https://shenxianpeng.github.io/tags/bitbucket/"/>
    
      <category term="webhook" scheme="https://shenxianpeng.github.io/tags/webhook/"/>
    
      <category term="generic" scheme="https://shenxianpeng.github.io/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>Annual work summary from 2019.03 - 2020.07</title>
    <link href="https://shenxianpeng.github.io/2020/07/annual-work-summary/"/>
    <id>https://shenxianpeng.github.io/2020/07/annual-work-summary/</id>
    <published>2020-07-29T05:52:04.000Z</published>
    <updated>2020-11-01T09:08:12.466Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Summarize what did I do from 2019.03 to 2020.07 when I became a Build Release/DevOps engineer.&lt;/p&gt;
&lt;h2 id=&quot;Build-automation&quot;&gt;&lt;a
        
      
    
    </summary>
    
      <category term="MyNotes" scheme="https://shenxianpeng.github.io/categories/mynotes/"/>
    
    
      <category term="Work" scheme="https://shenxianpeng.github.io/tags/work/"/>
    
      <category term="Summary" scheme="https://shenxianpeng.github.io/tags/summary/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 执行 Shell 如果返回值不为0，作业(Job)停止并失败怎么办？</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-tips-3/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-tips-3/</id>
    <published>2020-07-22T08:11:36.000Z</published>
    <updated>2020-07-22T09:57:58.657Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Jenkins Tips 3》—— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在使用 Jenkins pipeline 时，如果 Shell 的返回值不为零（也就是 Shell 命令执行时有错误），Jenkins Job 默认会标记当前的 stage 为失败。因此整个 Job 也会失败。&lt;/p&gt;
&lt;p&gt;在有些时候我们希望 Shell 虽然执行失败返回的不为零，但希望Jenkins Job 在执行成功后，要显示成功状态。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Tips" scheme="https://shenxianpeng.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>How to fix &quot;.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service&quot;</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-windows-agent-connect-problem/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-windows-agent-connect-problem/</id>
    <published>2020-07-16T03:28:20.000Z</published>
    <updated>2020-08-16T05:11:32.065Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;When I upgrade Jenkins 2.176.3 to Jenkins 2.235.1, my Windows agent can not connect with master successfully and out come this warining message “.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service”.&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="troubleshooting" scheme="https://shenxianpeng.github.io/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>每个 Jenkins 用户都应该知道这三个最佳实践</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-best-practice-cn/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-best-practice-cn/</id>
    <published>2020-07-06T10:57:02.000Z</published>
    <updated>2020-07-08T07:10:41.575Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;​在使用 Jenkins 实施了企业级的 CI/CD 工作，有如下三个最重要的实践和总结。&lt;/p&gt;
&lt;p&gt;第一，Configuration as Code（配置即代码）&lt;br&gt;其次，Jenkins shared libraries（Jenkins 共享库）&lt;br&gt;最后，Multi-Branch Pipeline（多分支流水线）&lt;/p&gt;
&lt;h2 id=&quot;配置即代码&quot;&gt;&lt;a href=&quot;#配置即代码&quot; class=&quot;headerlink&quot; title=&quot;配置即代码&quot;&gt;&lt;/a&gt;配置即代码&lt;/h2&gt;&lt;p&gt;配置即代码(Configuration as Code)是一种在代码仓库里管理配置的方法。&lt;/p&gt;
&lt;h3 id=&quot;它有什么好处&quot;&gt;&lt;a href=&quot;#它有什么好处&quot; class=&quot;headerlink&quot; title=&quot;它有什么好处&quot;&gt;&lt;/a&gt;它有什么好处&lt;/h3&gt;&lt;h4 id=&quot;作业透明化&quot;&gt;&lt;a href=&quot;#作业透明化&quot; class=&quot;headerlink&quot; title=&quot;作业透明化&quot;&gt;&lt;/a&gt;作业透明化&lt;/h4&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Top 3 best practice</title>
    <link href="https://shenxianpeng.github.io/2020/07/jenkins-best-practice/"/>
    <id>https://shenxianpeng.github.io/2020/07/jenkins-best-practice/</id>
    <published>2020-07-03T10:57:02.000Z</published>
    <updated>2020-11-01T09:07:47.627Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;I am Xianpeng, a build engineer. Today, I am going to share with you three Jenkins Practice.&lt;/p&gt;
&lt;p&gt;I will talk about Configuration as code, followed up with shared libraries, and then Multi-Branch Pipeline in the end.&lt;/p&gt;
&lt;h2 id=&quot;Configuration-as-Code&quot;&gt;&lt;a href=&quot;#Configuration-as-Code&quot; class=&quot;headerlink&quot; title=&quot;Configuration as Code&quot;&gt;&lt;/a&gt;Configuration as Code&lt;/h2&gt;&lt;p&gt;What is Configuration as Code?&lt;/p&gt;
&lt;p&gt;Configuration as code (CAC) is an approach that managing configuration resources in a bitbucket repository&lt;/p&gt;
&lt;h3 id=&quot;What-are-the-benefits&quot;&gt;&lt;a href=&quot;#What-are-the-benefits&quot; class=&quot;headerlink&quot; title=&quot;What are the benefits?&quot;&gt;&lt;/a&gt;What are the benefits?&lt;/h3&gt;&lt;h4 id=&quot;First-Jenkins-Job-Transparency&quot;&gt;&lt;a href=&quot;#First-Jenkins-Job-Transparency&quot; class=&quot;headerlink&quot; title=&quot;First, Jenkins Job Transparency&quot;&gt;&lt;/a&gt;First, Jenkins Job Transparency&lt;/h4&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>一名软件测试工程师的成长之路</title>
    <link href="https://shenxianpeng.github.io/2020/06/about-my-wechat-official-account/"/>
    <id>https://shenxianpeng.github.io/2020/06/about-my-wechat-official-account/</id>
    <published>2020-06-30T14:13:26.000Z</published>
    <updated>2020-07-03T05:18:07.554Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;关注本公众号的读者们可能会感到困惑，我最开始分享是软件功能测试、自动化测试；之后短暂的分享过一点开发；再之后主要在分享 CI/CD 及 DevOps 相关的内容。&lt;/p&gt;
&lt;p&gt;因此，我想通过本篇简单介绍下自己的公众号以及写公众号带来了哪些收获，通过这个过程展示了作为&lt;strong&gt;一名软件测试工程师的成长之路。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MyNotes" scheme="https://shenxianpeng.github.io/categories/mynotes/"/>
    
    
      <category term="Thought" scheme="https://shenxianpeng.github.io/tags/thought/"/>
    
  </entry>
  
  <entry>
    <title>将 Jenkins Shell 返回的字符串处理为字符数组</title>
    <link href="https://shenxianpeng.github.io/2020/06/Jenkins-tips-2/"/>
    <id>https://shenxianpeng.github.io/2020/06/Jenkins-tips-2/</id>
    <published>2020-06-22T06:37:29.000Z</published>
    <updated>2020-07-22T09:59:57.069Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。&lt;/p&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Tips" scheme="https://shenxianpeng.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>忽略 Jenkins Shell 步骤中的故障</title>
    <link href="https://shenxianpeng.github.io/2020/06/Jenkins-tips-1/"/>
    <id>https://shenxianpeng.github.io/2020/06/Jenkins-tips-1/</id>
    <published>2020-06-21T13:42:17.000Z</published>
    <updated>2020-07-22T09:59:11.851Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;不希望 Shell 脚本因失败而中止&lt;/li&gt;
&lt;li&gt;想一直运行 Shell 脚本并报告失败&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/categories/jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Tips" scheme="https://shenxianpeng.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job</title>
    <link href="https://shenxianpeng.github.io/2020/06/vm-status-check-via-jenkins/"/>
    <id>https://shenxianpeng.github.io/2020/06/vm-status-check-via-jenkins/</id>
    <published>2020-06-12T19:34:28.000Z</published>
    <updated>2020-07-03T05:19:05.352Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://shenxianpeng.github.io/categories/devops/"/>
    
    
      <category term="Jenkins" scheme="https://shenxianpeng.github.io/tags/jenkins/"/>
    
      <category term="Shell" scheme="https://shenxianpeng.github.io/tags/shell/"/>
    
  </entry>
  
</feed>
