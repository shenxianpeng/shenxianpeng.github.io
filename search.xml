<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jenkins agent service can not start automatically on Windows even the Startup type is Automatic</title>
      <link href="/2023/04/jenkins-troubleshooting/"/>
      <url>/2023/04/jenkins-troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>My Windows build machine is regular reboot after Windows updates, but my Jenkins agent service on this Windows can not<br>start automatically even I have set the startup type to Automatic.</p><p><img src="/2023/04/jenkins-troubleshooting/service-general.png"></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>After some research, select “Allow service to interact with desktop” with service properties on Log On tab can fix this problem.</p><p>In service properties -&gt; Log On -&gt; Select “Local System account” and select the checkbox for “Allow service to interact with desktop”<br><img src="/2023/04/jenkins-troubleshooting/service-log-on.png"></p><p>Reference is <a href="https://stackoverflow.com/questions/41210060/even-after-installing-jenkins-as-a-windows-service-i-have-to-start-it-through-c">HERE</a>.</p><h2 id="Semi-automatic-setup-of-Jenkins-Agent-on-Windows"><a href="#Semi-automatic-setup-of-Jenkins-Agent-on-Windows" class="headerlink" title="Semi-automatic setup of Jenkins Agent on Windows"></a>Semi-automatic setup of Jenkins Agent on Windows</h2><p>By the way, if you want to set a jenkins agent as service on Windows more easier, you can use this <a href="https://github.com/shenxianpeng/win-jenkins-agent">project</a> to semi-automatic setup.</p><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SLSA 框架与软件供应链安全防护</title>
      <link href="/2023/03/slsa/"/>
      <url>/2023/03/slsa/</url>
      
        <content type="html"><![CDATA[<p>随着软件供应链攻击发生的次数越来越多，Google 发布了一系列指南来确保软件包的完整性，目的是为了防止未经授权的代码修改影响软件供应链。</p><p>Google 的 SLSA 框架（Supply-chain Levels for Software Artifacts 软件制品的供应链级别）通过识别 CI&#x2F;CD 流水线中的问题并减小影响，为实现更安全的软件开发和部署流程提供建议。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFSLSA">什么是SLSA</a></li><li><a href="#%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98">软件供应链中的问题</a><br>2.1 <a href="#%E4%BE%9B%E5%BA%94%E9%93%BE%E6%94%BB%E5%87%BB%E5%8C%85%E6%8B%AC%E5%93%AA%E4%BA%9B">供应链攻击包括哪些</a><br>2.2 <a href="#%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E7%9A%84%E4%BE%8B%E5%AD%90">真实世界的例子</a></li><li><a href="#SLSA%E7%AD%89%E7%BA%A7">SLSA等级</a><br>3.1 <a href="#%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A">详细解释</a><br>3.2 <a href="#%E9%99%90%E5%88%B6">限制</a></li><li><a href="#SLSA%E8%90%BD%E5%9C%B0">SLSA落地</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7">其他工具</a></li></ol><h2 id="什么是SLSA"><a href="#什么是SLSA" class="headerlink" title="什么是SLSA"></a>什么是SLSA</h2><p><a href="https://slsa.dev/">SLSA</a> 全名是 Supply chain Levels for Software Artifacts, or SLSA (发音“salsa”).</p><p>SLSA 是一个端到端框架，一个标准和控制的清单确保软件构建和部署过程的安全性，防止篡改源代码、构建平台以及构件仓库而产生的威胁。</p><h2 id="软件供应链中的问题"><a href="#软件供应链中的问题" class="headerlink" title="软件供应链中的问题"></a>软件供应链中的问题</h2><p>任何软件供应链都可能引入漏洞，随着系统变得越来越复杂，检查和最佳实践来保证工件完整性变得至关重要，确保你所依赖的源代码就是你实际使用的代码。</p><p>如果没有坚实的基础和系统发展计划，就很难集中精力应对明天的下一次黑客攻击、违规或妥协。</p><h3 id="供应链攻击包括哪些"><a href="#供应链攻击包括哪些" class="headerlink" title="供应链攻击包括哪些"></a>供应链攻击包括哪些</h3><p><img src="/2023/03/slsa/supply-chain-threats.svg" alt="threats"></p><p>A 提交未经认证的修改<br>B 泄露源码仓库<br>C 从被修改源代码构建<br>D 泄露构建过程<br>E 使用已泄露的依赖<br>F 上传被修改的包<br>G 泄露了包仓库<br>H 使用已泄露的包</p><h3 id="真实世界的例子"><a href="#真实世界的例子" class="headerlink" title="真实世界的例子"></a>真实世界的例子</h3><table><thead><tr><th>完整性威胁</th><th>已知例子</th><th>SLSA 如何提供帮助</th></tr></thead><tbody><tr><td>A 提交未经认证的修改</td><td><a href="https://lore.kernel.org/lkml/202105051005.49BFABCE@keescook/">研究人员</a>试图通过邮件列表上的<br>补丁程序故意将漏洞引入 Linux 内核。</td><td>两人审查发现了大部分（但不是全部）漏洞。</td></tr><tr><td>B 泄露源码仓库</td><td><a href="https://news-web.php.net/php.internals/113838">PHP</a>：攻击者破坏了 PHP 的自托管<br> git 服务器并注入了两个恶意提交。</td><td>一个受到更好保护的源代码平台<br>将成为攻击者更难攻击的目标。</td></tr><tr><td>C 从被修改源代码构建</td><td><a href="https://www.webmin.com/exploit.html">Webmin</a>：攻击者修改了构建基础设施<br>以使用与源代码控制不匹配的源文件。</td><td>符合 SLSA 标准的构建服务器会生成出处，<br>以识别实际使用的来源，从而使消费者能够检测到此类篡改。</td></tr><tr><td>D 泄露构建过程</td><td><a href="https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/">SolarWinds</a>：攻击者破坏了构建平台<br>并安装了在每次构建期间注入恶意行为的植入程序。</td><td>更高的 SLSA 级别需要对构建平台进行更强大的安全控制，<br>这使得妥协和获得持久性变得更加困难。</td></tr><tr><td>E 使用已泄露的依赖</td><td><a href="https://web.archive.org/web/20210909051737/https://schneider.dev/blog/event-stream-vulnerability-explained/">event-stream</a>：攻击者添加了一个无害的依赖项，然后更新了该依赖项<br>以添加恶意行为。更新与提交到 GitHub 的代码不匹配（即攻击 F）。</td><td>递归地将 SLSA 应用于所有依赖项会阻止这个特定的向量，因为<br>出处会表明它不是由适当的构建器构建的，或者源不是来自 GitHub。</td></tr><tr><td>F 上传被修改的包</td><td><a href="https://about.codecov.io/apr-2021-post-mortem/">CodeCov</a>：攻击者使用泄露的凭据将恶意工件上传到<br> Google Cloud Storage(GCS)，用户可以从中直接下载。</td><td>GCS 中工件的出处表明工件不是以<br>预期的方式从预期的源代码库中构建的。</td></tr><tr><td>G 泄露了包仓库</td><td><a href="https://theupdateframework.io/papers/attacks-on-package-managers-ccs2008.pdf">对包镜像的攻击</a>：研究人员为几个流行的<br>包存储库运行镜像，这些镜像可能被用来提供恶意包。</td><td>与上面的 (F) 类似，恶意工件的来源表明它们不是<br>按预期构建的，也不是来自预期的源代码库。</td></tr><tr><td>H 使用已泄露的包</td><td><a href="https://blog.sonatype.com/damaging-linux-mac-malware-bundled-within-browserify-npm-brandjack-attempt">Browserify typosquatting</a>：攻击者<br>上传了一个与原始名称相似的恶意包。</td><td>SLSA 不直接解决这种威胁，但将出处链接回源代码控制<br>可以启用和增强其他解决方案。</td></tr></tbody></table><h2 id="SLSA等级"><a href="#SLSA等级" class="headerlink" title="SLSA等级"></a>SLSA等级</h2><span id="more"></span><table><thead><tr><th>等级</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>1</td><td>构建过程的文档</td><td>Unsigned provenance</td></tr><tr><td>2</td><td>构建服务的防篡改</td><td>托管源&#x2F;构建，签名出处</td></tr><tr><td>3</td><td>对特定威胁的额外抵抗力</td><td>对主机的安全控制，不可伪造的来源</td></tr><tr><td>4</td><td>最高级别的信心和信任</td><td>两方审查+密封构建</td></tr></tbody></table><h3 id="详细解释"><a href="#详细解释" class="headerlink" title="详细解释"></a>详细解释</h3><table><thead><tr><th>等级</th><th>要求</th></tr></thead><tbody><tr><td>0</td><td>没有保证。 SLSA 0 表示缺少任何 SLSA 级别。</td></tr><tr><td>1</td><td><strong>构建过程必须完全脚本化&#x2F;自动化并生成出处。</strong> <br>出处是关于工件构建方式的元数据，包括构建过程、顶级源和依赖项。<br>了解出处允许软件消费者做出基于风险的安全决策。<br>SLSA 1 的 Provenance 不能防止篡改，但它提供了基本级别的代码源识别并有助于漏洞管理。</td></tr><tr><td>2</td><td><strong>需要使用版本控制和生成经过身份验证的来源的托管构建服务。</strong> <br>这些附加要求使软件消费者对软件的来源更有信心。<br>在此级别，出处可防止篡改到构建服务受信任的程度。<br>SLSA 2 还提供了一个轻松升级到 SLSA 3 的途径。</td></tr><tr><td>3</td><td><strong>源和构建平台符合特定标准，以分别保证源的可审计性和出处的完整性。</strong> <br>我们设想了一个认证流程，审计员可以通过该流程证明平台符合要求，然后消费者就可以信赖了。 <br>SLSA 3 通过防止特定类别的威胁（例如交叉构建污染），提供比早期级别更强的防篡改保护。</td></tr><tr><td>4</td><td><strong>需要两人审查所有更改和密封、可重现的构建过程。</strong> <br>两人审查是发现错误和阻止不良行为的行业最佳实践。 <br>密封构建保证来源的依赖项列表是完整的。 <br>可重现的构建虽然不是严格要求的，但提供了许多可审计性和可靠性的好处。 <br>总的来说，SLSA 4 让消费者对软件未被篡改具有高度的信心。</td></tr></tbody></table><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>SLSA 可以帮助减少软件工件中的供应链威胁，但也有局限性。</p><ul><li>许多工件在供应链中存在大量依赖关系。完整的依赖关系图可能非常大。</li><li>实际上，从事安全工作的团队需要确定并关注供应链中的重要组成部分。这可以手动执行，但工作量可能很大。</li><li>工件的 SLSA 级别不可传递并且依赖项有自己的 SLSA 评级。这意味着可以从 SLSA 0 依赖项构建 SLSA 4 工件。因此，虽然主要神器具有很强的安全性，但其他地方可能仍然存在风险。这些风险的总和将帮助软件消费者了解如何以及在何处使用 SLSA 4 工件。</li><li>虽然这些任务的自动化会有所帮助，但对于每个软件消费者来说，全面审查每个工件的整个图表并不切实际。为了缩小这一差距，审计员和认证机构可以验证并断言某些东西符合 SLSA 要求。这对于闭源软件可能特别有价值。</li></ul><p>作为我们路线图的一部分，我们将探讨如何识别重要组成部分、如何确定整个供应链的总体风险以及认证的作用。</p><h2 id="SLSA落地"><a href="#SLSA落地" class="headerlink" title="SLSA落地"></a>SLSA落地</h2><p>SLSA 是一个标准，但如何落地呢？</p><p>我们可以通过 SLSA 的 <a href="https://slsa.dev/spec/v0.1/requirements">Requirements</a> 的汇总表来一一对照进行自建，查看当前的 CI&#x2F;CD 工作流处在哪个安全等级。</p><p>有没有工具能够更好的帮助我们检查并指导我们如何提高安全等级呢？</p><p>目前只有少数可以实现此目的的工具，并且绝大多数只限于 GitHub。</p><p><a href="https://github.com/ossf/scorecard">OpenSSF Scorecard</a> 就是一个来自于开源安全基金会（OpenSSF）针对开源软件安全指标检查的一个自动化工具，它可以帮助开源维护者改进他们的安全最佳实践，并帮助开源消费者判断他们的依赖项是否安全。</p><p>它是通过评估软件安全相关的许多重要项目，并为每个检查分配 0-10 的分数。你可以使用这些分数来了解需要改进的特定领域，以加强项目的安全状况。还可以评估依赖项引入的风险，并就接受这些风险、评估替代解决方案或与维护人员合作进行改进做出明智的决定。</p><h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><ul><li><a href="https://github.com/slsa-framework/slsa-verifier">slsa-verifier</a> - 验证符合 SLSA 标准的构建出处</li><li><a href="https://github.com/sigstore">Sigstore</a> - 用于签名、验证和保护软件的新标准</li></ul><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SLSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 DevOps 任务中使用 ChatGPT?</title>
      <link href="/2023/02/chatgpt-for-devops/"/>
      <url>/2023/02/chatgpt-for-devops/</url>
      
        <content type="html"><![CDATA[<p>随着 DevOps 的流行，越来越多的开发团队正在寻找一些工具来帮助他们更好地完成任务。ChatGPT 是一款基于人工智能的自然语言处理工具，它可以用来帮助开发团队在 DevOps 任务中更加高效地工作。</p><p>本文将探讨如何在 DevOps 任务中使用 ChatGPT。</p><h2 id="一、ChatGPT-简介"><a href="#一、ChatGPT-简介" class="headerlink" title="一、ChatGPT 简介"></a>一、ChatGPT 简介</h2><p>ChatGPT 是一款由 OpenAI 开发的人工智能自然语言处理工具。它可以用于许多不同的应用程序，例如语音识别、自然语言处理、文本生成等。<br>ChatGPT 使用深度学习技术，可以生成与输入内容相关的文本。它是一款非常强大的工具，可以帮助开发团队更加高效地工作。</p><h2 id="二、ChatGPT-在-DevOps-中的应用"><a href="#二、ChatGPT-在-DevOps-中的应用" class="headerlink" title="二、ChatGPT 在 DevOps 中的应用"></a>二、ChatGPT 在 DevOps 中的应用</h2><p>在 DevOps 中，开发团队通常需要快速解决问题，并与团队成员和客户进行有效沟通。ChatGPT 可以用来帮助解决这些问题。</p><ol><li><p>自动化代码审查<br>  开发团队通常需要花费大量时间来进行代码审查。ChatGPT 可以用来自动化这个过程。它可以根据代码库中的样本代码，生成与样本代码风格相似的代码，并对新代码进行审查。这可以帮助开发团队更快地进行代码审查，并减少人为错误的可能性。</p></li><li><p>自动化测试<br>  测试是 DevOps 中不可或缺的一部分。ChatGPT 可以用来自动化测试。它可以根据测试用例生成相应的测试代码，并对测试结果进行评估。这可以帮助开发团队更快地进行测试，并减少人为错误的可能性。</p></li><li><p>自动化部署<br>  部署是 DevOps 中不可或缺的一部分。ChatGPT 可以用来自动化部署。它可以根据部署规则生成相应的部署代码，并对部署结果进行评估。这可以帮助开发团队更快地进行部署，并减少人为错误的可能性。</p></li><li><p>自动化文档生成<br>  文档是 DevOps 中不可或缺的一部分。ChatGPT 可以用来自动化文档生成。它可以根据项目的代码库和测试用例生成相应的文档，并对文档的质量进行评估。这可以帮助开发团队更快地生成文档，并减少人为错误的可能性。</p></li></ol><h2 id="三、如何使用-ChatGPT"><a href="#三、如何使用-ChatGPT" class="headerlink" title="三、如何使用 ChatGPT"></a>三、如何使用 ChatGPT</h2><p>要使用 ChatGPT，开发团队需要进行以下步骤：</p><span id="more"></span><ol><li><p>收集数据<br>  收集数据是使用 ChatGPT 的第一步。开发团队需要收集开发团队需要收集与其任务相关的数据，例如代码库、测试用例、部署规则和文档。这些数据将用于训练 ChatGPT 模型，以生成与任务相关的文本。</p></li><li><p>训练 ChatGPT 模型<br>  训练 ChatGPT 模型是使用 ChatGPT 的第二步。开发团队可以使用已有的数据来训练模型，也可以使用迁移学习技术，将已有的 ChatGPT 模型进行微调，以适应其任务的需求。训练好的 ChatGPT 模型将用于生成与任务相关的文本。</p></li><li><p>集成 ChatGPT 模型<br>  集成 ChatGPT 模型是使用 ChatGPT 的第三步。开发团队可以将 ChatGPT 模型集成到其 DevOps 工具链中。例如，可以将 ChatGPT 模型集成到自动化代码审查工具、自动化测试工具、自动化部署工具和自动化文档生成工具中。这将使这些工具更加智能化，并帮助开发团队更加高效地工作。</p></li><li><p>优化 ChatGPT 模型<br>优化 ChatGPT 模型是使用 ChatGPT 的第四步。开发团队需要定期监控 ChatGPT 模型的性能，并对其进行优化。例如，可以增加更多的训练数据、调整模型的超参数、增加正则化约束等。这将有助于提高 ChatGPT 模型的准确性和性能，并使其更加适应任务需求。</p></li></ol><h2 id="四、结论"><a href="#四、结论" class="headerlink" title="四、结论"></a>四、结论</h2><p>在 DevOps 任务中使用 ChatGPT 可以帮助开发团队更加高效地工作。ChatGPT 可以用来自动化代码审查、自动化测试、自动化部署和自动化文档生成等任务。开发团队需要收集与其任务相关的数据，训练 ChatGPT 模型，并将其集成到其 DevOps 工具链中。开发团队还需要定期监控 ChatGPT 模型的性能，并对其进行优化。这将有助于提高 ChatGPT 模型的准确性和性能，并使其更加适应任务需求。</p><blockquote><p>对了，本篇文章是由 ChatGPT 生成的，你觉得它写的怎么样，像个油腻的中年人？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么我的 Jenkins Controller 越来越慢？可能犯了这些错误...</title>
      <link href="/2023/02/pipeline-best-practices/"/>
      <url>/2023/02/pipeline-best-practices/</url>
      
        <content type="html"><![CDATA[<p>就像标题所说的，为什么我的 Jenkins Controller 越来越慢，可能是因为没有遵循 Jenkins pipeline 编写的一些最佳实践。</p><p>所以主要介绍 Jenkins pipeline 的一些最佳实践，目的是为了向 pipeline 作者和维护者展示一些他们过去可能并没有意识到的“反模式”。</p><p>我会尽量列出所有可能的 Pipeline 最佳实践，并提供一些实践中常见的具体示例。</p><h2 id="一般问题"><a href="#一般问题" class="headerlink" title="一般问题"></a>一般问题</h2><h3 id="确保在-pipeline-中使用-Groovy-代码作为粘帖剂"><a href="#确保在-pipeline-中使用-Groovy-代码作为粘帖剂" class="headerlink" title="确保在 pipeline 中使用 Groovy 代码作为粘帖剂"></a>确保在 pipeline 中使用 Groovy 代码作为粘帖剂</h3><p>使用 Groovy 代码连接一组操作而不是作为 pipeline 的主要功能。</p><p>换句话说，与其依赖 pipeline 功能（Groovy 或 pipeline 步骤）来推动构建过程向前发展，不如使用单个步骤（例如 <code>sh</code>）来完成构建的多个部分。</p><p>pipeline 随着其复杂性的增加（Groovy 代码量、使用的步骤数等），需要 controller 上的更多资源（CPU、内存、存储）。将 Pipeline 视为完成构建的工具，而不是构建的核心。</p><p>示例：使用单个 Maven 构建步骤通过其构建&#x2F;测试&#x2F;部署过程来驱动构建。</p><h3 id="在-Jenkins-pipeline-中运行-shell-脚本"><a href="#在-Jenkins-pipeline-中运行-shell-脚本" class="headerlink" title="在 Jenkins pipeline 中运行 shell 脚本"></a>在 Jenkins pipeline 中运行 shell 脚本</h3><p>在 Jenkins Pipeline 中使用 shell 脚本可以通过将多个步骤合并到一个阶段来帮助简化构建。shell 脚本还允许用户添加或更新命令，而无需单独修改每个步骤或阶段。</p><p>Jenkins Pipeline 中使用 shell 脚本及其提供的好处：</p><span id="more"></span><h3 id="避免-pipeline-中的复杂-Groovy-代码"><a href="#避免-pipeline-中的复杂-Groovy-代码" class="headerlink" title="避免 pipeline 中的复杂 Groovy 代码"></a>避免 pipeline 中的复杂 Groovy 代码</h3><p>对于 pipeline，Groovy 代码始终在 controller 上执行，这意味着使用 controller 资源（内存和 CPU）。</p><p>因此，减少 Pipeline 执行的 Groovy 代码量至关重要（这包括在 Pipeline 中导入的类上调用的任何方法）。以下是要避免使用的最常见 Groovy 方法示例：</p><ol><li><p><code>JsonSlurper</code>：此函数（以及其他一些类似函数，如 <code>XmlSlurper</code> 或 <code>readFile</code>）可用于从磁盘上的文件中读取数据，将该文件中的数据解析为 <code>JSON</code> 对象，然后使用 <code>JsonSlurper().parseText(readFile(&quot;$LOCAL_FILE&quot;))</code>。该命令两次将本地文件加载到 controller 的内存中，如果文件很大或命令执行频繁，将需要大量内存。</p><p> 解决方案：不使用 <code>JsonSlurper</code>，而是使用 shell 步骤并返回标准输出。这个 shell 看起来像这样：<code>def JsonReturn = sh label: &#39;&#39;, returnStdout: true, script: &#39;echo &quot;$LOCAL_FILE&quot;| jq &quot;$PARSING_QUERY&quot;&#39;</code>。这将使用代理资源来读取文件，<code>$PARSING_QUERY</code> 将帮助将文件解析成更小的尺寸。</p></li><li><p><code>HttpRequest</code>：此命令经常用于从外部源获取数据并将其存储在变量中。这种做法并不理想，因为不仅该请求直接来自 controller （如果 controller 没有加载证书，这可能会为 HTTPS 请求之类的事情提供错误的结果），而且对该请求的响应被存储了两次。</p><p> 解决方案：使用 shell 步骤执行来自代理的 HTTP 请求，例如使用 curl 或 wget 等工具，视情况而定。如果结果必须在 Pipeline 的后面，尽量在 agent 端过滤结果，这样只有最少的需要的信息必须传回 Jenkins controller。</p></li></ol><h3 id="减少类似-pipeline-步骤的重复"><a href="#减少类似-pipeline-步骤的重复" class="headerlink" title="减少类似 pipeline 步骤的重复"></a>减少类似 pipeline 步骤的重复</h3><p>尽可能多地将 pipeline 步骤组合成单个步骤，以减少 pipeline 执行引擎本身造成的开销。</p><p>例如，如果你连续运行三个 shell 步骤，则每个步骤都必须启动和停止，需要创建和清理 agent 和 controller 上的连接和资源。</p><p>但是，如果将所有命令放入单个 shell 步骤，则只需启动和停止一个步骤。</p><p>示例：与其创建一系列 <code>echo</code> 或 <code>sh</code> 步骤，不如将它们组合成一个步骤或脚本。</p><h3 id="避免调用-Jenkins-getInstance"><a href="#避免调用-Jenkins-getInstance" class="headerlink" title="避免调用 Jenkins.getInstance"></a>避免调用 <code>Jenkins.getInstance</code></h3><p>在 Pipeline 或共享库中使用 Jenkins.instance 或其访问器方法表示该 Pipeline&#x2F;共享库中的代码滥用。</p><p>从非沙盒共享库使用 Jenkins API 意味着共享库既是共享库又是一种 Jenkins 插件。</p><p>从 pipeline 与 Jenkins API 交互时需要非常小心，以避免严重的安全和性能问题。如果你必须在你的构建中使用 Jenkins API，推荐的方法是在 Java 中创建一个最小的插件，它在你想要使用 Pipeline 的 Step API 访问的 Jenkins API 周围实现一个安全的包装器。</p><p>直接从沙盒 Jenkinsfile 使用 Jenkins API 意味着你可能不得不将允许沙盒保护的方法列入白名单，任何可以修改 pipeline 的人都可以绕过它，这是一个重大的安全风险。列入白名单的方法以系统用户身份运行，具有整体管理员权限，这可能导致开发人员拥有比预期更高的权限。</p><p>解决方案：最好的解决方案是解决正在进行的调用，但如果必须完成这些调用，那么最好实施一个能够收集所需数据的 Jenkins 插件。</p><h3 id="清理旧的-Jenkins-构建"><a href="#清理旧的-Jenkins-构建" class="headerlink" title="清理旧的 Jenkins 构建"></a>清理旧的 Jenkins 构建</h3><p>作为 Jenkins 管理员，删除旧的或不需要的构建可以使 Jenkins controller 高效运行。</p><p>当你不删除旧版本时，用于更新和相关版本的资源就会减少。可以在每个 pipeline 作业中使用 <code>buildDiscarder</code> 来保留特定历史构建数量。</p><h2 id="使用共享库"><a href="#使用共享库" class="headerlink" title="使用共享库"></a>使用共享库</h2><h3 id="不要覆盖内置的-pipeline-步骤"><a href="#不要覆盖内置的-pipeline-步骤" class="headerlink" title="不要覆盖内置的 pipeline 步骤"></a>不要覆盖内置的 pipeline 步骤</h3><p>尽可能远离自定义&#x2F;覆盖的 pipeline 步骤。覆盖内置 pipeline 步骤是使用共享库覆盖标准 pipeline API（如 <code>sh</code> 或 <code>timeout</code>）的过程。此过程很危险，因为 pipeline API 可能随时更改，导致自定义代码中断或给出与预期不同的结果。</p><p>当自定义代码因 Pipeline API 更改而中断时，故障排除很困难，因为即使自定义代码没有更改，在 API 更新后它也可能无法正常工作。</p><p>因此，即使自定义代码没有更改，也不意味着在 API 更新后它会保持不变。</p><p>最后，由于在整个 pipeline 中普遍使用这些步骤，如果某些内容编码不正确&#x2F;效率低下，结果对 Jenkins 来说可能是灾难性的。</p><h3 id="避免大型全局变量声明文件"><a href="#避免大型全局变量声明文件" class="headerlink" title="避免大型全局变量声明文件"></a>避免大型全局变量声明文件</h3><p>拥有较大的变量声明文件可能需要大量内存而几乎没有任何好处，因为无论是否需要变量，都会为每个 pipeline 加载该文件。</p><p><strong>建议创建仅包含与当前执行相关的变量的小变量文件。</strong></p><h3 id="避免非常大的共享库"><a href="#避免非常大的共享库" class="headerlink" title="避免非常大的共享库"></a>避免非常大的共享库</h3><p>在 Pipelines 中使用大型共享库需要在 Pipeline 启动之前检出一个非常大的文件，并为当前正在执行的每个作业加载相同的共享库，这会导致内存开销增加和执行时间变慢。</p><h2 id="回答其他常见问题"><a href="#回答其他常见问题" class="headerlink" title="回答其他常见问题"></a>回答其他常见问题</h2><h3 id="处理-pipeline-中的并发"><a href="#处理-pipeline-中的并发" class="headerlink" title="处理 pipeline 中的并发"></a>处理 pipeline 中的并发</h3><p>尽量不要跨多个 pipeline 执行或多个不同的 pipeline 共享工作区。这种做法可能会导致每个 pipeline 中的意外文件修改或工作区重命名。</p><p>理想情况下，共享卷&#x2F;磁盘安装在单独的位置，文件从该位置复制到当前工作区，然后当构建完成时，如果有更新完成，文件可以被复制回来。</p><p>构建不同的容器，从头开始创建所需的资源（云类型代理非常适合此）。构建这些容器将确保构建过程每次都从头开始，并且很容易重复。如果构建容器不起作用，请禁用 pipeline 上的并发性或使用可锁定资源插件在运行时锁定工作区，以便其他构建在锁定时无法使用它。</p><p>警告：如果这些资源被任意锁定，则在运行时禁用并发或锁定工作区可能会导致 pipeline 在等待资源时被阻塞。</p><p><strong>另外，请注意，与为每个作业使用唯一资源相比，这两种方法获得构建结果的时间都比较慢。</strong></p><h3 id="避免-NotSerializableException"><a href="#避免-NotSerializableException" class="headerlink" title="避免 NotSerializableException"></a>避免 <code>NotSerializableException</code></h3><p>Pipeline 代码经过 CPS 转换，以便 pipeline 能够在 Jenkins 重启后恢复。也就是说，当 pipeline 正在运行你的脚本时，你可以关闭 Jenkins 或失去与代理的连接。当它返回时，Jenkins 会记住它在做什么，并且你的 pipeline 脚本会恢复执行，就好像它从未被中断过一样。一种称为“连续传递样式 (CPS)”的执行技术在恢复 pipeline 中起着关键作用。但是，由于 CPS 转换，某些 Groovy 表达式无法正常工作。</p><p>在幕后，CPS 依赖于能够序列化 pipeline 的当前状态以及要执行的 pipeline 的其余部分。<br>这意味着在 pipeline 中使用不可序列化的对象将触发 <code>NotSerializableException</code> 在 pipeline 尝试保留其状态时抛出。</p><p>有关更多详细信息和一些可能有问题的示例，请参阅 <a href="http://jenkins.io/redirect/pipeline-cps-method-mismatches">Pipeline CPS 方法不匹配</a>。</p><p>下面将介绍确保 pipeline 能够按预期运行的技术。</p><h3 id="确保持久变量可序列化"><a href="#确保持久变量可序列化" class="headerlink" title="确保持久变量可序列化"></a>确保持久变量可序列化</h3><p>在序列化期间，局部变量作为 pipeline 状态的一部分被捕获。这意味着在 pipeline 执行期间将不可序列化的对象存储在变量中将导致抛出 <code>NotSerializableException</code>。</p><h3 id="不要将不可序列化的对象分配给变量"><a href="#不要将不可序列化的对象分配给变量" class="headerlink" title="不要将不可序列化的对象分配给变量"></a>不要将不可序列化的对象分配给变量</h3><p>一种策略是利用不可序列化的对象始终“及时”推断它们的值，而不是计算它们的值并将该值存储在变量中。</p><h3 id="使用-NonCPS"><a href="#使用-NonCPS" class="headerlink" title="使用 @NonCPS"></a>使用 <code>@NonCPS</code></h3><p>如果有必要，你可以使用 <code>@NonCPS</code> 注释为特定方法禁用 CPS 转换，如果它经过 CPS 转换，该方法的主体将无法正确执行。请注意，这也意味着 Groovy 函数将不得不完全重新启动，因为它没有被转换。</p><blockquote><p>异步 pipeline 步骤（例如 <code>sh</code> 和 <code>sleep</code>）始终是 CPS 转换的，并且不能在使用 <code>@NonCPS</code> 注释的方法内部使用。通常，你应该避免在使用 <code>@NonCPS</code> 注释的方法内部使用 pipeline 步骤。</p></blockquote><h3 id="Pipeline-耐久性"><a href="#Pipeline-耐久性" class="headerlink" title="Pipeline 耐久性"></a>Pipeline 耐久性</h3><p>值得注意的是，更改 pipeline 的持久性可能会导致 <code>NotSerializableException</code> 不会被抛出，否则它们会被抛出。这是因为通过 <code>PERFORMANCE_OPTIMIZED</code> 降低 pipeline 的持久性意味着 pipeline 当前状态的持久化频率大大降低。因此，pipeline 从不尝试序列化不可序列化的值，因此不会抛出异常。</p><blockquote><p>此注释的存在是为了告知用户此行为的根本原因。不建议纯粹为了避免可串行化问题而将 pipeline 的持久性设置设置为性能优化。</p></blockquote><ul><li><a href="https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/">https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/</a></li><li><a href="https://www.cloudbees.com/blog/top-10-best-practices-jenkins-pipeline-plugin">https://www.cloudbees.com/blog/top-10-best-practices-jenkins-pipeline-plugin</a></li><li><a href="https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md">https://github.com/jenkinsci/pipeline-examples/blob/master/docs/BEST_PRACTICES.md</a></li><li><a href="https://devopscook.com/jenkinsfile-best-practices/">https://devopscook.com/jenkinsfile-best-practices/</a></li></ul><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年终总结</title>
      <link href="/2022/12/2022-summary/"/>
      <url>/2022/12/2022-summary/</url>
      
        <content type="html"><![CDATA[<p>时间过得好快，又过完了一年。</p><p>今年想写一些总结回顾一下过去的一年发生在自己身上的重要事件。</p><p>由于 2021 年没有写年终总结，2021 年在我的脑海里已经变化模糊，我只能凭着一些照片和日记才想起来的一些事情。看来以后的年终总结不能落下。</p><h2 id="回顾-2021"><a href="#回顾-2021" class="headerlink" title="回顾 2021"></a>回顾 2021</h2><p>2021 年我的个人关键词是“最后的潇洒”。</p><p>年初我搬家了，新家离公司开车只要十几分钟。这节省了很多花在路上的时间，周末我也更愿意往公司跑。</p><p>四月，第一次 Fork 并开始维护 <a href="https://github.com/cpp-linter/cpp-linter-action">cpp-linter-action</a> 这个开源项目，并且吸引了另外一个开发者与我共同维护。</p><p>七月，广鹿岛旅行</p><p>八月，老婆怀孕了。现在回看 2021 的照片，两个人的生活真的是太自在和潇洒了，两人吃饱全家不饿。</p><p>十一月，被告知为次密接，要求去酒店隔离。就这样我们被拉去酒店隔离了一周，然后回家后又要求隔离一周。现在想想呵呵不可思议！</p><h2 id="回顾-2022"><a href="#回顾-2022" class="headerlink" title="回顾 2022"></a>回顾 2022</h2><p>2022 的我个人的关键词就是“责任”。</p><p>五月，随着女儿的出生的，除了工作之外，几乎所有的时间都花在了照顾家庭方面，留给我学习和输出时间寥寥无几了。</p><p>孩子的出生最直接的感受就是身上责任的重大，养育一个孩子不但需要付出时间还有金钱，我真正地成为了上有老下有小的中年人了，一刻都不能倒下。</p><p>以前觉得自己无所不能，未来可期，现在觉得自己肩膀上的责任重大，从此再也无法躺平了。</p><p>六月至九月，陪产假。当全职奶爸，在孩子的睡觉的时候放弃了一些休息时间用来读书和开源。</p><p>十月至十二月，回归岗位，因为疫情关系大部时间都在家办公。上班工作，下班看娃，再也没有大块时间来学习和输出了。</p><p>因此我今年输出的文章很少，博客上一共发布了 19 篇，其中公众号只输出了 11 篇文章。这些输出绝大多数发生在上半年孩子还没出生的时候。</p><p>在业余时间相较于输出文章，第一优先级还是在开源项目，这能让我学到更多。我在 <a href="https://github.com/cpp-linter">cpp-linter</a> 这个项目上花了比较多的业余时间，目前 <a href="https://github.com/cpp-linter/cpp-linter-action">cpp-linter-action</a> 已经其他被超过 100 个其他项目所使用（依赖），我希望能把 cpp-linter 做成所有 C&#x2F;C++ 项目的首选的代码格式化和静态检查工具。</p><h2 id="展望-2023"><a href="#展望-2023" class="headerlink" title="展望 2023"></a>展望 2023</h2><ul><li>工作和家庭的平衡，希望女儿健康成长，早点睡整觉，这样爸爸可以晚上工作和学习了</li><li>英语和技术能够有进步，比如通过 TOEIC Tests 和加入知名的 Python Org 和学习 Cloud 方面的技术</li><li>超过 2022 年在博客和公众号的输出文章数，完成 24（博客）+ 12（公众号）要求不高吧</li><li>保持身体健康，恢复游泳、足球、运动，让体重回到 160 斤以下</li></ul><h2 id="过去的年终总结"><a href="#过去的年终总结" class="headerlink" title="过去的年终总结"></a>过去的年终总结</h2><blockquote><p><a href="https://shenxianpeng.github.io/2020/12/2020-summary/">2020 年终总结</a><br><a href="https://shenxianpeng.github.io/2019/12/2019-summary/">2019 年终总结</a><br><a href="https://shenxianpeng.github.io/2018/12/from-qa-to-dev/">2018 从测试到开发的五个月</a></p></blockquote><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to implement [skip ci] for Jenkins multi-branch pipeline</title>
      <link href="/2022/10/jenkins-skip-ci/"/>
      <url>/2022/10/jenkins-skip-ci/</url>
      
        <content type="html"><![CDATA[<p>When I want to implement [skip ci] or [ci skip] for Jenkins multi-branch pipeline, the existing plugin seems broken.</p><ul><li><a href="https://issues.jenkins.io/browse/JENKINS-35509">JENKINS-35509</a></li><li><a href="https://issues.jenkins.io/browse/JENKINS-34130">JENKINS-34130</a></li></ul><blockquote><p>My advice: try not to use the Jenkins plugin if possible.</p></blockquote><p>Good, it’s time to implement [skip ci] myself.</p><p>If you like me used Jenkins shared library, you can create a function like <code>SkipCI</code> from <code>src/org/cicd/utils.groovy</code>, then other jobs can reused this function.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/org/cicd/utils.groovy</span></span><br><span class="line"><span class="keyword">def</span> SkipCI(number = <span class="string">&quot;all&quot;</span>)&#123;</span><br><span class="line">  <span class="keyword">def</span> statusCodeList = []</span><br><span class="line"></span><br><span class="line">  String[] keyWords = [<span class="string">&#x27;ci skip&#x27;</span>, <span class="string">&#x27;skip ci&#x27;</span>] <span class="comment">// add more keywords if need.</span></span><br><span class="line">  keyWords.each &#123; keyWord -&gt;</span><br><span class="line">    <span class="keyword">def</span> statusCode = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (number == <span class="string">&quot;all&quot;</span>) &#123;</span><br><span class="line">      statusCode = sh <span class="attr">script:</span> <span class="string">&quot;git log --oneline --all | grep \&#x27;$&#123;keyWord&#125;\&#x27;&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      statusCode = sh <span class="attr">script:</span> <span class="string">&quot;git log --oneline -n $&#123;number&#125; | grep \&#x27;$&#123;keyWord&#125;\&#x27;&quot;</span>, <span class="attr">returnStatus:</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    statusCodeList.add(statusCode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (statusCodeList.contains(<span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then I can call this function from other jobs.</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The following is not the complete code, it is just sample code and may not be run successfully.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.cicd.utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> call()&#123;</span><br><span class="line"></span><br><span class="line">  pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">      node &#123;</span><br><span class="line">        label <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">      booleanParam <span class="attr">defaultValue:</span> <span class="literal">true</span>, <span class="attr">name:</span> <span class="string">&#x27;Build&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Uncheck to skip build.&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> utils = <span class="keyword">new</span> org.cicd.utils()</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&quot;Checkout&quot;</span>) &#123;</span><br><span class="line">      checkout scm</span><br><span class="line"></span><br><span class="line">      <span class="comment">// just check the latest commit message.</span></span><br><span class="line">      SkipCI = utils.SkipCI(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&quot;Build&quot;</span>)&#123;</span><br><span class="line">      when &#123;</span><br><span class="line">        beforeAgent <span class="literal">true</span></span><br><span class="line">        expression &#123; <span class="keyword">return</span> params.Build &amp;&amp; !SkipCI &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      steps &#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          sh <span class="string">&quot;make build&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Please let me know if any questions or suggestions.</p><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix &quot;Temporary Failure in name resolution&quot; in WSL</title>
      <link href="/2022/09/fix-wsl-networking-issue/"/>
      <url>/2022/09/fix-wsl-networking-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>I have encountered a problem when I ping google.com failed and return some error like “Temporary failure in name resolution”</p><h2 id="How-to-fix"><a href="#How-to-fix" class="headerlink" title="How to fix"></a>How to fix</h2><ol><li><p>Inside WSL2, create or append file: <code>/etc/wsl.conf</code></p></li><li><p>Put the following lines in the file in order to ensure the your DNS changes do not get blown away</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">tee</span> /etc/wsl.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[network]</span></span><br><span class="line"><span class="string">generateResolvConf = false</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><ol start="3"><li>In a cmd windows (!!), run <code>wsl --shutdown</code></li><li>Start WSL2</li><li>Run the following inside WSL2 (line with search is optional)</li></ol>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">rm</span> -rf /etc/resolv.conf</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/resolv.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">search yourbase.domain.local</span></span><br><span class="line"><span class="string">nameserver 8.8.8.8</span></span><br><span class="line"><span class="string">nameserver 1.1.1.1</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>  In my case, I can remove <code>/etc/resolv.conf</code> and error is “rm: cannot remove ‘&#x2F;etc&#x2F;resolv.conf’: Operation not permitted”</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use following command instead fixed.</span></span><br><span class="line">sudo chattr -a -i /etc/resolv.conf</span><br></pre></td></tr></table></figure><h2 id="Reference-links"><a href="#Reference-links" class="headerlink" title="Reference links"></a>Reference links</h2><blockquote><p><a href="https://askubuntu.com/questions/1192347/temporary-failure-in-name-resolution-on-wsl">https://askubuntu.com/questions/1192347/temporary-failure-in-name-resolution-on-wsl</a><br><a href="https://askubuntu.com/questions/125847/un-removable-etc-resolv-conf">https://askubuntu.com/questions/125847/un-removable-etc-resolv-conf</a></p></blockquote><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Restrict others from login your important Linux machine</title>
      <link href="/2022/09/restrict-connect-server/"/>
      <url>/2022/09/restrict-connect-server/</url>
      
        <content type="html"><![CDATA[<p>If you have a critical machine like your team’s CI server that runs on Linux, so you don’t want every members in your group to access it.</p><p>Modifying this setting <code>/etc/security/access.conf</code> on Linux can do it.</p><h2 id="How-to-setup"><a href="#How-to-setup" class="headerlink" title="How to setup"></a>How to setup</h2><p>I commented out the access settings for TEAM A, and add some user accounts can access.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#+ : (SRV_WW_TEAM_A_CompAdmin) : ALL</span></span><br><span class="line">+ : shenx, map, xiar : ALL</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>Be careful not to restrict everyone including yourself.</strong></p><p>It would be best to allow several people can also access it to prevent any issues to log in with your account or you leave the organization.</p><h2 id="Let’s-test"><a href="#Let’s-test" class="headerlink" title="Let’s test"></a>Let’s test</h2><p>Then when I try to use another account not in the list to access this machine and the connection shows closed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh <span class="built_in">test</span>@devciserver.organization.com</span><br><span class="line"><span class="built_in">test</span>@devciserver.organization.com<span class="string">&#x27;s password:</span></span><br><span class="line"><span class="string">Connection closed by 10.84.17.119 port 22</span></span><br></pre></td></tr></table></figure><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ 代码格式化和静态分析检查的一站式工作流 Cpp Linter</title>
      <link href="/2022/08/cpp-linter/"/>
      <url>/2022/08/cpp-linter/</url>
      
        <content type="html"><![CDATA[<p>本篇是关于 C&#x2F;C++ 代码格式化和静态分析检查的实践分享。</p><p>目前 C&#x2F;C++ 语言的代码格式化和检查工具使用的最为广泛的是 <a href="https://llvm.org/">LLVM</a> 项目中的 <a href="https://clang.llvm.org/docs/ClangFormat.html">Clang-Format</a> 和 <a href="https://clang.llvm.org/extra/clang-tidy/">Clang-Tidy</a>。</p><blockquote><p>LLVM 项目是模块化和可重用的编译器和工具链技术的集合。</p></blockquote><p>对于 C&#x2F;C++ 代码格式化和静态分析检查用到是 LLVM 项目中 clang-format 和 clang-tidy，放在一起我们称它为 clang-tools。</p><p>虽然我们有了工具，但<strong>如何把工具更好的集成到我们的工作流中</strong>才是本篇重点要讨论的。</p><p><a href="https://github.com/cpp-linter">cpp-linter</a> 组织的诞生就是为 C&#x2F;C++ 代码格式化和静态分析检查提供一站式的工作流，包括：</p><ol><li>方便下载 clang-tools，提供了 Docker images 和 binaries 两种使用方式；</li><li>方便与工作流进行集成，包括与 CI 以及 git hooks 的集成。</li></ol><p>下面介绍如何使用 clang-tools 下载工具，以及集成到工作流中。</p><span id="more"></span><h2 id="clang-tools-Docker-images"><a href="#clang-tools-Docker-images" class="headerlink" title="clang-tools Docker images"></a>clang-tools Docker images</h2><p>如果你想通过 Docker 来使用 clang-format 和 clang-tidy，<a href="https://github.com/cpp-linter/clang-tools">clang-tools</a> 项目是专门用来提供 Docker 镜像的。</p><p>只要下载 clang-tools Docker 镜像，然后就可以使用 clang-format 和 clang-tidy 了。例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 clang-format 版本</span></span><br><span class="line">$ docker run xianpengshen/clang-tools:12 clang-format --version</span><br><span class="line">Ubuntu clang-format version 12.0.0-3ubuntu1~20.04.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化代码 (helloworld.c 在仓库的 demo 目录下)</span></span><br><span class="line">$ docker run -v <span class="variable">$PWD</span>:/src xianpengshen/clang-tools:12 clang-format --dry-run -i helloworld.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 clang-tidy 版本</span></span><br><span class="line">$ docker run xianpengshen/clang-tools:12 clang-tidy --version</span><br><span class="line">LLVM (http://llvm.org/):</span><br><span class="line">  LLVM version 12.0.0</span><br><span class="line"></span><br><span class="line">  Optimized build.</span><br><span class="line">  Default target: x86_64-pc-linux-gnu</span><br><span class="line">  Host CPU: cascadelake</span><br><span class="line"><span class="comment"># 诊断代码 (helloworld.c 在仓库的 demo 目录下)</span></span><br><span class="line">$ docker run -v <span class="variable">$PWD</span>:/src xianpengshen/clang-tools:12 clang-tidy helloworld.c \</span><br><span class="line">-checks=boost-*,bugprone-*,performance-*,readability-*,portability-*,modernize-*,clang-analyzer-cplusplus-*,clang-analyzer-*,cppcoreguidelines-*</span><br></pre></td></tr></table></figure><h2 id="clang-tools-binaries"><a href="#clang-tools-binaries" class="headerlink" title="clang-tools binaries"></a>clang-tools binaries</h2><p>如果你需要使用 clang-tools binaries，以 Windows 为例，通常下载指定版本的 clang-tools 需要先安装 LLVM 这个大的安装包才能获得 clang-format &amp; clang-tidy 这些工具；在 Linux 上会方便很多，可以使用命令来下载，但如果想下载指定版本的 clang-format &amp; clang-tidy 可能要面临手动下载和安装。</p><p><a href="https://github.com/cpp-linter/clang-tools-pip">clang-tools-pip</a> 提供并支持在 Windows，Linux，MacOs 上通过命令行下载任何指定版本的 clang-tools 可执行文件。</p><p>只需要使用 <code>pip</code> 安装 <code>clang-tools</code> （即 <code>pip install clang-tools</code>）后，然后通过 <code>clang-tools</code> 命令就可以安装任何版本的可执行文件了。</p><p>例如，安装 clang-tools 版本 13：</p><p><code>$ clang-tools --install 13</code></p><p>也可以将它安装到指定目录下面：</p><p><code>$ clang-tools --install 13 --directory .</code></p><p>安装成功后，可以查看安装版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clang-format-13 --version</span><br><span class="line">clang-format version 13.0.0</span><br><span class="line"></span><br><span class="line">$ clang-tidy-13 --version</span><br><span class="line">LLVM (http://llvm.org/):</span><br><span class="line">  LLVM version 13.0.0</span><br><span class="line">  Optimized build.</span><br><span class="line">  Default target: x86_64-unknown-linux-gnu</span><br><span class="line">  Host CPU: skylake</span><br></pre></td></tr></table></figure><p><code>clang-tools</code> CLI 还提供了其他选项，比如自动帮你创建链接等，可以查看它的 CLI <a href="https://cpp-linter.github.io/clang-tools-pip/cli_args.html">文档</a>来获得帮助。</p><h2 id="把-clang-tools-集成到工作流"><a href="#把-clang-tools-集成到工作流" class="headerlink" title="把 clang-tools 集成到工作流"></a>把 clang-tools 集成到工作流</h2><p>上面介绍了方便下载 clang-tools 的 Docker images 和 binaries 这两种方式，如何把它们集成到工作流中是我们最终所关心的。</p><p>当前的主流 IDE 可以通过插件的方式来使用 clang-format 和 clang-tidy，但这样的问题是：</p><ol><li>不同的开发可能会使用不同的 IDE，这样在不同的 IDE 上安装插件需要比较高的学习成本；</li><li>没法保证所有开发人员在提交代码的时候都会去执行 Clang-Format 或 Clang-Tidy。</li></ol><p>那么怎样确保每次提交代码都做了 Clang-Format 或 Clang-Tidy 检查呢？</p><ol><li><a href="https://github.com/cpp-linter/cpp-linter-action">cpp-linter-action</a> 提供了通过 CI 进行检查，当发现没有格式化或有诊断错误的代码时 CI 会失败，来防止合并到主分的代码没有通过代码检查；</li><li><a href="https://github.com/cpp-linter/cpp-linter-hooks">cpp-linter-hooks</a> 通过 git hook 在提交代码的时候自动运行 clang-format 和 clang-tidy，如果不符合规范则提交失败，并提示并自动格式化。</li></ol><h2 id="cpp-linter-action-在代码合并前做自动检查"><a href="#cpp-linter-action-在代码合并前做自动检查" class="headerlink" title="cpp-linter-action 在代码合并前做自动检查"></a>cpp-linter-action 在代码合并前做自动检查</h2><p>如果你使用的是 GitHub，那么非常推荐你使用 <a href="https://github.com/cpp-linter/cpp-linter-action">cpp-linter-action</a> 这个 GitHub Action。</p><blockquote><p>目前 <a href="https://github.com/cpp-linter/cpp-linter">cpp-linter</a> 还没有跟其他除 GitHub 以外的 SCM 做 API 集成。</p></blockquote><p>以下是它的一些重要特性：</p><ol><li>运行结果支持 Annotations 和 Thread Comment 两种方式展示</li><li>支持 GitHub 的 public 和 private 仓库</li><li>支持绝大多数 Clang 版本</li><li>还有很多其他的 <a href="https://github.com/cpp-linter/cpp-linter-action#optional-inputs">optional-inputs</a></li></ol><p>使用这个 Action 只需要在 <code>.github/workflows/</code> 下面创建一个 cpp-linter.yml，内容如下：</p><blockquote><p>当然也可以把下面的配置加到一个已经存在的 Workflow，例如 build。</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">cpp-linter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">opened</span>, <span class="string">reopened</span>]</span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">cpp-linter:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">cpp-linter/cpp-linter-action@v1</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">linter</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">style:</span> <span class="string">file</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Fail</span> <span class="string">fast?!</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.linter.outputs.checks-failed</span> <span class="string">&gt;</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;Some files failed the linting checks!&quot;</span></span><br><span class="line"><span class="string">          exit 1</span></span><br></pre></td></tr></table></figure><p>如果发现存在没有进行格式化或是静代码态检查，CI workflow 会失败，并且会有如下注释说明，annotations 默认是开启的。</p><p><img src="/2022/08/cpp-linter/annotations.png" alt="annotations"></p><p>如果开启了 Thread Comment 选项（即 <code>thread-comments: true</code>）就会将在 Pull Request 中自动添加如下错误评论。</p><p><img src="/2022/08/cpp-linter/comment.png" alt="comment"></p><p>目前已经有很多知名项目依赖这个 Action，它在 GitHub Marketplace 上面搜索它的排名也非常靠前，可以放心使用。</p><blockquote><p>注：annotations 和 comment 这两个功能目前只支持 GitHub，该项目未来考虑支持其他 SCM，像 Bitbucket，GitLab。</p></blockquote><h2 id="cpp-linter-hooks-在提交代码时自动检查"><a href="#cpp-linter-hooks-在提交代码时自动检查" class="headerlink" title="cpp-linter-hooks 在提交代码时自动检查"></a>cpp-linter-hooks 在提交代码时自动检查</h2><p><a href="https://github.com/cpp-linter/cpp-linter-hooks">cpp-linter-hooks</a> 是通过 git hook 在提交代码时做自动检查，这种方式不限制使用任何 SCM。</p><p>只需要在项目仓库中添加一个 <code>.pre-commit-config.yaml</code> 配置文件，然后将 <a href="https://github.com/cpp-linter/cpp-linter-hooks">cpp-linter-hooks</a> 这个 hook 添加到 <code>.pre-commit-config.yaml</code> 中，具体设置如下：</p><blockquote><p><code>.pre-commit-config.yaml</code> 是 <a href="https://pre-commit.com/"><code>pre-commit</code></a> framework 的默认配置文件。</p></blockquote><ol><li><p>安装 pre-commit</p> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pre-commit</span><br></pre></td></tr></table></figure></li><li><p>创建配置文件 <code>.pre-commit-config.yaml</code>，设置如下：</p> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/cpp-linter/cpp-linter-hooks</span></span><br><span class="line">  <span class="attr">rev:</span> <span class="string">v0.2.1</span></span><br><span class="line">  <span class="attr">hooks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">clang-format</span></span><br><span class="line">      <span class="attr">args:</span> [<span class="string">--style=file</span>]  <span class="comment"># to load .clang-format</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">clang-tidy</span></span><br><span class="line">      <span class="attr">args:</span> [<span class="string">--checks=.clang-tidy</span>] <span class="comment"># path/to/.clang-tidy</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的 file 是指 <code>.clang-format</code>, clang-format 默认支持的编码格式包括 LLVM, GNU, Google, Chromium, Microsoft, Mozilla, WebKit，如果需要特殊设置可以在仓库的根目录下面创建配置文件 <code>.clang-format</code>。同理，如果默认的静态分析设置不满足要求，可以在仓库的根目录下创建 <code>.clang-tidy</code> 配置文件。</p></blockquote><p> 更多配置可以参考 <a href="https://github.com/cpp-linter/cpp-linter-hooks">README</a></p></li><li><p>安装 git hook 脚本</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pre-commit install</span><br><span class="line">pre-commit installed at .git/hooks/pre-commit</span><br></pre></td></tr></table></figure></li><li><p>之后每次 <code>git commit</code> 都会自动执行 clang-format 和 chang-tidy。</p><p> 如果检查到没有格式化或有静态分析错误，会提示如下错误信息：</p><p> chang-format 的输出</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang-format.............................................................Failed</span><br><span class="line">- hook <span class="built_in">id</span>: clang-format</span><br><span class="line">- files were modified by this hook</span><br></pre></td></tr></table></figure><p> 并自动帮你进行格式化</p> <figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- a/testing/main.c</span></span><br><span class="line"><span class="comment">+++ b/testing/main.c</span></span><br><span class="line"><span class="meta">@@ -1,3 +1,6 @@</span></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"><span class="deletion">-int main() &#123;for (;;) break; printf(&quot;Hello world!\n&quot;);return 0;&#125;</span></span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="addition">+int main() &#123;</span></span><br><span class="line"><span class="addition">+  for (;;) break;</span></span><br><span class="line"><span class="addition">+  printf(&quot;Hello world!\n&quot;);</span></span><br><span class="line"><span class="addition">+  return 0;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><p> chang-tidy 的输出</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang-tidy...............................................................Failed</span><br><span class="line">- hook <span class="built_in">id</span>: clang-tidy</span><br><span class="line">- <span class="built_in">exit</span> code: 1</span><br><span class="line"></span><br><span class="line">418 warnings and 1 error generated.</span><br><span class="line">Error <span class="keyword">while</span> processing /home/ubuntu/cpp-linter-hooks/testing/main.c.</span><br><span class="line">Suppressed 417 warnings (417 <span class="keyword">in</span> non-user code).</span><br><span class="line">Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.</span><br><span class="line">Found compiler error(s).</span><br><span class="line">/home/ubuntu/cpp-linter-hooks/testing/main.c:3:11: warning: statement should be inside braces [readability-braces-around-statements]</span><br><span class="line">  <span class="keyword">for</span> (;;) <span class="built_in">break</span>;</span><br><span class="line">          ^</span><br><span class="line">          &#123;</span><br><span class="line">/usr/include/stdio.h:33:10: error: <span class="string">&#x27;stddef.h&#x27;</span> file not found [clang-diagnostic-error]</span><br><span class="line"><span class="comment">#include &lt;stddef.h&gt;</span></span><br><span class="line">        ^~~~~~~~~~</span><br></pre></td></tr></table></figure></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>选择 CI 还是 git hook？</p><ul><li>如果你的团队已经在使用 pre-commit，那么推荐使用 git hook 这种方式，只需要添加 <a href="https://github.com/cpp-linter/cpp-linter-hooks">cpp-linter-hooks</a> 即可</li><li>如果不希望引入 pre-commit 则可以通过添加 CI 来进行检查。当然也可以两个都选。</li></ul><p>cpp-linter organization 是我创建的，由 <a href="https://github.com/2bndy5">Brendan Doherty</a> 和我为主要贡献者共同维护的开源项目，我们都是追求代码质量、力求构建最好的软件的开发者，为此我花费了很多业余时间在上面，但也学到了很多，后面我会分享其中一些有意思的实现方式。</p><p>目前 cpp-linter 在 GitHub 上提供了最好用的 C&#x2F;C++ Linter Action 和 clang-tools，欢迎大家使用，有什么意见或问题都可以通过 Issue 反馈。</p><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clang-Format </tag>
            
            <tag> Clang-Tidy </tag>
            
            <tag> Clang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to create GPG keys and add to GitHub</title>
      <link href="/2022/07/create-gpg-keys/"/>
      <url>/2022/07/create-gpg-keys/</url>
      
        <content type="html"><![CDATA[<h3 id="First-List-your-GPG-key"><a href="#First-List-your-GPG-key" class="headerlink" title="First, List your GPG key"></a>First, List your GPG key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If folders does not exist will create be related automatically</span></span><br><span class="line">$ gpg --list-keys</span><br><span class="line">gpg: directory <span class="string">&#x27;/home/ubuntu/.gnupg&#x27;</span> created</span><br><span class="line">gpg: keybox <span class="string">&#x27;/home/ubuntu/.gnupg/pubring.kbx&#x27;</span> created</span><br><span class="line">gpg: /home/ubuntu/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line"></span><br><span class="line">$ gpg --list-key</span><br></pre></td></tr></table></figure><h3 id="Second-generate-GPG-key"><a href="#Second-generate-GPG-key" class="headerlink" title="Second, generate GPG key"></a>Second, generate GPG key</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --gen-key</span><br><span class="line">gpg (GnuPG) 2.2.19; Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Note: Use <span class="string">&quot;gpg --full-generate-key&quot;</span> <span class="keyword">for</span> a full featured key generation dialog.</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: shenxianpeng</span><br><span class="line">Email address: xianpeng.shen@gmail.com</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">&quot;shenxianpeng &lt;xianpeng.shen@gmail.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (E)mail, or (O)kay/(Q)uit? O</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: key 5F72A7D009FC935A marked as ultimately trusted</span><br><span class="line">gpg: directory <span class="string">&#x27;/home/ubuntu/.gnupg/openpgp-revocs.d&#x27;</span> created</span><br><span class="line">gpg: revocation certificate stored as <span class="string">&#x27;/home/ubuntu/.gnupg/openpgp-revocs.d/F0F32CB8C65536ECE0187EAD5F72A7D009FC935A.rev&#x27;</span></span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa3072 2022-07-28 [SC] [expires: 2024-07-27]</span><br><span class="line">      F0F32CB8C65536ECE0187EAD5F72A7D009FC935A</span><br><span class="line">uid                      shenxianpeng &lt;xianpeng.shen@gmail.com&gt;</span><br><span class="line">sub   rsa3072 2022-07-28 [E] [expires: 2024-07-27]</span><br></pre></td></tr></table></figure><h3 id="Third-get-your-public-key-content"><a href="#Third-get-your-public-key-content" class="headerlink" title="Third, get your public key content"></a>Third, get your public key content</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get with your email</span></span><br><span class="line">gpg --armor --<span class="built_in">export</span> xianpeng.shen@gmail.com</span><br><span class="line"><span class="comment"># or with your pub key id</span></span><br><span class="line">pg --armor --<span class="built_in">export</span> F0F32CB8C65536ECE0187EAD5F72A7D009FC935A</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># public key content output below</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Fourth-add-the-public-key-content-GPG-keys-to-GitHub"><a href="#Fourth-add-the-public-key-content-GPG-keys-to-GitHub" class="headerlink" title="Fourth, add the public key content (GPG keys) to GitHub"></a>Fourth, add the public key content (GPG keys) to GitHub</h3><p>Open GitHub, Settings -&gt; SSH and GPG keys -&gt; New GPG key</p><p><img src="/2022/07/create-gpg-keys/add-gpg-key.png" alt="add-gpg-key"></p><p>Then when you commit with command <code>git commit -S -m &quot;Your commit message&quot;</code>, then a verified signature will show on GitHub</p><p><img src="/2022/07/create-gpg-keys/verified-signature.png" alt="verified-signature"></p><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> HowTo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 周的陪产假我一刻都没闲着</title>
      <link href="/2022/06/vacation-weekly-report/"/>
      <url>/2022/06/vacation-weekly-report/</url>
      
        <content type="html"><![CDATA[<p>有幸赶上了公司的政策变化，我有 12 周的陪产假来做全职奶爸，照顾家人的同时希望挤出时间来学习，毕竟在职期间很有有机会能有近 3 个月的假期。</p><p>照顾孩子兼顾学习真不是一件轻松的事情，我尽力兼顾了两者，做了如下的流水账记录。</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>我知道 12 周会很快过去，就在已经快要过去了 2 周时我决定有计划的来完成一些任务，比如：</p><ul><li><input disabled type="checkbox"> 完成《代码整洁之道》、《重构》以及《动手学习深度学习这三本书》的阅读和豆瓣评论</li><li><input disabled type="checkbox"> 为 pre-commit 写一个 clang-format 和 clang-tidy 的 <code>cpp-linter-hooks</code></li><li><input disabled type="checkbox"> 完成每个月 15 节英语课以及 3~4 的体育锻炼（游泳和足球）</li><li><input disabled type="checkbox"> 找一个可以作为长期业余参与的开源项目，例如 pytest，tox，pypa。</li></ul><p>也就是从休假的第 2 周开始，我开始记录每周的完成的小任务。</p><span id="more"></span><h2 id="周报"><a href="#周报" class="headerlink" title="周报"></a>周报</h2><p>第 11~12 周（8.15 - 8.28）- 最后两周</p><p>时间过得太快了，不知不觉就是假期的最后两周了。</p><ul><li>Validate VMs</li><li>更新关于 <code>setuptools_scm</code> 的使用。</li><li>在 cpp-linter Org 中做一些项目的修改和代码评审</li></ul><p>第 10 周（8.8 - 8.14）- 最后三周</p><ul><li>Validate VMs</li><li>总结关于 <code>setuptools_scm</code> 的使用。</li></ul><p>第 9 周（8.1 - 8.7）- 时间过得真快，转眼就到了陪产假的最后 4 周了</p><ul><li>Draft 一篇关于参与开源的文章</li><li>做了一些工作，以及 Troubleshooting support；参与开源项目和 Code Review。</li><li>游泳以及完成《重构》书评</li></ul><p>第 8 周（7.25 - 7.31）</p><ul><li>做 <code>cpp-linter</code> 里的一些项目的更新，做 Artifactory 的迁移和测试。</li><li>这周计划做的事情世纪没完成几样，比如写文章和看书。</li><li>游泳</li></ul><p>第 7 周（7.18 - 7.24）</p><ul><li>发现 Python 真是入门容易学好难… 初步学了一下 tox 和 mypy，会之后的 project 中尝试使用。</li><li>重构了代码，本打算并把 Code Coverage 写到 100 %，但没实现，pytest 还需要继续学。</li><li>在琢磨一个有意思的可以作为长期业余时间来做的项目，目前有个模糊的雏形，先试试看</li><li>《重构》书没怎么读，周六游泳可以继续</li></ul><p>第 6 周（7.11 - 7.17）</p><ul><li>完成了 <code>cpp-linter-hooks</code> 功能的开发并把它迁移到 cpp-linter org 下面。</li><li>创建了 <code>.github</code> 仓库，对于 org 这是一个很神奇的残酷，玩法很多，还在陆续探索中。</li><li>终于把读 Code Clean 的书评交了，还需继续读完成任务。</li><li>周五发了一篇公众号文章，是之前写的，整理终于发出了，这是 3 个月以来的第一次更新。</li><li>周日去游一次泳。</li></ul><p>第 5 周（7.4 - 7.10）</p><ul><li>上周主要是抽空写 <code>clang-tools-pip</code> 和 <code>cpp-linter-hooks</code> 这两个功能，目前完成大概 70%，预计本周可以基本结束。</li><li>工作上也花了点时间，修复了之前写的 pipeline 的几个问题</li><li>上周开始读《重构》了，但没多少时间花在读书上，没读几页。一致想更新公号文章，可惜挺花时间的</li><li>上周日游泳也没游，因为脖子坏了，可能是喂奶低头造成的 :(</li></ul><p>第 3 - 4 周：</p><ul><li>《代码整洁之道》 P56 - P130</li><li>在实现 <code>cpp-linter-hooks</code> 之前需要实现 install clang-tools with pip, 因此我创建了 <code>clang-tools-pip</code></li><li>去市游泳馆游了一次泳，第二次本已约好但临时有事取消了</li></ul><p>第 2 周：</p><ul><li>《代码整洁之道》 P26 - P56</li><li>创建了 <code>cpp-linter-hooks</code> 仓库，学习别人的代码</li><li>计划本周末和乔教练去游泳</li></ul><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Report </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Windows 做开发还能这么爽？WSL + VS Code + Docker Desktop 你值得有用</title>
      <link href="/2022/04/wsl/"/>
      <url>/2022/04/wsl/</url>
      
        <content type="html"><![CDATA[<p>很久以来很多程序员都遇到过在 Windows 做开发的各种不便：</p><p>比如设置开发环境不能像 Linux 和 Mac 那样只需要输入一行命令就能安装各种 command 和 package，因此有的程序员从此转到了 Mac 上开发，也有的干脆就使用 Linux 作为开发机，只有那些不得不使用 Windows 作为开发环境程序员还一直留在了 Windows 上继续凑合中。</p><p>直到 WSL 的到来，准确来说是 WSL2。</p><p>WSL + VS Code + Docker Desktop 这三剑客的组合，开始让我觉得在 Windows 上做开发是一件非常爽的事情。</p><h2 id="什么是-WSL"><a href="#什么是-WSL" class="headerlink" title="什么是 WSL"></a>什么是 WSL</h2><p>WSL 是 Windows Subsystem for Linux 的缩写，它是 Windows 10 操作系统的一项功能，使你能够在 Windows 上直接运行 Linux 文件系统，以及 Linux 命令行工具和 GUI 应用程序，并与传统的 Windows 桌面和应用程序一起运行。</p><blockquote><p>WSL 的最低版本要求是 Windows 10 version 1903 及更高。</p></blockquote><p>WSL 是专为那些需要使用 Linux 的开发人员所开发的，例如从事网络开发人员、开源项目、以及需要部署到 Linux 服务器环境的开发者。</p><p>WSL 适用于喜欢使用 Bash、常用 Linux 工具（sed、awk等）和 Linux 优先框架（Ruby、Python 等），同时也喜欢使用 Windows 作为生产力工具的人。</p><p>下面来看看 WSL 和虚拟机相比有哪些优势。</p><span id="more"></span><h2 id="使用-WSL-的几点优势"><a href="#使用-WSL-的几点优势" class="headerlink" title="使用 WSL 的几点优势"></a>使用 WSL 的几点优势</h2><ol><li>与完整的虚拟机相比，WSL 需要的资源（CPU、内存和存储）更少</li><li>你可以同时使用 Windows 和 Linux，并从 Linux 中访问你的 Windows 文件，有更好的交互体验。</li><li>最最重要的是，使用 WSL 结合 VS Code + Docker 既有 Linux 的完美体验感，也同时拥有在 Windows 上的办公生产力。这是虚拟机或是 Linux 操作系统所办不到。Mac 可以，但并不是所有人都适合 Mac。</li></ol><p>下面就来说说如何安装 WSL，以及和 VS Code + Docker 进行搭配使用。</p><h2 id="安装-WSL"><a href="#安装-WSL" class="headerlink" title="安装 WSL"></a>安装 WSL</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure><p>这个命令将启用所需的可选组件，下载最新的 Linux 内核，将 WSL 2 设置为你的默认值，并为你安装一个 Linux 发行版（默认为 Ubuntu）。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看可用的发行版列表</span></span><br><span class="line">C:\Users\xshen&gt;wsl <span class="literal">--list</span> <span class="literal">--online</span></span><br><span class="line">The following is a list of valid distributions that can be installed.</span><br><span class="line">Install <span class="keyword">using</span> <span class="string">&#x27;wsl --install -d &lt;Distro&gt;&#x27;</span>.</span><br><span class="line"></span><br><span class="line">NAME            FRIENDLY NAME</span><br><span class="line">Ubuntu          Ubuntu</span><br><span class="line">Debian          Debian GNU/Linux</span><br><span class="line">kali<span class="literal">-linux</span>      Kali Linux Rolling</span><br><span class="line">openS<span class="built_in">USE-42</span>     openSUSE Leap <span class="number">42</span></span><br><span class="line">SLES<span class="literal">-12</span>         SUSE Linux Enterprise Server v12</span><br><span class="line">Ubuntu<span class="literal">-16</span>.<span class="number">04</span>    Ubuntu <span class="number">16.04</span> LTS</span><br><span class="line">Ubuntu<span class="literal">-18</span>.<span class="number">04</span>    Ubuntu <span class="number">18.04</span> LTS</span><br><span class="line">Ubuntu<span class="literal">-20</span>.<span class="number">04</span>    Ubuntu <span class="number">20.04</span> LTS</span><br></pre></td></tr></table></figure><p>安装其他发行版，比如 Debian</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">-d</span> Debian</span><br></pre></td></tr></table></figure><p>更详细的请参考官方<a href="https://docs.microsoft.com/en-us/windows/wsl/install">文档</a></p><h2 id="WSL-VS-Code-演示"><a href="#WSL-VS-Code-演示" class="headerlink" title="WSL + VS Code 演示"></a>WSL + VS Code 演示</h2><p>以下以 Ubuntu 为例，演示从下载代码，并通过 VS Code 打开代码目录进行 Coding。</p><p>此时我已经通过 WSL 打开了已经安装好的 Ubuntu 操作系统了。</p><p><img src="/2022/04/wsl/ubuntu.png" alt="ubuntu"></p><p>首选下载代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@CN-L-2680:~$ git <span class="built_in">clone</span> https://github.com/cue-lang/cue.git --depth 1</span><br><span class="line">Cloning into <span class="string">&#x27;cue&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 1833, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (1833/1833), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1502/1502), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 1833 (delta 238), reused 1161 (delta 148), pack-reused 0</span><br><span class="line">Receiving objects: 100% (1833/1833), 1.53 MiB | 5.39 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (238/238), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>然后到下载好的代码目录下面，输入 <code>code .</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@CN-L-2680:~$ <span class="built_in">cd</span> cue/</span><br><span class="line">ubuntu@CN-L-2680:~/cue$ code .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有第一次才会安装 VS Code Server</span></span><br><span class="line">Installing VS Code Server <span class="keyword">for</span> x64 (dfd34e8260c270da74b5c2d86d61aee4b6d56977)</span><br><span class="line">Downloading: 100%</span><br><span class="line">Unpacking: 100%</span><br><span class="line">Unpacked 2341 files and folders to /home/ubuntu/.vscode-server/bin/dfd34e8260c270da74b5c2d86d61aee4b6d56977.</span><br></pre></td></tr></table></figure><p>第一次会自动下载并安装 VS Code Server，安装完成后会自动启动你本机上的 VS Code，并打开了 Ubuntu 上的代码目录，整个过程非常丝滑。</p><p>之后你就可以在 VS Code 上通过命令行 <code>apt-get</code> 命令安装你需要的任何软件了，真爽~</p><p><img src="/2022/04/wsl/vscode.png" alt="vscode"></p><blockquote><p>本机 VS Code 上需要安装微软出的 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">Remote - WSL</a> 插件；<br>另外，如果需要在 WSL 中使用 Docker，需要在 Windows 上预先安装 <a href="https://www.docker.com/products/docker-desktop/">Docker Desktop</a>。</p></blockquote><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> HowTo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Docker </tag>
            
            <tag> WSL </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Docker，containerd，CRI，CRI-O，OCI，runc 的解释以及它们是如何工作在一起的</title>
      <link href="/2022/03/container-ecosystem/"/>
      <url>/2022/03/container-ecosystem/</url>
      
        <content type="html"><![CDATA[<p>自 Docker 开启了使用容器的爆发式增长，有越来越多的工具和标准来帮助管理和使用这项容器化技术，与此同时也造成了有很多术语让人感到困惑。</p><p>比如 Docker, containerd, CRI, CRI-O, OCI, runc，本篇将介绍这些你听过但并不了解的术语，并解释容器生态系统是如何在一起工作的。</p><h2 id="容器生态系统"><a href="#容器生态系统" class="headerlink" title="容器生态系统"></a>容器生态系统</h2><p>容器生态系统是由许多令人兴奋的技术、大量的专业术语和大公司相互争斗组成的。</p><p>幸运的是，这些公司偶尔会在休战中走到一起合作，商定一些标准，这些标准有助于使这个生态系统在不同的平台和操作系统之间更具互操作性，并减少对单一公司或项目的依赖。</p><p>这张图显示了 Docker、Kubernetes、CRI、OCI、containerd 和 runc 在这个生态系统中是如何结合的。</p><span id="more"></span><p><img src="/2022/03/container-ecosystem/container-ecosystem.png" alt="container ecosystem"></p><p>其工作流程简单来说是这样的：</p><ol><li>Docker，Kubernetes 等工具来运行一个容器时会调用容器运行时（CRI）比如 containerd，CRI-O</li><li>通过容器运行时来完成容器的创建、运行、销毁等实际工作<ul><li>Docker 使用的是 containerd 作为其运行时；Kubernetes 支持 containerd，CRI-O 等多种容器运行时</li><li>这些容器运行时都遵循了 OCI 规范，并通过 runc 来实现与操作系统内核交互来完成容器的创建和运行</li></ul></li></ol><p>下面就分别介绍图中所提到的术语和规范。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>首先我们从大家都很熟悉的 Docker 开始，因为它是管理容器的最流行的工具。对很多人来说”Docker”这个名字本身就是”容器”的代名词。</p><p>Docker 启动了整个容器的革命，它创造了一个很好用的工具来处理容器也叫 Docker，这里最主要的要明白：</p><ul><li>Docker 并不是这个唯一的容器竞争者</li><li>容器也不再与 Docker 这个名字紧密联系在一起</li></ul><p>目前的容器工具中，Docker 只是其中之一，其他著名的容器工具还包括：<a href="https://podman.io/">Podman</a>，<a href="https://linuxcontainers.org/lxd/introduction/">LXC</a>，<a href="https://containerd.io/">containerd</a>，<a href="https://buildah.io/">Buildah</a> 等。</p><p>因此，如果你认为容器只是关于 Docker 的，那是片面的不对的。</p><h3 id="Docker-组成"><a href="#Docker-组成" class="headerlink" title="Docker 组成"></a>Docker 组成</h3><p>Docker 可以轻松地构建容器镜像，从 Docker Hub 中拉取镜像，创建、启动和管理容器。实际上，当你用 Docker 运行一个容器时实际上是通过 Docker 守护程序、containerd 和 runc 来运行它。</p><p><img src="/2022/03/container-ecosystem/docker.png"></p><p>为了实现这一切，Docker 是由这些项目组成（还有其他项目，但这些是主要的）。</p><ul><li>docker-cli：这是一个命令行工具，它是用来完成 <code>docker pull</code>, <code>build</code>, <code>run</code>, <code>exec</code> 等命令进行交互。</li><li>containerd：这是一个管理和运行容器的守护进程。它推送和拉动镜像，管理存储和网络，并监督容器的运行。</li><li>runc：这是低级别的容器运行时间（实际创建和运行容器的东西）。它包括 libcontainer，一个用于创建容器的基于 Go 的本地实现。</li></ul><h3 id="Docker-镜像"><a href="#Docker-镜像" class="headerlink" title="Docker 镜像"></a>Docker 镜像</h3><p>许多人所说的 Docker 镜像，实际上是以 Open Container Initiative（OCI）格式打包的镜像。</p><p>因此，如果你从 Docker Hub 或其他注册中心拉出一个镜像，你应该能够用 docker 命令使用它，或在 Kubernetes 集群上使用，或用 podman 工具以及任何其他支持 OCI 镜像格式规范的工具。</p><h3 id="Dockershim"><a href="#Dockershim" class="headerlink" title="Dockershim"></a>Dockershim</h3><p>在 Kubernetes 包括一个名为 dockershim 的组件，使它能够支持 Docker。但 Docker 由于比 Kubernetes 更早，没有实现 CRI，所以这就是 dockershim 存在的原因，它支持将 Docker 被硬编码到 Kubernetes 中。随着容器化成为行业标准，Kubernetes 项目增加了对额外运行时的支持，比如通过 Container Runtime Interface (CRI) 容器运行时接口来支持运行容器。因此 dockershim 成为了 Kubernetes 项目中的一个异类，对 Docker 和 dockershim 的依赖已经渗透到云原生计算基金会（CNCF）生态系统中的各种工具和项目中，导致代码脆弱。</p><p>2022 年 4 月 dockershim 将会从 Kubernetes 1.24 中完全移除。今后 Kubernetes 将取消对 Docker 的直接支持，而倾向于只使用实现其容器运行时接口的容器运行时，这可能意味着使用 containerd 或 CRI-O。这并不意味着 Kubernetes 将不能运行 Docker 格式的容器。containerd 和 CRI-O 都可以运行 Docker 格式（实际上是 OCI 格式）的镜像，它们只是无需使用 docker 命令或 Docker 守护程序。</p><h2 id="Container-Runtime-Interface-CRI"><a href="#Container-Runtime-Interface-CRI" class="headerlink" title="Container Runtime Interface (CRI)"></a>Container Runtime Interface (CRI)</h2><p>CRI（容器运行时接口）是 Kubernetes 用来控制创建和管理容器的不同运行时的 API，它使 Kubernetes 更容易使用不同的容器运行时。它一个插件接口，这意味着任何符合该标准实现的容器运行时都可以被 Kubernetes 所使用。</p><p>Kubernetes 项目不必手动添加对每个运行时的支持，CRI API 描述了 Kubernetes 如何与每个运行时进行交互，由运行时决定如何实际管理容器，因此只要它遵守 CRI 的 API 即可。</p><p><img src="/2022/03/container-ecosystem/cri.png"></p><p>你可以使用你喜欢的 containerd 来运行你的容器，也可以使用 CRI-O 来运行你的容器，因为这两个运行时都实现了 CRI 规范。</p><h2 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h2><p>containerd 是一个来自 Docker 的高级容器运行时，并实现了 CRI 规范。它是从 Docker 项目中分离出来，之后 containerd 被捐赠给云原生计算基金会（CNCF）为容器社区提供创建新容器解决方案的基础。</p><p>所以 Docker 自己在内部使用 containerd，当你安装 Docker 时也会安装 containerd。</p><p>containerd 通过其 CRI 插件实现了 Kubernetes 容器运行时接口（CRI），它可以管理容器的整个生命周期，包括从镜像的传输、存储到容器的执行、监控再到网络。</p><h2 id="CRI-O"><a href="#CRI-O" class="headerlink" title="CRI-O"></a>CRI-O</h2><p>CRI-O 是另一个实现了容器运行时接口（CRI）的高级别容器运行时，可以使用 OCI（开放容器倡议）兼容的运行时，它是 containerd 的一个替代品。</p><p>CRI-O 诞生于 RedHat、IBM、英特尔、SUSE、Hyper 等公司。它是专门从头开始创建的，作为 Kubernetes 的一个容器运行时，它提供了启动、停止和重启容器的能力，就像 containerd 一样。</p><h2 id="Open-Container-Initiative-OCI"><a href="#Open-Container-Initiative-OCI" class="headerlink" title="Open Container Initiative (OCI)"></a>Open Container Initiative (OCI)</h2><p>OCI 开放容器倡议，是一个由科技公司组成的团体，其目的是围绕容器镜像和运行时创建开放的行业标准。他们维护容器镜像格式的规范，以及容器应该如何运行。</p><p>OCI 背后的想法是，你可以选择符合规范的不同运行时，这些运行时都有不同的底层实现。</p><p>例如，你可能有一个符合 OCI 的运行时用于你的 Linux 主机，另一个用于你的 Windows 主机。这就是拥有一个可以由许多不同项目实施的标准的好处。这种同样的 “一个标准，多种实现” 的方法其实还有很多都在使用，从蓝牙设备到 Java APIs。</p><h2 id="runc"><a href="#runc" class="headerlink" title="runc"></a>runc</h2><p>runc 是轻量级的通用运行时容器，它遵守 OCI 规范，是实现 OCI 接口的最低级别的组件，它与内核交互创建并运行容器。</p><p>runc 为容器提供了所有的低级功能，与现有的低级 Linux 功能交互，如命名空间和控制组，它使用这些功能来创建和运行容器进程。</p><p>runc 的几个替代品：</p><ul><li><a href="https://github.com/containers/crun">crun</a> 一个用 C 语言编写的容器运行时（相比之下，runc 是用Go编写的。）</li><li>来自 Katacontainers 项目的 <a href="https://github.com/kata-containers/kata-containers">kata-runtime</a>，它将 OCI 规范实现为单独的轻量级虚拟机（硬件虚拟化）。</li><li>Google 的 <a href="https://gvisor.dev/">gVisor</a>，它创建了拥有自己内核的容器。它在其运行时中实现了 OCI，称为 runsc。</li></ul><p>runc 是一个在 Linux 上运行容器的工具，所以这意味着它可以在 Linux 上、裸机上或虚拟机内运行。</p><p>在 Windows 上，它略有不同，与 runc 相当的是微软的主机计算服务（HCS），它包括一个叫 <a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd">runhcs</a> 的工具，它本身是 runc 的一个分叉，也实现了开放容器倡议的规范。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本篇中，我们看到 Docker 只是容器生态系统中的一个小部分。另外还有一堆开放的标准，这就使得不同的实现互相之间是可替换的。</p><p>这就是为什么有 CRI 和 OCI 标准，以及 containerd、runc 和 CRI-O 等项目存在的原因了。</p><p>现在你知道了关于容器这个有趣而又略显复杂的世界的一切，下次和别人讨论时，不要说你在使用 “Docker 容器” :)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.tutorialworks.com/difference-docker-containerd-runc-crio-oci/">The differences between Docker, containerd, CRI-O and runc</a></p></blockquote><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> containerd </tag>
            
            <tag> CRI </tag>
            
            <tag> CRI-O </tag>
            
            <tag> OCI </tag>
            
            <tag> runc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to enable, configure and disable Jenkins LDAP</title>
      <link href="/2022/03/jenkins-ldap-configuration/"/>
      <url>/2022/03/jenkins-ldap-configuration/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In organizations, using LDAP login very common way for users to log in with their credentials.</p><h2 id="How-to-configure-LDAP"><a href="#How-to-configure-LDAP" class="headerlink" title="How to configure LDAP"></a>How to configure LDAP</h2><p>Preparation: Installed LDAP Jenkins plugin</p><p><img src="/2022/03/jenkins-ldap-configuration/ldap-plugin.png" alt="LDAP plugin"></p><p>About how to configure it, you can refer to Jenkins LDAP Plugin documentation <a href="https://plugins.jenkins.io/ldap/">https://plugins.jenkins.io/ldap/</a></p><p>This is my LDAP configuration just for testing.</p><span id="more"></span><p><img src="/2022/03/jenkins-ldap-configuration/ldap-configure1.png" alt="LDAP configure1"></p><p><img src="/2022/03/jenkins-ldap-configuration/ldap-configure2.png" alt="LDAP configure2"></p><h2 id="Can-not-login-with-LDAP"><a href="#Can-not-login-with-LDAP" class="headerlink" title="Can not login with LDAP?"></a>Can not login with LDAP?</h2><p>Sometimes, for some reason, there is a problem with your organization’s LDAP server and you can’t log in to Jenkins using LDAP, but you need to use Jenkins now.</p><p>You can disable LDAP authentication by changing <code>config.xml</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Login, cd to jenkins server folder</span></span><br><span class="line">$ <span class="built_in">cd</span> /var/lib/jenkins/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Highly rememend you to backup config.xml before making any change !!!</span></span><br><span class="line"><span class="comment"># If you don&#x27;t backup config.xml, you&#x27;ll lost your LDAP configration after reboot service.</span></span><br><span class="line">$ <span class="built_in">cp</span> config.xml config.xml.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify config.xml from</span></span><br><span class="line">&lt;useSecurity&gt;<span class="literal">true</span>&lt;/useSecurity&gt;</span><br><span class="line"><span class="comment"># To</span></span><br><span class="line">&lt;useSecurity&gt;<span class="literal">false</span>&lt;/useSecurity&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restart Jenkins server</span></span><br><span class="line">sudo service jenkins restart</span><br></pre></td></tr></table></figure><p>Then you can log into the Jenkins server again.</p><p>Once your organization’s LDAP works again, you can replace <code>config.xml</code> with your backup config.xml file. Then your users can continue to log in via LDAP.</p>]]></content>
      
      
      <categories>
          
          <category> HowTo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> LDAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靠谱：在不删除和重建 GitHub 仓库的情况下与父(Fork)仓库分离(Unfork)</title>
      <link href="/2022/03/unfork-github-repo/"/>
      <url>/2022/03/unfork-github-repo/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有开发者、甚至公司可能会遇到过以下几个问题：</p><ol><li>最开始 Fork 了一个仓库，之后做了大量的修改，从功能到开发语言，已经与父仓库各自发展了</li><li>由于是 Fork 的仓库，在每次提 Pull Request 的默认目标分支是父仓库，一不注意就会提 PR 到父仓库里去了</li><li>Fork 的仓库有人贡献并使用了，但不能显示贡献者，以及该项目被哪些其他的项目所使用，这不利于项目的发展</li></ol><p>基于这些问题，开发者会考虑与父仓库进行分离，但目前 GitHub 没有提供 Unfork&#x2F;Detach 的功能。</p><p>如果直接删除项目并重建可以达到分离的目的，但这样会丢失一些重要的信息，比如项目中的 Issues，Wikis 以及 Pull Requests 等。</p><blockquote><p>Unfork 跟某节旗下某引擎白嫖 Apache SkyWalking 有本质区别，它更像是 Hudson 和 Jenkins 的分道扬镳。</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在经过一番调查和测试，目前最可行的办法就是通过 GitHub Support 来处理，具体操作如下：</p><span id="more"></span><ol><li>打开这个链接：<a href="https://support.github.com/contact?tags=rr-forks">https://support.github.com/contact?tags=rr-forks</a></li><li>选择你的账户或是组织，然后在 Subject 中输入 “unfork” 会自动弹出虚拟助手，选择虚拟机助手<br> <img src="/2022/03/unfork-github-repo/type-unfork.png"></li><li>然后根据虚拟助手的问题然后选择答案（如下是部分截图）<br>  <img src="/2022/03/unfork-github-repo/virtual-assistant-1.png"></li><li>最后这些对话会自动转换成文字脚本，然后 Send request，等着 Support 处理就可以了（不会太久）<br> <img src="/2022/03/unfork-github-repo/virtual-assistant-2.png"></li></ol><p>这里要注意一下，如果你的仓库被其他人 Fork 了，你想跟父仓库分离之后继续保留你的子仓库的 Fork 记录，你应该选择 “Bring the child forks with the repository”。</p><p>另外，通过其他方式，比如命令 <code>git clone --bare</code> 和 <code>git push --mirror</code>，可以保留完成的 Git 历史，但不能保留 Issues，Wikis 以及 Pull Requests 等信息。</p><p>希望对有需要的你有所帮助。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/16052477/delete-fork-dependency-of-a-github-repository">Delete fork dependency of a GitHub repository</a></li><li><a href="https://stackoverflow.com/questions/29326767/unfork-a-github-fork-without-deleting/41486339#41486339">Unfork a Github fork without deleting</a></li></ul><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> HowTo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> Fork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Jenkins 上用了这么久的 Groovy，是时候认识一下它了</title>
      <link href="/2022/03/groovy/"/>
      <url>/2022/03/groovy/</url>
      
        <content type="html"><![CDATA[<p>在使用 Jenkins 和 Groovy 越久，我就这样的疑问：</p><p>Groovy 到底是什么语言？<br>Groovy 有哪些特性？<br>Groovy 和 Java 有什么区别？<br>Groovy 和 Java 如何选择？<br>Groovy 在整个开发语言中占什么位置？要不要学？</p><p>本篇我的学习结果的分享，希望也能帮助你解答以上的这些问题。</p><h2 id="什么是-Groovy"><a href="#什么是-Groovy" class="headerlink" title="什么是 Groovy"></a>什么是 Groovy</h2><p>Apache Groovy 是一种强大的、可选类型的动态语言，具有静态类型和静态编译功能，适用于 Java 平台，旨在通过简洁、熟悉且易于学习的语法提高开发人员的工作效率。<br>它与任何 Java 程序顺利集成，并立即为你的应用程序提供强大的功能，包括脚本功能、特定领域语言创作、运行时和编译时元编程和函数式编程。</p><h2 id="Groovy-的特性"><a href="#Groovy-的特性" class="headerlink" title="Groovy 的特性"></a>Groovy 的特性</h2><p>翻译官方的说法，Groovy 有以下六大特性。</p><ol><li>平坦的学习曲线 - 简洁、易读且富有表现力的语法，Java 开发人员易于学习</li><li>强大的功能 - 闭包、构建器、运行时和编译时元编程、函数式编程、类型推断和静态编译</li><li>流畅的 Java 集成 - 与 Java 和任何第三方库无缝、透明地集成和互操作</li><li>领域特定语言 - 灵活可延展的语法，先进的集成和定制机制，在你的应用程序中集成可读的业务规则</li><li>充满活力和丰富的生态系统 - Web 开发、响应式应用程序、并发&#x2F;异步&#x2F;并行库、测试框架、构建工具、代码分析、GUI 构建</li><li>脚本和测试胶水 - 非常适合编写简洁和可维护的测试，以及所有构建和自动化任务</li></ol><h2 id="Groovy-和-Java-的区别"><a href="#Groovy-和-Java-的区别" class="headerlink" title="Groovy 和 Java 的区别"></a>Groovy 和 Java 的区别</h2><span id="more"></span><p><img src="/2022/03/groovy/groovy-vs-java.png" alt=" Groovy vs Java"></p><ol><li>Groovy 是一种编程语言，也支持脚本语言；Java 是一种面向对象的编程语言。</li><li>Groovy 支持多方法，运行方法的选择将在运行时选择；Java 提供多方法的声明，在编译时而不是运行时选择。</li><li>Groovy 中，自动资源管理机制是不存在的，静态的、匿名的内部类；Java 从 Java7 版本开始就提供了自动资源管理，在内部静态类或匿名类方面占上风。</li><li>Groovy 中，有一些函数式编程特性，如 Lambda 函数，函数式接口；而 Java 从 JDK 8 版本开始就有 Lambda 函数、函数式接口和许多其他的流和并行操作功能。</li><li>Groovy 可以用单引号或双引号格式定义和声明字符串和字符字面；Java 只有双引号格式来声明和定义字符串字面或字符字面。</li><li>Groovy 中所有东西都是一个对象，并且只使用对象。因此，不存在自动装箱或拆箱的概念，也不存在基元的转换；相反，Java 有基元数据类型和 Wrapper 类，可以显式或隐式地进行自动装箱和自动拆箱。</li><li>Groovy 中，数据类型的自动拓宽和缩小有很多宽广的范围，有很多转换；而Java在数据类型的缩小或拓宽方面有限制。</li><li>Groovy 对其所有类型的类成员或数据都有一个默认的访问修饰符；而Java的默认访问级别是包级，取决于类成员的类型。</li><li>Groovy 在其类中自动生成 getters 和 setter 来访问和修改类的成员；而在 Java 中，它们必须在类中明确提到访问修饰符。</li><li>Groovy 有 Groovy beans；而Java有Java beans。</li><li>Groovy 也被称为 Java 的超集，因为 Java 程序可以在 Groovy 环境中运行。反过来并不一定。</li><li>Groovy 在定义类型时有更简单的语法，只需使用 def 来声明一个变量；Java有不同类型的类型名称来声明变量或类的任何方法或成员。</li><li>Groovy 不要求任何主方法或方法的入口点来运行类或任何程序；而 Java 则要求类中的 main 方法来运行程序。</li></ol><!-- more --><h2 id="Groovy-和-Java-如何选择"><a href="#Groovy-和-Java-如何选择" class="headerlink" title="Groovy 和 Java 如何选择"></a>Groovy 和 Java 如何选择</h2><ul><li>如果可扩展性和性能至关重要并且公司开发 Web 应用程序，当然是 Java。比如电商、银行、金融、国防、医疗保健等领域的大公司都会选择 Java，因为它经过时间证明，通常用于开发复杂的企业项目。</li><li>Groovy 可以用来编排一些 Pipeline，自动化，测试任务，因为它既是编程语言也是一种出色的脚本语言，功能强大且易于学习。</li></ul><h2 id="Groovy-目前流行排名"><a href="#Groovy-目前流行排名" class="headerlink" title="Groovy 目前流行排名"></a>Groovy 目前流行排名</h2><p><img src="/2022/03/groovy/2022-02.png" alt="TIOBE index"></p><p>我们从这张图看到 2022 年 Groovy 语言的排行有一个非常大的下滑，从之前的排名 12 直接跌倒了 20。</p><p>从数据上 2022 年 2 月 Groovy 有小幅减少（从 0.76，%0.74%），但这不是主要原因，主要是很可能是因为 TIOBE index 从 Alexa 更换为 Similarweb 网络流量引擎导致的波动。</p><p>这些语言的排名上升包括：Assembly language，Go，Swift, MATLAB, Delphi&#x2F;Object Pascal, Classic Visual Basic, Objective-C 的增长抢占了 Groovy 原有的位置。</p><p><img src="/2022/03/groovy/groovy.png" alt="TIOBE index for Groovy"></p><p>另外从 Groovy 的流行历史来看，它目前还是有很多人在使用的。开发者或许不会把它当作第一语言，但作为脚本语言学习一下还是可以的。</p><p>对于使用 Jenkins Shared Libraries 的 DevOps 工程师，需要学习 Groovy。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Groovy vs Java: <a href="https://flyoutsourcing.com/blog/groovy-vs.-java-what-suits-your-needs.html">https://flyoutsourcing.com/blog/groovy-vs.-java-what-suits-your-needs.html</a></li><li>Differences with Java：<a href="https://groovy-lang.org/differences.html">https://groovy-lang.org/differences.html</a></li><li>TIOBE index：<a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Java </tag>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resolved - The Pip Inspector tree parse failed to produce output</title>
      <link href="/2022/03/blackduck-troubleshooting/"/>
      <url>/2022/03/blackduck-troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failure: PIP - Pip Inspector</span><br><span class="line">  The Pip Inspector tree parse failed to produce output.</span><br><span class="line"></span><br><span class="line">Overall Status: FAILURE_DETECTOR - Detect had one or more detector failures <span class="keyword">while</span> extracting dependencies.</span><br></pre></td></tr></table></figure><p>For more output please click to expand.</p><details><summary>👉 Click to see more output 👈</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[main] --- ======== Detect Issues ========</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- DETECTORS:</span><br><span class="line">[main] --- Detector Issue</span><br><span class="line">[main] --- /workdir/test</span><br><span class="line">[main] --- Failure: PIP - Pip Inspector</span><br><span class="line">[main] --- The Pip Inspector tree parse failed to produce output.</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- ======== Detect Result ========</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- Black Duck Project BOM: https://org.blackducksoftware.com/api/projects/246c8952-7cb8-40e9-9987-35f7d4602ae1/versions/e1cb4204-42d0-4445-8675-978df62b150d/components</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- ======== Detect Status ========</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- GIT: SUCCESS</span><br><span class="line">[main] --- PIP: FAILURE</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- Signature scan / Snippet scan on /workdir/test: SUCCESS</span><br><span class="line">[main] --- Overall Status: FAILURE_DETECTOR - Detect had one or more detector failures <span class="keyword">while</span> extracting dependencies. Check that all projects build and your environment is configured correctly.</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- If you need <span class="built_in">help</span> troubleshooting this problem, generate a diagnostic zip file by adding <span class="string">&#x27;-d&#x27;</span> to the <span class="built_in">command</span> line, and provide it to Synopsys Technical Support. See <span class="string">&#x27;Diagnostic Mode&#x27;</span> <span class="keyword">in</span> the Detect documentation <span class="keyword">for</span> more information.</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- ===============================</span><br><span class="line">[main] ---</span><br><span class="line">[main] --- Detect duration: 00h 00m 54s 951ms</span><br><span class="line">[main] --- Exiting with code 5 - FAILURE_DETECTOR</span><br></pre></td></tr></table></figure></details><p>ENVIRONMENT:</p><ul><li>Product: synopsys-detect-7.11.1.jar</li><li>Others: OpenJDK 11, Python 3.6 and Python 2.7.5</li></ul><h2 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h2><span id="more"></span><p>More output of this run, I see it used <code>python</code> (which is python2) not <code>python3</code>,<br>so run <a href="https://github.com/blackducksoftware/synopsys-detect/blob/master/src/main/resources/pip-inspector.py">pip-inspector.py</a> failed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEBUG [main-Executable_Stream_Thread] --- Python 2.7.5</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[main] --- Running executable &gt;/usr/bin/python /home/****/blackduck/runs/2022-03-01-07-45-05-986/shared/pip/pip-inspector.py --projectname=<span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Link python to python3, it works in my case.</p><p>For example</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># save python to other name</span></span><br><span class="line">sudo <span class="built_in">mv</span> /usr/bin/python /usr/bin/python.old</span><br><span class="line"><span class="comment"># link python3 to python</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>Then try to run <code>bash &lt;(curl -s -L https://detect.synopsys.com/detect7.sh)</code> again, my test commands:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://detect.synopsys.com/detect7.sh) --blackduck.url=https://org.blackducksoftware.com --blackduck.api.token=MmMwMjdlOTctMT --detect.project.name=HUB --detect.project.version.name=TEST_v1.1.1 --detect.source.path=/workdir/test --logging.level.com.synopsys.integration=DEBUG --blackduck.trust.cert=TRUE --detect.tools.excluded=POLARIS --detect.blackduck.signature.scanner.snippet.matching=SNIPPET_MATCHING</span><br></pre></td></tr></table></figure><p>If you want to use Docker to do Blackduck scan, you can create a Docker image. like this</p><!-- more --><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set DETECT version you need, if it&#x27;s empty download the latest version.</span></span><br><span class="line"><span class="comment"># https://sig-repo.synopsys.com/artifactory/bds-integrations-release/com/synopsys/integration/synopsys-detect</span></span><br><span class="line"><span class="keyword">ENV</span> DETECT_LATEST_RELEASE_VERSION=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get upgrade -y \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">        git \</span></span><br><span class="line"><span class="language-bash">        python \</span></span><br><span class="line"><span class="language-bash">        pip \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get autoremove \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get clean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -sSOL https://detect.synopsys.com/detect7.sh &amp;&amp; bash detect7.sh --<span class="built_in">help</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /usr/bin/python \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">ln</span> -s /usr/bin/python3 /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /src</span></span><br></pre></td></tr></table></figure><p>Hope this help.</p><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> BlackDuck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> BlackDuck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 年最值得关注的 DevOps 趋势和问答</title>
      <link href="/2022/02/devops-trends-2022/"/>
      <url>/2022/02/devops-trends-2022/</url>
      
        <content type="html"><![CDATA[<p>DevOps 是 IT 界最近几年的一个热门话题，而且还会越来越热。</p><p>最近有幸和一位做传播咨询的读者朋友交流关于 2022 年最值得关注的 DevOps 趋势以及一些问题和回答，分享给大家。</p><h2 id="行业趋势"><a href="#行业趋势" class="headerlink" title="行业趋势"></a>行业趋势</h2><h3 id="趋势一：转向无服务器计算"><a href="#趋势一：转向无服务器计算" class="headerlink" title="趋势一：转向无服务器计算"></a>趋势一：转向无服务器计算</h3><p>无服务器计算是一种新兴趋势，实际上已经存在了十多年。企业购买无服务器框架需要一段时间，主要是因为对行业支持和对投资回报的担忧。</p><p>无服务器具有许多越来越难以忽视的优势，主要的两个最大好处是效率和可靠性。没有基础设施管理的负担，企业可以将资源集中在正重要的事项上。此外，无服务器还降低了传统框架可能出现的潜在维护问题的风险。</p><p>无服务器提供固有的可扩展性和可靠性并自动化开发人员不喜欢的日常操作任务，2022 年无服务器计算会经历下一次发展。</p><h3 id="趋势二：微服务架构增长"><a href="#趋势二：微服务架构增长" class="headerlink" title="趋势二：微服务架构增长"></a>趋势二：微服务架构增长</h3><p>随着无服务器计算在 2022 年的发展，微服务也将如此。</p><p>微服务架构是将单体应用分化为小的独立单元，或服务，从而为大型团队提供了更大的灵活性。它有以下优势：</p><ul><li>为企业提供比单体应用程序更好的可扩展性和敏捷性</li><li>开发人员可以使用他们熟悉的编程语言和工具，消除传统应用程序开发的局限</li><li>开发人员能够在不破坏整个代码库的情况下部署小的特性或功能</li><li>DevOps 团队可以根据业务需求来扩展每个应用部分，而不是一次性扩展整个应用</li><li>出现问题微服务可以轻松控制问题，而不会中断整个应用程序</li></ul><p>当然也必须认识到微服务的一个弊端，如果实施不佳可能导致严重问题，包括数据丢失、可靠性差和安全风险。</p><h3 id="趋势三：Kubernetes-成为基础架构"><a href="#趋势三：Kubernetes-成为基础架构" class="headerlink" title="趋势三：Kubernetes 成为基础架构"></a>趋势三：Kubernetes 成为基础架构</h3><span id="more"></span><p>Kubernetes，也称 K8s，是容器编排开源平台，它能够与容器组交互，同时管理更多集群。除了容器管理，还提供安全、网络和存储服务，自我监控，节点和容器的健康状况检查。它可以处理从虚拟机集群管理到负载平衡等所有方方面面，提高生产力，简化 DevOps 开发、测试和部署流程。</p><p>根据 Flexera 的 2021 年云计算状况报告，48% 的企业使用 Kubernetes，另有 25% 的企业计划使用它。另外 53% 的组织使用 Docker，21% 的组织计划使用。</p><h3 id="趋势四：DevSecOps-成为重要组成部分"><a href="#趋势四：DevSecOps-成为重要组成部分" class="headerlink" title="趋势四：DevSecOps 成为重要组成部分"></a>趋势四：DevSecOps 成为重要组成部分</h3><p>安全性正在成为 DevOps 领域的另一个日益关注的问题。</p><p>为了避免网络攻击，许多大型企业正在将安全性集成到他们的 DevOps 流程中。从 DevOps 到 DevSecOps 的转变预计在 2022 会有更多公司在软件开发生命周期的早期加入安全控制。<br>这使 DevOps 团队能够在开发阶段持续监控和修复安全缺陷，从而提高交付速度和质量。DevSecOps 正在成为许多公司组织结构图的重要组成部分。</p><h2 id="行业问答"><a href="#行业问答" class="headerlink" title="行业问答"></a>行业问答</h2><!-- more --><h3 id="问题一-DevOps-整个目前行业头部本土和国际玩家有哪些（GitLab-？"><a href="#问题一-DevOps-整个目前行业头部本土和国际玩家有哪些（GitLab-？" class="headerlink" title="问题一: DevOps 整个目前行业头部本土和国际玩家有哪些（GitLab)？"></a>问题一: DevOps 整个目前行业头部本土和国际玩家有哪些（GitLab)？</h3><p>以我所在的外企而言通常是选择国际玩家，以最常用的代码管理和项目管理的工具为例：</p><ul><li>上了年头的外企大公司通常在使用 Atlassian 家的 Jira 和 Bitbucket。船大难掉头，选择 GitLab，GitHub 这样一站式的 DevOps 迁移成本很高，需要有足够的理由才可能换工具。</li><li>对于年轻的公司，GitLab 和 GitHub 都是很好的选择。GitLab 在企业内部建立私服居多；GitHub 也提供企业版私服，但对于开源项目而言 GitHub 依然是代码托管的首选。</li></ul><p>其他用到的付费级 DevOps 工具还包括 Synopsys (Polaris, Blackduck)，Jfrog (Artifactory)，SonarQube 等。</p><h3 id="问题二-行业目前有哪些重点趋势？比如安全这块，是不是目前行业关注度比较高？有哪些工具？"><a href="#问题二-行业目前有哪些重点趋势？比如安全这块，是不是目前行业关注度比较高？有哪些工具？" class="headerlink" title="问题二: 行业目前有哪些重点趋势？比如安全这块，是不是目前行业关注度比较高？有哪些工具？"></a>问题二: 行业目前有哪些重点趋势？比如安全这块，是不是目前行业关注度比较高？有哪些工具？</h3><p>安全领域的关注度在逐年升高，尤其在外企很注重安全这块，他们愿意花钱来购买安全扫描工具来扫描代码，甚至还会要求所有的发布的产品代码中不能有高危漏洞。</p><p>一些常用的工具包括：静态代码扫描，比如 Polaris, Veracode, Snyk, SonarQube, PVS-Studio；代码组成分析，比如 Blackduck，X-Ray 等等。</p><h3 id="问题三：企业在选择-DevOps-平台时主要考虑的因素有哪些？比如数据库安全，公司成熟度，海外知名度，等等"><a href="#问题三：企业在选择-DevOps-平台时主要考虑的因素有哪些？比如数据库安全，公司成熟度，海外知名度，等等" class="headerlink" title="问题三：企业在选择 DevOps 平台时主要考虑的因素有哪些？比如数据库安全，公司成熟度，海外知名度，等等"></a>问题三：企业在选择 DevOps 平台时主要考虑的因素有哪些？比如数据库安全，公司成熟度，海外知名度，等等</h3><p>我认为主要考虑公司的知名度，其次产品的知名度，如果是开源产品会着重关注 GitHub 上的 Contributors 数量，它更能代表社区的活跃度，其次是 Fork 和 Star 数量。</p><h3 id="问题四：目前-DevOps-处于哪个阶段-未来的发展机会是在哪里？"><a href="#问题四：目前-DevOps-处于哪个阶段-未来的发展机会是在哪里？" class="headerlink" title="问题四：目前 DevOps 处于哪个阶段? 未来的发展机会是在哪里？"></a>问题四：目前 DevOps 处于哪个阶段? 未来的发展机会是在哪里？</h3><p>DevOps 市场目前处在相对成熟的阶段，每个细分领域都有很多工具可以选择。未来基础设施会更多的向容器云方向发展。</p><p>具有创新的 DevOps 产品依然会很有市场，像是 GitLab，HashiCorp 等公司的产品，他们在短短十年内成为世界级的软件公司。</p><h3 id="问题五：有哪些主流或平时重点关注的行业媒体号或自媒体公众号？"><a href="#问题五：有哪些主流或平时重点关注的行业媒体号或自媒体公众号？" class="headerlink" title="问题五：有哪些主流或平时重点关注的行业媒体号或自媒体公众号？"></a>问题五：有哪些主流或平时重点关注的行业媒体号或自媒体公众号？</h3><p>会经常看一些 DevOps 相关的以及 InfoQ，阿里、腾讯、美团等技术公众号。</p><p>还会看 YouTube 上一些 DevOps 的个人及公司频道：TechWorld with Nana, CloudBeesTV，CNCF，DevOps Paradox，DevOps Toolkit 等。</p><h3 id="问题六：除了公众号外，你平时会上哪些行业社区？比如说-GitHub-或-CSDN？"><a href="#问题六：除了公众号外，你平时会上哪些行业社区？比如说-GitHub-或-CSDN？" class="headerlink" title="问题六：除了公众号外，你平时会上哪些行业社区？比如说 GitHub 或 CSDN？"></a>问题六：除了公众号外，你平时会上哪些行业社区？比如说 GitHub 或 CSDN？</h3><p>最常看的是 GitHub 以及 GitHub Trending 来看最近受关注的项目。还会</p><p>社区会定期去看 <a href="https://dev.to/">DEV Community</a>, <a href="https://medium.com/">Medium</a>, <a href="https://www.infoq.cn/">InfoQ</a> 。会看知乎上一些话题下的精华，很少看 CSDN，懂得都懂。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.itbusinessedge.com/development/devops-trends-2022/">Top DevOps Trends to Watch in 2022</a></li><li><a href="https://blog.qasource.com/devops-trends-to-look-out-for-in-2022">DevOps Trends To Look Out for in 2022</a></li></ul><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> DevSecOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从QA到DEV到DEVOPS，码字五年有哪些收获</title>
      <link href="/2022/02/from-qa-to-dev-to-devops/"/>
      <url>/2022/02/from-qa-to-dev-to-devops/</url>
      
        <content type="html"><![CDATA[<p>在写博客和公众号这件事上，不知不觉已经是我的第五个年头了，没想过能这么久。</p><p>借此分享一下这些年我的职业线路的变化，以及写博客&amp;公众号有什么收获，算是自己过去的一个总结，如果能有点共鸣和帮助就更好了。</p><h2 id="从QA到DEV到DEVOPS"><a href="#从QA到DEV到DEVOPS" class="headerlink" title="从QA到DEV到DEVOPS"></a>从QA到DEV到DEVOPS</h2><p>最早关注我公众号读者朋友大概都是因为软件测试而结缘的。是的，我做了近 10 的软件测试工作，先后在 SIMcom、东软、京东商城、外企从事过功能&amp;自动化&amp;性能测试工作。</p><p>从功能测试入行开始，我慢慢地感受到编程不是开发的独门武功，它也是测试工程师的必备技能，只有具备良好的编码能力，才能去做自动化、Unittest、以及测试开发等工作。</p><p>当我做了自动化测试工程师，我又发现相对于“发现”问题，“解决”问题更令我愉悦。我开始梦想有机会能去做开发，这样不但可以提高自己的编程能力，另外开发、测试都懂也能为自己今后的职业发展找到更多可能性。</p><p>最终是因为有这样的机会+自己的主动+编码过得去，我从测试转到了开发。起初的艰难和压力都是我工作近 10 年来前所未有的，白天看代码、晚上看代码、周末看代码… 天天如此。经过了半年多的努力，才终于上岸，可以做 C&#x2F;C++ 项目的 Bugfix 了。</p><p>也正是因为有开发、自动化、持续集成的经验，在团队需要一名 Build&#x2F;Release 工程师的时候，我知道这就是我最适合的岗位，负责产品的自动化构建、发布、基础设施建设、CI&#x2F;CD 以及提高研发效能的相关开发工作。</p><p>就这样我从 QA 到 DEV 到 DEVOPS。公众号的更名记录也记录了我的职业路线变化：</p><ul><li>2019年07月28日 “软件测试与开发”改名“DevOps攻城狮”</li><li>2018年12月29日 “DevQA”改名“软件测试与开发”</li><li>2018年12月26日 “软件测试QA”改名“DevQA”</li><li>2017年08月01日 注册“软件测试QA”</li></ul><h2 id="写作五年有哪些收获"><a href="#写作五年有哪些收获" class="headerlink" title="写作五年有哪些收获"></a>写作五年有哪些收获</h2><p><strong>写作是一项长期收益远超短期收益的事情</strong>。</p><p>对于绝大多数人在短期内几乎不会有什么实质性的收益，还会花费大量的业余时间，妥妥的是用爱在发电。从金钱角度来衡量这件事，这是一件投入和产出完全不成比例的事情，很难坚持。</p><p>如果从长期来看，坚持写作一定会带来价值的，我总结有以五个方面的好处：</p><ol><li>好记性不如烂笔头 - 当我们弄明白了一个技术难题，虽然当时明白了，但如果没记录下来，很有可能以后遇到同样的问题又不知道该如何解决。</li><li>让别人听懂才是真的懂 - 有时候对于一个问题我们认为自己明白了，当分享给别人的时候，才发现其中有的逻辑说不通，因此不得不继续思考并彻底搞清楚。</li><li>打造学习飞轮 - 当你坚持分享并有人关注到你并与你互动的时候，你就会有动力继续分享，学习新的知识然后再分享，一旦学习的飞轮造好了，坚持下去就变得容易。</li><li>间接收益 - 但凡坚持写点东西，对于以后找工作都或多或少会有些帮助，至少说明你是一个爱学习的人。如果你的分享让同行、未来你的面试官觉得很不错，很可能会给你带来一次新的工作机会。</li><li>直接收益 - 直接利益包括平台流量和广告收益、以及卖专栏、做咨询等。这要求就很高了，不但需要会自媒体运营，还有要超强的输出功力，这背后就是比别人更多的付出。</li></ol><span id="more"></span><p>2017 年的时候我没想那么多，只是觉得自己也可以写点东西，就在 2017 年 7 月 6 日通过 GitHub Page 建立了自己的<a href="https://shenxianpeng.github.io/">个人博客</a></p><p><img src="/2022/02/from-qa-to-dev-to-devops/blog-first-commit.png" alt="第一次提交"></p><p>内容有了，复制过来也不费电，还能了解下公众号怎么玩的，然后就在同年 8 月开通了微信公众号；后来想看看小程序是怎么玩的，然后在 2020 年五一假期为我的博客创建了微信小程序(DevOps攻城狮)</p><p>对于我来说花了这么多的业余时间来写作，说说有哪些具体的收获。</p><ol><li>知道如何在 GitHub 上建站、发布博客，把 GitHub 变成最常访问的网站之一</li><li>知道 Hexo 博客如何集成 Disqus, Google Analytics, Google Adsense, etc，并做了很多个改进</li><li>知道如何使用和集成 Github Actions、Travis、SonarQube 等工具</li><li>知道如何运营一个公众号；知道如何创建、发布一个微信小程序</li><li>参与开源项目，在开源项目中学习编码、开阔眼界和最佳实践</li><li>有同事说 ta 读到了我的文章，找到并关注了我的微信公众号，这让我很荣幸</li><li>收到过咨询，还有咨询者的感谢红包，能够帮到别人并收到正反馈让我非常开心</li><li>不敢想还能收到大出版社的邀请写一本技术书籍，因工作忙以及还有更重要的知识要学，主动放弃了</li><li>… …</li></ol><p>这些收获中，我觉得最大的收获是<strong>打造学习飞轮，养成分享习惯</strong>。</p><p>最好的时间是十年前，其次是现在。日拱一卒，功不唐捐，持续做对的事情，其他的就交给时间。</p><p align="right">—— 2022 年 2 月 20 日，凌晨更新。</p><h2 id="相关推荐阅读"><a href="#相关推荐阅读" class="headerlink" title="相关推荐阅读"></a>相关推荐阅读</h2><blockquote><ul><li><a href="https://shenxianpeng.github.io/2018/07/why-I-move-to-development/">做了9年测试，我为何转开发？</a></li><li><a href="https://shenxianpeng.github.io/2018/12/from-qa-to-dev/">从测试到开发的五个月</a></li></ul></blockquote><hr><p>转载本站文章请注明作者和出处，请勿用于任何商业用途。欢迎关注公众号「DevOps攻城狮」</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vagrant 和 Docker 的区别，该如何选？</title>
      <link href="/2022/01/vagrant-vs-docker/"/>
      <url>/2022/01/vagrant-vs-docker/</url>
      
        <content type="html"><![CDATA[<p>关于 Vagrant 的介绍，可以参看前一篇文章：<a href="https://shenxianpeng.github.io/2022/01/vagrant/">什么是 Vagrant? Vagrant 和 VirtualBox 的区别</a></p><h2 id="什么是-Vagrant"><a href="#什么是-Vagrant" class="headerlink" title="什么是 Vagrant"></a>什么是 Vagrant</h2><p>关于 Vagrant 的介绍，可以参看前一篇文章：什么是 Vagrant? Vagrant 和 VirtualBox 的区别</p><h2 id="Vagrant-和-Docker-区别"><a href="#Vagrant-和-Docker-区别" class="headerlink" title="Vagrant 和 Docker 区别"></a>Vagrant 和 Docker 区别</h2><p>关于 Vagrant 被问到最多的问题：Vagrant 和 Docker 之间有什么区别。</p><p>如果不分场景的直接比对 Vagrant 和 Docker 是不恰当的。在一些简单场景中，它们的作用是重复的，但在更多场景中，它们是无法相互替代的。</p><p>那么什么情况下应该用 Vagrant，什么情况下用 Docker 呢？</p><p><strong>所以如果你仅仅是想管理虚拟机，那么你应该使用 Vagrant；如果你想快速开发和部署应用，那么应该使用 Docker。</strong></p><p>下面具体来说说为什么。</p><span id="more"></span><p>Vagrant 是 VM 的管理工具，或是说编排工具；Docker 是用来构建、运行、管理容器的工具。那么这个问题其实落在了虚拟机（VM）和 容器（Container）的区别。</p><p>引用网络上一组照片来感受一下物理机（Host），虚拟机（VM）和 容器（Container）之间的区别。</p><p>物理机（Host）</p><p><img src="/2022/01/vagrant-vs-docker/host.jpg" alt="物理机"></p><p>虚拟机（VM）</p><p><img src="/2022/01/vagrant-vs-docker/vm.jpg" alt="虚拟机"></p><p>容器（Container）</p><p><img src="/2022/01/vagrant-vs-docker/docker.jpg" alt="Docker"></p><p>从图上我们更容易理解虚拟机（VM）和容器（Container）的这些不同：</p><table><thead><tr><th>特性</th><th>虚拟机</th><th>容器</th></tr></thead><tbody><tr><td>隔离级别</td><td>操作系统级</td><td>进程级别</td></tr><tr><td>隔离策略</td><td>Hypervisor</td><td>CGROUPS</td></tr><tr><td>系统资源</td><td>5 - 15%</td><td>0 - 5%</td></tr><tr><td>启动时间</td><td>分钟级</td><td>秒级</td></tr><tr><td>镜像存储</td><td>GB</td><td>MB</td></tr></tbody></table><p>总结：Vagrant 和 Docker 的使用场景区别</p><!-- more --><p><strong>Vagrant 设计是用来管理虚拟机的，Docker 设计是用来管理应用环境。</strong></p><p>Vagrant 更适合用来做开发、测试，解决环境一致性的问题；Docker 更适合做快速开发和部署，CI&#x2F;CD。</p><p>最后，Vagrant 和 Docker 都有大量社区贡献的 <a href="https://app.vagrantup.com/boxes/search">“Box”</a> 和 <a href="https://hub.docker.com/">“Image”</a> 可供选择。</p><hr><p>欢迎扫码关注公众号「DevOps攻城狮」- 专注于DevOps领域知识分享。</p><p><img src="https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> Vagrant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> VirtualBox </tag>
            
            <tag> Vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 Vagrant? Vagrant 和 VirtualBox 的区别</title>
      <link href="/2022/01/vagrant/"/>
      <url>/2022/01/vagrant/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Vagrant"><a href="#什么是-Vagrant" class="headerlink" title="什么是 Vagrant"></a>什么是 Vagrant</h2><p>Vagrant 是一种<a href="https://github.com/hashicorp/vagrant">开源</a>软件产品，用来方便构建和维护虚拟软件开发环境。</p><p>例如，它可以基于 VirtualBox、VMware、KVM、Hyper-V 和 AWS 甚至是 Docker 等提供商来构建开发环境。它通过简化虚拟化的软件配置管理，来提高开发效率。</p><p>Vagrant 是用 Ruby 语言开发的，但它的生态系统支持使用其他几种语言进行开发。</p><p>简单来说 Vagrant 是对传统虚拟机的一层封装，能够让你更方便的使用虚拟开发环境。</p><h2 id="Vagrant-的发展史"><a href="#Vagrant-的发展史" class="headerlink" title="Vagrant 的发展史"></a>Vagrant 的发展史</h2><span id="more"></span><p>Vagrant 最初是由 <a href="https://www.hashicorp.com/about?name=mitchell-hashimoto">Mitchell Hashimoto</a> 于 2010 年 1 月作为个人项目启动的。</p><p>Vagrant 的第一个版本于 2010 年 3 月发布。2010 年 10 月，Engine Yard 宣布他们将赞助 Vagrant 项目。</p><p>Vagrant 的第一个稳定版本 Vagrant 1.0 于 2012 年 3 月发布，正好是原始版本发布两年后。</p><p>同年 11 月，Mitchell 成立了 HashiCorp 公司，以支持 Vagrant 的全职开发。Vagrant 仍然是开源软件，HashiCorp 公司致力于创建商业版本，并为 Vagrant 提供专业支持和培训。</p><p>现在 HashiCorp 已经成为世界顶级开源公司，它通过一系列的产品，包括 Vagrant，Packer（打包），Momad（部署），Terraform（配置云环境），Vault（权限管理） 以及 Consul（监控），从端到端重新定义了整个 DevOps。</p><p>Vagrant 最初支持 VirtualBox，在 1.1 版增加了对其他虚拟化软件（如 VMware 和 KVM）的支持，以及对 Amazon EC2 等服务器环境的支持。从 1.6 版开始，Vagrant 原生支持 Docker 容器，在某些情况下可以替代完全虚拟化的操作系统。</p><h2 id="如何使用-Vagrant"><a href="#如何使用-Vagrant" class="headerlink" title="如何使用 Vagrant"></a>如何使用 Vagrant</h2><p>使用 Vagrant 的前提条件：</p><ol><li>安装 Vagrant。下载 <a href="https://www.vagrantup.com/downloads">Vagrant</a></li><li>安装 <a href="https://www.virtualbox.org/">VirtualBox</a></li></ol><p>当以上两个都准备好了，你就可以通过命令行创建并使用你的虚拟机了。</p><p>比如你需要一个 <a href="https://app.vagrantup.com/hashicorp/boxes/bionic64">Ubuntu 18.04 LTS 64-bit</a>的虚拟机。更多其他的虚拟机可以到 <a href="https://app.vagrantup.com/boxes/search">Box</a> 网站上去搜索查找，它类似于 Docker Hub，用户可以在上面下载和上传各种 Vagrant Box。</p><p>你只需执行一些简单的命令就可以完成启动、登录、退出、及销毁。</p><p>初始化 Vagrant</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant init hashicorp/bionic64</span><br></pre></td></tr></table></figure><p>启动虚拟机。大概几十秒钟就可以完成了（第一次需要下载镜像，时间会长一点，取决于网速）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p>登录你的虚拟机，然后可以使用你创建的 Ubuntu 虚拟机了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><p>当你不想用的时候，执行 <code>logout</code> 就可以退出登录了。</p><h2 id="Vagrant-和传统虚拟机软件的区别"><a href="#Vagrant-和传统虚拟机软件的区别" class="headerlink" title="Vagrant 和传统虚拟机软件的区别"></a>Vagrant 和传统虚拟机软件的区别</h2><!-- more --><p><img src="/2022/01/vagrant/vagrant_virtualbox.png"></p><p>Vagrant 相比传统使用虚拟机的方式要方便得多，我们来看看传统方式是怎样创建一台虚拟机的。</p><p>还是以 VirtualBox 为例，假设你已经安装好了 VirtualBox，使用传统方式要创建一个虚拟机的动作是这样的：</p><p>首先，下载对应的 ISO 文件<br>然后，用 VirtualBox 或 VMware 来加载 ISO<br>最后，通过一步步的配置 CPU、内存、磁盘，网络、用户等设置，等待安装完成安装</p><p>这种方式配置起来就非常繁琐，需要一步步地进行。这些配置的步骤往往还会写一个文档来记录下来才能保证以后能够创建出来“一模一样”的虚拟开发环境。</p><p>相信通过对比你已经大概了解 Vagrant 是怎么使用的，以及它和传统使用虚拟机之间的一些区别了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vagrant 相比于传统使用虚拟机的优势：提供易于配置、可重现和便携的工作环境，从而提高生产力和灵活性。</p><p><strong>Vagrant 可以说是创建、管理虚拟化环境的最简单、最快捷的方式！</strong></p><p>它之所以可以这么方便是站在了这些巨人（VirtualBox、VMware、AWS、OpenStack 或其他提供商）的肩膀上，然后通过 Shell 脚本、Ansbile、Chef、Puppet 等工具实现自动在虚拟机上安装和配置软件。</p><p>下一篇将介绍 Vagrant 和 Docker 之间的<a href="https://shenxianpeng.github.io/2022/01/vagrant-vs-docker/">区别</a>。</p><hr><p>欢迎扫码关注公众号「DevOps攻城狮」- 专注于DevOps领域知识分享。</p><p><img src="https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> Vagrant </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VirtualBox </tag>
            
            <tag> Vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 Go ？Go 的优势和现状。初学者应该学习 Python 还是 Go？</title>
      <link href="/2022/01/what-is-go/"/>
      <url>/2022/01/what-is-go/</url>
      
        <content type="html"><![CDATA[<p>Go 是一种开源编程语言，可以轻松构建简单、可靠和高效的软件。</p><h2 id="Go-还是-Golang"><a href="#Go-还是-Golang" class="headerlink" title="Go 还是 Golang"></a>Go 还是 Golang</h2><p>先问一个大多数人可能会忽略的问题：Google 的这门开源编程语言叫 Go 还是 Golang？还是两个都行？给你三秒钟想一下 …</p><p>Google 说：它叫 Go。之所以有人称它为 Golang 是由于之前的 Go 语言官网是 golang.org（因为 go.org 已经被别人用了），因此有人将 Golang 和 Go 混用了。</p><p>现在输入 golang.org 会直接跳转到 go.dev 这个网址，这也算是彻底给自家孩子正个名。</p><h2 id="Go-语言有哪些优势"><a href="#Go-语言有哪些优势" class="headerlink" title="Go 语言有哪些优势"></a>Go 语言有哪些优势</h2><p>官网是这样介绍 Go 语言的：</p><ul><li>Go 适合大规模快速构建，可靠、高效的软件</li><li>Go 是 Google 在背后支持的一门开源编程语言</li><li>易于学习和入门</li><li>内置并发和强大的标准库</li><li>不断发展的合作伙伴、社区和工具生态系统</li></ul><p>今天，Go 被用于各种应用程序：</p><span id="more"></span><ul><li>Go 在基于云或服务器端的应用程序中很受欢迎</li><li>云基础设施方面。当今最流行的基础设施工具是用 Go 编写的，例如 Kubernetes、Docker 和 Prometheus</li><li>许多命令行工具都是用 Go 编写的</li><li>DevOps 和 Web 可靠性自动化也常常用 Go 来写</li><li>Go 也被用于人工智能和数据科学领域</li><li>微控制器编程、机器人技术和游戏中使用也会使用 Go</li></ul><p>这也就是为什么 Go 越来越流行。</p><p>正是因为这些优势以及在工作上的需要写一个 CLI，我就入门 Go 语言了。</p><h2 id="Go-语言的排名"><a href="#Go-语言的排名" class="headerlink" title="Go 语言的排名"></a>Go 语言的排名</h2><p>Go 语言在国内热度可谓是非常高了，我们来看看 Go 语言目前最新的排名怎么样。</p><!-- more --><p><img src="/2022/01/what-is-go/tiobe-index-go.png" alt="Go语言排名"></p><p>这是 TIOBE 2022 年一月排名前 20 编程语言，可以看到 Go 语言位于这个排行榜的第 13 位，相比于去年上升了一位。</p><p>对比排在榜单前五的 Python，C，Java，C++，C#，你觉得 Go 能否追上它们呢？</p><p>从我身边非云厂商的公司和同事来看，目前大多数都是 C&#x2F;C++，Java，C#，Python 的开发人员，所以这个排名我认为还是挺符合预期的。</p><h2 id="初学者应该学习-Python-还是-Go-？"><a href="#初学者应该学习-Python-还是-Go-？" class="headerlink" title="初学者应该学习 Python 还是 Go ？"></a>初学者应该学习 Python 还是 Go ？</h2><p>Python 已有 30 多年的历史，但它的受欢迎程度仍在继续增长。Python 是一门出色的面向对象语言，你也可以使用函数式编程风格来编写代码。在所有编程语言中，你可能找不到一种比 Python 被更多非程序员使用的语言。</p><ul><li>它的灵活性是 Python 如此受欢迎的原因之一</li><li>它经常用于编写脚本，Web 开发、数据科学、以及面向孩子们教授编程、制作动画等等。</li></ul><p>那么 Go 与 Python 相比如何呢？</p><ul><li>Python 和 Go 都具有简单的语法</li><li>Python 和 Go 对于初学者来说都很容易上手，且相对容易学习（Python 相对更容易）</li><li>Python 往往在数据科学领域占据主导地位；Go 非常适合系统编程</li><li>程序的执行速度 Go 比 Python 快多了</li><li>作为高级语言，Python 拥有更广泛的库和围绕它建立的社区</li><li>Go 是处理大型并发应用程序的理想选择、支持并发，同时运行多个程序&#x2F;任务的能力。Python 没有。</li></ul><p>今天 Python 和 Go 都是目前最流行和最方便使用的两种编程语言。对于初学者应该是学习 Python 还是 Go ？</p><ul><li>如果你是零基础，建议先学习 Python。相比于 Go，Python 还是更容易学习。</li><li>如果你是测试工程师，想学习一门编程语言，建议学习 Python。因此绝大多数的自动化测试岗位要求是掌握 Python。</li><li>如果你是软件开发、DevOps 工程师，最好两门都要会。”小孩子才做选择，大人全都要。”</li></ul><h2 id="如何学习-Go-语言"><a href="#如何学习-Go-语言" class="headerlink" title="如何学习 Go 语言"></a>如何学习 Go 语言</h2><ul><li><p>看文档或视频，最最重要的是要动手！！</p><p>我最早是在 2010~2020 期间看过 Go 语言的视频教程，但由于没怎么动手写过，一直处在只知其一不知其二的阶段。</p><p>对于新手学习任何一门编程语言，看教程大概只能学会 30%，想要真正的学会必须亲自上手实践，否则一定会是：“一看就会，一写就废”。</p></li><li><p>确定要一个方向，立刻开始 Coding。</p><p>我的方向就是写一个 CLI 工具。尽管 Go 语言内置的 Flag 这个 package 可以用来编写 CLI 命令，我也看了很多使用 Go 开发的 CLI 项目后，注意到这些项目都没有使用内置的 Flag 包，而是绝大多数使用了 <a href="https://github.com/spf13/cobra">spf13&#x2F;cobra</a> 或 <a href="https://github.com/urfave/cli">urfave&#x2F;cli</a>。</p><ul><li>这是使用 cobra 的项目<a href="https://github.com/spf13/cobra/blob/master/projects_using_cobra.md">列表</a>，其中包括了著名的项目比如 Kubernetes, Hugo, Docker，Github CLI 等都使用的 cobra。</li><li>至于 urfave&#x2F;cli，我看到 Jfrog CLI 在使用它，其他正在使用 urfave&#x2F;cli 的知名项目我并没有看到像 cobra 那样的列表。</li></ul><p>对于我这样的初学者，最重要的是马上开始，因此在选择的框架的时候不需要花费太多时间，cobra 有那么多优秀的项目背书，跟着用就行，最重要的是尽快动手。在编码的过程中，选择同样使用该框架的顶级项目做参考，这能帮助我们通过阅读别人的代码也让我们自己写出更优秀的代码。千万不要去 Ctrl + C 然后 Ctrl + V。</p></li><li><p>最后，再分享几个在开发 CLI 时一切其他的优秀项目。比如：</p><ul><li>github.com&#x2F;AlecAivazis&#x2F;survey&#x2F;v2 - 支持终端上构建交互式命令行</li><li>github.com&#x2F;enescakir&#x2F;emoji - 表情符号库，支持在终端输出表情符号</li><li>github.com&#x2F;mgutz&#x2F;ansi - 可以创建 ANSI 彩色字符串</li></ul></li></ul><hr><p>欢迎扫码关注公众号「DevOps攻城狮」- 专注于DevOps领域知识分享。</p><p><img src="https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> CLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你一定要了解这 17 条 Docker 最佳实践！</title>
      <link href="/2022/01/docker-best-practice/"/>
      <url>/2022/01/docker-best-practice/</url>
      
        <content type="html"><![CDATA[<p>本篇分享在编写 Dockerfiles 和使用 Docker 时应遵循的一些最佳实践。篇幅较长，建议先收藏慢慢看，保证看完会很有收获。</p><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><p>Dockerfile 最佳实践</p><ol><li>使用多阶段的构建</li><li>调整 Dockerfile 命令的顺序</li><li>使用小型 Docker 基础镜像</li><li>尽量减少层的数量</li><li>使用无特权的容器</li><li>优先选择 <code>COPY</code> 而不是 <code>ADD</code></li><li>将 <code>Python</code> 包缓存到 Docker 主机上</li><li>每个容器只运行一个进程</li><li>优先选择数组而不是字符串语法</li><li>理解 <code>ENTRYPOINT</code> 和 <code>CMD</code> 之间的区别</li><li>添加健康检查 <code>HEALTHCHECK</code></li></ol><p>Docker 镜像最佳实践</p><ol><li>Docker 镜像的版本</li><li>不要在镜像中存储密钥</li><li>使用 <code>.dockerignore</code> 文件</li><li>检查和扫描你的 Docker 文件和镜像</li><li>签署和验证镜像</li></ol><h2 id="Dockerfile-最佳实践"><a href="#Dockerfile-最佳实践" class="headerlink" title="Dockerfile 最佳实践"></a>Dockerfile 最佳实践</h2><h3 id="1-使用多阶段的构建"><a href="#1-使用多阶段的构建" class="headerlink" title="1. 使用多阶段的构建"></a>1. 使用多阶段的构建</h3><p>利用多阶段构建的优势来创建更精简、更安全的Docker镜像。多阶段 Docker 构建(<a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage builds</a>)允许你将你的 Dockerfile 分成几个阶段。</p><p>例如，你可以有一个阶段用于编译和构建你的应用程序，然后可以复制到后续阶段。由于只有最后一个阶段被用来创建镜像，与构建应用程序相关的依赖关系和工具就会被丢弃，因此可以留下一个精简的、模块化的、可用于生产的镜像。</p><p>Web 开发示例：</p><span id="more"></span><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install -y --no-install-recommends gcc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/wheels /wheels</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /app/requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache /wheels/*</span></span><br></pre></td></tr></table></figure><p>在这个例子中，GCC 编译器在安装某些 Python 包时是必需的，所以我们添加了一个临时的、构建时的阶段来处理构建阶段。</p><p>由于最终的运行时映像不包含 GCC，所以它更轻，也更安全。镜像大小比较：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY                 TAG                    IMAGE ID       CREATED          SIZE</span><br><span class="line">docker-single              latest                 8d6b6a4d7fb6   16 seconds ago   259MB</span><br><span class="line">docker-multi               latest                 813c2fa9b114   3 minutes ago    156MB</span><br></pre></td></tr></table></figure><p>再来看一个例子：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span> as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip wheel --no-cache-dir --no-deps --wheel-dir /wheels jupyter pandas</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /notebooks</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /wheels /wheels</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache /wheels/*</span></span><br></pre></td></tr></table></figure><p>镜像大小比较：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY                  TAG                   IMAGE ID       CREATED         SIZE</span><br><span class="line">ds-multi                    latest                b4195deac742   2 minutes ago   357MB</span><br><span class="line">ds-single                   latest                7c23c43aeda6   6 minutes ago   969MB</span><br></pre></td></tr></table></figure><p>总之，多阶段构建可以减少你的生产镜像的大小，帮助你节省时间和金钱。此外，这将简化你的生产容器。由于尺寸较小和简单，相对会有较小的攻击面。</p><h3 id="2-调整-Dockerfile-命令的顺序"><a href="#2-调整-Dockerfile-命令的顺序" class="headerlink" title="2. 调整 Dockerfile 命令的顺序"></a>2. 调整 Dockerfile 命令的顺序</h3><p>密切注意你的 Dockerfile 命令的顺序，以利用层缓存。</p><p>Docker 在一个特定的 Docker 文件中缓存每个步骤（或层），以加快后续的构建。当一个步骤发生变化时，不仅该步骤，而且所有后续步骤的缓存都将被废止。</p><p>例如：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> sample.py .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r /requirements.txt</span></span><br></pre></td></tr></table></figure><p>在这个 Dockerfile 中，我们在安装需求之前复制了应用程序的代码。现在，每次我们改变 sample.py 时，构建都会重新安装软件包。这是非常低效的，特别是在使用 Docker 容器作为开发环境时。因此，把经常变化的文件放在 Dockerfile 的末尾是很关键的。</p><blockquote><p>你也可以通过使用 .dockerignore 文件来排除不必要的文件，使其不被添加到 Docker 构建环境和最终镜像中，从而帮助防止不必要的缓存失效。更多信息后面会提到。</p></blockquote><p>因此，在上面的 Dockerfile 中，你应该把 <code>COPY sample.py .</code> 命令移到底部，如下所示：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r /requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> sample.py .</span></span><br></pre></td></tr></table></figure><p>注意。</p><ol><li>总是把可能发生变化的层放在 Dockerfile 中尽可能的低。</li><li>将多个 <code>RUN apt-get update</code>，<code>RUN apt-get install</code> 等命令结合到一起执行。(这也有助于减少镜像的大小，后面会很快就会提到这一点)。</li><li>如果你想关闭某个 Docker 构建的缓存，可以添加 <code>--no-cache=True</code> 标志。</li></ol><h3 id="3-使用小型-Docker-基础镜像"><a href="#3-使用小型-Docker-基础镜像" class="headerlink" title="3. 使用小型 Docker 基础镜像"></a>3. 使用小型 Docker 基础镜像</h3><p>较小的 Docker 镜像更具有模块化和安全性。较小的 Docker 基础镜像在构建、推送和拉动镜像的速度较小，它们也往往更安全，因为它们只包括运行应用程序所需的必要库和系统依赖。</p><p>你应该使用哪个 Docker 基础镜像？这个没有一个固定的答案，它这取决于你要做什么。下面是 Python 的各种 Docker 基础镜像的大小比较。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY   TAG                 IMAGE ID       CREATED      SIZE</span><br><span class="line">python       3.9.6-alpine3.14    f773016f760e   3 days ago   45.1MB</span><br><span class="line">python       3.9.6-slim          907fc13ca8e7   3 days ago   115MB</span><br><span class="line">python       3.9.6-slim-buster   907fc13ca8e7   3 days ago   115MB</span><br><span class="line">python       3.9.6               cba42c28d9b8   3 days ago   886MB</span><br><span class="line">python       3.9.6-buster        cba42c28d9b8   3 days ago   886MB</span><br></pre></td></tr></table></figure><p>虽然基于 Alpine Linux 的 Alpine flavor 是最小的，但如果你找不到可以与之配合的编译二进制文件，往往会导致构建时间的增加。因此，你最终可能不得不自己构建二进制文件，这可能会增加镜像的大小（取决于所需的系统级依赖）和构建时间（由于必须从源头编译）。</p><blockquote><p>关于为什么最好不要使用基于 Alpine 的基础镜像，请参考<a href="https://pythonspeed.com/articles/base-image-python-docker-images/">适用于 Python 应用程序的最佳 Docker 基础映像</a> 和 <a href="https://pythonspeed.com/articles/alpine-docker-python/">使用 Alpine 可以使 Python Docker 构建速度慢 50 倍</a> 了解更多关于为什么最好避免使用基于 Alpine 的基础镜像。</p></blockquote><p>归根结底，这都是关于平衡的问题。如果有疑问，从 <code>*-slim</code> flavor 开始，特别是在开发模式下，因为你正在构建你的应用程序。你想避免在添加新的 <code>Python</code> 包时不得不不断地更新 Dockerfile 以安装必要的系统级依赖。当你为生产强化你的应用程序和 Dockerfile 时，你可能想探索使用 Alpine 来完成多阶段构建的最终镜像。</p><p>另外，别忘了定期更新你的基础镜像，以提高安全性和性能。当一个基础镜像的新版本发布时，例如：<code>3.9.6-slim</code> –&gt; <code>3.9.7-slim</code>，你应该拉出新的镜像并更新你正在运行的容器以获得所有最新的安全补丁。</p><h3 id="4-尽量减少层的数量"><a href="#4-尽量减少层的数量" class="headerlink" title="4. 尽量减少层的数量"></a>4. 尽量减少层的数量</h3><p>尽量把 <code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 命令结合起来使用，因为它们会创建层。每一层都会增加镜像的大小，因为它们是被缓存的。因此，随着层数的增加，镜像大小也会增加。</p><p>你可以用 <code>docker history</code> 命令来测试一下。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">dockerfile   latest    180f98132d02   51 seconds ago   259MB</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">history</span> 180f98132d02</span><br><span class="line"></span><br><span class="line">IMAGE          CREATED              CREATED BY                                      SIZE      COMMENT</span><br><span class="line">180f98132d02   58 seconds ago       COPY . . <span class="comment"># buildkit                             6.71kB    buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;      58 seconds ago       RUN /bin/sh -c pip install -r requirements.t…   35.5MB    buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      About a minute ago   COPY requirements.txt . <span class="comment"># buildkit              58B       buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;      About a minute ago   WORKDIR /app</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>请注意尺寸。只有 <code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 命令增加了镜像的尺寸，你可以尽可能地通过合并命令来减少镜像的大小。比如：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y gcc</span></span><br></pre></td></tr></table></figure><p>可以合并成一个 <code>RUN</code> 命令：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y gcc</span></span><br></pre></td></tr></table></figure><p>因此，创建一个单层而不是两个，这就减少了最终镜像的大小。虽然减少层数是个好主意，但更重要的是，这本身不是一个目标，而是减少镜像大小和构建时间的一个副作用。换句话说呢，与其试图优化每一条命令，你更应该关注前面的三种做法！！！</p><ol><li>多阶段构建</li><li>Dockerfile命令的顺序</li><li>以及使用一个小的基础镜像。</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li><code>RUN</code>、<code>COPY</code> 和 <code>ADD</code> 都会创建图层</li><li>每个图层都包含与前一个图层的差异</li><li>图层会增加最终镜像的大小</li></ol><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><ol><li>合并相关命令</li><li>在创建过程中执行 <code>RUN</code> 步骤中删除不必要的文件</li><li>尽量减少运行 <code>apt-get upgrade</code> 的次数，因为它将所有软件包升级到最新版本。</li><li>对于多阶段的构建，不要太担心过度优化临时阶段的命令</li></ol><p>最后，为了便于阅读，建议将多行参数按字母数字排序。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y \</span></span><br><span class="line"><span class="language-bash">    git \</span></span><br><span class="line"><span class="language-bash">    gcc \</span></span><br><span class="line"><span class="language-bash">    matplotlib \</span></span><br><span class="line"><span class="language-bash">    pillow  \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><h3 id="5-使用无特权的容器"><a href="#5-使用无特权的容器" class="headerlink" title="5. 使用无特权的容器"></a>5. 使用无特权的容器</h3><p>默认情况下，Docker 在容器内以 root 身份运行容器进程。然而，这是一个糟糕的做法，因为在容器内以 root 身份运行的进程在 Docker 主机中也是以 root 身份运行。</p><p>因此，如果攻击者获得了对容器的访问权，他们就可以获得所有的 root 权限，并可以对 Docker 主机进行一些攻击，例如：</p><ol><li>将敏感信息从主机的文件系统复制到容器中</li><li>执行远程命令</li></ol><p>为了防止这种情况，确保以非 root 用户运行容器进程。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> addgroup --system app &amp;&amp; adduser --system --group app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> app</span><br></pre></td></tr></table></figure><p>你可以更进一步，删除 shell 权限，确保没有主目录。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> addgroup --gid 1001 --system app &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    adduser --no-create-home --shell /bin/false --disabled-password --uid 1001 --system --group app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> app</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -i sample <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">uid=1001(app) gid=1001(app) <span class="built_in">groups</span>=1001(app)</span><br></pre></td></tr></table></figure><p>在这里，容器内的应用程序在一个非 root 用户下运行。然而，请记住，Docker 守护进程和容器本身仍然是以 root 权限运行的。</p><p>请务必查看以非根用户身份运行 Docker 守护进程，以获得以非根用户身份运行守护进程和容器的帮助。</p><h3 id="6-优先选择-COPY-而不是-ADD"><a href="#6-优先选择-COPY-而不是-ADD" class="headerlink" title="6. 优先选择 COPY 而不是 ADD"></a>6. 优先选择 <code>COPY</code> 而不是 <code>ADD</code></h3><p>除非你确定你需要 <code>ADD</code> 所带来的额外功能，否则请使用 <code>COPY</code>。</p><p>那么 <code>COPY</code> 和 <code>ADD</code> 的区别是什么？</p><p>首先，这两个命令都允许你从一个特定的位置复制文件到 Docker 镜像中。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> &lt;src&gt; &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> &lt;src&gt; &lt;dest&gt;</span></span><br></pre></td></tr></table></figure><p>虽然它们看起来作用相同，但 <code>ADD</code> 有一些额外的功能。</p><ul><li><code>COPY</code> 用于将本地文件或目录从 Docker 主机复制到镜像上。</li><li><code>ADD</code> 可以用于同样的事情，也可以用于下载外部文件。另外，如果你使用压缩文件（tar、gzip、bzip2等）作为 <src> 参数，<code>ADD</code> 会自动将内容解压到指定位置。</src></li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将主机上的本地文件复制到目的地</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /source/path  /destination/path</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> /source/path  /destination/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载外部文件并复制到目的地</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> http://external.file/url  /destination/path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制和提取本地压缩文件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> source.file.tar.gz /destination/path</span></span><br></pre></td></tr></table></figure><p>最后 <code>COPY</code> 在语义上比 <code>ADD</code> 更加明确和更容易理解。</p><h3 id="7-缓存安装包到-Docker-主机上"><a href="#7-缓存安装包到-Docker-主机上" class="headerlink" title="7. 缓存安装包到 Docker 主机上"></a>7. 缓存安装包到 Docker 主机上</h3><p>当一个需求文件被改变时，镜像需要被重建以安装新的包。先前的步骤将被缓存，正如在最小化层数中提到的。在重建镜像时下载所有的包会导致大量的网络活动，并需要大量的时间。每次重建都要占用同等的时间来下载不同构建中的通用包。</p><p>以 Python 为例，你可以通过将 pip 缓存目录映射到主机上的一个目录来避免这种情况。所以对于每次重建，缓存的版本会持续存在，这可以提高构建速度。</p><p>在 Docker 运行中添加一个卷，作为 <code>-v $HOME/.cache/pip-docker/:/root/.cache/pip</code> 或者作为 Docker Compose 文件中的映射。</p><p>上面介绍的目录只供参考，要确保你映射的是 cache 目录，而不是 site-packages（内置包所在的位置）。</p><p>将缓存从 docker 镜像中移到主机上可以为你节省最终镜像的空间。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 忽略 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/root/.cache/pip \</span></span><br><span class="line"><span class="language-bash">        pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-每个容器只运行一个进程"><a href="#8-每个容器只运行一个进程" class="headerlink" title="8. 每个容器只运行一个进程"></a>8. 每个容器只运行一个进程</h3><p>为什么建议每个容器只运行一个进程？</p><p>让我们假设你的应用程序栈由两个 Web 服务器和一个数据库组成。虽然你可以很容易地从一个容器中运行所有三个，但你应该在一个单独的容器中运行每个服务，以便更容易重复使用和扩展每个单独的服务。</p><ul><li>扩展性 - 由于每个服务都在一个单独的容器中，你可以根据需要水平地扩展你的一个网络服务器来处理更多的流量。</li><li>可重用性 - 也许你有另一个服务需要一个容器化的数据库，你可以简单地重复使用同一个数据库容器，而不需要带着两个不必要的服务。</li><li>日志 - 耦合容器会让日志变得更加复杂。（我们将在本文后面进一步详细讨论这个问题）</li><li>可移植性和可预测性 - 当容器有较少的部分在工作时，制作安全补丁或调试问题就会容易得多。</li></ul><h3 id="9-优先选择数组而不是字符串语法"><a href="#9-优先选择数组而不是字符串语法" class="headerlink" title="9. 优先选择数组而不是字符串语法"></a>9. 优先选择数组而不是字符串语法</h3><p>你可以在你的 Dockerfiles 中以数组（exec）或字符串（shell）格式</p><p>在 Dockerfile 中，你可以以数组（exec）或字符串（shell）格式来使用 <code>CMD</code> 和 <code>ENTRYPOINT</code> 命令</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组（exec）</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;-w&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;-k&quot;</span>, <span class="string">&quot;uvicorn.workers.UvicornWorker&quot;</span>, <span class="string">&quot;main:app&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串（shell）</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="string">&quot;gunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app&quot;</span></span></span><br></pre></td></tr></table></figure><p>两者都是正确的，并且实现了几乎相同的事情；但是，你应该尽可能地使用 exec 格式。</p><p>以下来自 <a href="https://docs.docker.com/compose/faq/#why-do-my-services-take-10-seconds-to-recreate-or-stop">Docker的官方文档</a>内容：</p><ul><li>确保你在 Dockerfile 中使用 <code>CMD</code> 和 <code>ENTRYPOINT</code> 的 exec 形式。</li><li>例如，使用 <code>[&quot;program&quot;, &quot;arg1&quot;, &quot;arg2&quot;]</code> 而不是 <code>&quot;program arg1 arg2&quot;</code>。使用字符串形式会导致 Docker 使用 <code>bash</code> 运行你的进程，而 <code>bash</code> 并不能正确处理信号。Compose 总是使用 JSON 形式，所以不用担心如果你在你的 Compose 文件中覆盖了命令或入口。</li></ul><p>因此，由于大多数 shell 不处理对子进程的信号，如果你使用 shell 格式，CTRL-C（产生 <code>SIGTERM</code>）可能不会停止一个子进程。</p><p>例子:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BAD: 字符串（shell）格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> top -d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GOOD: 数组（exec）格式</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;top&quot;</span>, <span class="string">&quot;-d&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>这两种情况执行效果一样。但请注意，在字符串（shell）格式的情况下，<code>CTRL-C</code> 不会杀死这个进程。相反，你会看到 <code>^C^C^C^C^C^C^C^C^C^C</code>。</p><p>另一个注意事项是，字符串（shell）格式携带的是 shell 的 PID，而不是进程本身。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组格式</span></span><br><span class="line">root@<span class="number">18</span>d8fd3fd4d2:/app<span class="comment"># ps ax</span></span><br><span class="line">  PID TTY      STAT   TIME COMMAND</span><br><span class="line">    <span class="number">1</span> ?        Ss     <span class="number">0</span>:<span class="number">00</span> python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line">    <span class="number">7</span> ?        Sl     <span class="number">0</span>:<span class="number">02</span> /usr/local/bin/python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line">   <span class="number">25</span> pts/<span class="number">0</span>    Ss     <span class="number">0</span>:<span class="number">00</span> bash</span><br><span class="line">  <span class="number">356</span> pts/<span class="number">0</span>    R+     <span class="number">0</span>:<span class="number">00</span> ps ax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式</span></span><br><span class="line">root@ede24a5ef536:/app<span class="comment"># ps ax</span></span><br><span class="line">  PID TTY      STAT   TIME COMMAND</span><br><span class="line">    <span class="number">1</span> ?        Ss     <span class="number">0</span>:<span class="number">00</span> /bin/sh -c python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line">    <span class="number">8</span> ?        S      <span class="number">0</span>:<span class="number">00</span> python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line">    <span class="number">9</span> ?        Sl     <span class="number">0</span>:<span class="number">01</span> /usr/local/bin/python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8000</span></span><br><span class="line">   <span class="number">13</span> pts/<span class="number">0</span>    Ss     <span class="number">0</span>:<span class="number">00</span> bash</span><br><span class="line">  <span class="number">342</span> pts/<span class="number">0</span>    R+     <span class="number">0</span>:<span class="number">00</span> ps ax</span><br></pre></td></tr></table></figure><h4 id="10-了解-ENTRYPOINT-和-CMD-之间的区别"><a href="#10-了解-ENTRYPOINT-和-CMD-之间的区别" class="headerlink" title="10. 了解 ENTRYPOINT 和 CMD 之间的区别"></a>10. 了解 <code>ENTRYPOINT</code> 和 <code>CMD</code> 之间的区别</h4><p>我应该使用 <code>ENTRYPOINT</code> 还是 <code>CMD</code> 来运行容器进程？有两种方法可以在容器中运行命令。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;config.wsgi&quot;</span>, <span class="string">&quot;-b&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 和</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;config.wsgi&quot;</span>, <span class="string">&quot;-b&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>两者本质上做的是同一件事：用 <code>Gunicorn</code> 服务器在 <code>config.wsgi</code> 启动应用程序，并将其绑定到 <code>0.0.0.0:8000</code>。</p><p><code>CMD</code> 很容易被重写。如果你运行 <code>docker run &lt;image_name&gt; uvicorn config.asgi</code>，上述 <code>CMD</code> 就会被新的参数所取代。</p><p>例如，<code>uvicorn config.asgi</code>。而要覆盖 <code>ENTRYPOINT</code> 命令，必须指定 <code>--entrypoint</code> 选项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --entrypoint uvicorn config.asgi &lt;image_name&gt;</span><br></pre></td></tr></table></figure><p>在这里，很明显，我们正在覆盖入口点。所以，建议使用 <code>ENTRYPOINT</code> 而不是 <code>CMD</code>，以防止意外地覆盖命令。</p><p>它们也可以一起使用。比如说</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;gunicorn&quot;</span>, <span class="string">&quot;config.wsgi&quot;</span>, <span class="string">&quot;-w&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;4&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>当像这样一起使用时，为启动容器所运行的命令就变成了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gunicorn config.wsgi -w 4</span><br></pre></td></tr></table></figure><p>如上所述，<code>CMD</code> 很容易被重写。因此，<code>CMD</code> 可以被用来向 <code>ENTRYPOINT</code> 命令传递参数。比如很容易更改 workers 的数量，就像这样：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run &lt;image_name&gt; 6</span><br></pre></td></tr></table></figure><p>这样就将有 6 个 Gunicorn workers 启动容器，而不是默认的 4 个。</p><h3 id="11-添加健康检查-HEALTHCHECK"><a href="#11-添加健康检查-HEALTHCHECK" class="headerlink" title="11. 添加健康检查 HEALTHCHECK"></a>11. 添加健康检查 <code>HEALTHCHECK</code></h3><p>使用 <code>HEALTHCHECK</code> 来确定容器中运行的进程是否不仅已启动并正在运行，而且是“健康”的。</p><p>Docker 公开了一个 API 来检查容器中运行的进程的状态，它提供的信息不仅仅是进程是否“正在运行”，因为“运行”涵盖了“它正在运行”、“仍在启动”、甚至“陷入某种无限循环错误状态”。你可以通过 <a href="https://docs.docker.com/engine/reference/builder/#healthcheck"><code>HEALTHCHECK</code></a> 指令与此 API 交互。</p><p>例如，如果你正在提供 Web 应用程序，则可以使用以下内容来确定 <code>/</code> 端点是否已启动并可以处理服务请求：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> CMD curl --fail http://localhost:8000 || <span class="built_in">exit</span> 1</span></span><br></pre></td></tr></table></figure><p>如果你运行 <code>docker ps</code>，你可以看到 <code>HEALTHCHECK</code> 的状态。</p><p>健康的示例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS                            PORTS                                       NAMES</span><br><span class="line">09c2eb4970d4   healthcheck   <span class="string">&quot;python manage.py ru…&quot;</span>   10 seconds ago   Up 8 seconds (health: starting)   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp   xenodochial_clarke</span><br></pre></td></tr></table></figure><p>不健康的示例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS                          PORTS                                       NAMES</span><br><span class="line">09c2eb4970d4   healthcheck   <span class="string">&quot;python manage.py ru…&quot;</span>   About a minute ago   Up About a minute (unhealthy)   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp   xenodochial_clarke</span><br></pre></td></tr></table></figure><p>你可以更进一步，设置一个仅用于健康检查的自定义端点，然后配置 <code>HEALTHCHECK</code> 以针对返回的数据进行测试。</p><p>例如，如果端点返回 <code>&#123;&quot;ping&quot;: &quot;pong&quot;&#125;</code> 的 JSON 响应，你可以指示 <code>HEALTHCHECK</code> 验证响应正文。</p><p>以下是使用 <code>docker inspect</code> 查看运行状况检查状态的方法：</p><blockquote><p>这里省略了部分输出。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ docker inspect --format <span class="string">&quot;&#123;&#123;json .State.Health &#125;&#125;&quot;</span> ab94f2ac7889</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;healthy&quot;</span>,</span><br><span class="line">  <span class="string">&quot;FailingStreak&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;Log&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;Start&quot;</span>: <span class="string">&quot;2021-09-28T15:22:57.5764644Z&quot;</span>,</span><br><span class="line">      <span class="string">&quot;End&quot;</span>: <span class="string">&quot;2021-09-28T15:22:57.7825527Z&quot;</span>,</span><br><span class="line">      <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">      <span class="string">&quot;Output&quot;</span>: <span class="string">&quot;...&quot;</span></span><br></pre></td></tr></table></figure><p>你还可以向 Docker Compose 文件添加运行状况检查：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;8000:8000&#x27;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">curl</span> <span class="string">--fail</span> <span class="string">http://localhost:8000</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>选项：</p><ul><li><code>test</code>：要测试的命令。</li><li><code>interval</code>：要测试的间隔 - 即，测试每 x 时间单位。</li><li><code>timeout</code>：等待响应的最长时间。</li><li><code>start_period</code>：何时开始健康检查。它可以在容器准备就绪之前执行其他任务时使用，例如运行迁移。</li><li><code>retries</code>：在将测试指定为失败之前的最大重试次数。</li></ul><p>如果你使用的是 Docker Swarm 以外的编排工具（比如 Kubernetes 或 AWS ECS），它们很可能有自己的内部系统来处理健康检查。在添加 <code>HEALTHCHECK</code> 指令之前，请参阅特定工具的文档。</p><h2 id="Docker-镜像最佳实践"><a href="#Docker-镜像最佳实践" class="headerlink" title="Docker 镜像最佳实践"></a>Docker 镜像最佳实践</h2><h3 id="1-Docker-镜像版本"><a href="#1-Docker-镜像版本" class="headerlink" title="1. Docker 镜像版本"></a>1. Docker 镜像版本</h3><p>只要有可能，就要避免使用 <code>latest</code> 标签的镜像。</p><p>如果你依赖 <code>latest</code> 标签（这并不是一个真正的 “标签”，因为当镜像没有明确的标签时，它是默认应用的），你无法根据镜像标签来判断你的代码正在运行哪个版本。</p><p>如果你想回滚就变得很困难，并且很容易被覆盖（无论是意外还是恶意的）。标签，就像你的基础设施和部署，应该是不可改变的。</p><p>所以无论你如何对待你的内部镜像，都不应该对基本镜像使用 <code>latest</code> 标签，因为你可能会无意中把一个带有破坏性变化的新版本部署到生产中。</p><p>对于内部镜像，应使用描述性的标签，以便更容易分辨哪个版本的代码正在运行，处理回滚，并避免命名冲突。例如，你可以使用以下描述符来组成一个标签。</p><ol><li>时间戳</li><li>Docker 镜像 ID</li><li>Git 提交哈希值</li><li>语义版本 (Semantic version)</li></ol><p>关于更多的选择，也可以参考 Stack Overflow <a href="https://stackoverflow.com/a/56213290/1799408">问题</a> “Properly Versioning Docker Images” 中的这个答案。</p><p>比如说</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t web-prod-b25a262-1.0.0 .</span><br></pre></td></tr></table></figure><p>在这里，我们用下面的内容来形成标签</p><ol><li>项目名称：web</li><li>环境名称: prod</li><li>Git commit short hash: b25a262 (通过命令 <code>git rev-parse --short HEAD</code> 来获得)</li><li>语义学版本：1.0.0</li></ol><p>选择一个标签方案并与之保持一致是至关重要的。由于提交哈希值（commit hashes）可以很容易地将镜像标签与代码联系起来，建议将它们纳入你的标签方案。</p><h3 id="2-不要在镜像中存储机密信息"><a href="#2-不要在镜像中存储机密信息" class="headerlink" title="2. 不要在镜像中存储机密信息"></a>2. 不要在镜像中存储机密信息</h3><p>Secrets 是敏感的信息，如密码、数据库凭证、SSH密钥、令牌和 TLS 证书等。这些信息不应该在没有加密的情况下被放入你的镜像中，因为未经授权的用户如果获得了镜像的访问权，只需要检查这些层就可以提取密钥。</p><p>因此不要在 Docker 文件中添加明文的密钥，尤其是当你把镜像推送到像 Docker Hub 这样的公共仓库！！</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> DATABASE_PASSWORD <span class="string">&quot;SuperSecretSauce&quot;</span></span><br></pre></td></tr></table></figure><p>相反，它们应该通过以下方式注入</p><ol><li>环境变量（在运行时)</li><li>构建时参数（在构建时)</li><li>协调工具，如 Docker Swarm（通过 Docker secrets）或 Kubernetes（通过 Kubernetes secrets）。</li></ol><p>此外，你还可以通过在你的 <code>.dockerignore</code> 文件中添加常见的密钥文件和文件夹来帮助防止密钥的泄露。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**/.env</span><br><span class="line">**/.aws</span><br><span class="line">**/.ssh</span><br></pre></td></tr></table></figure><p>最后，要明确哪些文件会被复制到镜像中，而不是递归地复制所有文件。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不好的做法</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 好的做法</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./app.py .</span></span><br></pre></td></tr></table></figure><p>明确的做法也有助于限制缓存的破坏。</p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>你可以通过环境变量来传递密钥，但它们会在所有子进程、链接的容器和日志以及 <code>docker inspect</code> 中可见。要更新它们也很困难。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --detach --<span class="built_in">env</span> <span class="string">&quot;DATABASE_PASSWORD=SuperSecretSauce&quot;</span> python：3.9-slim</span><br><span class="line"></span><br><span class="line">b25a262f870eb0fdbf03c666e7fcf18f9664314b79ad58bc7618ea3445e39239</span><br><span class="line"></span><br><span class="line">docker inspect --format=<span class="string">&#x27;&#123;&#123;range .Config.Env&#125;&#125;&#123;&#123;println .&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> b25a262f870eb0fdbf03c666e7fcf18f9664314b79ad58bc7618ea3445e39239</span><br><span class="line"></span><br><span class="line">DATABASE_PASSWORD=SuperSecretSauce</span><br><span class="line">PATH=/usr/local/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">LANG=C.UTF-8</span><br><span class="line">GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568</span><br><span class="line">python_version=3.9.7</span><br><span class="line">python_pip_version=21.2.4</span><br><span class="line">python_setuptools_version=57.5.0</span><br><span class="line">python_get_pip_url=https://github.com/pypa/get-pip/raw/c20b0cfd643cd4a19246ccf204e2997af70f6b21/public/get-pip.py</span><br><span class="line">PYTHON_GET_PIP_SHA256=fa6f3fb93cce234cd4e8dd2beb54a51ab9c247653b52855a48dd44e6b21ff28b</span><br></pre></td></tr></table></figure><p>这是最直接的密钥管理方法。虽然它不是最安全的，但它会让诚实的人保持诚实，因为它提供了一个薄薄的保护层，有助于使密钥不被好奇的游荡的眼睛发现。</p><p>使用共享卷传递密钥是一个更好的解决方案，但它们应该被加密，通过 Vault 或 AWS密钥管理服务（KMS），因为它们被保存到磁盘。</p><h4 id="构建时参数"><a href="#构建时参数" class="headerlink" title="构建时参数"></a>构建时参数</h4><p>你可以在构建时使用构建时参数来传递密钥，但这些密钥对于那些可以通过 docker 历史访问镜像的人来说是可见的。</p><p>例子</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> DATABASE_PASSWORD</span><br></pre></td></tr></table></figure><p>构建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build --build-arg <span class="string">&quot;DATABASE_PASSWORD=SuperSecretSauce&quot;</span> .</span><br></pre></td></tr></table></figure><p>如果你只需要临时使用密钥作为构建的一部分。例如，用于克隆私有 repo 或下载私有软件包的 SSH 密钥。你应该使用多阶段构建，因为构建者的历史会被临时阶段忽略。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥参数</span></span><br><span class="line"><span class="keyword">arg</span> ssh_private_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 git</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; （运行 apt-get update）。</span></span><br><span class="line">    apt-get install -y --no-install-recommends git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ssh 密钥来克隆 repo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /root/.ssh/ &amp;&amp; \\</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;PRIVATE_SSH_KEY&#125;</span>&quot;</span> &gt; /root/.ssh/id_rsa</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">touch</span> /root/.ssh/known_hosts &amp; &amp;</span></span><br><span class="line">    ssh-keyscan bitbucket.org &gt;&gt; /root/.ssh/known_hosts</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git <span class="built_in">clone</span> git@github.com:testdrivenio/not-real.git</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后阶段</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line">工作目录 /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从临时镜像中复制版本库</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /your-repo /app/your-repo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多阶段构建只保留了最终镜像的历史。你可以把这个功能用于你的应用程序需要的永久密钥，比如数据库凭证。</p><p>你也可以使用 docker build 中新的 <code>--secret</code> 选项来向 Docker 镜像传递密钥，这些密钥不会被存储在镜像中。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &quot;docker_is_awesome&quot; &gt; secrets.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从默认的密钥位置显示密钥。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=secret,<span class="built_in">id</span>=mysecret <span class="built_in">cat</span> /run/secrets/mysecret</span></span><br></pre></td></tr></table></figure><p>这将装载 <code>secrets.txt</code> 文件中的密钥。</p><p>构建镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build --no-cache --progress=plain --secret <span class="built_in">id</span>=mysecret,src=secrets.txt .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">#4 [1/2] FROM docker.io/library/alpine</span></span><br><span class="line"><span class="comment">#4 sha256:665ba8b2cdc0cb0200e2a42a6b3c0f8f684089f4cd1b81494fbb9805879120f7</span></span><br><span class="line"><span class="comment">#4 缓存的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5 [2/2] RUN --mount=type=secret,id=mysecret cat /run/secrets/myecret</span></span><br><span class="line"><span class="comment">#5 sha256:75601a522ebe80ada66dedd9dd86772ca932d30d7e1b11bba94c04aa55c237de</span></span><br><span class="line"><span class="comment">#5 0.635 docker_is_awesome#5 DONE 0.7s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6 导出到镜像</span></span><br></pre></td></tr></table></figure><p>最后，检查历史记录，看看密钥是否泄露了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ docker <span class="built_in">history</span> 49574a19241c</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">49574a19241c   5 minutes ago   CMD [<span class="string">&quot;/bin/sh&quot;</span>]                                 0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      5 minutes ago   RUN /bin/sh -c <span class="built_in">cat</span> /run/secrets/mysecret <span class="comment"># b…   0B        buildkit.dockerfile.v0</span></span><br><span class="line">&lt;missing&gt;      4 weeks ago     /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot;]              0B</span></span><br><span class="line">&lt;missing&gt;      4 weeks ago     /bin/sh -c <span class="comment">#(nop) ADD file:aad4290d27580cc1a…   5.6MB</span></span><br></pre></td></tr></table></figure><h4 id="Docker-密钥"><a href="#Docker-密钥" class="headerlink" title="Docker 密钥"></a>Docker 密钥</h4><p>如果你正在使用 Docker Swarm，你可以用 Docker secrets 来管理密钥。</p><p>例如，启动 Docker Swarm 模式。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure><p>创建一个 docker 密钥。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;supersecretpassword&quot;</span> | docker secret create postgres_password -</span><br><span class="line">qdqmbpizeef0lfhyttxqfbty0</span><br><span class="line"></span><br><span class="line">docker secret <span class="built_in">ls</span></span><br><span class="line">ID                          NAME                DRIVER    CREATED         UPDATED</span><br><span class="line">qdqmbpizeef0lfhyttxqfbty0   postgres_password             4 seconds ago   4 seconds ago</span><br></pre></td></tr></table></figure><p>当一个容器被赋予上述密钥的访问权时，它将挂载在 <code>/run/secrets/postgres_password</code>。这个文件将包含明文的密钥的实际值。</p><p>使用其他的编排工具？</p><ul><li><a href="https://docs.aws.amazon.com/eks/latest/userguide/manage-secrets.html">使用 AWS Secrets Manager 的密钥与 Kubernetes 的密钥</a></li><li>DigitalOcean Kubernetes - <a href="https://www.digitalocean.com/community/tutorials/recommended-steps-to-secure-a-digitalocean-kubernetes-cluster">保护 DigitalOcean Kubernetes 集群的推荐步骤</a></li><li>Google Kubernetes引擎 - <a href="https://cloud.google.com/secret-manager/docs/using-other-products#google-kubernetes-engine">与其他产品一起使用密钥管理器</a></li><li>Nomad - <a href="https://learn.hashicorp.com/tutorials/nomad/vault-postgres?in=nomad/integrate-vault">Vault 集成和检索动态密钥</a></li></ul><h3 id="3-使用-dockerignore-文件"><a href="#3-使用-dockerignore-文件" class="headerlink" title="3. 使用 .dockerignore 文件"></a>3. 使用 .dockerignore 文件</h3><p>之前已经提到过几次使用 <code>.dockerignore</code> 文件。这个文件用来指定你不希望被添加到发送给 Docker 守护进程的初始构建上下文中的文件和文件夹，后者将构建你的镜像。换句话说，你可以用它来定义你需要的构建环境。</p><p>当一个 Docker 镜像被构建时，整个 Docker 上下文 - 即你的项目的根在 <code>COPY</code> 或 <code>ADD</code> 命令执行之前就被发送给了 Docker 守护进程。</p><p>这可能是相当费资源，尤其是当你的项目中有许多依赖关系、大量的数据文件或构建工件时。</p><p>另外，当 Docker CLI 和守护程序不在同一台机器上。比如守护进程是在远程机器上执行的，你就更应该注意构建环境的大小了。</p><p>你应该在 <code>.dockerignore</code> 文件中添加什么？</p><ol><li>临时文件和文件夹</li><li>构建日志</li><li>本地 secrets</li><li>本地开发文件，如 <code>docker-compose.yml</code></li><li>版本控制文件夹，如 “.git”、”.hg” 和 “.vscode” 等</li></ol><p>例子：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**/.git</span><br><span class="line">**/.gitignore</span><br><span class="line">**/.vscode</span><br><span class="line">**/coverage</span><br><span class="line">**/.env</span><br><span class="line">**/.aws</span><br><span class="line">**/.ssh</span><br><span class="line">Dockerfile</span><br><span class="line">README.md</span><br><span class="line">docker-compose.yml</span><br><span class="line">**/.DS_Store</span><br><span class="line">**/venv</span><br><span class="line">**/env</span><br></pre></td></tr></table></figure><p>总之，结构合理的 .dockerignore 可以帮助</p><ol><li>减少 Docker 镜像的大小</li><li>加快构建过程</li><li>防止不必要的缓存失效</li><li>防止泄密</li></ol><h3 id="4-检查并扫描你的-Dockerfile-和镜像"><a href="#4-检查并扫描你的-Dockerfile-和镜像" class="headerlink" title="4. 检查并扫描你的 Dockerfile 和镜像"></a>4. 检查并扫描你的 Dockerfile 和镜像</h3><p>Linting 是检查源代码中是否存在可能导致潜在缺陷的编程和风格错误以及不良做法的过程。就像编程语言一样，静态文件也可以被 lint。特别是对于你的 Dockerfile，linter 可以帮助确保它们的可维护性、避免弃用语法并遵守最佳实践。整理镜像应该是 CI 管道的标准部分。</p><p><a href="https://github.com/hadolint/hadolint">Hadolint</a> 是最流行的 Dockerfile linter：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadolint Dockerfile</span><br><span class="line"></span><br><span class="line">Dockerfile:1 DL3006 warning: Always tag the version of an image explicitly</span><br><span class="line">Dockerfile:7 DL3042 warning: Avoid the use of cache directory with pip. Use `pip install --no-cache-dir &lt;package&gt;`</span><br><span class="line">Dockerfile:9 DL3059 info: Multiple consecutive `RUN` instructions. Consider consolidation.</span><br><span class="line">Dockerfile:17 DL3025 warning: Use arguments JSON notation <span class="keyword">for</span> CMD and ENTRYPOINT arguments</span><br></pre></td></tr></table></figure><p>这是 Hadolint 一个在线的链接 <a href="https://hadolint.github.io/hadolint/">https://hadolint.github.io/hadolint/</a> 也可以安装 VS Code <a href="https://marketplace.visualstudio.com/items?itemName=exiasr.hadolint">插件</a></p><p>你可以将 Dockerfile 与扫描镜像和容器的漏洞结合使用。</p><p>以下是一些有影响力的镜像扫描工具：</p><ul><li><a href="https://docs.docker.com/engine/scan/">Snyk</a> 是 Docker 本地漏洞扫描的独家提供商。你可以使用 <code>docker scan</code> CLI 命令来扫描镜像。</li><li><a href="https://aquasecurity.github.io/trivy/">Trivy</a> 可用于扫描容器镜像、文件系统、git 存储库和其他配置文件。</li><li><a href="https://github.com/quay/clair">Clair</a> 是一个开源项目，用于对应用程序容器中的漏洞进行静态分析。</li><li><a href="https://github.com/anchore/anchore-engine">Anchore</a> 是一个开源项目，为容器镜像的检查、分析和认证提供集中式服务。</li></ul><p>总而言之，对你的 Dockerfile 和镜像进行 lint 和扫描，来发现任何偏离最佳实践的潜在问题。</p><h3 id="5-签名和验证镜像"><a href="#5-签名和验证镜像" class="headerlink" title="5. 签名和验证镜像"></a>5. 签名和验证镜像</h3><p>你怎么知道用于运行生产代码的镜像没有被篡改？</p><p>篡改可以通过中间人（MITM）攻击或注册表被完全破坏来实现。Docker 内容信任（DCT）可以对来自远程注册中心的 Docker 镜像进行签名和验证。</p><p>为了验证镜像的完整性和真实性，请设置以下环境变量。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DOCKER_CONTENT_TRUST=1</span><br></pre></td></tr></table></figure><p>现在，如果你试图拉一个没有被签名的镜像，你会收到以下错误。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: remote trust data does not exist <span class="keyword">for</span> docker.io/namespace/unsigned-image:</span><br><span class="line">notary.docker.io does not have trust data <span class="keyword">for</span> docker.io/namespace/unsigned-image</span><br></pre></td></tr></table></figure><p>你可以从使用 Docker 内容信任签署镜像文档中了解签署镜像的情况。</p><p>当从 Docker Hub下 载镜像时，确保使用官方镜像或来自可信来源的经过验证的镜像。较大的团队应该使用他们自己的内部私有容器仓库</p><h3 id="6-设置内存和-CPU-的限制"><a href="#6-设置内存和-CPU-的限制" class="headerlink" title="6. 设置内存和 CPU 的限制"></a>6. 设置内存和 CPU 的限制</h3><p>限制 Docker 容器的内存使用是一个好主意，特别是当你在一台机器上运行多个容器时。这可以防止任何一个容器使用所有可用的内存，从而削弱其他容器的功能。</p><p>限制内存使用的最简单方法是在 Docker cli 中使用 <code>--memory</code> 和 <code>--cpu</code> 选项。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --cpus=2 -m 512m nginx</span><br></pre></td></tr></table></figure><p>上述命令将容器的使用限制在 2 个 CPU 和 512 兆的内存。</p><p>你可以在 Docker Compose 文件中做同样的事情，像这样。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="number">2</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">512M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">256M</span></span><br></pre></td></tr></table></figure><p>请注意 <code>reservations</code> 字段。它是用来设置软限制的，当主机的内存或CPU资源不足时，它就会优先考虑。</p><p>其他相关资源</p><ol><li>带有内存、CPU和GPU的运行时选项：<a href="https://docs.docker.com/config/containers/resource_constraints/">https://docs.docker.com/config/containers/resource_constraints/</a></li><li>Docker Compose 的资源限制：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#resources">https://docs.docker.com/compose/compose-file/compose-file-v3/#resources</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是本文介绍的 17 条最佳实践，掌握这些最佳实践一定会让你的 Dockerfile 和 Docker Image 变得精简，干净，和安全。</p><p>本文出自 <a href="https://testdriven.io/blog/docker-best-practices/">Docker Best Practices for Python Developers</a>。</p><hr><p>欢迎扫码关注公众号「DevOps攻城狮」- 专注于DevOps领域知识分享。</p><p><img src="https://github.com/shenxianpeng/shenxianpeng.github.io/blob/master/about/index/qrcode.jpg?raw=true" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dokerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年序员如何选择显示器？1080p还是2K? 单屏还是多屏？</title>
      <link href="/2021/12/choose-monitor/"/>
      <url>/2021/12/choose-monitor/</url>
      
        <content type="html"><![CDATA[<p>工作十几年用过了不少显示器，从最初的 17寸，到后来的 23寸、27寸、32寸、再到现在的 34 寸，根据我自己的使用体验，来个主观推荐：</p><p>第一名，一个34寸曲面显示器<br>第二名，一个27寸 + 一个23寸的双屏组合<br>第三名，一个32寸 + 一个23寸的双屏组合<br>第三名，两个 23 寸的双屏组合（并列第三名）</p><p>以上这些屏幕推荐购买 2K 及以上的分辨率，1080p 的分辨率不推荐。</p><p>下面我就按照时间轴说说我用过的那些显示器。</p><span id="more"></span><h2 id="我用过的显示器"><a href="#我用过的显示器" class="headerlink" title="我用过的显示器"></a>我用过的显示器</h2><h3 id="双屏-23寸-1080p"><a href="#双屏-23寸-1080p" class="headerlink" title="双屏 23寸 1080p"></a>双屏 23寸 1080p</h3><p>五年前公司配置的是两个 23 寸的 1080p 显示器，还有显示器支架，这在当时是非常好用的组合了，对工作效率的提升确实很有帮助。</p><p>（真不知道那些不肯在显示器上花钱的公司是怎么想的，换个大屏显示器是花最少的钱提高程序员效率的最有效办法了）</p><p>放在现在 1080p 的分辨率已经不推荐了，建议购买 2K 以及以上分辨率的显示屏。</p><h3 id="单屏-27寸-2K"><a href="#单屏-27寸-2K" class="headerlink" title="单屏 27寸 2K"></a>单屏 27寸 2K</h3><p>在家办公和学习苦于家里的办公桌大小有限，放置两个 23 寸显示器没那么多空间，因此我打算购买一个 27 寸显示器。<br>但分辨率是继续选择 1080p 还是 2K 呢？</p><p>当时我看好的 Dell 一款 2K 分辨率的显示器，就是价格有点贵了（两千多），于是我就在网上买了另外一款 1080p 的 27 寸显示器。</p><p>当我拿到这款 1080p 的 27 寸显示器，能明显的看到它的颗粒感，一旦注意到了就没法再忽略它了。最后退而求其次，花了不到 1500 选择了优派的一款 27 寸 2K 显示器。</p><p>这一用就是三年，直到今年搬家了，我有了更大的办公桌，27 寸的 2K 显示器在大小上已经不太能满足我了，我就开始搜罗新的升级目标。</p><h3 id="双屏-27寸-2K"><a href="#双屏-27寸-2K" class="headerlink" title="双屏 27寸 2K"></a>双屏 27寸 2K</h3><p>我开始考虑是购买一个 34 寸显示器还是两个 27 寸 2K 显示器？</p><p>最后处于成本的考虑，我打算在闲鱼上收一台同款的 27 寸 2K 显示器组成双屏。但因为货源确实很少，加上一本不出外地，迟迟没有买到，最后不得不考虑购买两个新的 27 寸 2K 显示器。我再次在购买的两块 27 寸的 2K 显示器，还在闲鱼上买的显示器支架全都到货了，就等快乐的组装了。</p><p>可当我把两个显示器都摆在桌子上，我后悔了，比我想象中的要长，一米六的桌子都快盛不下它们了，另外可能是我支架没调好的原因，这两个显示器摆放在一起的时候中间有一条上宽下窄的缝 … …</p><h3 id="曲面单屏-34寸-2K"><a href="#曲面单屏-34寸-2K" class="headerlink" title="曲面单屏 34寸 2K"></a>曲面单屏 34寸 2K</h3><p>没有尝试过真的不知道到底什么才是适合自己的。现在我终于知道了… 目前最适合我的就是 34寸 显示曲面屏。</p><p>为什么是曲面的呢？</p><p>我目前公司的显示器组合是 32寸2K + 23寸1080p，这个32寸显示器就是直面屏幕的，在看屏幕边缘的内容时没有曲面屏幕来的舒服。</p><p>回到34寸曲面屏，市场中种类繁多，如果不想踩坑（折腾），建议直接买小米34寸曲面显示器。双十一钱购买的好像不足 1900。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上就是我用过的显示器的简单分享，比较主流但也比较有限。比如我没用过超过 2K 分辨率以上的显示器，也没用过更大尺寸和三屏以上的组合。</p><p>最后还是希望这个分享对你选购显示器有一点点帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组织内如何评估 CI/CD 成熟度</title>
      <link href="/2021/12/cicd-assessment/"/>
      <url>/2021/12/cicd-assessment/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在一个组织内，不同的团队之间可能会有不同的维度来评估 CI&#x2F;CD 的成熟度。这使得对衡量每个团队的 CI&#x2F;CD 的表现变得困难。</p><p>如何快速评估哪些项目遵循最佳实践？如何更容易地构建高质量的安全软件？组织内需要建立一个由团队成员一起讨论出来的最佳实践来帮助团队建立明确的努力方向。</p><h2 id="如何评估"><a href="#如何评估" class="headerlink" title="如何评估"></a>如何评估</h2><p>这里我参考了开源项目 <a href="https://github.com/coreinfrastructure/best-practices-badge">CII 最佳实践徽章计划</a>，这是 Linux 基金会 (LF) 发起的一个开源项目。它提供一系列自由&#x2F;开源软件 (FLOSS) 项目的最佳实践方法。参照这些最佳实践标准的项目可以进行自认证, 以获得核心基础设施促进会(CII)徽章。要做到这点无需任何费用，你的项目可以使用 Web 应用（BadgeApp) 来证明是如何符合这些实践标准的以及其详细状况。</p><p>这些最佳实践标准可以用来：</p><ul><li>鼓励项目遵循最佳实践。</li><li>帮助新的项目找到那些它们要遵循的最佳实践</li><li>帮助用户了解哪些项目遵循了最佳实践（这样用户可以更倾向于选择此类项目）。</li></ul><p>最佳实践包含以下五个标准：基本，变更控制，报告，质量，安全，分析。</p><p><img src="/2021/12/cicd-assessment/cii.png" alt="cii"></p><p>更多关于标准的细分可以参考 <a href="https://hardenedlinux.github.io/2016/08/04/best-practices-criteria-for-floss-part1.html">CII 中文文档</a> 或 <a href="https://github.com/coreinfrastructure/best-practices-badge/blob/main/doc/criteria.md">CII 英文文档</a>。</p><p>已经很多知名的项目比如 <a href="https://bestpractices.coreinfrastructure.org/en/projects/569">Kubernetes</a>, <a href="https://bestpractices.coreinfrastructure.org/en/projects/29">Node.js</a> 等在使用这个最佳实践徽章计划</p><p><img src="/2021/12/cicd-assessment/badge-owners.png" alt="badge-owners"></p><p>如果你的项目在 GitHub 上或是你可以按照上述的徽章计划进行评估，就可以使用它来评估你项目的最佳实践，并可以在项目主页的 README 上显示徽章结果。</p><p><img src="/2021/12/cicd-assessment/badge-result.png" alt="badge-result"></p><h2 id="定制最佳实践标准"><a href="#定制最佳实践标准" class="headerlink" title="定制最佳实践标准"></a>定制最佳实践标准</h2><p>如果上述项目不能满足你的评估要求，结合我的实践，制定了如下“最佳实践标准”并分配了相应的成熟度徽章，供参考。</p><h3 id="计算规则"><a href="#计算规则" class="headerlink" title="计算规则"></a>计算规则</h3><ol><li>每个最佳实践标准都有分数，通常一般的标准是10分，重要的标准是20分</li><li>带有🔰的最佳实践标准表示“一定要有”</li><li>带有👍的最佳实践标准表示“应当有”</li><li>每个项目的最佳实践标准分数之和落在的区间获得对应的徽章</li></ol><h3 id="徽章分数对照表"><a href="#徽章分数对照表" class="headerlink" title="徽章分数对照表"></a>徽章分数对照表</h3><table><thead><tr><th>徽章</th><th>分数</th><th>描述</th></tr></thead><tbody><tr><td>🚩WIP</td><td>&lt; 100</td><td>小于100分获得 🚩Work In Progress 徽章</td></tr><tr><td>✔️PASSING</td><td>&#x3D; 100</td><td>等于100分获得 ✔️PASSING 徽章</td></tr><tr><td>🥈SILVER</td><td>&gt; 100 &amp;&amp; &lt;&#x3D; 150</td><td>大于100，小于等于150分获得🥈银牌徽章</td></tr><tr><td>🥇GOLD</td><td>&gt; 150</td><td>大于等于150分获得🥇金牌徽章</td></tr></tbody></table><p>注：这个分数区间可调整。</p><h3 id="最佳实践标准和分数"><a href="#最佳实践标准和分数" class="headerlink" title="最佳实践标准和分数"></a>最佳实践标准和分数</h3><table><thead><tr><th>类别</th><th>最佳实践标准</th><th>分数</th><th>描述</th></tr></thead><tbody><tr><td><strong>基本</strong></td><td>🔰<strong>构建任何分支</strong></td><td><strong>20</strong></td><td>Jenkins：支持任何分支构建</td></tr><tr><td></td><td>🔰<strong>构建任何PR</strong></td><td><strong>20</strong></td><td>Jenkins：支持对任何 Pull Request 在 Merge 之前进行构建</td></tr><tr><td></td><td>🔰上传制品</td><td>10</td><td>Jenkins：构建产物上传到制品仓库保存</td></tr><tr><td></td><td>👍容器化构建</td><td>10</td><td>推荐使用容器化技术实现Pipeline</td></tr><tr><td><strong>质量</strong></td><td>🔰<strong>自动化测试</strong></td><td><strong>20</strong></td><td>Jenkins：支持触发冒烟&#x2F;单元&#x2F;回归测试</td></tr><tr><td></td><td>👍性能测试</td><td>10</td><td>Jenkins：支持触发性能测试</td></tr><tr><td></td><td>👍代码覆盖率收集</td><td>10</td><td>Jenkins：支持获得代码覆盖率</td></tr><tr><td><strong>安全</strong></td><td>🔰漏洞扫描</td><td>10</td><td>Jenkins：支持触发漏洞扫描</td></tr><tr><td></td><td>🔰License扫描</td><td>10</td><td>Jenkins：支持触发证书扫描</td></tr><tr><td><strong>分析</strong></td><td>👍Code Lint</td><td>10</td><td>Jenkins：支持对PR进行代码格式检查</td></tr><tr><td></td><td>👍静态代码分析</td><td>10</td><td>Jenkins：支持对PR进行静态代码分析</td></tr><tr><td></td><td>👍动态代码分析</td><td>10</td><td>Jenkins：支持对PR进行动态代码分析</td></tr><tr><td><strong>报告</strong></td><td>🔰Email或Slack通知</td><td>10</td><td>支持通过Email或Slack等方式通知</td></tr></tbody></table><p>注：以Jenkins为例。</p><h2 id="最终的结果"><a href="#最终的结果" class="headerlink" title="最终的结果"></a>最终的结果</h2><table><thead><tr><th>No</th><th>Repository Name</th><th>实现的最佳实践标准</th><th>徽章</th></tr></thead><tbody><tr><td>1</td><td>project-a</td><td>🔰<strong>构建任何分支</strong><br>🔰<strong>构建任何PR</strong><br>🔰上传制品<br>🔰<strong>自动化测试</strong><br>🔰Email或Slack通知</td><td>🚩WIP</td></tr><tr><td>2</td><td>project-b</td><td>🔰<strong>构建任何分支</strong><br>🔰<strong>构建任何PR</strong><br>🔰上传制品<br>🔰<strong>自动化测试</strong><br>🔰漏洞扫描<br>🔰License扫描<br>🔰Email或Slack通知</td><td>✔️PASSING</td></tr><tr><td>3</td><td>project-c</td><td>🔰<strong>构建任何分支</strong><br>🔰<strong>构建任何PR</strong><br>🔰上传制品<br>👍容器化构建<br>🔰<strong>自动化测试</strong><br>🔰漏洞扫描<br>🔰License扫描<br>🔰Email或Slack通知</td><td>🥈SILVER</td></tr><tr><td>4</td><td>project-d</td><td>🔰<strong>构建任何分支</strong><br>🔰<strong>构建任何PR</strong><br>🔰上传制品<br>👍容器化构建<br>🔰<strong>自动化测试</strong><br>👍性能测试<br>👍代码覆盖率收集<br>🔰漏洞扫描<br>🔰License扫描<br>👍Code Lint<br>👍静态代码分析<br>👍动态代码分析<br>🔰Email或Slack通知</td><td>🥇GOLD</td></tr></tbody></table><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q: 为什么使用徽章而不是分数？<br>A: 使用徽章能更好的帮助团队朝着目标而不是分数努力。</p><p>Q: 建立最佳实践标准还有哪些帮助？<br>A: 团队之间容易进行技术共享，更容易地构建高质量的安全软件，保持团队之间在统一的高水准。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> CD </tag>
            
            <tag> Badge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions 还能这么玩？自动将发布的博客文章更新到 GitHub 个人主页</title>
      <link href="/2021/11/special-repository/"/>
      <url>/2021/11/special-repository/</url>
      
        <content type="html"><![CDATA[<p>最近实现了一个很有意思的 Workflow，就是通过 GitHub Actions 自动将每次最新发布的文章自动同步到我的 GitHub 首页。</p><p>就像这样在首页显示最近发布的博客文章。</p><p><img src="/2021/11/special-repository/final.png"></p><p>要实现这样的工作流需要了解以下这几点：</p><ol><li>需要创建一个与 GitHub 同名的个人仓库，这个仓库的 <code>README.md</code> 信息会显示在首页</li><li>通过 GitHub Actions 自动获取博客的最新文章并更新 <code>README.md</code></li><li>只有当有新的文章发布的时候才触发自动获取、更新文章 GitHub Action</li></ol><span id="more"></span><p>GitHub 同名的个人仓库是一个特殊仓库，即创建一个与你的 GitHub 账号同名的仓库，添加的 <code>README.md</code> 会在 GitHub 个人主页显示。</p><p>举个例子：如果你的 GitHub 名叫 <code>GeBiLaoWang</code>，那么当你创建一个叫 <code>GeBiLaoWang</code> 的 Git 仓库，添加 README.md 后就会在主页显示。</p><p>针对这个功能 GitHub 上有很多丰富多彩的个人介绍（如下）。更多灵感可以参看这个链接：<a href="https://awesomegithubprofile.tech/">https://awesomegithubprofile.tech/</a></p><p><img src="/2021/11/special-repository/profile.png" alt="profile"></p><h2 id="自动获取文章并更新-README-md"><a href="#自动获取文章并更新-README-md" class="headerlink" title="自动获取文章并更新 README.md"></a>自动获取文章并更新 <code>README.md</code></h2><p>在 GitHub 上有很多开发者为 GitHub Actions 开发新的小功能。我这里用到一个开源项目叫 <a href="https://github.com/gautamkrishnar/blog-post-workflow">blog-post-workflow</a>，它可以通过 RSS（订阅源）来获取到博客的最新文章。</p><p>它不但支持 RSS 还支持获取 StackOverflow 以及 Youtube 视频等资源。</p><p>我只需要在 GitHub 同名的仓库下添加一个这样的 Workflow YML <code>.github/workflows/blog-post-workflow.yml</code> 即可。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Latest</span> <span class="string">blog</span> <span class="string">post</span> <span class="string">workflow</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;* 2 * * *&#x27;</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme-with-blog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">this</span> <span class="string">repo&#x27;s</span> <span class="string">README</span> <span class="string">with</span> <span class="string">latest</span> <span class="string">blog</span> <span class="string">posts</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">gautamkrishnar/blog-post-workflow@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 我的博客 RSS 链接</span></span><br><span class="line">          <span class="attr">feed_list:</span> <span class="string">&quot;https://shenxianpeng.github.io/atom.xml&quot;</span></span><br><span class="line">          <span class="comment"># 获取最新 10 篇文章</span></span><br><span class="line">          <span class="attr">max_post_count:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>刚开始我需要让这个 Workflow 能工作即可。因此用的定时触发，即就是每天早上两点就自动获取一次最新文章并更新这个特殊仓库 <code>README.md</code>。</p><p>这个做法还可以，但不够节省资源也不够完美。最好的做法是：只有当有新文章发布时才触发上面的 Workflow 更新 <code>README.md</code>。这就需要有一个 Webhook 当检测到有文章更新时自动触发这里的 Workflow。</p><h2 id="触发另一个-GitHub-Action"><a href="#触发另一个-GitHub-Action" class="headerlink" title="触发另一个 GitHub Action"></a>触发另一个 GitHub Action</h2><p>GitHub Actions 提供了一个 Webhook 事件叫做 <a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#repository_dispatch"><code>repository_dispatch</code></a> 可以来做这件事。</p><p>它的原理：使用 GitHub API 来触发一个 Webhook 事件，这个事件叫做 <code>repository_dispatch</code>，这个事件里的类型是可以自定义的，并且在要被触发的 workflow 里需要使用 <code>repository_dispatch</code> 事件。</p><p>即：在存放博客文章的仓库里要有一个 Workflow 通过发送 <code>repository_dispatch</code> 事件触发特殊仓库中的 Workflow 来更新 <code>README.md</code>。</p><p>这里我定义事件类型名叫 <code>special_repository</code>，它只接受来自 GitHub API <code>repository_dispatch</code> 事件。</p><p>再次调整上面的 <code>.github/workflows/blog-post-workflow.yml</code> 文件如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># special_repository.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Latest</span> <span class="string">blog</span> <span class="string">post</span> <span class="string">workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">repository_dispatch:</span></span><br><span class="line">    <span class="comment"># 这里的类型是可以自定义的，我将它起名为：special_repository</span></span><br><span class="line">    <span class="attr">types:</span> [<span class="string">special_repository</span>]</span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">update-readme-with-blog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Update</span> <span class="string">this</span> <span class="string">repo&#x27;s</span> <span class="string">README</span> <span class="string">with</span> <span class="string">latest</span> <span class="string">blog</span> <span class="string">posts</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">gautamkrishnar/blog-post-workflow@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">feed_list:</span> <span class="string">&quot;https://shenxianpeng.github.io/atom.xml&quot;</span></span><br><span class="line">          <span class="attr">max_post_count:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>接受事件的 Workflow 修改好了。如何发送类型为 <code>special_repository</code> 的 <code>repository_dispatch</code> 事件呢？我这里通过 <code>curl</code> 直接调用 API 来完成。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -XPOST -u <span class="string">&quot;<span class="variable">$&#123;&#123; secrets.PAT_USERNAME&#125;</span>&#125;:<span class="variable">$&#123;&#123;secrets.PAT_TOKEN&#125;</span>&#125;&quot;</span> \</span><br><span class="line">    -H <span class="string">&quot;Accept: application/vnd.github.everest-preview+json&quot;</span> \</span><br><span class="line">    -H <span class="string">&quot;Content-Type: application/json&quot;</span> https://api.github.com/repos/shenxianpeng/shenxianpeng/dispatches \</span><br><span class="line">    --data <span class="string">&#x27;&#123;&quot;event_type&quot;: &quot;special_repository&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>最后，发送事件 Workflow YML <code>.github/workflows/send-dispatch.yml</code> 如下:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Tigger</span> <span class="string">special</span> <span class="string">repository</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="comment"># 当 master 分支有变更的时候触发 workflow</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Send</span> <span class="string">repository</span> <span class="string">dispatch</span> <span class="string">event</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          curl -XPOST -u &quot;$&#123;&#123; secrets.PAT_USERNAME&#125;&#125;:$&#123;&#123;secrets.PAT_TOKEN&#125;&#125;&quot; \</span></span><br><span class="line"><span class="string">          -H &quot;Accept: application/vnd.github.everest-preview+json&quot; \</span></span><br><span class="line"><span class="string">          -H &quot;Content-Type: application/json&quot; https://api.github.com/repos/shenxianpeng/shenxianpeng/dispatches \</span></span><br><span class="line"><span class="string">          --data &#x27;&#123;&quot;event_type&quot;: &quot;special_repository&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>注：<code>PAT_USERNAME</code> 和 <code>PAT_TOKEN</code> 需要在当前的仓库【设置 -&gt; Secrets】里进行添加，这里就不具体介绍了，需要可以自行搜索。</p><p><img src="/2021/11/special-repository/secrets.png"></p><p>以上就是通过 GitHub Actions 实现当博客有新发布的文章后自动更新 GitHub 首页的所有内容了。</p><p>如果还有什么有意思的玩法欢迎评论区里分享一下吧。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021-22 世界质量报告（World Quality Report）</title>
      <link href="/2021/11/world-quality-report/"/>
      <url>/2021/11/world-quality-report/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2021-22 世界质量报告（World Quality Report 简称 WQR）是由 Micro Focus，Capgemini 和 Sogeti 三家公司合作的来分析软件质量和测试趋势在全球范围内唯一的报告。</p><p>这份报告共采访了 1750 名高管和专业人士。从最高管理层到 QA 测试经理和质量工程师，涵盖了来自全球 32 个国家的 10 个行业。</p><p><img src="/2021/11/world-quality-report/0.png"></p><p>世界质量报告（WQR）是一项独一无二的全球研究，今年的调查强调了新部署方法中不断变化的受大流行影响的应用程序需求的影响，以及 QA 对敏捷和 DevOps 实践的采用，AI 的持续增长。</p><p>作为测试关注这类软件质量报告可以帮助我们快速了解软件测试行业的现状和趋势。</p><h2 id="五大主题"><a href="#五大主题" class="headerlink" title="五大主题"></a>五大主题</h2><p>WQR 的一个关键信息：在新冠疫情依旧的今天，我们看到了数字化转型的融合以及敏捷和 DevOps 实践的实时采用。此外，QA 正在成为采用敏捷和 DevOps 实践的领导者，为团队提供工具和流程以促进整个软件生命周期（SDLC）的质量。</p><p>WQR 围绕关键发现和趋势突出了五个特定主题：</p><ol><li>新冠疫情对 QA 组织和软件测试的影响</li><li>数字化转型与 DevOps 和敏捷采用的实时融合以及 QA 在其中的日益重要的作用</li><li>地理上分散的团队在跨环境部署应用程序时专注于业务成果</li><li>人工智能 (AI) 增强了敏捷和 DevOps 在所有团队中培养不断增长的质量责任文化</li><li>使用 AI 驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求</li></ol><span id="more"></span><h2 id="主要发现和趋势"><a href="#主要发现和趋势" class="headerlink" title="主要发现和趋势"></a>主要发现和趋势</h2><h3 id="1-新冠疫情对-QA-组织和软件测试的影响"><a href="#1-新冠疫情对-QA-组织和软件测试的影响" class="headerlink" title="1. 新冠疫情对 QA 组织和软件测试的影响"></a>1. 新冠疫情对 QA 组织和软件测试的影响</h3><p>新冠疫情对 QA 在内的几乎所有业务方面都产生了直接而真实的影响。然而许多 QA 组织能够适应新的混合工作环境的现实，并过渡到在分布式团队中工作的新现实。这可能发生了，因为混合分布式团队的趋势已经在增长，而疫情只是加速了这种趋势。</p><h4 id="客户体验为王"><a href="#客户体验为王" class="headerlink" title="客户体验为王"></a>客户体验为王</h4><p>新冠疫情将重点重新放在了客户及其体验上。今年最受好评的方面是：</p><ul><li>增强客户体验，63% 的受访者选择了这一点</li><li>其次是增强安全性（62%）</li><li>再次是对业务需求的更高响应能力（61%）</li><li>以及更高质量的软件解决方案 (61%)</li></ul><p><img src="/2021/11/world-quality-report/1.png"></p><h4 id="从保管人到质量冠军"><a href="#从保管人到质量冠军" class="headerlink" title="从保管人到质量冠军"></a>从保管人到质量冠军</h4><p>在过去的一年中，测试和 QA 目标也发生了重新排序。去年业务成果和质量的守护者是明显的领导者，而今年，这些数据之间的支持率缩小了。</p><ul><li>团队中的质量保管人、质量速度和质量赋能以 62% 领先</li><li>业务保证、数字化幸福和自动化以 61% 排在了第二位</li></ul><p>QA 团队正在从质量的监护人演变为质量的拥护者。QA 团队正在成为组织质量计划中充满活力的领导者，支持团队中的每个人实现质量，同时为业务成果和增长做出贡献。</p><p><img src="/2021/11/world-quality-report/2.png"></p><h3 id="2-数字化转型与-DevOps-和敏捷采用的实时融合以及-QA-在其中的日益重要的作用"><a href="#2-数字化转型与-DevOps-和敏捷采用的实时融合以及-QA-在其中的日益重要的作用" class="headerlink" title="2. 数字化转型与 DevOps 和敏捷采用的实时融合以及 QA 在其中的日益重要的作用"></a>2. 数字化转型与 DevOps 和敏捷采用的实时融合以及 QA 在其中的日益重要的作用</h3><h4 id="推动数字化转型"><a href="#推动数字化转型" class="headerlink" title="推动数字化转型"></a>推动数字化转型</h4><p>今年，数字化转型举措符合疫情的要求。在疫情开始之前，敏捷和 DevOps 是一种增长趋势。在疫情期间，我们开始看到 QA 现在在组织采用敏捷和 DevOps 方面发挥着关键作用，模糊了开发和测试之间的界限，同时创建了一种混合的质量方法。</p><p>来看看数字化转型的驱动因素有哪些：提高生产力和效率以 47% 的比例领先；其次是提高服务&#x2F;产品质量的比例为 46%；第三是速度、更好的敏捷性和灵活性；客户体验直接落后于速度；紧随其后的是降低成本和创造创新机会；竞争差异化是最后。</p><p><img src="/2021/11/world-quality-report/3.png"></p><blockquote><p>因为竞争差异似乎更多是数字化转型的附带好处，而数字化转型本身有助于提高效率、质量、速度和整体更好的客户体验。</p></blockquote><h4 id="QA-在-DevOps-和敏捷采用中的作用越来越大-——-以业务优先级为指导"><a href="#QA-在-DevOps-和敏捷采用中的作用越来越大-——-以业务优先级为指导" class="headerlink" title="QA 在 DevOps 和敏捷采用中的作用越来越大 —— 以业务优先级为指导"></a>QA 在 DevOps 和敏捷采用中的作用越来越大 —— 以业务优先级为指导</h4><p>今年，我们见证了业务需求的重大调整，变得比技术堆栈的需求更重要。与去年相比，对技术栈给予权重的参与者数量下降了 16 个百分点，取而代之的是上升最大的：</p><ul><li>业务优先级，现在排名第一，比去年增加了 11 个百分点</li><li>此外，与去年相比显着增加的是文化&#x2F;敏捷性，增加了 21 个百分点</li></ul><p><img src="/2021/11/world-quality-report/4.png"></p><h3 id="3-地理上分散的团队在跨环境部署应用程序时专注于业务成果"><a href="#3-地理上分散的团队在跨环境部署应用程序时专注于业务成果" class="headerlink" title="3. 地理上分散的团队在跨环境部署应用程序时专注于业务成果"></a>3. 地理上分散的团队在跨环境部署应用程序时专注于业务成果</h3><p>去年的调查是在全球疫情开始时进行的，该调查显示了满足业务目标所需的变革迹象，以及远程工作和数字化转型的新要求。通过今年的调查，我们看到数字化转型仍在继续，即使与受疫情影响的新工作要求保持同步。这加速了公司将工作负载迁移到云的计划，部分原因是计划中的数字化转型计划，以及向远程工作的快速转变，刺激了提高安全性的需求。</p><p>由于受疫情影响的工作场所，评价最高的焦点是对测试系统和测试环境的远程访问（使用 SaaS 和云）。支持这种远程访问是基于远程的次要因素，包括更好的团队协作工具。为了支持现代应用程序的质量，测试环境本身也必须现代化。今年，我们看到：</p><ul><li>组织对使用云和容器实现测试环境现代化的越来越满意（最高满意度）</li><li>其次是改进预订和管理测试环境（+16）</li><li>然后提供可见性（+22）</li><li>最后成本效率（+18）</li></ul><p><img src="/2021/11/world-quality-report/5.png"></p><h3 id="4-人工智能-AI-增强了敏捷和-DevOps-在所有团队中培养不断增长的质量责任文化"><a href="#4-人工智能-AI-增强了敏捷和-DevOps-在所有团队中培养不断增长的质量责任文化" class="headerlink" title="4. 人工智能 (AI) 增强了敏捷和 DevOps 在所有团队中培养不断增长的质量责任文化"></a>4. 人工智能 (AI) 增强了敏捷和 DevOps 在所有团队中培养不断增长的质量责任文化</h3><p>人工智能继续改变测试自动化的构建方式，以及测试的执行方式。我们看到组织内部对基于 AI 的测试水平的信心越来越高，几乎一半的受访者表示他们已经拥有 AI 和 ML 所需的测试执行数据的仓库，并表示他们愿意根据他们的 AI 和 ML 平台提供的情报采取行动。</p><p><img src="/2021/11/world-quality-report/6.png"></p><p>今年，我们还要求受访者预测他们利用一系列方法来加速和优化敏捷和 DevOps 环境中的测试的可能性。与去年同期相比：</p><ul><li>将测试集成到 CI&#x2F;CD 流水线的自动质量门（+5）</li><li>通过实施智能和自动化仪表板以实现持续质量监控增长最多（+9）</li><li>今年新增加的使用 AI 来优化测试用例在总体上并列第二，仅落后于测试左移。</li></ul><p><img src="/2021/11/world-quality-report/7.png"></p><h3 id="5-使用-AI-驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求"><a href="#5-使用-AI-驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求" class="headerlink" title="5. 使用 AI 驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求"></a>5. 使用 AI 驱动的持续测试和质量管理工具来解决客户体验优先事项和快速变化的受疫情影响的要求</h3><p>今年，我们向受访者询问了测试自动化有哪些好处：</p><ul><li>首先与去年相比所有项目同比趋势均呈下降趋势，这显示了在混合和分布式团队中工作所面临的挑战</li><li>像是更好的发现缺陷、缩短测试周期、降低整体安全风险、更好的测试覆盖率、降低测试成本，以及控制测试的透明度都是显而易见的好处</li><li>AI&#x2F;ML 是第四高的好处，这也证明了它的潜力和价值</li></ul><p><img src="/2021/11/world-quality-report/8.png"></p><h2 id="主要建议"><a href="#主要建议" class="headerlink" title="主要建议"></a>主要建议</h2><h3 id="敏捷和-DevOps-中的-QA-编排"><a href="#敏捷和-DevOps-中的-QA-编排" class="headerlink" title="敏捷和 DevOps 中的 QA 编排"></a>敏捷和 DevOps 中的 QA 编排</h3><p>关注最重要的事情：客户体验和业务目标，以效率和速度满足这两者的需求。同时，在你的团队中采用工程思维，并接受多技能和技能提升。一个正在迅速成为新常态的新趋势是 SDET（测试中的软件开发工程师）。投资洞察力，尤其是跨越整个 QA 和测试功能的实时洞察力。从短期战术计划到长期规划和战略方向，专注于开发具有实时 KPI 的智能仪表板。</p><h3 id="智能测试自动化"><a href="#智能测试自动化" class="headerlink" title="智能测试自动化"></a>智能测试自动化</h3><p>通过采用自动化优先的软件质量交付方法，在 QA 中标准化测试自动化的使用。在 E2E 生命周期中扩展自动化，将自动化纳入所有 QA 活动。</p><h3 id="人工智能和机器学习"><a href="#人工智能和机器学习" class="headerlink" title="人工智能和机器学习"></a>人工智能和机器学习</h3><p>推动人工智能的使用 —— 不要被它所驱动。AI 和 ML 有望提供指数级的改进，但将 AI 用作工具，而不是替代你正在制定的业务决策。例如，使用 AI 来阐明该做什么以及何时该做。它不仅有助于识别故障，而且有助于识别这些故障发生的原因。此外，将 AI 重点放在最重要的事情上，确定软件交付中最具挑战性的质量领域。如果你尚未将 AI 纳入质量，那么现在是开始的最佳时机。</p><h3 id="测试环境管理-TEM-和测试数据管理-TDM"><a href="#测试环境管理-TEM-和测试数据管理-TDM" class="headerlink" title="测试环境管理 (TEM) 和测试数据管理 (TDM)"></a>测试环境管理 (TEM) 和测试数据管理 (TDM)</h3><p>云计算的采用正在继续肯定和稳定的增长，但要注意确保未来不会掩盖现在的需求。成功采用云计算的关键是要确保与传统应用程序的完整性。另外，数据分析现在是测试数据管理框架的一个关键方面。</p><h3 id="安防与智能产业"><a href="#安防与智能产业" class="headerlink" title="安防与智能产业"></a>安防与智能产业</h3><p>远程连接要求对测试和QA组织的安全性和弹性进行适当的考虑。投资于创新，在你的实验室和你的团队中。无论你是否从 POC 开始来证明可行性，确保管理层的支持是实施变革的关键。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看完整个 WQR 报告之后我从中学习到的变化：</p><ol><li>以业务优先级为指导。与去年相比，技术栈的权重下降了16%，取而代之的是业务优先级。然后是文化、敏捷增加了21%</li><li>对云和容器实现测试环境现代化满意度评价最高</li><li>将测试集成到 CI&#x2F;CD 流水线的自动质量门（+5%）</li><li>实施智能和自动化 Dashboard 以实现持续质量监控的增长最多（+9%）</li><li>使用 AI 来优化测试用例在总体上并列第二，仅落后与测试左移</li><li>人工智能继续改变自动化的构建方式和测试的执行方式。几乎一半的受访者表示他们拥有 AI&#x2F;ML 所需要的测试执行仓库，并且愿意根据 AI&#x2F;ML 提供的情况采取行动</li></ol><hr><blockquote><p>关注微信公众号《DevOps攻城狮》回复：”WQR” 可以下载完整版的《2021-22 世界质量报告(WQR) 》。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Quality </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Report </tag>
            
            <tag> Quality </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polaris - 静态代码分析</title>
      <link href="/2021/10/what-is-polaris/"/>
      <url>/2021/10/what-is-polaris/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这可能是中文网里介绍Polaris最详细的文章了</p></blockquote><h2 id="什么是-Polaris？"><a href="#什么是-Polaris？" class="headerlink" title="什么是 Polaris？"></a>什么是 Polaris？</h2><p><strong>Polaris</strong> - 托管静态应用程序软件测试(SAST)工具的 SaaS 平台，它是用于分类和修复漏洞并运行报告的 Web 站点。<br><strong>SAST</strong> - 一种对源代码分析或构建过程中去寻找安全漏洞的工具，是一种在软件开发的生命周期(SDLC)中确保安全的重要步骤。<br><strong>Coverity</strong> - Coverity 是 Synopsys 公司提供的原始静态应用软件测试 (SAST) 工具。Polaris 是 Coverity 的 SaaS 版本。<br><strong>Synopsys</strong> - 是开发 Polaris 和其他软件扫描工具的公司，比如 BlackDuck 也是他们的产品。</p><h2 id="Polaris-支持哪些语言？"><a href="#Polaris-支持哪些语言？" class="headerlink" title="Polaris 支持哪些语言？"></a>Polaris 支持哪些语言？</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C/C++</span><br><span class="line">C#</span><br><span class="line">Java</span><br><span class="line">JavaScript</span><br><span class="line">TypeScript</span><br><span class="line">PHP</span><br><span class="line">Python</span><br><span class="line">Fortran</span><br><span class="line">Swift</span><br><span class="line">...and more</span><br></pre></td></tr></table></figure><h2 id="Polaris-SaaS-平台"><a href="#Polaris-SaaS-平台" class="headerlink" title="Polaris SaaS 平台"></a>Polaris SaaS 平台</h2><p>通常如果你的组织引入了 Polaris 的 SaaS 服务，你将会有如下网址可供访问 URL: <a href="https://organization.polaris.synopsys.com/">https://organization.polaris.synopsys.com</a></p><p>然后登录，你就可以给自己的 Git Repository 创建对应的项目了。</p><blockquote><p>建议：创建的项目名称与 Git Repository 的名称一致。</p></blockquote><h2 id="Polaris-如何进行漏洞扫描？"><a href="#Polaris-如何进行漏洞扫描？" class="headerlink" title="Polaris 如何进行漏洞扫描？"></a>Polaris 如何进行漏洞扫描？</h2><h3 id="Polaris-安装"><a href="#Polaris-安装" class="headerlink" title="Polaris 安装"></a>Polaris 安装</h3><p>在进行 Polaris 扫描之前，你需要先下载并安装 polaris。</p><p>如果你的 Polaris server URL 为：<code>POLARIS_SERVER_URL=https://organization.polaris.synopsys.com</code></p><p>下载连接为：<code>$POLARIS_SERVER_URL/api/tools/polaris_cli-linux64.zip</code></p><p>然后将下载到本地的 <code>polaris_cli-linux64.zip</code> 进行解压，将其 bin 目录添加到 PATH 中。</p><h3 id="Polaris-YAML-文件配置"><a href="#Polaris-YAML-文件配置" class="headerlink" title="Polaris YAML 文件配置"></a>Polaris YAML 文件配置</h3><p>在进行扫描之前，你需要为你的项目创建 YAML 文件。默认配置文件名为 <code>polaris.yml</code>，位于项目根目录。如果你希望指定不同的配置文件名，你可以在 <code>polaris</code> 命令中使用 <code>-c</code> 选项。</p><p>在项目根目录运行 <code>polaris setup</code> 以生成通用的 <code>polaris.yml</code> 文件。</p><p>运行 <code>polaris configure</code> 以确认你的文件在语法上是正确的并且 <code>polaris</code> 没有任何问题。</p><h4 id="Capture-捕获"><a href="#Capture-捕获" class="headerlink" title="Capture - 捕获"></a>Capture - 捕获</h4><p>YAML 配置文件可以包含三种类型的 Capture：</p><ul><li>Build(构建) - 运行构建命令，然后分析结果</li><li>Filesystem(文件系统) - 对于解释型语言，提供项目类型和要分析的扩展列表</li><li>Buildless - 对于一些可以使用依赖管理器的语言，比如 maven</li></ul><table><thead><tr><th>Languages</th><th>Build Options</th></tr></thead><tbody><tr><td>C, C++, ObjectiveC, Objective C++,Go, Scala, Swift</td><td>使用 Build 捕获</td></tr><tr><td>PHP, Python, Ruby</td><td>使用 Buildless 或 Filesystem 捕获</td></tr><tr><td>C#, Visual Basic.</td><td>如果想获得更准确的结果使用 Build 捕获；如果寻求简单使用 Buildless 捕获</td></tr><tr><td>Java</td><td>如果想获得更准确的结果使用 Build 捕获；如果寻求简单使用 Buildless 捕获</td></tr><tr><td>JavaScript,TypeScript</td><td>使用 Filesystem 捕获；如果寻求简单使用 Buildless 捕获</td></tr></tbody></table><h4 id="Analyze-分析"><a href="#Analyze-分析" class="headerlink" title="Analyze - 分析"></a>Analyze - 分析</h4><p>如果你正在扫描 C&#x2F;C++ 代码，则应包括此分析部分以充分利用 Polaris 的扫描功能：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">analyze:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">central</span></span><br><span class="line">  <span class="attr">coverity:</span></span><br><span class="line">    <span class="attr">cov-analyze:</span> [<span class="string">&quot;--security&quot;</span>,<span class="string">&quot;--concurrency&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="Polaris-YAML-示例文件"><a href="#Polaris-YAML-示例文件" class="headerlink" title="Polaris YAML 示例文件"></a>Polaris YAML 示例文件</h4><span id="more"></span><p>示例1：一个C&#x2F;C++ 项目</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-cplus-demo</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">$&#123;scm.git.branch&#125;</span></span><br><span class="line">  <span class="attr">revision:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;scm.git.commit&#125;</span></span><br><span class="line">    <span class="attr">date:</span> <span class="string">$&#123;scm.git.commit.date&#125;</span></span><br><span class="line"><span class="attr">capture:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">cleanCommands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> [<span class="string">make</span>, <span class="string">-f</span>, <span class="string">GNUmakefile</span>, <span class="string">clean</span>]</span><br><span class="line">    <span class="attr">buildCommands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> [<span class="string">make</span>, <span class="string">-f</span>, <span class="string">GNUmakefile</span>]</span><br><span class="line"><span class="attr">analyze:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">central</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="attr">coverity:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">serverUrl:</span> <span class="string">https://organization.polaris.synopsys.com</span></span><br></pre></td></tr></table></figure><p>示例2：一个 Java 项目</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-java-demo</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">$&#123;scm.git.branch&#125;</span></span><br><span class="line">  <span class="attr">revision:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;scm.git.commit&#125;</span></span><br><span class="line">    <span class="attr">date:</span> <span class="string">$&#123;scm.git.commit.date&#125;</span></span><br><span class="line"><span class="attr">capture:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">cleanCommands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> [<span class="string">gradle</span>, <span class="string">-b</span>, <span class="string">build.gradle</span>, <span class="string">--no-daemon</span>, <span class="string">clean</span>]</span><br><span class="line">    <span class="attr">buildCommands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> [<span class="string">gradle</span>, <span class="string">-b</span>, <span class="string">build.gradle</span>, <span class="string">--no-daemon</span>, <span class="string">shadowJar</span>]</span><br><span class="line">  <span class="attr">fileSystem:</span></span><br><span class="line">    <span class="attr">ears:</span></span><br><span class="line">      <span class="attr">extensions:</span> [<span class="string">ear</span>]</span><br><span class="line">      <span class="attr">files:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">directory:</span> <span class="string">$&#123;project.projectDir&#125;</span></span><br><span class="line">    <span class="attr">java:</span></span><br><span class="line">      <span class="attr">files:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">directory:</span> <span class="string">$&#123;project.projectDir&#125;</span></span><br><span class="line">    <span class="attr">javascript:</span></span><br><span class="line">      <span class="attr">files:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">directory:</span> <span class="string">client-vscode</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">excludeRegex:</span> <span class="string">node_modules|bower_components|vendor</span></span><br><span class="line">    <span class="attr">python:</span></span><br><span class="line">      <span class="attr">files:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">directory:</span> <span class="string">$&#123;project.projectDir&#125;</span></span><br><span class="line">    <span class="attr">wars:</span></span><br><span class="line">      <span class="attr">extensions:</span> [<span class="string">war</span>]</span><br><span class="line">      <span class="attr">files:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">directory:</span> <span class="string">$&#123;project.projectDir&#125;</span></span><br><span class="line"><span class="attr">analyze:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">central</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="attr">coverity:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">serverUrl:</span> <span class="string">https://organization.polaris.synopsys.com</span></span><br></pre></td></tr></table></figure><p>示例3：一个 CSharp 项目</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">project:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-ssharp-demo</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">$&#123;scm.git.branch&#125;</span></span><br><span class="line">  <span class="attr">revision:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;scm.git.commit&#125;</span></span><br><span class="line">    <span class="attr">date:</span> <span class="string">$&#123;scm.git.commit.date&#125;</span></span><br><span class="line"><span class="attr">capture:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">buildCommands:</span></span><br><span class="line">    <span class="comment"># 如果构建过程很复杂，你可以写一个脚本，然后调用它</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">shell:</span> [<span class="string">&#x27;script\polaris.bat&#x27;</span>]</span><br><span class="line">    <span class="comment"># 跳过一些你不想扫描的文件</span></span><br><span class="line">    <span class="attr">skipFiles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.java&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.text&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*.js&quot;</span></span><br><span class="line"><span class="attr">analyze:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">central</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="attr">coverity:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">serverUrl:</span> <span class="string">https://organization.polaris.synopsys.com</span></span><br></pre></td></tr></table></figure><p>更多关于如何编写 <code>polaris.yml</code> 就不一一罗列了，详细请参考 Polaris 的官方文档：<a href="https://sig-docs.synopsys.com/polaris/topics/c_conf-overview.html">https://sig-docs.synopsys.com/polaris/topics/c_conf-overview.html</a></p><h3 id="执行分析"><a href="#执行分析" class="headerlink" title="执行分析"></a>执行分析</h3><p>可以使用如下命令进行 Polaris 分析：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">polaris -c polaris.yml analyze -w --coverity-ignore-capture-failure</span><br></pre></td></tr></table></figure><p><code>--coverity-ignore-capture-failure</code> - 忽略 Coverity 捕获失败。运行 <code>polaris help analyze</code> 可以查看更多分析命令的介绍。</p><h3 id="Polaris-分析结果"><a href="#Polaris-分析结果" class="headerlink" title="Polaris 分析结果"></a>Polaris 分析结果</h3><p>如果 Polaris 分析成功，将会在控制台看到一条成功信息如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[INFO] [1zb99xsu] Coverity job completed successfully!</span><br><span class="line"></span><br><span class="line">[INFO] [1zb99xsu] Coverity - analyze phase took 4m 36.526s.</span><br><span class="line">Analysis Completed.</span><br><span class="line">Coverity analysis</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;JobId&quot;</span>: <span class="string">&quot;mlkik4esb961p0dtq8i6m7pm14&quot;</span>,</span><br><span class="line"> <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;Success&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">Job issue summary</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;IssuesBySeverity&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;Critical&quot;</span>: 0,</span><br><span class="line">  <span class="string">&quot;High&quot;</span>: 250,</span><br><span class="line">  <span class="string">&quot;Medium&quot;</span>: 359,</span><br><span class="line">  <span class="string">&quot;Low&quot;</span>: 81</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">&quot;Total&quot;</span>: 690,</span><br><span class="line"> <span class="string">&quot;NewIssues&quot;</span>: 0,</span><br><span class="line"> <span class="string">&quot;ClosedIssues&quot;</span>: 0,</span><br><span class="line"> <span class="string">&quot;SummaryUrl&quot;</span>: <span class="string">&quot;https://organization.polaris.synopsys.com/projects/bb079756-194e-4645-9121-5131493a0c93/branches/d567c376-4d5d-4941-8733-aa27bb2f5f5b&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里显示了一共发现了多少 690 个漏洞，以及每种不同严重程度各占多少个。具体的漏洞信息需要登录到 Polaris SaaS 平台进行查看。</p><p>点击 <code>SummaryUrl</code> 中的链接将会直接跳转到该项目的 Polaris 扫描结果。</p><p><img src="/2021/10/what-is-polaris/summary.png" alt="Summary"></p><p><img src="/2021/10/what-is-polaris/issues.png" alt="Issues"></p>]]></content>
      
      
      <categories>
          
          <category> Polaris </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Polaris </tag>
            
            <tag> Static </tag>
            
            <tag> Coverity </tag>
            
            <tag> Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令备忘录</title>
      <link href="/2021/10/git-cheatsheet/"/>
      <url>/2021/10/git-cheatsheet/</url>
      
        <content type="html"><![CDATA[<p>不管是对于 Git 的初学者还是经常使用 Git 的码农们，在日常工作中难免会有遇到有的命令一时想不起来。不妨将下面总结的一些 Git 常用命令及技巧收藏或打印出来，以备需要的时候可以很快找到。</p><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a><code>git config</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查 git 配置</span></span><br><span class="line">git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置你的 git 提交 username 和 email</span></span><br><span class="line"><span class="comment"># 例如：对于公司里项目</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@organization.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：对于个人的 GitHub 项目</span></span><br><span class="line">git config user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;your_emailn@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 HTTP/HTTPS 避免每次输入密码</span></span><br><span class="line">git config --global credential.helper cache</span><br></pre></td></tr></table></figure><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a><code>git init</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化一个仓库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a><code>git add</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件添加到暂存区</span></span><br><span class="line">git add file_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅将某些文件添加到暂存区, 例如:仅添加所有以 &#x27;test*&#x27; 开头的文件</span></span><br><span class="line">git add <span class="built_in">test</span>*</span><br></pre></td></tr></table></figure><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查仓库状态</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a><code>git commit</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交更改</span></span><br><span class="line">git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交带有消息的更改</span></span><br><span class="line">git commit -m <span class="string">&quot;This is a commit message&quot;</span></span><br></pre></td></tr></table></figure><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史和显示相应的修改</span></span><br><span class="line">git <span class="built_in">log</span> -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示提交历史统计</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示特定的提交</span></span><br><span class="line">git show commit_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以图形方式显示当前分支的提交信息</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以图形方式显示所有分支的提交信息</span></span><br><span class="line">git <span class="built_in">log</span> --graph --oneline --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取远程仓库的当前提交日志</span></span><br><span class="line">git <span class="built_in">log</span> origin/master</span><br></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a><code>git diff</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在使用 diff 提交之前所做的更改</span></span><br><span class="line">git diff</span><br><span class="line">git diff some_file.js</span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a><code>git rm</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除跟踪文件</span></span><br><span class="line">git <span class="built_in">rm</span> file_name</span><br></pre></td></tr></table></figure><h2 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a><code>git mv</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line">git <span class="built_in">mv</span> old_file_name new_file_name</span><br></pre></td></tr></table></figure><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><code>git checkout</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原未暂存的更改</span></span><br><span class="line">git checkout file_name</span><br></pre></td></tr></table></figure><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 还原暂存区的更改</span></span><br><span class="line">git reset HEAD file_name</span><br><span class="line">git reset HEAD -p</span><br></pre></td></tr></table></figure><h2 id="git-commit-amend"><a href="#git-commit-amend" class="headerlink" title="git commit --amend"></a><code>git commit --amend</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改最近的提交信息</span></span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改最近的提交信息为：New commit message</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;New commit message&quot;</span></span><br></pre></td></tr></table></figure><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a><code>git revert</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回滚最后一次提交</span></span><br><span class="line">git revert HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚指定一次提交</span></span><br><span class="line">git revert commit_id</span><br></pre></td></tr></table></figure><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><code>git branch</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建分支并切到该分支</span></span><br><span class="line">git checkout -b branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查当前正在跟踪的远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d branch_name</span><br></pre></td></tr></table></figure><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a><code>git merge</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 branch_name 合并到当分支</span></span><br><span class="line">git merge branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中止合并</span></span><br><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a><code>git pull</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库拉取更改</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a><code>git fetch</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库更改</span></span><br><span class="line">git fetch</span><br></pre></td></tr></table></figure><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a><code>git push</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送更改到远程仓库</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送一个新分支到远程仓库</span></span><br><span class="line">git push -u origin branch_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程仓库分支</span></span><br><span class="line">git push --delete origin branch_name</span><br></pre></td></tr></table></figure><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a><code>git remote</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">git add remote https://repository_name.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库的更多信息</span></span><br><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="Git技巧和窍门"><a href="#Git技巧和窍门" class="headerlink" title="Git技巧和窍门"></a>Git技巧和窍门</h2><h3 id="清理已合并分支"><a href="#清理已合并分支" class="headerlink" title="清理已合并分支"></a>清理已合并分支</h3><p>清理已经合并的本地分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">&quot;master&quot;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a><code>.gitignore</code></h3><p>指明 Git 应该忽略的故意不跟踪的文件的文件，比如 <code>.gitignore</code> 如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 忽略 .vscode 目录</span></span><br><span class="line">.vscode/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 build 目录</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略文件</span></span><br><span class="line">output.log</span><br></pre></td></tr></table></figure><h3 id="gitattributes"><a href="#gitattributes" class="headerlink" title=".gitattributes"></a><code>.gitattributes</code></h3><p>关于 <code>.gitattributes</code> 请参考</p><ul><li><a href="https://www.git-scm.com/docs/gitattributes">https://www.git-scm.com/docs/gitattributes</a></li><li><a href="https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings">https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Cheatsheet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How does SonarQube Community Edition integrate with the project</title>
      <link href="/2021/09/sonarqube-integration/"/>
      <url>/2021/09/sonarqube-integration/</url>
      
        <content type="html"><![CDATA[<p>After you have set up the SonarQube instance, you will need to integrate SonarQube with project.</p><p>Because I used the community edition version, it doesn’t support the C&#x2F;C++ project, so I only demo how to integrate with Maven, Gradle, and Others.</p><p>For example, the demo project name and ID in SonarQube are both <code>test-demo</code>, and I build with Jenkins.</p><h2 id="Build-with-Maven"><a href="#Build-with-Maven" class="headerlink" title="Build with Maven"></a>Build with Maven</h2><ol><li><p>Add the following to your <code>pom.xml</code> file:</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sonar.projectKey</span>&gt;</span>test-demo<span class="tag">&lt;/<span class="name">sonar.projectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Add the following code to your <code>Jenkinsfile</code>:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stage(&#x27;SonarQube Analysis&#x27;) &#123;</span><br><span class="line">  def mvn = tool &#x27;Default Maven&#x27;;</span><br><span class="line">  withSonarQubeEnv() &#123;</span><br><span class="line">    sh &quot;$&#123;mvn&#125;/bin/mvn sonar:sonar&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Build-with-Gradle"><a href="#Build-with-Gradle" class="headerlink" title="Build with Gradle"></a>Build with Gradle</h2><ol><li><p>Add the following to your <code>build.gradle</code> file:</p> <figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">  id <span class="string">&quot;org.sonarqube&quot;</span> version <span class="string">&quot;3.3&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sonarqube &#123;</span><br><span class="line">  properties &#123;</span><br><span class="line">    property <span class="string">&quot;sonar.projectKey&quot;</span>, <span class="string">&quot;test-demo&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Add the following code to your <code>Jenkinsfile</code>:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stage(&#x27;SonarQube Analysis&#x27;) &#123;</span><br><span class="line">  withSonarQubeEnv() &#123;</span><br><span class="line">    sh &quot;./gradlew sonarqube&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Build-with-Other-for-JS-TS-Python-…"><a href="#Build-with-Other-for-JS-TS-Python-…" class="headerlink" title="Build with Other(for JS, TS, Python, …)"></a>Build with Other(for JS, TS, Python, …)</h2><ol><li><p>Create a <code>sonar-project.properties</code> file in your repository and paste the following code:</p> <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sonar.projectKey=test-demo</span><br></pre></td></tr></table></figure></li><li><p>Add the following code to your <code>Jenkinsfile</code>:</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stage(&#x27;SonarQube Analysis&#x27;) &#123;</span><br><span class="line">  def scannerHome = tool &#x27;SonarScanner&#x27;;</span><br><span class="line">  withSonarQubeEnv() &#123;</span><br><span class="line">    sh &quot;$&#123;scannerHome&#125;/bin/sonar-scanner&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>More about how to integrate with SonarQube, please visit your SonarQube instance documentation: <a href="http://localhost:9000/documentation">http://localhost:9000/documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> SonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> SonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Run lcov failed &quot;Can&#39;t locate JSON/PP.pm in @INC ...&quot;</title>
      <link href="/2021/09/lcov-error/"/>
      <url>/2021/09/lcov-error/</url>
      
        <content type="html"><![CDATA[<p>When execute command: <code>lcov --capture --directory . --no-external --output-file coverage.info</code> to generate code coverage report, I encountered the following error:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lcov --capture --directory . --no-external --output-file coverage.info</span><br><span class="line">Capturing coverage data from .</span><br><span class="line">Can<span class="string">&#x27;t locate JSON/PP.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /usr/local/bin/geninfo line 63.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at /usr/local/bin/geninfo line 63.</span></span><br><span class="line"><span class="string">sh-4.2$ perl -MCPAN -e &#x27;</span>install JSON<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Can&#x27;</span>t locate CPAN.pm <span class="keyword">in</span> @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .).</span><br><span class="line">BEGIN failed--compilation aborted.</span><br></pre></td></tr></table></figure><h2 id="Can’t-locate-CPAN-pm"><a href="#Can’t-locate-CPAN-pm" class="headerlink" title="Can’t locate CPAN.pm"></a>Can’t locate CPAN.pm</h2><p>fixed this problem “Can’t locate CPAN.pm” by running the command <code>yum install perl-CPAN</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ sudo perl -MCPAN -e <span class="string">&#x27;install JSON&#x27;</span></span><br><span class="line">[sudo] password <span class="keyword">for</span> sxp:</span><br><span class="line">Can<span class="string">&#x27;t locate CPAN.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .).</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted.</span></span><br><span class="line"><span class="string">sh-4.2$ sudo yum install perl-CPAN</span></span><br></pre></td></tr></table></figure><p>Then run <code>sudo perl -MCPAN -e &#39;install JSON&#39;</code> again, it works.</p><h2 id="Can’t-locate-JSON-x2F-PP-pm"><a href="#Can’t-locate-JSON-x2F-PP-pm" class="headerlink" title="Can’t locate JSON&#x2F;PP.pm"></a>Can’t locate JSON&#x2F;PP.pm</h2><p>fixed this problem by copying backportPP.pm to the PP.pm file.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/share/perl5/JSON</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">backportPP  backportPP.pm</span><br><span class="line">$ <span class="built_in">cp</span> backportPP.pm PP.pm</span><br></pre></td></tr></table></figure><h2 id="Can’t-locate-Module-x2F-Load-pm"><a href="#Can’t-locate-Module-x2F-Load-pm" class="headerlink" title="Can’t locate Module&#x2F;Load.pm"></a>Can’t locate Module&#x2F;Load.pm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ geninfo --version</span><br><span class="line">Can<span class="string">&#x27;t locate Module/Load.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /usr/local/bin/geninfo line 63.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at /usr/local/bin/geninfo line 63.</span></span><br><span class="line"><span class="string">bash-4.2$</span></span><br></pre></td></tr></table></figure><p>Install <code>perl-Module-Load-Conditional</code> can resolved.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install perl-Module-Load-Conditional</span><br></pre></td></tr></table></figure><h2 id="Can’t-locate-Capture-x2F-Tiny-pm-in-INC"><a href="#Can’t-locate-Capture-x2F-Tiny-pm-in-INC" class="headerlink" title="Can’t locate Capture&#x2F;Tiny.pm in @INC"></a>Can’t locate Capture&#x2F;Tiny.pm in @INC</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ lcov --version</span><br><span class="line">Can<span class="string">&#x27;t locate Capture/Tiny.pm in @INC (@INC contains: /usr/local/bin/../lib /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /usr/local/bin/../lib/lcovutil.pm line 13.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at /usr/local/bin/../lib/lcovutil.pm line 13.</span></span><br><span class="line"><span class="string">Compilation failed in require at /usr/local/bin/lcov line 104.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at /usr/local/bin/lcov line 104.</span></span><br></pre></td></tr></table></figure><p>Fixed with following command</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perl -MCPAN -e <span class="string">&#x27;install Capture::Tiny&#x27;</span></span><br></pre></td></tr></table></figure><p>Then run <code>lcov --version</code> back to work.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ lcov --version</span><br><span class="line">lcov: LCOV version v1.16-16-g038c2ca</span><br></pre></td></tr></table></figure><h2 id="Can’t-locate-DateTime-pm"><a href="#Can’t-locate-DateTime-pm" class="headerlink" title="Can’t locate DateTime.pm"></a>Can’t locate DateTime.pm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ genhtml --<span class="built_in">help</span></span><br><span class="line">Can<span class="string">&#x27;t locate DateTime.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at /usr/local/bin/genhtml line 87.</span></span><br><span class="line"><span class="string">BEGIN failed--compilation aborted at /usr/local/bin/genhtml line 87.</span></span><br></pre></td></tr></table></figure><p>Need to install the perl module DateTime, On Centos7 run</p><p><code>sudo yum install &#39;perl(DateTime)&#39;</code></p><p>But this still doesn’t work for me.</p><h2 id="Run-geninfo-command-failed"><a href="#Run-geninfo-command-failed" class="headerlink" title="Run geninfo command failed"></a>Run <code>geninfo</code> command failed</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Capturing coverage data from .</span><br><span class="line">Compress::Raw::Zlib version 2.201 required--this is only version 2.061 at /usr/local/share/perl5/IO/Uncompress/RawInflate.pm line 8.</span><br><span class="line">BEGIN failed--compilation aborted at /usr/local/share/perl5/IO/Uncompress/RawInflate.pm line 8.</span><br><span class="line">Compilation failed <span class="keyword">in</span> require at /usr/local/share/perl5/IO/Uncompress/Gunzip.pm line 12.</span><br><span class="line">BEGIN failed--compilation aborted at /usr/local/share/perl5/IO/Uncompress/Gunzip.pm line 12.</span><br><span class="line">Compilation failed <span class="keyword">in</span> require at /usr/local/bin/geninfo line 62.</span><br><span class="line">BEGIN failed--compilation aborted at /usr/local/bin/geninfo line 62.</span><br><span class="line">sh-4.2$</span><br></pre></td></tr></table></figure><p>Install package <code>Compress::Raw::Zlib</code> fixed.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perl -MCPAN -e <span class="string">&#x27;install Compress::Raw::Zlib&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lcov </tag>
            
            <tag> perl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Gcov 和 LCOV 做 C/C++ 项目的代码覆盖率</title>
      <link href="/2021/08/gcov-example-cn/"/>
      <url>/2021/08/gcov-example-cn/</url>
      
        <content type="html"><![CDATA[<p>本篇分享如何使用 Gcov 和 LCOV 对 C&#x2F;C++ 项目进行代码覆盖率的度量。</p><p>如果你想了解代码覆盖率工具 Gcov 是如何工作的，或是以后需要做 C&#x2F;C++ 项目的代码覆盖率，希望本篇对你有所帮助。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>不知道你没有遇到过和我一样的问题：几十年前的 C&#x2F;C++ 项目没有单元测试，只有回归测试，但是想知道回归测试测了哪些代码？还有哪些代码没测到？代码覆盖率是多少？今后哪些地方需要提高自动化测试用例？</p><p>可能对于接触过 Java 的 Junit 和 JaCoCo 的人来说，没有单元测试应该测不了代码覆盖率吧 … 其实不然，如果不行就没有下文了 :)</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>市场上有一些工具可以针对黑盒测试来衡量代码覆盖率 Squish Coco，Bullseye 等，它们的原理就是在编译的时候插入 instrumentation，中文叫插桩，在运行测试的时候用来跟踪和记录运行结果。</p><p>其中我比较深入的了解过 <a href="https://shenxianpeng.github.io/2019/05/squishcoco/">Squish Coco</a> 它如何使用，但对于大型项目，引入这类工具都或多或少的需要解决编译上的问题。也正是因为有一些编译问题没有解决，就一直没有购买这款价格不菲的工具 License。</p><p>当我再次重新调查代码覆盖率的时候，我很惭愧的发现原来正在使用的 GCC 其实有内置的代码覆盖率的工具的，叫 <a href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html">Gcov</a></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>对于想使用 Gcov 的人，为了说明它是如何工作的，我准备了一段示例程序，运行这个程序之前需要先安装 <a href="https://gcc.gnu.org/install/index.html">GCC</a> 和 <a href="http://ltp.sourceforge.net/coverage/lcov.php">LCOV</a>。</p><p>如果没有环境或不想安装，可以直接查看示例仓库的 GitHub 仓库：<a href="https://github.com/shenxianpeng/gcov-example">https://github.com/shenxianpeng/gcov-example</a></p><p>注：主分支 <code>master</code> 下面放的是源码，分支 <code>coverage</code> 下的 <code>out</code> 目录是最终的结果报告。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是我的测试环境上的 GCC 和 lcov 的版本</span></span><br><span class="line">sh-4.2$ gcc --version</span><br><span class="line">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">sh-4.2$ lcov -v</span><br><span class="line">lcov: LCOV version 1.14</span><br></pre></td></tr></table></figure><h2 id="Gcov-是如何工作的"><a href="#Gcov-是如何工作的" class="headerlink" title="Gcov 是如何工作的"></a>Gcov 是如何工作的</h2><p>Gcov 工作流程图</p><p><img src="/2021/08/gcov-example-cn/gcov-flow.jpg" alt="flow"></p><p>主要分三步：</p><ol><li>在 GCC 编译的时加入特殊的编译选项，生成可执行文件，和 <code>*.gcno</code>；</li><li>运行（测试）生成的可执行文件，生成了 <code>*.gcda</code> 数据文件；</li><li>有了 <code>*.gcno</code> 和 <code>*.gcda</code>，通过源码生成 <code>gcov</code> 文件，最后生成代码覆盖率报告。</li></ol><p>下面就开始介绍其中每一步具体是怎么做的。</p><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h3><p>第一步编译，这里已经将编译用到的参数和文件都写在了 <code>makefile</code> 里了，只要执行 <code>make</code> 就可以编译了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><details><summary>点击查看 make 命令的输出</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ make</span><br><span class="line">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror main.c</span><br><span class="line">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror foo.c</span><br><span class="line">gcc -fPIC -fprofile-arcs -ftest-coverage -o main main.o foo.o</span><br></pre></td></tr></table></figure></details><p>通过输出可以看到，这个程序在编译的时候添加了两个编译选项 <code>-fprofile-arcs</code> and <code>-ftest-coverage</code>。在编译成功后，不仅生成了 <code>main</code> and <code>.o</code> 文件，同时还生成了两个 <code>.gcno</code> 文件.</p><blockquote><p><code>.gcno</code> 记录文件是在加入 GCC 编译选项 <code>-ftest-coverage</code> 后生成的，在编译过程中它包含用于重建基本块图和为块分配源行号的信息。</p></blockquote><h3 id="2-运行可执行文件"><a href="#2-运行可执行文件" class="headerlink" title="2. 运行可执行文件"></a>2. 运行可执行文件</h3><p>在编译完成后，生成了 <code>main</code> 这个可执行文件，运行（测试）它：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><details><summary>点击查看运行 main 时输出</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ ./main</span><br><span class="line">Start calling foo() ...</span><br><span class="line">when num is equal to 1...</span><br><span class="line">when num is equal to 2...</span><br></pre></td></tr></table></figure></details><p>当运行 <code>main</code> 后，执行结果被记录在了 <code>.gcda</code> 这个数据文件里，查看当前目录下可以看到一共有生成了两个 <code>.gcda</code> 文件，每个源文件都对应一个  <code>.gcda</code> 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">foo.c  foo.gcda  foo.gcno  foo.h  foo.o  img  main  main.c  main.gcda  main.gcno  main.o  makefile  README.md</span><br></pre></td></tr></table></figure><blockquote><p><code>.gcda</code> 记录数据文件的生成是因为程序在编译的时候引入了 <code>-fprofile-arcs</code> 选项。它包含弧过渡计数、值分布计数和一些摘要信息。</p></blockquote><h3 id="3-生成报告"><a href="#3-生成报告" class="headerlink" title="3. 生成报告"></a>3. 生成报告</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make report</span><br></pre></td></tr></table></figure><details><summary> 点击查看生成报告的输出 </summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ make report</span><br><span class="line">gcov main.c foo.c</span><br><span class="line">File <span class="string">&#x27;main.c&#x27;</span></span><br><span class="line">Lines executed:100.00% of 5</span><br><span class="line">Creating <span class="string">&#x27;main.c.gcov&#x27;</span></span><br><span class="line"></span><br><span class="line">File <span class="string">&#x27;foo.c&#x27;</span></span><br><span class="line">Lines executed:85.71% of 7</span><br><span class="line">Creating <span class="string">&#x27;foo.c.gcov&#x27;</span></span><br><span class="line"></span><br><span class="line">Lines executed:91.67% of 12</span><br><span class="line">lcov --capture --directory . --output-file coverage.info</span><br><span class="line">Capturing coverage data from .</span><br><span class="line">Found gcov version: 4.8.5</span><br><span class="line">Scanning . <span class="keyword">for</span> .gcda files ...</span><br><span class="line">Found 2 data files <span class="keyword">in</span> .</span><br><span class="line">Processing foo.gcda</span><br><span class="line">geninfo: WARNING: cannot find an entry <span class="keyword">for</span> main.c.gcov <span class="keyword">in</span> .gcno file, skipping file!</span><br><span class="line">Processing main.gcda</span><br><span class="line">Finished .info-file creation</span><br><span class="line">genhtml coverage.info --output-directory out</span><br><span class="line">Reading data file coverage.info</span><br><span class="line">Found 2 entries.</span><br><span class="line">Found common filename prefix <span class="string">&quot;/workspace/coco&quot;</span></span><br><span class="line">Writing .css and .png files.</span><br><span class="line">Generating output.</span><br><span class="line">Processing file gcov-example/main.c</span><br><span class="line">Processing file gcov-example/foo.c</span><br><span class="line">Writing directory view page.</span><br><span class="line">Overall coverage rate:</span><br><span class="line">  lines......: 91.7% (11 of 12 lines)</span><br><span class="line">  <span class="built_in">functions</span>..: 100.0% (2 of 2 <span class="built_in">functions</span>)</span><br></pre></td></tr></table></figure></details><p>执行 <code>make report</code> 来生成 HTML 报告，这条命令的背后实际上主要执行了以下两个步骤：</p><ol><li><p>在有了编译和运行时候生成的 <code>.gcno</code> 和 <code>.gcda</code> 文件后，执行命令 <code>gcov main.c foo.c</code> 即可生成 <code>.gcov</code> 代码覆盖率文件。</p></li><li><p>有了代码覆盖率 <code>.gcov</code> 文件，通过 <a href="http://ltp.sourceforge.net/coverage/lcov.php">LCOV</a> 生成可视化代码覆盖率报告。</p></li></ol><p>生成 HTML 结果报告的步骤如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 生成 coverage.info 数据文件</span></span><br><span class="line">lcov --capture --directory . --output-file coverage.info</span><br><span class="line"><span class="comment"># 2. 根据这个数据文件生成报告</span></span><br><span class="line">genhtml coverage.info --output-directory out</span><br></pre></td></tr></table></figure><h3 id="删除所有生成的文件"><a href="#删除所有生成的文件" class="headerlink" title="删除所有生成的文件"></a>删除所有生成的文件</h3><p>上传过程中所有生成的文件可通过执行 <code>make clean</code> 命令来彻底删除掉。</p><details><summary> 点击查看 make clean 命令的输出 </summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ make clean</span><br><span class="line"><span class="built_in">rm</span> -rf main *.o *.so *.gcno *.gcda *.gcov coverage.info out</span><br></pre></td></tr></table></figure></details><h2 id="代码覆盖率报告"><a href="#代码覆盖率报告" class="headerlink" title="代码覆盖率报告"></a>代码覆盖率报告</h2><p><img src="/2021/08/gcov-example-cn/index.png" alt="index"></p><p>首页以目录结构显示</p><p><img src="/2021/08/gcov-example-cn/example.png" alt="example"></p><p>进入目录后，显示该目录下的源文件</p><p><img src="/2021/08/gcov-example-cn/main.c.png" alt="main.c"></p><p>蓝色表示这些语句被覆盖</p><p><img src="/2021/08/gcov-example-cn/foo.c.png" alt="foo.c"></p><p>红色表示没有被覆盖的语句</p><blockquote><p>LCOV 支持语句、函数和分支覆盖度量。</p></blockquote><p>旁注：</p><ul><li>还有另外一个生成 HTML 报告的工具叫 <a href="https://github.com/gcovr/gcovr">gcovr</a>，使用 Python 开发的，它的报告在显示方式上与 LCOV 略有不同。比如 LCOV 以目录结构显示， gcovr 以文件路径来显示，前者与代码结构一直因此我更倾向于使用前者。</li></ul><h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><ul><li>关于代码覆盖率(About Code Coverage)：<a href="https://shenxianpeng.github.io/2021/07/code-coverage/">https://shenxianpeng.github.io/2021/07/code-coverage/</a></li><li>在 Linux 内核中使用 Gcov 的示例：<a href="https://01.org/linuxgraphics/gfx-docs/drm/dev-tools/gcov.html">https://01.org/linuxgraphics/gfx-docs/drm/dev-tools/gcov.html</a></li><li>当构建环境与测试环境不同时设置环境变量：<a href="https://gcc.gnu.org/onlinedocs/gcc/Cross-profiling.html#Cross-profiling">https://gcc.gnu.org/onlinedocs/gcc/Cross-profiling.html#Cross-profiling</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coverage </tag>
            
            <tag> Gcov </tag>
            
            <tag> LCOV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SonarQube installation and troubleshootings</title>
      <link href="/2021/08/sonarqube-setup/"/>
      <url>/2021/08/sonarqube-setup/</url>
      
        <content type="html"><![CDATA[<h2 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h2><p>In my opinion, SonarQube is not a very easy setup DevOps tool to compare with Jenkins, Artifactory. You can’t just run some script under the bin folder to let the server boot up.</p><p>You must have an installed database, configuration LDAP in the config file, etc.</p><p>So I’d like to document some important steps for myself, like setup LDAP or PostgreSQL when I install SonarQube of v9.0.1. It would be better if it can help others.</p><h2 id="Prerequisite-and-Download"><a href="#Prerequisite-and-Download" class="headerlink" title="Prerequisite and Download"></a>Prerequisite and Download</h2><ol><li><p>Need to be installed JRE&#x2F;JDK 11 on the running machine.</p><p> Here is the prerequisites overview: <a href="https://docs.sonarqube.org/latest/requirements/requirements/">https://docs.sonarqube.org/latest/requirements/requirements/</a></p></li><li><p>Download SonarQube: <a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a></p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> sonarqube/</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.0.1.46107.zip</span><br><span class="line"></span><br><span class="line">unzip sonarqube-9.0.1.46107.zip</span><br><span class="line"><span class="built_in">cd</span>  sonarqube-9.0.1.46107/bin/linux-x86-64</span><br><span class="line">sh sonar.sh console</span><br></pre></td></tr></table></figure></li></ol><h2 id="Change-Java-version"><a href="#Change-Java-version" class="headerlink" title="Change Java version"></a>Change Java version</h2><p>I installed SonarQube on CentOS 7 machine, the Java version is OpenJDK 1.8.0_242 by default, but the prerequisite shows at least need JDK 11. There is also JDK 11 available on my machine, so I just need to change the Java version.</p><p>I recommend using the <code>alternatives</code> command change Java version，refer as following:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_242&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_242-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)</span><br><span class="line"></span><br><span class="line">$ alternatives --config java</span><br><span class="line"></span><br><span class="line">There are 3 programs <span class="built_in">which</span> provide <span class="string">&#x27;java&#x27;</span>.</span><br><span class="line"></span><br><span class="line">  Selection    Command</span><br><span class="line">-----------------------------------------------</span><br><span class="line">   1           java-1.7.0-openjdk.x86_64 (/usr/lib/jvm/java-1.7.0-openjdk-1.7.0.251-2.6.21.1.el7.x86_64/jre/bin/java)</span><br><span class="line">*+ 2           java-1.8.0-openjdk.x86_64 (/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-1.el7.x86_64/jre/bin/java)</span><br><span class="line">   3           java-11-openjdk.x86_64 (/usr/lib/jvm/java-11-openjdk-11.0.12.0.7-0.el7_9.x86_64/bin/java)</span><br><span class="line"></span><br><span class="line">Enter to keep the current selection[+], or <span class="built_in">type</span> selection number: 3</span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;11.0.12&quot;</span> 2021-07-20 LTS</span><br><span class="line">OpenJDK Runtime Environment 18.9 (build 11.0.12+7-LTS)</span><br><span class="line">OpenJDK 64-Bit Server VM 18.9 (build 11.0.12+7-LTS, mixed mode, sharing)</span><br></pre></td></tr></table></figure><h2 id="Install-Database"><a href="#Install-Database" class="headerlink" title="Install Database"></a>Install Database</h2><p>SonarQube needs you to have installed a database. It supports several database engines, like Microsoft SQL Server, Oracle, and PostgreSQL. Since PostgreSQL is open source, light, and easy to install, so I choose PostgreSQL as its database.</p><p>How to download and install PostgreSQL please see this page: <a href="https://www.postgresql.org/download/linux/redhat/">https://www.postgresql.org/download/linux/redhat/</a></p><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><h3 id="1-How-to-establish-a-connection-with-SonarQube-and-PostgreSQL"><a href="#1-How-to-establish-a-connection-with-SonarQube-and-PostgreSQL" class="headerlink" title="1. How to establish a connection with SonarQube and PostgreSQL"></a>1. How to establish a connection with SonarQube and PostgreSQL</h3><p>Please refer to the <code>sonar.properties</code> file at the end of this post.</p><h3 id="2-How-to-setup-LDAP-for-users-to-log-in"><a href="#2-How-to-setup-LDAP-for-users-to-log-in" class="headerlink" title="2. How to setup LDAP for users to log in"></a>2. How to setup LDAP for users to log in</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sonar.security.realm=LDAP</span><br><span class="line">ldap.url=ldap://den.exmaple-org:389</span><br><span class="line">ldap.bindDn=user@exmaple-org.com</span><br><span class="line">ldap.bindPassword=mypassword</span><br><span class="line">ldap.authentication=simple</span><br><span class="line">ldap.user.baseDn=DC=exmaple-org,DC=com</span><br><span class="line">ldap.user.request=(&amp;(objectClass=user)(sAMAccountName=&#123;login&#125;))</span><br><span class="line">ldap.user.realNameAttribute=cn</span><br><span class="line">ldap.user.emailAttribute=email</span><br></pre></td></tr></table></figure><h3 id="3-How-to-fix-LDAP-login-SonarQube-is-very-slowly"><a href="#3-How-to-fix-LDAP-login-SonarQube-is-very-slowly" class="headerlink" title="3. How to fix LDAP login SonarQube is very slowly"></a>3. How to fix LDAP login SonarQube is very slowly</h3><p>Comment out <code>ldap.followReferrals=false</code> in sonar.properties file would be help.</p><p>Related post: <a href="https://community.sonarsource.com/t/ldap-login-takes-2-minutes-the-first-time/1573/7">https://community.sonarsource.com/t/ldap-login-takes-2-minutes-the-first-time/1573/7</a></p><h2 id="4-How-to-fix-‘Could-not-resolve-11-file-paths-in-lcov-info’"><a href="#4-How-to-fix-‘Could-not-resolve-11-file-paths-in-lcov-info’" class="headerlink" title="4. How to fix ‘Could not resolve 11 file paths in lcov.info’"></a>4. How to fix ‘Could not resolve 11 file paths in lcov.info’</h2><p>I want to display Javascript code coverage result in SonarQube, so I added <code>sonar.javascript.lcov.reportPaths=coverage/lcov.info</code> to the <code>sonar-project.properties</code></p><p>But when I run <code>sonar-scanner.bat</code> in the command line, the code coverage result can not show in sonar. I noticed the following error from the output:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO: Analysing [C:\workspace\xvm-ide\client\coverage\lcov.info]</span><br><span class="line">WARN: Could not resolve 11 file paths <span class="keyword">in</span> [C:\workspace\xvm-ide\client\coverage\lcov.info]</span><br></pre></td></tr></table></figure><p>There are some posts related to this problem, for example, <a href="https://github.com/kulshekhar/ts-jest/issues/542">https://github.com/kulshekhar/ts-jest/issues/542</a>, but no one works in my case.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># here is an example error path in lcov.info</span></span><br><span class="line">..\src\auto-group\groupView.ts</span><br></pre></td></tr></table></figure><p>Finally, I have to use the <code>sed</code> command to remove <code>..\</code> in front of the paths before running <code>sonar-scanner.bat</code>, then the problem was solved.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/\..\\//g&#x27;</span> lcov.info</span><br></pre></td></tr></table></figure><p>Please comment if you can solve the problem with changing options in the <code>tsconfig.json</code> file.</p><h3 id="4-How-to-output-to-more-logs"><a href="#4-How-to-output-to-more-logs" class="headerlink" title="4. How to output to more logs"></a>4. How to output to more logs</h3><p>To output more logs, change <code>sonar.log.level=INFO</code> to <code>sonar.log.level=DEBUG</code> in below.</p><blockquote><p>Note: all above changes of <code>sonar.properties</code> need to restart the SonarQube instance to take effect.</p></blockquote><h2 id="Final-sonar-properties"><a href="#Final-sonar-properties" class="headerlink" title="Final sonar.properties"></a>Final <code>sonar.properties</code></h2><p>For the <code>sonar.properties</code> file, please see below or <a href="https://gist.github.com/shenxianpeng/a1eec786210b421f8be34e3263f1a002">link</a></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DATABASE</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IMPORTANT:</span></span><br><span class="line"><span class="comment"># - The embedded H2 database is used by default. It is recommended for tests but not for</span></span><br><span class="line"><span class="comment">#   production use. Supported databases are Oracle, PostgreSQL and Microsoft SQLServer.</span></span><br><span class="line"><span class="comment"># - Changes to database connection URL (sonar.jdbc.url) can affect SonarSource licensed products.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User credentials.</span></span><br><span class="line"><span class="comment"># Permissions to create tables, indices and triggers must be granted to JDBC user.</span></span><br><span class="line"><span class="comment"># The schema must be created first.</span></span><br><span class="line">sonar.jdbc.username=sonarqube</span><br><span class="line">sonar.jdbc.password=mypassword</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#----- PostgreSQL 9.6 or greater</span></span><br><span class="line"><span class="comment"># By default the schema named &quot;public&quot; is used. It can be overridden with the parameter &quot;currentSchema&quot;.</span></span><br><span class="line">sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Binding IP address. For servers with more than one IP address, this property specifies which</span></span><br><span class="line"><span class="comment"># address will be used for listening on the specified ports.</span></span><br><span class="line"><span class="comment"># By default, ports will be used on all IP addresses associated with the server.</span></span><br><span class="line">sonar.web.host=10.118.245.19</span><br><span class="line"></span><br><span class="line"><span class="comment"># Web context. When set, it must start with forward slash (for example /sonarqube).</span></span><br><span class="line"><span class="comment"># The default value is root context (empty value).</span></span><br><span class="line">sonar.web.context=</span><br><span class="line"><span class="comment"># TCP port for incoming HTTP connections. Default value is 9000.</span></span><br><span class="line">sonar.web.port=9000</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP CONFIGURATION</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Follow or not referrals. See http://docs.oracle.com/javase/jndi/tutorial/ldap/referral/jndi.html (default: true)</span></span><br><span class="line">ldap.followReferrals=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable the LDAP feature</span></span><br><span class="line">sonar.security.realm=LDAP</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set to true when connecting to a LDAP server using a case-insensitive setup.</span></span><br><span class="line"><span class="comment"># sonar.authenticator.downcase=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL of the LDAP server. Note that if you are using ldaps, then you should install the server certificate into the Java truststore.</span></span><br><span class="line">ldap.url=ldap://den.exmaple-org:389</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind DN is the username of an LDAP user to connect (or bind) with. Leave this blank for anonymous access to the LDAP directory (optional)</span></span><br><span class="line">ldap.bindDn=user@exmaple-org.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind Password is the password of the user to connect with. Leave this blank for anonymous access to the LDAP directory (optional)</span></span><br><span class="line">ldap.bindPassword=mypassword</span><br><span class="line"></span><br><span class="line"><span class="comment"># Possible values: simple | CRAM-MD5 | DIGEST-MD5 | GSSAPI See http://java.sun.com/products/jndi/tutorial/ldap/security/auth.html (default: simple)</span></span><br><span class="line">ldap.authentication=simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># USER MAPPING</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Distinguished Name (DN) of the root node in LDAP from which to search for users (mandatory)</span></span><br><span class="line">ldap.user.baseDn=DC=exmaple-org,DC=com</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP user request. (default: (&amp;(objectClass=inetOrgPerson)(uid=&#123;login&#125;)) )</span></span><br><span class="line">ldap.user.request=(&amp;(objectClass=user)(sAMAccountName=&#123;login&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Attribute in LDAP defining the user’s real name. (default: cn)</span></span><br><span class="line">ldap.user.realNameAttribute=cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Attribute in LDAP defining the user’s email. (default: mail)</span></span><br><span class="line">ldap.user.emailAttribute=email</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sonar.search.javaAdditionalOpts=-Dbootstrap.system_call_filter=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Global level of logs (applies to all 4 processes).</span></span><br><span class="line"><span class="comment"># Supported values are INFO (default), DEBUG and TRACE</span></span><br><span class="line">sonar.log.level=INFO</span><br><span class="line"></span><br><span class="line"><span class="comment"># Paths to persistent data files (embedded database and search index) and temporary files.</span></span><br><span class="line"><span class="comment"># Can be absolute or relative to installation directory.</span></span><br><span class="line"><span class="comment"># Defaults are respectively &lt;installation home&gt;/data and &lt;installation home&gt;/temp</span></span><br><span class="line">sonar.path.data=/var/sonarqube/data</span><br><span class="line">sonar.path.temp=/var/sonarqube/temp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SonarQube </tag>
            
            <tag> LDAP </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix &quot;hidden symbol `__gcov_init&#39; in ../libgcov.a(_gcov.o) is referenced by DSO&quot;</title>
      <link href="/2021/07/how-to-fix-gcov-hidden-symbol/"/>
      <url>/2021/07/how-to-fix-gcov-hidden-symbol/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>When we introduced Gocv to build my project for code coverage, I encountered the following error message:</p><h3 id="error-1"><a href="#error-1" class="headerlink" title="error 1"></a>error 1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++     -m64 -z muldefs -L/lib64 -L/usr/lib64 -lglib-2.0 -m64 -DUV_64PORT -DU2_64_BUILD -fPIC -g  DU_starter.o</span><br><span class="line">NFA_msghandle.o NFA_svr_exit.o du_err_printf.o  -L/workspace/code/myproject/src/home/x64debug/bin/</span><br><span class="line">-L/workspace/code/myproject/src/home/x64debug/bin/lib/ -lundata -lutcallc_nfasvr</span><br><span class="line">-Wl,-rpath=/workspace/code/myproject/src/home/x64debug/bin/ -Wl,-rpath=/.dulibs28  -Wl,--enable-new-dtags</span><br><span class="line">-L/.dulibs28 -lodbc  -lm -lncurses -lrt -lcrypt -lgdbm -ldl -lpam -lpthread  -ldl -lglib-2.0</span><br><span class="line">-lstdc++ -lnsl -lrt -lgcov -o /workspace/code/myproject/src/home/x64debug/objs/du/share/dutsvr</span><br><span class="line">/usr/bin/ld: /workspace/code/myproject/src/home/x64debug/objs/du/share/dutsvr:</span><br><span class="line">hidden symbol `__gcov_init<span class="string">&#x27; in /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcov.a(_gcov.o) is referenced by DSO</span></span><br></pre></td></tr></table></figure><h3 id="error-2"><a href="#error-2" class="headerlink" title="error 2"></a>error 2</h3><p>It may also be such an error</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/p7539c/cutest/CuTest.c:379: undefined reference to `__gcov_init<span class="string">&#x27;</span></span><br><span class="line"><span class="string">CuTest.o:(.data+0x184): undefined reference to `__gcov_merge_add&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Positioning-problem"><a href="#Positioning-problem" class="headerlink" title="Positioning problem"></a>Positioning problem</h2><p>Let’s take the <strong>error 1</strong>.</p><p>From the error message, I noticed <code>-lundata -lutcallc_nfasvr</code> are all the linked libraries (-l<em>library</em>)</p><p>I checked libraries <code>undata</code> and <code>utcallc_nfasvr</code> one by one, and found it displayed <code>U __gcov_init</code> and <code>U</code> means undefined symbols.</p><blockquote><p>Use the <code>find</code> command to search the library and the <code>nm</code> command to list symbols in the library.</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-sh-4.2$ find -name *utcallc_nfasvr*</span><br><span class="line">./bin/libutcallc_nfasvr.so</span><br><span class="line">./objs/du/work/libutcallc_nfasvr.so</span><br><span class="line">-sh-4.2$ nm ./bin/libutcallc_nfasvr.so | grep __gcov_init</span><br><span class="line">                 U __gcov_init</span><br></pre></td></tr></table></figure><h2 id="How-to-fix"><a href="#How-to-fix" class="headerlink" title="How to fix"></a>How to fix</h2><p>In my case, I just added the following code <code>LIB_1_LIBS := -lgcov</code> to allow the <code>utcallc_nfasvr</code> library to call gcov.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LIB_1 := utcallc_nfasvr</span><br><span class="line"><span class="comment"># added below code to my makefile</span></span><br><span class="line">LIB_1_LIBS := -lgcov</span><br></pre></td></tr></table></figure><p>Rebuild, the error is gone, then checked library, it displayed <code>t __gcov_init</code> this time, it means symbol value exists not hidden.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-sh-4.2$ nm ./bin/libutcallc_nfasvr.so | grep __gcov_init</span><br><span class="line">                 t __gcov_init</span><br></pre></td></tr></table></figure><p>Or in your case may build a shared library like so, similarly, just add the compile parameter <code>-lgcov</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g++   -shared -o libMyLib.so src_a.o src_b.o src_c.o -lgcov</span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I have encountered the following problems many times</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">undefined reference to `__gcov_init<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">undefined reference to `__gcov_merge_add&#x27;</span></span><br><span class="line"></span><br><span class="line">`hidden symbol `__gcov_init<span class="string">&#x27; in /usr/lib/gcc/x86_64-redhat-linux/4.8.5/libgcov.a(_gcov.o) is referenced by DSO`</span></span><br></pre></td></tr></table></figure><p>Each time I can fix it by adding <code>-glcov</code> then recompile. the error has gone after rebuild. (you use the <code>nm</code> command to double-check whether the symbol has been added successfully.)</p><p>Hopes it can help you.</p>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Coverage </tag>
            
            <tag> Gcov </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add or update Bitbucket build status with REST API</title>
      <link href="/2021/07/update-bitbucket-build-status/"/>
      <url>/2021/07/update-bitbucket-build-status/</url>
      
        <content type="html"><![CDATA[<h2 id="Backgorud"><a href="#Backgorud" class="headerlink" title="Backgorud"></a>Backgorud</h2><ol><li><p>When you want to <strong>add</strong> build status to your Bitbucket the specific commit of a branch when you start a build from the branch</p></li><li><p>When the build status is wrong, you want to <strong>update</strong> it manually. for example, update build status from FAILED to SUCCESSFUL</p></li></ol><p>You can call Bitbucket REST API to do these.</p><h2 id="Code-snippet"><a href="#Code-snippet" class="headerlink" title="Code snippet"></a>Code snippet</h2><p>Below is the code snippet to update Bitbucket build status with REST API in the shell script.</p><p>The code on GitHub Gist: <a href="https://gist.github.com/shenxianpeng/bd5eddc5fb39e54110afb8e2e7a6c4fb">https://gist.github.com/shenxianpeng/bd5eddc5fb39e54110afb8e2e7a6c4fb</a></p><p>Click <strong>Read More</strong> to view the code here.</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">username=your-bitbucket-user</span><br><span class="line">password=your-bitbucket-password</span><br><span class="line"></span><br><span class="line">commit_id=<span class="string">&#x27;57587d7d4892bc4ef2c4375028c19b27921e2485&#x27;</span></span><br><span class="line"><span class="comment"># build_result has 3 status: SUCCESSFUL, FAILED, INPROGRESS</span></span><br><span class="line">build_result=<span class="string">&#x27;SUCCESSFUL&#x27;</span></span><br><span class="line">description=<span class="string">&#x27;Manully update bitbucket status&#x27;</span></span><br><span class="line"></span><br><span class="line">build_name=<span class="string">&#x27;test #1&#x27;</span></span><br><span class="line">build_url=http://localhost:8080/job/test/</span><br><span class="line"></span><br><span class="line">bitbucket_rest_api=<span class="string">&#x27;https://myorg.bitbucket.com/rest/build-status/latest/commits&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">gen_post_data</span></span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;state&quot;: &quot;$build_result&quot;,</span></span><br><span class="line"><span class="string">  &quot;key&quot;: &quot;$commit_id&quot;,</span></span><br><span class="line"><span class="string">  &quot;name&quot;: &quot;$build_name&quot;,</span></span><br><span class="line"><span class="string">  &quot;url&quot;: &quot;$build_url&quot;,</span></span><br><span class="line"><span class="string">  &quot;description&quot;: &quot;$description&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(gen_post_data)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">curl -u <span class="variable">$username</span>:<span class="variable">$password</span> \</span><br><span class="line">-H <span class="string">&quot;Accept: application/json&quot;</span> \</span><br><span class="line">-H <span class="string">&quot;Content-Type:application/json&quot;</span> \</span><br><span class="line">-X POST <span class="variable">$bitbucket_rest_api</span>/<span class="variable">$commit_id</span> --data <span class="string">&quot;<span class="subst">$(gen_post_data)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: Update bitbucket build status failed.&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$0</span>: Update bitbucket build status success.&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>And the screenshot of the final update result</p><p><img src="/2021/07/update-bitbucket-build-status/build-status.png" alt="Bitbucket build status"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Bitbucket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于代码覆盖率 (About Code Coverage)</title>
      <link href="/2021/07/code-coverage/"/>
      <url>/2021/07/code-coverage/</url>
      
        <content type="html"><![CDATA[<p>本篇简要介绍：什么是代码覆盖率？为什么要做代码覆盖率？代码覆盖率的指标、工作原理，主流的代码覆盖率工具以及不要高估代码覆盖率指标。</p><h2 id="什么是代码覆盖率？"><a href="#什么是代码覆盖率？" class="headerlink" title="什么是代码覆盖率？"></a>什么是代码覆盖率？</h2><p>代码覆盖率是对整个测试过程中被执行的代码的衡量，它能测量源代码中的哪些语句在测试中被执行，哪些语句尚未被执行。</p><h2 id="为什么要测量代码覆盖率？"><a href="#为什么要测量代码覆盖率？" class="headerlink" title="为什么要测量代码覆盖率？"></a>为什么要测量代码覆盖率？</h2><p>众所周知，测试可以提高软件版本的质量和可预测性。但是，你知道你的单元测试甚至是你的功能测试实际测试代码的效果如何吗？是否还需要更多的测试？</p><p>这些是代码覆盖率可以试图回答的问题。总之，出于以下原因我们需要测量代码覆盖率：</p><ul><li>了解我们的测试用例对源代码的测试效果</li><li>了解我们是否进行了足够的测试</li><li>在软件的整个生命周期内保持测试质量</li></ul><p>注：代码覆盖率不是灵丹妙药，覆盖率测量不能替代良好的代码审查和优秀的编程实践。</p><p>通常，我们应该采用合理的覆盖目标，力求在代码覆盖率在所有模块中实现均匀覆盖，而不是只看最终数字的是否高到令人满意。</p><p>举例：假设代码覆盖率只在某一些模块代码覆盖率很高，但在一些关键模块并没有足够的测试用例覆盖，那样虽然代码覆盖率很高，但并不能说明产品质量就很高。</p><h2 id="代码覆盖率的指标种类"><a href="#代码覆盖率的指标种类" class="headerlink" title="代码覆盖率的指标种类"></a>代码覆盖率的指标种类</h2><p>代码覆盖率工具通常使用一个或多个标准来确定你的代码在被自动化测试后是否得到了执行，常见的覆盖率报告中看到的指标包括：</p><ul><li>函数覆盖率：定义的函数中有多少被调用</li><li>语句覆盖率：程序中的语句有多少被执行</li><li>分支覆盖率：有多少控制结构的分支（例如if语句）被执行</li><li>条件覆盖率：有多少布尔子表达式被测试为真值和假值</li><li>行覆盖率：有多少行的源代码被测试过</li></ul><h2 id="代码覆盖率是如何工作的？"><a href="#代码覆盖率是如何工作的？" class="headerlink" title="代码覆盖率是如何工作的？"></a>代码覆盖率是如何工作的？</h2><p>代码覆盖率测量主要有以下三种方式：</p><h3 id="1-Source-code-instrumentation-源代码检测"><a href="#1-Source-code-instrumentation-源代码检测" class="headerlink" title="1. Source code instrumentation - 源代码检测"></a>1. Source code instrumentation - 源代码检测</h3><p>将检测语句添加到源代码中，并使用正常的编译工具链编译代码以生成检测的程序集。这是我们常说的插桩，Gcov 是属于这一类的代码覆盖率工具。</p><h3 id="2-Runtime-instrumentation-运行时收集"><a href="#2-Runtime-instrumentation-运行时收集" class="headerlink" title="2. Runtime instrumentation - 运行时收集"></a>2. Runtime instrumentation - 运行时收集</h3><p>这种方法在代码执行时从运行时环境收集信息以确定覆盖率信息。以我的理解 JaCoCo 和 Coverage 这两个工具的原理属于这一类别。</p><h3 id="3-Intermediate-code-instrumentation-中间代码检测"><a href="#3-Intermediate-code-instrumentation-中间代码检测" class="headerlink" title="3. Intermediate code instrumentation - 中间代码检测"></a>3. Intermediate code instrumentation - 中间代码检测</h3><p>通过添加新的字节码来检测编译后的类文件，并生成一个新的检测类。说实话，我 Google 了很多文章并找到确定的说明哪个工具是属于这一类的。</p><p>了解这些工具的基本原理，结合现有的测试用例，有助于正确的选择代码覆盖率工具。比如：</p><ul><li>产品的源代码只有 E2E（端到端）测试用例，通常只能选择第一类工具，即通过插桩编译出的可执行文件，然后进行测试和结果收集。</li><li>产品的源代码有单元测试用例，通常选择第二类工具，即运行时收集。这类工具的执行效率高，易于做持续集成。</li></ul><h2 id="当前主流代码覆盖率工具"><a href="#当前主流代码覆盖率工具" class="headerlink" title="当前主流代码覆盖率工具"></a>当前主流代码覆盖率工具</h2><p>代码覆盖率的工具有很多，以下是我用过的不同编程语言的代码覆盖率工具。在选择工具时，力求去选择那些开源、流行（活跃）、好用的工具。</p><table><thead><tr><th>编程语言</th><th>代码覆盖率工具</th></tr></thead><tbody><tr><td>C&#x2F;C++</td><td>Gcov</td></tr><tr><td>Java</td><td>JaCoCo</td></tr><tr><td>JavaScript</td><td>Istanbul</td></tr><tr><td>Python</td><td>Coverage.py</td></tr><tr><td>Golang</td><td>cover</td></tr></tbody></table><h2 id="不要高估代码覆盖率指标"><a href="#不要高估代码覆盖率指标" class="headerlink" title="不要高估代码覆盖率指标"></a>不要高估代码覆盖率指标</h2><p>代码覆盖率不是灵丹妙药，它只是告诉我们有哪些代码没有被测试用例“执行到”而已，高百分比的代码覆盖率不等于高质量的有效测试。</p><p>首先，高代码覆盖率不足以衡量有效测试。相反，代码覆盖率更准确地给出了代码未被测试程度的度量。这意味着，如果我们的代码覆盖率指标较低，那么我们可以确定代码的重要部分没有经过测试，然而反过来不一定正确。具有高代码覆盖率并不能充分表明我们的代码已经过充分测试。</p><p>其次，<code>100%</code> 的代码覆盖率不应该是我们明确努力的目标之一。这是因为在实现 <code>100%</code> 的代码覆盖率与实际测试重要的代码之间总是需要权衡。虽然可以测试所有代码，但考虑到为了满足覆盖率要求而编写更多无意义测试的趋势，当你接近此限制时，测试的价值也很可能会减少。</p><p>借 Martin Fowler 在这篇<a href="https://www.martinfowler.com/bliki/TestCoverage.html">测试覆盖率</a>的文章说的一句话：</p><blockquote><p>代码覆盖率是查找代码库中未测试部分的有用工具，然而它作为一个数字说明你的测试有多好用处不大。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://www.lambdatest.com/blog/code-coverage-vs-test-coverage/">https://www.lambdatest.com/blog/code-coverage-vs-test-coverage/</a><br><a href="https://www.atlassian.com/continuous-delivery/software-testing/code-coverage">https://www.atlassian.com/continuous-delivery/software-testing/code-coverage</a><br><a href="https://www.thoughtworks.com/insights/blog/are-test-coverage-metrics-overrated">https://www.thoughtworks.com/insights/blog/are-test-coverage-metrics-overrated</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Coverage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code coverage testing of C/C++ projects using Gcov and LCOV</title>
      <link href="/2021/07/gcov-example/"/>
      <url>/2021/07/gcov-example/</url>
      
        <content type="html"><![CDATA[<p>This article shares how to use Gcov and LCOV to metrics code coverage for C&#x2F;C++ projects.<br>If you want to know how Gcov works, or you need to metrics code coverage for C&#x2F;C++ projects later,<br>I hope this article is useful to you.</p><h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>The problem I’m having: A C&#x2F;C++ project from decades ago has no unit tests, only regression tests,<br>but you want to know what code is tested by regression tests? Which code is untested?<br>What is the code coverage? Where do I need to improve automated test cases in the future?</p><p>Can code coverage be measured without unit tests? Yes.</p><h2 id="Code-coverage-tools-for-C-x2F-C"><a href="#Code-coverage-tools-for-C-x2F-C" class="headerlink" title="Code coverage tools for C&#x2F;C++"></a>Code coverage tools for C&#x2F;C++</h2><p>There are some tools on the market that can measure the code coverage of black-box testing,<br>such as Squish Coco, Bullseye, etc. Their principle is to insert instrumentation when build product.</p><p>I’ve done some research on <a href="https://shenxianpeng.github.io/2019/05/squishcoco/">Squish Coco</a>,<br>because of some unresolved compilation issues that I didn’t buy a license for this expensive tool.</p><p>When I investigated code coverage again, I found out that GCC has a built-in code coverage tool called<br><a href="https://gcc.gnu.org/onlinedocs/gcc/Gcov.html">Gcov</a>.</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>For those who want to use Gcov, to illustrate how it works, I have prepared a sample program that<br>requires GCC and LCOV to be installed before running the program.</p><p>If you don’t have an environment or don’t want to install it, you can check out this example<br><a href="https://github.com/shenxianpeng/gcov-example">repository</a></p><p>Note: The source code is under the <code>master</code> branch master, and code coverage result html under branch <code>coverage</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the version of GCC and lcov on my test environment.</span></span><br><span class="line">sh-4.2$ gcc --version</span><br><span class="line">gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)</span><br><span class="line">Copyright (C) 2015 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the <span class="built_in">source</span> <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line"></span><br><span class="line">sh-4.2$ lcov -v</span><br><span class="line">lcov: LCOV version 1.14</span><br></pre></td></tr></table></figure><h2 id="How-Gcov-works"><a href="#How-Gcov-works" class="headerlink" title="How Gcov works"></a>How Gcov works</h2><p>Gcov workflow diagram</p><p><img src="/2021/07/gcov-example/gcov-flow.jpg" alt="flow"></p><p>There are three main steps:</p><ol><li>Adding special compilation options to the GCC compilation to generate the executable, and <code>*.gcno</code>.</li><li>Running (testing) the generated executable, which generates the <code>*.gcda</code> data file.</li><li>With <code>*.gcno</code> and <code>*.gcda</code>, generate the <code>gcov</code> file from the source code, and finally generate the code coverage report.</li></ol><p>Here’s how each of these steps is done exactly.</p><h3 id="1-Compile"><a href="#1-Compile" class="headerlink" title="1. Compile"></a>1. Compile</h3><p>The first step is to compile. The parameters and files used for compilation are already written in the <code>makefile</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make build</span><br></pre></td></tr></table></figure><details><summary>Click to see the output of the make command</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ make build</span><br><span class="line">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror main.c</span><br><span class="line">gcc -fPIC -fprofile-arcs -ftest-coverage -c -Wall -Werror foo.c</span><br><span class="line">gcc -fPIC -fprofile-arcs -ftest-coverage -o main main.o foo.o</span><br></pre></td></tr></table></figure></details><p>As you can see from the output, this program is compiled with two compile options <code>-fprofile-arcs</code> and <code>-ftest-coverage</code>.<br>After successful compilation, not only the <code>main</code> and <code>.o</code> files are generated, but also two <code>.gcno</code> files are generated.</p><blockquote><p>The <code>.gcno</code> record file is generated after adding the GCC compile option <code>-ftest-coverage</code>, which contains information<br>for reconstructing the base block map and assigning source line numbers to blocks during the compilation process.</p></blockquote><h3 id="2-Running-the-executable"><a href="#2-Running-the-executable" class="headerlink" title="2. Running the executable"></a>2. Running the executable</h3><p>After compilation, the executable <code>main</code> is generated, which is run (tested) as follows</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./main</span><br></pre></td></tr></table></figure><details><summary>Click to see the output when running main</summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ ./main</span><br><span class="line">Start calling foo() ...</span><br><span class="line">when num is equal to 1...</span><br><span class="line">when num is equal to 2...</span><br></pre></td></tr></table></figure></details><p>When <code>main</code> is run, the results are recorded in the <code>.gcda</code> data file, and if you look in the current directory,<br>you can see that two <code>.gcda</code> files have been generated.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">foo.c  foo.gcda  foo.gcno  foo.h  foo.o  img  main  main.c  main.gcda  main.gcno  main.o  makefile  README.md</span><br></pre></td></tr></table></figure><blockquote><p><code>.gcda</code> record data files are generated because the program is compiled with the <code>-fprofile-arcs</code> option introduced.<br>It contains arc transition counts, value distribution counts, and some summary information.</p></blockquote><h3 id="3-Generating-reports"><a href="#3-Generating-reports" class="headerlink" title="3. Generating reports"></a>3. Generating reports</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make report</span><br></pre></td></tr></table></figure><details><summary> Click to see the output of the generated report </summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ make report</span><br><span class="line">gcov main.c foo.c</span><br><span class="line">File <span class="string">&#x27;main.c&#x27;</span></span><br><span class="line">Lines executed:100.00% of 5</span><br><span class="line">Creating <span class="string">&#x27;main.c.gcov&#x27;</span></span><br><span class="line"></span><br><span class="line">File <span class="string">&#x27;foo.c&#x27;</span></span><br><span class="line">Lines executed:85.71% of 7</span><br><span class="line">Creating <span class="string">&#x27;foo.c.gcov&#x27;</span></span><br><span class="line"></span><br><span class="line">Lines executed:91.67% of 12</span><br><span class="line">lcov --capture --directory . --output-file coverage.info</span><br><span class="line">Capturing coverage data from .</span><br><span class="line">Found gcov version: 4.8.5</span><br><span class="line">Scanning . <span class="keyword">for</span> .gcda files ...</span><br><span class="line">Found 2 data files <span class="keyword">in</span> .</span><br><span class="line">Processing foo.gcda</span><br><span class="line">geninfo: WARNING: cannot find an entry <span class="keyword">for</span> main.c.gcov <span class="keyword">in</span> .gcno file, skipping file!</span><br><span class="line">Processing main.gcda</span><br><span class="line">Finished .info-file creation</span><br><span class="line">genhtml coverage.info --output-directory out</span><br><span class="line">Reading data file coverage.info</span><br><span class="line">Found 2 entries.</span><br><span class="line">Found common filename prefix <span class="string">&quot;/workspace/coco&quot;</span></span><br><span class="line">Writing .css and .png files.</span><br><span class="line">Generating output.</span><br><span class="line">Processing file gcov-example/main.c</span><br><span class="line">Processing file gcov-example/foo.c</span><br><span class="line">Writing directory view page.</span><br><span class="line">Overall coverage rate:</span><br><span class="line">  lines......: 91.7% (11 of 12 lines)</span><br><span class="line">  <span class="built_in">functions</span>..: 100.0% (2 of 2 <span class="built_in">functions</span>)</span><br></pre></td></tr></table></figure></details><p>Executing <code>make report</code> to generate an HTML report actually performs two main steps behind this command.</p><ol><li><p>With the <code>.gcno</code> and <code>.gcda</code> files generated at compile and run time, execute the command<br><code>gcov main.c foo.c</code> to generate the <code>.gcov</code> code coverage file.</p></li><li><p>With the code coverage <code>.gcov</code> file, generate a visual code coverage report via<br><a href="http://ltp.sourceforge.net/coverage/lcov.php">LCOV</a>.</p></li></ol><p>The steps to generate the HTML result report are as follows.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. Generate the coverage.info data file</span></span><br><span class="line">lcov --capture --directory . --output-file coverage.info</span><br><span class="line"><span class="comment"># 2. Generate a report from this data file</span></span><br><span class="line">genhtml coverage.info --output-directory out</span><br></pre></td></tr></table></figure><h3 id="Delete-all-generated-files"><a href="#Delete-all-generated-files" class="headerlink" title="Delete all generated files"></a>Delete all generated files</h3><p>All the generated files can be removed by executing <code>make clean</code> command.</p><details><summary> Click to see the output of the make clean command </summary><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh-4.2$ make clean</span><br><span class="line"><span class="built_in">rm</span> -rf main *.o *.so *.gcno *.gcda *.gcov coverage.info out</span><br></pre></td></tr></table></figure></details><h2 id="Code-coverage-report"><a href="#Code-coverage-report" class="headerlink" title="Code coverage report"></a>Code coverage report</h2><p><img src="/2021/07/gcov-example/index.png" alt="index"></p><p>The home page is displayed in a directory structure</p><p><img src="/2021/07/gcov-example/example.png" alt="example"></p><p>After entering the directory, the source files in that directory are displayed</p><p><img src="/2021/07/gcov-example/main.c.png" alt="main.c"></p><p>The blue color indicates that these statements are overwritten</p><p><img src="/2021/07/gcov-example/foo.c.png" alt="foo.c"></p><p>Red indicates statements that are not overridden</p><blockquote><p>LCOV supports statement, function, and branch coverage metrics.</p></blockquote><p>Side notes:</p><p>There is another tool for generating HTML reports called <a href="https://github.com/gcovr/gcovr">gcovr</a>, developed in Python,<br>whose reports are displayed slightly differently from LCOV. For example, LCOV displays it in a directory structure,<br>while gcovr displays it in a file path, which is always the same as the code structure, so I prefer to use the former.</p>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gcov </tag>
            
            <tag> LCOV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to make Jenkins job fail after timeout? (Resolved)</title>
      <link href="/2021/06/jenkins-timeout/"/>
      <url>/2021/06/jenkins-timeout/</url>
      
        <content type="html"><![CDATA[<p>I’ve run into some situations when the build fails, perhaps because some processes don’t finish, and even setting a timeout doesn’t make the Jenkins job fail.</p><p>So, to fix this problem, I used <code>try</code> .. <code>catch</code> and <code>error</code> to make my Jenkins job failed, hopes this also helps you.</p><p>Please see the following example:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Hello&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        timeout(time: <span class="number">1</span>, unit: <span class="string">&#x27;SECONDS&#x27;</span>) &#123;</span><br><span class="line">                            echo <span class="string">&quot;timeout step&quot;</span></span><br><span class="line">                            sleep <span class="number">2</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">                        <span class="comment">// timeout reached</span></span><br><span class="line">                        println err</span><br><span class="line">                        echo <span class="string">&#x27;Time out reached.&#x27;</span></span><br><span class="line">                        error <span class="string">&#x27;build timeout failed&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is the output log</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00:00:01.326  [Pipeline] Start of Pipeline</span><br><span class="line">00:00:01.475  [Pipeline] stage</span><br><span class="line">00:00:01.478  [Pipeline] &#123; (Hello)</span><br><span class="line">00:00:01.516  [Pipeline] script</span><br><span class="line">00:00:01.521  [Pipeline] &#123;</span><br><span class="line">00:00:01.534  [Pipeline] timeout</span><br><span class="line">00:00:01.534  Timeout set to expire in 1 sec</span><br><span class="line">00:00:01.537  [Pipeline] &#123;</span><br><span class="line">00:00:01.547  [Pipeline] echo</span><br><span class="line">00:00:01.548  timeout step</span><br><span class="line">00:00:01.555  [Pipeline] sleep</span><br><span class="line">00:00:01.558  Sleeping for 2 sec</span><br><span class="line">00:00:02.535  Cancelling nested steps due to timeout</span><br><span class="line">00:00:02.546  [Pipeline] &#125;</span><br><span class="line">00:00:02.610  [Pipeline] // timeout</span><br><span class="line">00:00:02.619  [Pipeline] echo</span><br><span class="line">00:00:02.621  org.jenkinsci.plugins.workflow.steps.FlowInterruptedException</span><br><span class="line">00:00:02.625  [Pipeline] echo</span><br><span class="line">00:00:02.627  Time out reached.</span><br><span class="line">00:00:02.630  [Pipeline] error</span><br><span class="line">00:00:02.638  [Pipeline] &#125;</span><br><span class="line">00:00:02.656  [Pipeline] // script</span><br><span class="line">00:00:02.668  [Pipeline] &#125;</span><br><span class="line">00:00:02.681  [Pipeline] // stage</span><br><span class="line">00:00:02.696  [Pipeline] End of Pipeline</span><br><span class="line">00:00:02.709  ERROR: build timeout failed</span><br><span class="line">00:00:02.710  Finished: FAILURE</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决在 AIX 上 Git Clone 失败的两个问题</title>
      <link href="/2021/06/git-clone-failed-on-aix/"/>
      <url>/2021/06/git-clone-failed-on-aix/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇记录两个在做 Jenkins 与 AIX 做持续集成得时候遇到的 Git clone 代码失败的问题，并已解决，分享出来或许能有所帮助。</p><ol><li>Dependent module &#x2F;usr&#x2F;lib&#x2F;libldap.a(libldap-2.4.so.2) could not be loaded.</li><li>通过 SSH 进行 git clone 出现 Authentication failed</li></ol><h2 id="问题1：Dependent-module-x2F-usr-x2F-lib-x2F-libldap-a-libldap-2-4-so-2-could-not-be-loaded"><a href="#问题1：Dependent-module-x2F-usr-x2F-lib-x2F-libldap-a-libldap-2-4-so-2-could-not-be-loaded" class="headerlink" title="问题1：Dependent module &#x2F;usr&#x2F;lib&#x2F;libldap.a(libldap-2.4.so.2) could not be loaded"></a>问题1：Dependent module &#x2F;usr&#x2F;lib&#x2F;libldap.a(libldap-2.4.so.2) could not be loaded</h2><p>Jenkins 通过 <strong>HTTPS</strong> 来 checkout 代码的时候，出现了如下错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2021-06-20T14:50:25.166Z] ERROR: Error cloning remote repo <span class="string">&#x27;origin&#x27;</span></span><br><span class="line">[2021-06-20T14:50:25.166Z] hudson.plugins.git.GitException: Command <span class="string">&quot;git fetch --tags --force --progress --depth=1 -- https://git.company.com/scm/vas/db.git +refs/heads/*:refs/remotes/origin/*&quot;</span> returned status code 128:</span><br><span class="line">[2021-06-20T14:50:25.166Z] stdout:</span><br><span class="line">[2021-06-20T14:50:25.166Z] stderr: <span class="built_in">exec</span>(): 0509-036 Cannot load program /opt/freeware/libexec64/git-core/git-remote-https because of the following errors:</span><br><span class="line">[2021-06-20T14:50:25.166Z] 0509-150   Dependent module /usr/lib/libldap.a(libldap-2.4.so.2) could not be loaded.</span><br><span class="line">[2021-06-20T14:50:25.166Z] 0509-153   File /usr/lib/libldap.a is not an archive or</span><br><span class="line">[2021-06-20T14:50:25.166Z]    the file could not be <span class="built_in">read</span> properly.</span><br><span class="line">[2021-06-20T14:50:25.166Z] 0509-026 System error: Cannot run a file that does not have a valid format.</span><br><span class="line">[2021-06-20T14:50:25.166Z]</span><br><span class="line">[2021-06-20T14:50:25.166Z] at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:2450)</span><br><span class="line">[2021-06-20T14:50:25.166Z] at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandWithCredentials(CliGitAPIImpl.java:2051)</span><br><span class="line">[2021-06-20T14:50:25.166Z] at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access<span class="variable">$500</span>(CliGitAPIImpl.java:84)</span><br><span class="line">[2021-06-20T14:50:25.167Z] at org.jenkinsci.plugins.gitclient.CliGitAPIImpl<span class="variable">$1</span>.execute(CliGitAPIImpl.java:573)</span><br><span class="line">[2021-06-20T14:50:25.167Z] at org.jenkinsci.plugins.gitclient.CliGitAPIImpl<span class="variable">$2</span>.execute(CliGitAPIImpl.java:802)</span><br><span class="line">[2021-06-20T14:50:25.167Z] at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler<span class="variable">$GitCommandMasterToSlaveCallable</span>.call(RemoteGitImpl.java:161)</span><br><span class="line">[2021-06-20T14:50:25.167Z] at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler<span class="variable">$GitCommandMasterToSlaveCallable</span>.call(RemoteGitImpl.java:154)</span><br><span class="line">..........................</span><br><span class="line">[2021-06-20T14:50:25.167Z] Suppressed: hudson.remoting.Channel<span class="variable">$CallSiteStackTrace</span>: Remote call to aix-devasbld-01</span><br><span class="line">[2021-06-20T14:50:25.167Z] at hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1800)</span><br><span class="line">..........................</span><br><span class="line">[2021-06-20T14:50:25.168Z] at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">[2021-06-20T15:21:20.525Z] Cloning repository https://git.company.com/scm/vas/db.git</span><br></pre></td></tr></table></figure><p>但是直接在虚拟机上通过命令 <code>git clone https://git.company.com/scm/vas/db.git</code> ，可以成功下载，没有出现任何问题。</p><ul><li>如果将 <code>LIBPATH</code> 设置为 <code>LIBPATH=/usr/lib</code> 就能重现上面的错误，这说明通过 Jenkins 下载代码的时候它是去 <code>/usr/lib/</code> 下面找 <code>libldap.a</code></li><li>如果将变量 <code>LIBPATH</code> 设置为空 <code>export LIBPATH=</code> 或 <code>unset LIBPATH</code>，执行 <code>git clone https://...</code> 就正常了。</li></ul><blockquote><p>尝试在 Jenkins 启动 agent 的时候修改 <code>LIBPATH</code> 变量设置为空，但都不能解决这个问题，不明白为什么不行！？</p></blockquote><p>那就看看 <code>/usr/lib/libldap.a</code> 是什么问题了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ldd 的时候发现这个静态库有问题</span></span><br><span class="line">$ ldd /usr/lib/libldap.a</span><br><span class="line">/usr/lib/libldap.a needs:</span><br><span class="line">         /opt/IBM/ldap/V6.4/lib/libibmldapdbg.a</span><br><span class="line">         /usr/lib/threads/libc.a(shr.o)</span><br><span class="line">Cannot find libpthreads.a(shr_xpg5.o)</span><br><span class="line">         /opt/IBM/ldap/V6.4/lib/libidsldapiconv.a</span><br><span class="line">Cannot find libpthreads.a(shr_xpg5.o)</span><br><span class="line">Cannot find libc_r.a(shr.o)</span><br><span class="line">         /unix</span><br><span class="line">         /usr/lib/libcrypt.a(shr.o)</span><br><span class="line">Cannot find libpthreads.a(shr_xpg5.o)</span><br><span class="line">Cannot find libc_r.a(shr.o)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到它链接到是 IBM LDAP</span></span><br><span class="line">$ <span class="built_in">ls</span> -l /usr/lib/libldap.a</span><br><span class="line">lrwxrwxrwx    1 root     system           35 Jun 10 2020  /usr/lib/libldap.a -&gt; /opt/IBM/ldap/V6.4/lib/libidsldap.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再看看同样的 libldap.a 在 /opt/freeware/lib/ 是没问题的</span></span><br><span class="line">$ ldd /opt/freeware/lib/libldap.a</span><br><span class="line">ldd: /opt/freeware/lib/libldap.a: File is an archive.</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> -l /opt/freeware/lib/libldap.a</span><br><span class="line">lrwxrwxrwx    1 root     system           13 May 27 2020  /opt/freeware/lib/libldap.a -&gt; libldap-2.4.a</span><br></pre></td></tr></table></figure><h2 id="问题1：解决办法"><a href="#问题1：解决办法" class="headerlink" title="问题1：解决办法"></a>问题1：解决办法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尝试替换</span></span><br><span class="line"><span class="comment"># 先将 libldap.a 重名为 libldap.a.old（不删除以防需要恢复）</span></span><br><span class="line">$ sudo <span class="built_in">mv</span> /usr/lib/libldap.a /usr/lib/libldap.a.old</span><br><span class="line"><span class="comment"># 重新链接</span></span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /opt/freeware/lib/libldap.a /usr/lib/libldap.a</span><br><span class="line">$ <span class="built_in">ls</span> -l /usr/lib/libldap.a</span><br><span class="line">lrwxrwxrwx    1 root     system           27 Oct 31 23:27 /usr/lib/libldap.a -&gt; /opt/freeware/lib/libldap.a</span><br></pre></td></tr></table></figure><p>重新链接完成后，重新连接 AIX agent，再次执行 Jenkins job 来 clone 代码，成功了！</p><h2 id="问题2：通过-SSH-进行-git-clone-出现-Authentication-failed"><a href="#问题2：通过-SSH-进行-git-clone-出现-Authentication-failed" class="headerlink" title="问题2：通过 SSH 进行 git clone 出现 Authentication failed"></a>问题2：通过 SSH 进行 git clone 出现 Authentication failed</h2><p>由于 AIX 7.1-TL4-SP1 即将 End of Service Pack Support，因此需要升级。但是升级到 AIX 7.1-TL5-SP6 后无法通过 SSH 下载代码。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@git.company.com:7999/vas/db.git</span><br><span class="line">Cloning into <span class="string">&#x27;db&#x27;</span>...</span><br><span class="line">Authentication failed.</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>像这样的错误，在使用 Git SSH 方式来 clone 代码经常会遇到，通常都是没有设置 public key。只要执行 <code>ssh-keygen -t rsa -C your@email.com</code> 生成 <code>id_rsa</code> keys，然后将 <code>id_rsa.pub</code> 的值添加到 GitHub&#x2F;Bitbucket&#x2F;GitLab 的 public key 中一般就能解决。</p><p>但这次不一样，尽管已经设置了 public key，但错误依旧存在。奇快的是之前 AIX 7.1-TL4-SP1 是好用的，升级到 AIX 7.1-TL5-SP6 就不好用了呢？</p><p>使用命令 <code>ssh -vvv &lt;git-url&gt;</code> 来看看他们在请求 git 服务器时候 debug 信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># AIX 7.1-TL4-SP1</span></span><br><span class="line">bash-4.3$ oslevel -s</span><br><span class="line">7100-04-01-1543</span><br><span class="line">bash-4.3$ ssh -vvv git.company.com</span><br><span class="line">OpenSSH_6.0p1, OpenSSL 1.0.1e 11 Feb 2013</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: Failed dlopen: /usr/krb5/lib/libkrb5.a(libkrb5.a.so):   0509-022 Cannot load module /usr/krb5/lib/libkrb5.a(libkrb5.a.so).</span><br><span class="line">        0509-026 System error: A file or directory <span class="keyword">in</span> the path name does not exist.</span><br><span class="line"></span><br><span class="line">debug1: Error loading Kerberos, disabling Kerberos auth.</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset by peer</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># New machine AIX 7.1-TL5-SP6</span></span><br><span class="line">$ oslevel -s</span><br><span class="line">7100-05-06-2015</span><br><span class="line">$ ssh -vvv git.company.com</span><br><span class="line">OpenSSH_7.5p1, OpenSSL 1.0.2t  10 Sep 2019</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: Failed dlopen: /usr/krb5/lib/libkrb5.a(libkrb5.a.so):   0509-022 Cannot load module /usr/krb5/lib/libkrb5.a(libkrb5.a.so).</span><br><span class="line">        0509-026 System error: A file or directory <span class="keyword">in</span> the path name does not exist.</span><br><span class="line"></span><br><span class="line">debug1: Error loading Kerberos, disabling Kerberos auth.</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset by peer</span><br></pre></td></tr></table></figure><p>可以看到的差别是 OpenSSH 的版本不同，可能是因此导致的，根据这个推测很快就找到了类似的问题和答案（Stackoverflow <a href="https://stackoverflow.com/questions/54191112/bitbucket-ssh-clone-on-aix-7-1-fails">链接</a>)</p><h2 id="问题2：解决办法"><a href="#问题2：解决办法" class="headerlink" title="问题2：解决办法"></a>问题2：解决办法</h2><p>在 <code>~/.ssh/config</code> 文件里添加选项 <code>AllowPKCS12keystoreAutoOpen no</code></p><p>但问题又来了，这个选项是 AIX 上的一个定制选项，在 Linux 上是没有的。</p><p>这会导致同一个域账户在 AIX 通过 SSH 可以 git clone 成功，但在 Linux 上 git clone 会失败。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux 上不识别改选项</span></span><br><span class="line">stderr: /home/****/.ssh/config: line 1: Bad configuration option: allowpkcs12keystoreautoopen</span><br><span class="line">/home/****/.ssh/config: terminating, 1 bad configuration options</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br></pre></td></tr></table></figure><ol><li>如果 <code>config</code> 文件可以支持条件选项就好了，即当为 AIX 是添加选项 <code>AllowPKCS12keystoreAutoOpen no</code>，其他系统则没有该选项。可惜 <code>config</code> 并不支持。</li><li>如果能单独的设置当前 AIX 的 ssh config 文件就好了。尝试将 <code>/etc/ssh/ssh_config</code> 文件修改如下，重启服务，再次通过 SSH clone，成功~！</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line">  AllowPKCS12keystoreAutoOpen no</span><br><span class="line"><span class="comment">#   ForwardAgent no</span></span><br><span class="line"><span class="comment">#   ForwardX11 no</span></span><br><span class="line"><span class="comment">#   RhostsRSAAuthentication no</span></span><br><span class="line"><span class="comment">#   RSAAuthentication yes</span></span><br><span class="line"><span class="comment">#   PasswordAuthentication yes</span></span><br><span class="line"><span class="comment">#   HostbasedAuthentication no</span></span><br><span class="line"><span class="comment">#   GSSAPIAuthentication no</span></span><br><span class="line"><span class="comment">#   GSSAPIDelegateCredentials no</span></span><br><span class="line"><span class="comment">#   GSSAPIKeyExchange no</span></span><br><span class="line"><span class="comment">#   GSSAPITrustDNS no</span></span><br><span class="line"><span class="comment">#   ....省略</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Git </tag>
            
            <tag> AIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过解除文件资源限制：解决在 AIX 使用 Git 下载大容量仓库失败问题</title>
      <link href="/2021/06/aix-ulimit/"/>
      <url>/2021/06/aix-ulimit/</url>
      
        <content type="html"><![CDATA[<p>最近使用 AIX 7.1 从 Bitbucket 下载代码的时候遇到了这个错误：</p><p><code>fatal: write error: A file cannot be larger than the value set by ulimit.</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b dev https://&lt;username&gt;:&lt;password&gt;@git.company.com/scm/vmcc/opensrc.git --depth 1</span><br><span class="line">Cloning into <span class="string">&#x27;opensrc&#x27;</span>...</span><br><span class="line">remote: Counting objects: 2390, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1546/1546), <span class="keyword">done</span>.</span><br><span class="line">fatal: write error: A file cannot be larger than the value <span class="built_in">set</span> by <span class="built_in">ulimit</span>.</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p>在 AIX 7.3 我遇到的是这个错误：</p><p><code>fatal: fetch-pack: invalid index-pack output</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b dev https://&lt;username&gt;:&lt;password&gt;@git.company.com/scm/vmcc/opensrc.git --depth 1</span><br><span class="line">Cloning into <span class="string">&#x27;opensrc&#x27;</span>...</span><br><span class="line">remote: Counting objects: 2390, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1546/1546), <span class="keyword">done</span>.</span><br><span class="line">fatal: write error: File too large68), 1012.13 MiB | 15.38 MiB/s</span><br><span class="line">fatal: fetch-pack: invalid index-pack output</span><br></pre></td></tr></table></figure><p>这是由于这个仓库里的文件太大，超过了 AIX 对于用户文件资源使用的上限。</p><p>通过 <code>ulimit -a</code> 可以来查看。更多关于 <code>ulimit</code> 命令的使用 <a href="https://www.ibm.com/docs/en/aix/7.1?topic=u-ulimit-command">ulimit Command</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line">time(seconds)        unlimited</span><br><span class="line">file(blocks)         2097151</span><br><span class="line">data(kbytes)         unlimited</span><br><span class="line">stack(kbytes)        32768</span><br><span class="line">memory(kbytes)       32768</span><br><span class="line">coredump(blocks)     2097151</span><br><span class="line">nofiles(descriptors) 2000</span><br><span class="line">threads(per process) unlimited</span><br><span class="line">processes(per user)  unlimited</span><br></pre></td></tr></table></figure><p>可以看到 file 有一个上限值 2097151。如果将它也改成 unlimited 应该就好了。</p><p>通过 root 用户可以访问到 limits 文件 <code>/etc/security/limits</code>(普通用户没权限访问)。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下是这个文件里的部分内容</span></span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">        fsize = 2097151</span><br><span class="line">        core = 2097151</span><br><span class="line">        cpu = -1</span><br><span class="line">        data = -1</span><br><span class="line">        rss = 65536</span><br><span class="line">        stack = 65536</span><br><span class="line">        nofiles = 2000</span><br></pre></td></tr></table></figure><p>将上述的值 fsize &#x3D; 2097151 改成 fsize &#x3D; -1 就将解除了文件块大小的限制了。修改完成后，<strong>重新登录</strong>来让这次修改生效。</p><p>再次执行 <code>ulimit -a</code>，已经生效了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -a</span><br><span class="line">time(seconds)        unlimited</span><br><span class="line">file(blocks)         unlimited</span><br><span class="line">data(kbytes)         unlimited</span><br><span class="line">stack(kbytes)        32768</span><br><span class="line">memory(kbytes)       32768</span><br><span class="line">coredump(blocks)     2097151</span><br><span class="line">nofiles(descriptors) 2000</span><br><span class="line">threads(per process) unlimited</span><br><span class="line">processes(per user)  unlimited</span><br></pre></td></tr></table></figure><p>此时 file(blocks) 已经变成 unlimited 了。再次尝试 git clone</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b dev https://&lt;username&gt;:&lt;password&gt;@git.company.com/scm/vmcc/opensrc.git --depth 1</span><br><span class="line">Cloning into <span class="string">&#x27;opensrc&#x27;</span>...</span><br><span class="line">remote: Counting objects: 2390, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (1546/1546), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 2390 (delta 763), reused 2369 (delta 763)</span><br><span class="line">Receiving objects: 100% (2390/2390), 3.80 GiB | 3.92 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (763/763), <span class="keyword">done</span>.</span><br><span class="line">Checking out files: 100% (3065/3065), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>这次就成功了！</p>]]></content>
      
      
      <categories>
          
          <category> AIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> AIX </tag>
            
            <tag> ulimit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Artifactory 上传制品变得非常缓慢，偶尔失败的问题分享</title>
      <link href="/2021/06/artifactory-slow-upload/"/>
      <url>/2021/06/artifactory-slow-upload/</url>
      
        <content type="html"><![CDATA[<p>最近在我使用 Artifactory Enterprise 遇到了上传制品非常缓慢的问题，在经过与 IT，Artifactory 管理员一起合作终于解决这个问题，在此分享一下这个问题的解决过程。</p><p>如果你也遇到类似或许有所帮助。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>最近发现通过 Jenkins 往 Artifactory 里上传制品的时候偶尔出现上传非常缓慢的情况，尤其是当一个 Jenkins stage 里有多次上传，往往会在第二次上传的时候出现传输速度极为缓慢（KB&#x2F;s ）。</p><h2 id="问题排查和解决"><a href="#问题排查和解决" class="headerlink" title="问题排查和解决"></a>问题排查和解决</h2><p>我的构建环境和 Jenkins 都没有任何改动，所有的构建任务都出现了上传缓慢的情况，为了排除可能是使用 Artifactory plugin 的导致原因，通过 curl 命令来进行上传测试，也同样上传速度经常很慢。</p><p>那么问题就在 Artifactory 上面。</p><ol><li>是 Artifactory 最近升级了？</li><li>还是 Artifactory 最近修改了什么设置？</li><li>也许是 Artifactory 服务器的问题？</li></ol><p>在跟 Artifactory 管理员进行了沟通之后，排除了以上 1，2 的可能。为了彻底排除是 Artifactory 的问题，通过 scp 进行拷贝的时候同样也出现了传输速度非常慢的情况，这问题就出现在网络上了。</p><p>这样需要 IT 来帮助排查网络问题了，最终 IT 建议更换网卡进行尝试（因为他们之前有遇到类似的情况），但这种情况会有短暂的网络中断，不过最终还是得到了管理者的同意。</p><p>幸运的是在更换网卡之后，Jenkins 往 Artifactory 传输制品的速度恢复了正常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>处理次事件的一点点小小的总结：</p><p>由于这个问题涉及到几个团队，为了能够快速推进，此时明确说明问题，推测要有理有据，以及该问题导致了什么样的严重后果（比如影响发布）才能让相关人重视起来，否则大家都等着，没人回来解决问题。</p><p>当 Artifactory 管理推荐使用其他数据中心 instance，建议他们先尝试更换网卡；如果问题没有得到解决，在同一个数据中心创建另外一台服务器。如果问题还在，此时再考虑迁移到其他数据中心instance。这大大减少了作为用户去试错所带来的额外工作量。</p>]]></content>
      
      
      <categories>
          
          <category> Artifactory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resolved problem that ESlint HTML report is not displayed correctly in Jenkins job</title>
      <link href="/2021/06/eslint-jenkins/"/>
      <url>/2021/06/eslint-jenkins/</url>
      
        <content type="html"><![CDATA[<blockquote><p>I’m just documenting to myself that it was solved by following.</p></blockquote><p>When I want to integrate the ESlint report with Jenkins. I encourage a problem</p><p>That is eslint-report.html display different with it on my local machine, and I also log to Jenkins server and grab the eslint-report.html to local, it works well.</p><p>I used <a href="https://plugins.jenkins.io/htmlpublisher/">HTML Publisher</a> plugin to display the HTML report, but only the ESlint HTML report has problems other report work well, so I guess this problem may be caused by Jenkins.</p><p>Finally, I find it. (Stackoverflow <a href="https://stackoverflow.com/questions/34315723/jenkins-error-blocked-script-execution-in-url-because-the-documents-frame/46197356?stw=2#46197356">URL</a>)</p><h2 id="Follow-the-below-steps-for-solution"><a href="#Follow-the-below-steps-for-solution" class="headerlink" title="Follow the below steps for solution"></a>Follow the below steps for solution</h2><ol><li>Open the Jenkin home page.</li><li>Go to Manage Jenkins.</li><li>Now go to Script Console.</li><li>And in that console paste the below statement and click on Run.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;hudson.model.DirectoryBrowserSupport.CSP&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>After that, it will load CSS and JS.</li></ol><p>According to Jenkins’s new <a href="https://www.jenkins.io/doc/book/security/configuring-content-security-policy/">Content Security Policy</a> and I saw <code>No frames allowed</code>.</p><p>That is exactly the error I get on chrome by right-clicking on Elements.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Troubleshooting </tag>
            
            <tag> ESlint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常见设置指北</title>
      <link href="/2021/05/git-guidelines/"/>
      <url>/2021/05/git-guidelines/</url>
      
        <content type="html"><![CDATA[<p>在使用 Git 提交代码之前，建议做以下这些设置。</p><p>叫指南有点夸张，因为它在有些情况下下不适用，比如你已经有了 <code>.gitattributes</code> 或 <code>.editorconfig</code> 等文件，那么有些设置就不用做了。</p><p>因此暂且叫他指北吧，它通常情况下还是很有用的。</p><p>废话不多说，看看都需要哪些设置吧。</p><h2 id="1-配置-name-和-email"><a href="#1-配置-name-和-email" class="headerlink" title="1. 配置 name 和 email"></a>1. 配置 name 和 email</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意，你需要将下面示例中我的 name 和 email 换成你自己的</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;shenxianpeng&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;xianpeng.shen@gmail.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于，我还推荐你设置头像，这样方便同事间的快速识别。</p><p>当你不设置头像的时候，只有把鼠标放到头像上才知道 Pull Request 的 Reviewers 是谁（来自于Bitubkcet）。</p><p><img src="/2021/05/git-guidelines/avatar.png"></p><h2 id="2-设置-core-autocrlf-x3D-false"><a href="#2-设置-core-autocrlf-x3D-false" class="headerlink" title="2. 设置 core.autocrlf&#x3D;false"></a>2. 设置 core.autocrlf&#x3D;false</h2><p>为了防止 CRLF(windows) 和 LF(UNIX&#x2F;Linux&#x2F;Mac) 的转换问题。为了避免在使用 Git 提交代码时出现历史被掩盖的问题，强烈建议每个使用 Git 的人执行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"><span class="comment"># 检查并查看是否输出 &quot;core.autocrlf=false&quot;，这意味着命令设置成功。</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><p>如果你的项目底下已经有了 <code>.gitattributes</code> 或 <code>.editorconfig</code> 文件，通常这些文件里面都有放置 CRLF 和 LF 的转换问题的设置项。</p><p>这时候你就不必特意执行命令 <code>git config --global core.autocrlf false</code></p><h2 id="3-编写有规范的提交"><a href="#3-编写有规范的提交" class="headerlink" title="3. 编写有规范的提交"></a>3. 编写有规范的提交</h2><p>我在之前的文章里分享过关于如何设置提交信息规范，请参看<a href="https://shenxianpeng.github.io/2020/09/commit-messages-specification/">《Git提交信息和分支创建规范》</a>。</p><h2 id="4-提交历史的压缩"><a href="#4-提交历史的压缩" class="headerlink" title="4. 提交历史的压缩"></a>4. 提交历史的压缩</h2><p>比如你修改一个 bug，假设你通过 3 次提交到你的个人分支才把它改好。这时候你提 Pull Request 就会显示有三个提交。</p><p>如果提交历史不进行压缩，这个 PR 被合并到主分支后，以后别人看到你这个 bug 的修复就是去这三个 commits 里去一一查看，进行对比，才能知道到底修改了什么。</p><p>压缩提交历史就是将三次提交压缩成一次提交。</p><p>可以通过 git rebase 命令进行 commit 的压缩，比如将最近三次提交压缩成一次可以执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><h2 id="5-删除已经-merge-的分支"><a href="#5-删除已经-merge-的分支" class="headerlink" title="5. 删除已经 merge 的分支"></a>5. 删除已经 merge 的分支</h2><p>有些 SCM，比如 Bitbucket 不支持默认勾选 <code>Delete source branch after merging</code>，这个问题终于在 Bitbucket 7.3 版本修复了。详见 <a href="https://jira.atlassian.com/browse/BSERV-9254">BSERV-9254</a> 和 <a href="https://jira.atlassian.com/browse/BSERV-3272">BSERV-3272</a> （2013年创建的）。</p><p>注意在合并代码时勾选删除源分支这一选项，否则会造成大量的开发分支留在 Git 仓库下。</p><hr><p>如果还需要哪些设置这里没有提到的，欢迎补充。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Branch Naming Convention</title>
      <link href="/2021/05/branch-naming-convention/"/>
      <url>/2021/05/branch-naming-convention/</url>
      
        <content type="html"><![CDATA[<h2 id="Why-need-branching-naming-convention"><a href="#Why-need-branching-naming-convention" class="headerlink" title="Why need branching naming convention"></a>Why need branching naming convention</h2><p>To better manage the branches on Git(I sued Bitbucket), integration with CI tool, Artifactory, and automation will be more simple and clear.</p><p>For example, good unified partition naming can help the team easily find and integrate without special processing. Therefore, you should unify the partition naming rules for all repositories.</p><h2 id="Branches-naming-convention"><a href="#Branches-naming-convention" class="headerlink" title="Branches naming convention"></a>Branches naming convention</h2><h3 id="main-branch-naming"><a href="#main-branch-naming" class="headerlink" title="main branch naming"></a>main branch naming</h3><p>In general, the main’s branch names most like <code>master</code> or <code>main</code>.</p><h3 id="Development-branch-naming"><a href="#Development-branch-naming" class="headerlink" title="Development branch naming"></a>Development branch naming</h3><p>I would name my development branch just called <code>develop</code>.</p><h3 id="Bugfix-and-feature-branches-naming"><a href="#Bugfix-and-feature-branches-naming" class="headerlink" title="Bugfix and feature branches naming"></a>Bugfix and feature branches naming</h3><p>For Bitbucket, it has default types of branches for use, like <code>bugfix/</code>, <code>feature/</code>.<br>So my <code>bugfix</code>, <code>feature</code> combine with the Jira key together, such as <code>bugfix/ABC-1234</code> or <code>feature/ABC-2345</code>.</p><h3 id="Hotfix-and-release-branches-naming"><a href="#Hotfix-and-release-branches-naming" class="headerlink" title="Hotfix and release branches naming"></a>Hotfix and release branches naming</h3><p>For hotfix and release, my naming convention always like <code>release/1.1.0</code>, <code>hotfix/1.1.0.HF1</code>.</p><h3 id="Other-branches"><a href="#Other-branches" class="headerlink" title="Other branches"></a>Other branches</h3><p>Maybe your Jira task ticket you don’t want to make it in <code>bugfix</code> or <code>feature</code>, you can name it to start with <code>task</code>, so the branch name is <code>task/ABC-3456</code>.</p><p>If you have to provide diagnostic build to custom, you can name your branch <code>diag/ABC-5678</code>.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Anyway, having a unified branch naming convention is very important for implement CI&#x2F;CD and your whole team.</p><blockquote><p>Related Reading: <a href="https://shenxianpeng.github.io/2019/07/git-branching-strategy/">Git Branch Strategy</a> (Chinese)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Branch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to download the entire folder artifacts when Artifactory &quot;Download Folder functionality is disabled&quot;?</title>
      <link href="/2021/05/artifactory-api-search/"/>
      <url>/2021/05/artifactory-api-search/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>When you do CI with JFrog Artifactory when you want to download the entire folder artifacts, but maybe your IT doesn’t enable this function, whatever some seasons.</p><p>You can try the below JFrog Artifactory API to know if you’re using Artifactory whether allowed to download the entire folder artifacts.</p><p>just visit this API URL: <code>https://den-artifactory.company.com/artifactory/api/archive/download/team-generic-release-den/project/abc/main/?archiveType=zip</code></p><p>You will see an error message returned if the Artifactory is not allowed to download the entire folder.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">403</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Download Folder functionality is disabled.&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>More details about the API could find here <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-RetrieveFolderorRepositoryArchive">Retrieve Folder or Repository Archive</a></p></blockquote><h2 id="Workaround"><a href="#Workaround" class="headerlink" title="Workaround"></a>Workaround</h2><p>So to be enabled to download entire folder artifacts, I found other JFrog Artifactory APIs provide a workaround.</p><p>How to download the entire folder artifacts programmatically? this post will show you how to use other <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API">Artifactory REST API</a> to get a workaround.</p><h3 id="1-Get-All-Artifacts-Created-in-Date-Range"><a href="#1-Get-All-Artifacts-Created-in-Date-Range" class="headerlink" title="1. Get All Artifacts Created in Date Range"></a>1. Get All Artifacts Created in Date Range</h3><p>API URL: <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-ArtifactsCreatedinDateRange">Artifacts Created in Date Range</a></p><p>This is the snippet code I use this API</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download.sh</span></span><br><span class="line"></span><br><span class="line">USERNAME=<span class="variable">$1</span></span><br><span class="line">PASSWORD=<span class="variable">$2</span></span><br><span class="line">REPO=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># which day ago do you want to download</span></span><br><span class="line">N_DAY_AGO=<span class="variable">$4</span></span><br><span class="line"><span class="comment"># today</span></span><br><span class="line">START_TIME=$(($(date --date=&quot;<span class="variable">$N_DAY_AGO</span> days ago&quot; +%s%N)/<span class="number">1000000</span>))</span><br><span class="line">END_TIME=$(($(date +%s%N)/<span class="number">1000000</span>))</span><br><span class="line"></span><br><span class="line">ARTIFACTORY=https://den-artifactory.company.com/artifactory</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -x <span class="string">&quot;`which sha1sum`&quot;</span> ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;You need to have the &#x27;sha1sum&#x27; command in your path.&quot;</span>; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">RESULTS=`curl -s -X GET -u <span class="variable">$USERNAME</span>:<span class="variable">$PASSWORD</span> <span class="string">&quot;<span class="variable">$ARTIFACTORY</span>/api/search/creation?from=<span class="variable">$START_TIME</span>&amp;to=<span class="variable">$END_TIME</span>&amp;repos=<span class="variable">$REPO</span>&quot;</span> | grep uri | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | sed s<span class="string">&#x27;/.$//&#x27;</span> | sed s<span class="string">&#x27;/.$//&#x27;</span> | sed -r <span class="string">&#x27;s/^.&#123;1&#125;//&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$RESULTS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> RESULT <span class="keyword">in</span> <span class="variable">$RESULTS</span> ; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;fetching path from <span class="variable">$RESULT</span>&quot;</span></span><br><span class="line">    PATH_TO_FILE=`curl -s -X GET -u <span class="variable">$USERNAME</span>:<span class="variable">$PASSWORD</span> <span class="variable">$RESULT</span> | grep downloadUri | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | sed s<span class="string">&#x27;/.$//&#x27;</span> | sed s<span class="string">&#x27;/.$//&#x27;</span> | sed -r <span class="string">&#x27;s/^.&#123;1&#125;//&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;download file path <span class="variable">$PATH_TO_FILE</span>&quot;</span></span><br><span class="line">  curl -u <span class="variable">$USERNAME</span>:<span class="variable">$PASSWORD</span> -O <span class="variable">$PATH_TO_FILE</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>Then you just use this as: <code>sh download.sh $&#123;USERNAME&#125; $&#123;PASSWORD&#125; $&#123;REPO_PATH&#125; $&#123;N_DAY_AGO&#125;</code></p><h3 id="2-Get-all-artifacts-matching-the-given-Ant-path-pattern"><a href="#2-Get-all-artifacts-matching-the-given-Ant-path-pattern" class="headerlink" title="2. Get all artifacts matching the given Ant path pattern"></a>2. Get all artifacts matching the given Ant path pattern</h3><p>More about this API see: <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-PatternSearch">Pattern Search</a></p><p>Take an example screenshot of pattern search:</p><p><img src="/2021/05/artifactory-api-search/pattern-search.png"></p><p>Then you can use Shell, Python language to get the file path from the response, then use <code>curl -u $USERNAME:$PASSWORD -O $PATH_TO_FILE</code> command to download the file one by one.</p><p>If you have better solutions, suggestions, or questions, you can leave a comment.</p>]]></content>
      
      
      <categories>
          
          <category> JFrog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why Windows Installer pop up? (Resolved)</title>
      <link href="/2021/04/why-windows-installer-pop-up/"/>
      <url>/2021/04/why-windows-installer-pop-up/</url>
      
        <content type="html"><![CDATA[<h2 id="What’s-the-problem"><a href="#What’s-the-problem" class="headerlink" title="What’s the problem?"></a>What’s the problem?</h2><p>Today I am having a problem where the Windows installer I created is not installing, and the following Windows installer box pops up.</p><p><img src="/2021/04/why-windows-installer-pop-up/windows-installer.png"></p><p>But it works well in the previous build, and I didn’t make any code changes. It is strange, actually fix this problem is very easy but not easy to find.</p><h2 id="How-to-fix-it"><a href="#How-to-fix-it" class="headerlink" title="How to fix it?"></a>How to fix it?</h2><p>In my case, I just remove the space from my build folder naming. I have made follow mistakes:</p><p>My previous build name is <code>v2.2.2.3500-da121sa-Developer</code>, but for this build, I named it to <code>v2.2.2.3500-32jkjdk - Developer</code></p><h2 id="How-to-find-the-solution"><a href="#How-to-find-the-solution" class="headerlink" title="How to find the solution?"></a>How to find the solution?</h2><p>This problem takes me several hours until I google this <a href="https://community.spiceworks.com/topic/874022-msiexec-just-returns-a-pop-up">article</a> which inspired me.</p><p>Just like the above article, if I try to use the command line <code>msiexec.exe other-commands ...</code>, compare with the works installer will also quick to find the root cause.</p><p>I realized it immediately I should try to remove the spaces from the build folder… Wow, the installer back to work.</p><p>If this happens to you, I hope it also works for you, and leave a comment if it works for you.</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JaCoCo 代码覆盖率实践分享</title>
      <link href="/2021/04/jacoco-imp/"/>
      <url>/2021/04/jacoco-imp/</url>
      
        <content type="html"><![CDATA[<p>本文适用的是 Gradle 来构建和适用 JaCoCo。</p><p>分别介绍了 <code>build.gradle</code> 的文件配置，执行测试和生成报告，报告参数说明，以及如何忽略指定的包或类从而影响测试覆盖率的结果。</p><h2 id="build-gradle-文件配置"><a href="#build-gradle-文件配置" class="headerlink" title="build.gradle 文件配置"></a>build.gradle 文件配置</h2><p>比如使用 gradle 来管理的项目可以在 <code>build.gradle</code> 里添加如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;jacoco&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jacoco &#123;</span><br><span class="line">    toolVersion = <span class="string">&quot;0.8.5&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">    exclude <span class="string">&#x27;**/**IgnoreTest.class&#x27;</span>  <span class="comment">// 如果有 test case 不通过，如有必要可以通过这样忽略掉</span></span><br><span class="line">    finalizedBy jacocoTestReport       <span class="comment">// report is always generated after tests run</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jacocoTestReport &#123;</span><br><span class="line">    dependsOn test <span class="comment">// tests are required to run before generating the report</span></span><br><span class="line">    reports &#123;</span><br><span class="line">        xml.enabled <span class="literal">true</span></span><br><span class="line">        csv.enabled <span class="literal">false</span></span><br><span class="line">        html.destination <span class="title function_">file</span><span class="params">(<span class="string">&quot;$&#123;buildDir&#125;/reports/jacoco&quot;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行测试，生成代码覆盖率报告"><a href="#执行测试，生成代码覆盖率报告" class="headerlink" title="执行测试，生成代码覆盖率报告"></a>执行测试，生成代码覆盖率报告</h2><p>然后执行 <code>gradle test</code> 就可以了。之后可以可以在 <code>build\reports\jacoco</code> 目录下找到报告了。</p><p><img src="/2021/04/jacoco-imp/reports.png" alt="JaCoCo报告"></p><p>重点是如何分析报告。打开 index.html，报告显示如下：</p><p><img src="/2021/04/jacoco-imp/index.png" alt="JaCoCo报告首页"></p><h2 id="报告参数说明"><a href="#报告参数说明" class="headerlink" title="报告参数说明"></a>报告参数说明</h2><span id="more"></span><h3 id="Coverage-Counters（覆盖计数器）"><a href="#Coverage-Counters（覆盖计数器）" class="headerlink" title="Coverage Counters（覆盖计数器）"></a>Coverage Counters（覆盖计数器）</h3><p>JaCoCo 使用一组不同的计数器来计算覆盖率指标，所有这些计数器都来自于 Java 类文件中包含的信息，这些信息基本上是 Java 字节码指令和嵌入类文件中的调试信息。这种方法可以在没有源代码的情况下，对应用程序进行有效的即时检测和分析。在大多数情况下，收集到的信息可以映射到源代码，并可视化到行级粒度。</p><p>这种方法也有一定的局限性，就是类文件必须与调试信息一起编译，以计算行级覆盖率并提供源码高亮。但不是所有的 Java 语言结构都可以直接编译成相应的字节码。在这种情况下，Java 编译器会创建所谓的合成代码，有时会导致意外的代码覆盖率结果。</p><h3 id="Instructions-C0-Coverage-指令（C0覆盖率）"><a href="#Instructions-C0-Coverage-指令（C0覆盖率）" class="headerlink" title="Instructions (C0 Coverage) - 指令（C0覆盖率）"></a>Instructions (C0 Coverage) - 指令（C0覆盖率）</h3><p>最小的单位 JaCoCo 计数是单个 Java 字节码指令，指令覆盖率提供了关于被执行或遗漏的代码量的信息，这个指标完全独立于源码格式化，即使在类文件中没有调试信息的情况下也始终可用。</p><h3 id="Branches-C1-Coverage-分支（C1覆盖率）"><a href="#Branches-C1-Coverage-分支（C1覆盖率）" class="headerlink" title="Branches (C1 Coverage) - 分支（C1覆盖率）"></a>Branches (C1 Coverage) - 分支（C1覆盖率）</h3><p>JaCoCo 还计算所有 if 和 switch 语句的分支覆盖率，这个指标计算一个方法中此类分支的总数，并确定执行或遗漏的分支数量。即使在类文件中没有调试信息的情况下，分支覆盖率总是可用的。但请注意在这个计数器定义的上下文中<strong>异常处理不被认为是分支。</strong></p><p>如果类文件没有编译调试信息，决策点可以被映射到源行并相应地高亮显示。</p><ul><li>没有覆盖。行中没有分支被执行（红菱形</li><li>部分覆盖。仅执行了该线的部分分支（黄钻</li><li>全覆盖。线路中的所有分支都已执行（绿色菱形）</li></ul><h3 id="Cyclomatic-Complexity-环形复杂度"><a href="#Cyclomatic-Complexity-环形复杂度" class="headerlink" title="Cyclomatic Complexity - 环形复杂度"></a>Cyclomatic Complexity - 环形复杂度</h3><p>JaCoCo 还计算了每个非抽象方法的循环复杂度并总结了类、包和组的复杂度。循环复杂度是指在（线性）组合中，能够产生通过一个方法的所有可能路径的最小路径数。<br>因此复杂度值可以作为完全覆盖某个软件的单元测试用例数量的指示，即使在类文件中没有调试信息的情况下，也可以计算出复杂度数字。</p><p>循环复杂度v(G)的正式定义是基于将方法的控制流图表示为一个有向图。</p><p>v(G) &#x3D; E - N + 2</p><p>其中E为边数，N为节点数。JaCoCo根据分支数(B)和决策点数(D)计算方法的循环复杂度，其等价公式如下。</p><p>v(G) &#x3D; B - D + 1</p><p>根据每个分支的覆盖状态，JaCoCo还计算每个方法的覆盖和遗漏复杂度。遗漏的复杂度再次表明了完全覆盖一个模块所缺少的测试用例数量。请注意，由于JaCoCo不考虑异常处理作为分支，尝试&#x2F;捕获块也不会增加复杂性。</p><h3 id="Lines-行"><a href="#Lines-行" class="headerlink" title="Lines - 行"></a>Lines - 行</h3><p>对于所有已经编译过调试信息的类文件，可以计算出各个行的覆盖率信息。当至少有一条分配给该行的指令被执行时，就认为该源行已被执行。</p><p>由于单行通常会编译成多条字节码指令，源码高亮显示每行包含源码的三种不同状态。</p><ul><li>No coverage: 该行没有指令被执行（红色背景）。</li><li>部分覆盖。该行中只有部分指令被执行（黄色背景）。</li><li>全覆盖。该行的所有指令都已执行（绿色背景）。</li></ul><p>根据源码的格式，一个源码的一行可能涉及多个方法或多个类。因此，方法的行数不能简单地相加来获得包含类的总行数。同样的道理也适用于一个源文件中多个类的行数。JaCoCo根据实际的源代码行数来计算类和源代码文件的行数。</p><h3 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method - 方法"></a>Method - 方法</h3><p>每个非抽象方法至少包含一条指令。当至少有一条指令被执行时，一个方法就被认为是被执行的。由于 JaCoCo 工作在字节代码层面，构造函数和静态初始化器也被算作方法，其中一些方法在 Java 源代码中可能没有直接的对应关系，比如隐式的，因此生成了默认的构造函数或常量的初始化器。</p><h3 id="Classes-类"><a href="#Classes-类" class="headerlink" title="Classes - 类"></a>Classes - 类</h3><p>当一个类中至少有一个方法被执行时，该类被认为是被执行的。请注意，JaCoCo 认为构造函数和静态初始化器都是方法。由于 Java 接口类型可能包含静态初始化器，这种接口也被视为可执行类。</p><p><a href="https://www.eclemma.org/jacoco/trunk/doc/counters.html">覆盖率的计算原文</a></p><h2 id="从代码覆盖率报告中忽略指定的包或代码"><a href="#从代码覆盖率报告中忽略指定的包或代码" class="headerlink" title="从代码覆盖率报告中忽略指定的包或代码"></a>从代码覆盖率报告中忽略指定的包或代码</h2><p>对于有些包和代码可能不属于你的项目，但也被统计在内，可以通修改在 <code>build.gradle</code> 将指定的代码或是包从 JaCoCo 报告中忽略掉。如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 省略部分代码</span></span><br><span class="line"></span><br><span class="line">jacocoTestReport &#123;</span><br><span class="line">    dependsOn test <span class="comment">// tests are required to run before generating the report</span></span><br><span class="line">    reports &#123;</span><br><span class="line">        xml.enabled <span class="literal">true</span></span><br><span class="line">        csv.enabled <span class="literal">false</span></span><br><span class="line">        html.destination <span class="title function_">file</span><span class="params">(<span class="string">&quot;$&#123;buildDir&#125;/reports/jacoco&quot;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">    afterEvaluate &#123;</span><br><span class="line">        classDirectories.setFrom(files(classDirectories.files.collect &#123;</span><br><span class="line">            fileTree(dir: it, exclude: [</span><br><span class="line"><span class="string">&#x27;com/vmware/antlr4c3/**&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;com/vmware/antlr4c3/**&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;com/basic/parser/BasicParser*&#x27;</span></span><br><span class="line">            ])</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coverage </tag>
            
            <tag> JaCoCo </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的 Python 代码够不够 Pythonic？</title>
      <link href="/2021/03/pythonic/"/>
      <url>/2021/03/pythonic/</url>
      
        <content type="html"><![CDATA[<p>Python 不必多说，它是众多编程语言中最容易学习的动态类型语言。它的跨平台、易读、易写、丰富的 Packages 等众多特性，也是众多DevOps&#x2F;测试&#x2F;开发工程师是最常用的语言之一。</p><p>相信不少人用它完成了很多工作，但你是不是仅仅止步于功能的实现而忽略了去写出更加简洁，优美的 <code>Pythonic</code> 代码呢？</p><p>在我最开始用 Python 时，我还不知道 <code>Pythonic</code> 这个词，直到多年前一位资深的程序员在给我培训的时候提到了项目中有一些代码不够 <code>Pythonic</code>，需要重构。根据语境，我理解他的意思：就是 Python 的代码没有按照 Python 的方式来写。</p><h2 id="什么是-Pythonic"><a href="#什么是-Pythonic" class="headerlink" title="什么是 Pythonic"></a>什么是 Pythonic</h2><p>充分利用 Python 语言的特性来产生清晰、简洁和可维护的代码。<code>Pythonic</code> 的意思是指代码不仅仅是语法正确，而是遵循 Python 社区的惯例，并以其预期的方式使用该语言。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>以下是 C&#x2F;C++ 程序员的一段代码:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> total_sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (b &gt;= a) &#123;</span><br><span class="line">    total_sum += a;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有学习 Python 编程模式，那么将上面的代码改用 Python 来写可能会是这样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">total_sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> b &gt;= a:</span><br><span class="line">    total_sum += a</span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果用 Pythonic 的方式来写，应该是这样的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">total_sum = <span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>))</span><br></pre></td></tr></table></figure><p>再举个常见的例子，如果用 Java 可能是这样写出来一个 For 循环</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>; index &lt; items.length; index++) &#123;</span><br><span class="line">    items[index].performAction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Python中，使用以下方法会更干净一些：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    item.perform_action()</span><br></pre></td></tr></table></figure><p>甚至是一个生成器表达式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(item.some_attribute <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br></pre></td></tr></table></figure><p>因此，从本质上讲，当有人说某件事情不符合 <code>pythonic</code> 时，他们是在说这段代码可以用一种更适合 Python 编码风格的方式来重新编写。<br>另外，去了解 Python <a href="https://docs.python.org/3/library/functions.html">Built-in Functions</a>，而不是重新造轮子。</p><h2 id="关于-Pythonic-的“官方介绍”"><a href="#关于-Pythonic-的“官方介绍”" class="headerlink" title="关于 Pythonic 的“官方介绍”"></a>关于 Pythonic 的“官方介绍”</h2><p>其实，Python 命令行里已经秘密“隐藏”了关于 <code>Pythonic</code> 的介绍。只要打开 Python 控制台，输入 <code>import this</code>，你就能看到：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C:\Users\xshen&gt;python</span><br><span class="line">Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import this</span><br><span class="line">The Zen of Python, by Tim Peters</span><br><span class="line"></span><br><span class="line">Beautiful is better than ugly.</span><br><span class="line">Explicit is better than implicit.</span><br><span class="line">Simple is better than complex.</span><br><span class="line">Complex is better than complicated.</span><br><span class="line">Flat is better than nested.</span><br><span class="line">Sparse is better than dense.</span><br><span class="line">Readability counts.</span><br><span class="line">Special cases aren&#x27;t special enough to break the rules.</span><br><span class="line">Although practicality beats purity.</span><br><span class="line">Errors should never pass silently.</span><br><span class="line">Unless explicitly silenced.</span><br><span class="line">In the face of ambiguity, refuse the temptation to guess.</span><br><span class="line">There should be one-- and preferably only one --obvious way to do it.</span><br><span class="line">Although that way may not be obvious at first unless you&#x27;re Dutch.</span><br><span class="line">Now is better than never.</span><br><span class="line">Although never is often better than *right* now.</span><br><span class="line">If the implementation is hard to explain, it&#x27;s a bad idea.</span><br><span class="line">If the implementation is easy to explain, it may be a good idea.</span><br><span class="line">Namespaces are one honking great idea -- let&#x27;s do more of those!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>直译过来是：Tim Peters 的《Python的禅意》</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">美丽的比丑陋的好。</span><br><span class="line">明确的比含蓄的好。</span><br><span class="line">简单的比复杂的好</span><br><span class="line">复杂的比复杂的好</span><br><span class="line">扁平的比嵌套的好。</span><br><span class="line">稀疏比密集好。</span><br><span class="line">可读性很重要。</span><br><span class="line">特殊情况不特殊，不足以打破规则。</span><br><span class="line">虽然实用性胜过纯粹性。</span><br><span class="line">错误永远不应该默默地通过。</span><br><span class="line">除非明确沉默。</span><br><span class="line">在面对模棱两可的情况下，拒绝猜测的诱惑。</span><br><span class="line">应该有一个--最好只有一个--明显的方法。</span><br><span class="line">虽然这种方式一开始可能并不明显，除非你是荷兰人。</span><br><span class="line">现在总比不做要好。</span><br><span class="line">虽然从不比现在*好。</span><br><span class="line">如果实现很难解释，那就是个坏主意。</span><br><span class="line">如果实现很容易解释，它可能是个好主意。</span><br><span class="line">命名空间是一个非常棒的想法--让我们做更多的命名空间!</span><br></pre></td></tr></table></figure><p>关于 <code>Pythonic</code> 你 get 到了吗？</p>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pythonic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Different branches have different default parameters in Jenkins</title>
      <link href="/2021/03/jenkins-dynamic-default-parameters/"/>
      <url>/2021/03/jenkins-dynamic-default-parameters/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>When you use Jenkins multibranch pipeline, you may want to have different default parameters settings for defferent branches build.</p><p>For example:</p><p>For develop&#x2F;hotfix&#x2F;release branches, except regular build, you also want to do some code analyzes, like code scanning, etc.<br>For other branches, like feature&#x2F;bugfix or Pull Request that you just want to do a regular build.</p><p>So you need to have dynamic parameter settings for your multibranch pipeline job.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>So for these cases, how to deal with Jenkins multibranch pipeline. Here are some code snippet that is works well in my Jenkinsfile.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def polarisValue = <span class="literal">false</span></span><br><span class="line">def blackduckValue = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">&quot;develop&quot;</span>) || env.BRANCH_NAME.startsWith(<span class="string">&quot;hotfix&quot;</span>)</span><br><span class="line"> || env.BRANCH_NAME.startsWith(<span class="string">&quot;release&quot;</span>)) &#123;</span><br><span class="line">polarisValue = <span class="literal">true</span></span><br><span class="line">blackduckValue = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> pipeline &#123;</span><br><span class="line">   agent &#123; node &#123; label <span class="string">&#x27;gradle&#x27;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">   parameters &#123;</span><br><span class="line">       booleanParam defaultValue: polarisValue, name: <span class="string">&#x27;Polaris&#x27;</span>,  description: <span class="string">&#x27;Uncheck to disable Polaris&#x27;</span></span><br><span class="line">       booleanParam defaultValue: blackduckValue, name: <span class="string">&#x27;BlackDuck&#x27;</span>, description: <span class="string">&#x27;Uncheck to disable BD scan&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   stages &#123;</span><br><span class="line">     // ...</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于谷歌代码审查（Code Review）法则的思考与实践</title>
      <link href="/2021/03/code-review/"/>
      <url>/2021/03/code-review/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>代码审查（Code Review），就是让别人来审查你的代码，其目的就是确保代码库的整体代码运行状况随着时间推移而不断改善。</p><p>中国有句古话：三人行必有我师。</p><p>代码审查同样如此：</p><ul><li>他人的审查或许会有不一样的思考和建议；</li><li>人都会犯错，多一个人检查就减少犯错的机率。</li></ul><p>因此代码审查是你编写的代码在合并到主分支前最重要的一项检查工作，也是一项最直接、最低成本的发现软件中的错误绝佳方式。</p><p>既然代码审查这么重要，而且有这样显而易见的收益，但总能听到代码审查在团队里执行起来不容易、效果不理想的问题。问题出在哪呢？</p><p>据我观察有两点原因：</p><p>第一，读别人代码需要花时间，往往还需要代码提交者带着业务为审查者讲一遍，同时占用双方时间；<br>其次，如果代码审查者工作繁重、压力大而没有时间，也很容易造成执行不到位，走过场；</p><p>如何才能比较好的开展代码审查？让我们先来看看大公司是怎么做的，Google 的这篇关于代码审查的文章里给出了具体法则。</p><h2 id="Google-的代码审查法则"><a href="#Google-的代码审查法则" class="headerlink" title="Google 的代码审查法则"></a>Google 的代码审查法则</h2><p>在进行代码审查时，应确保：</p><ul><li>代码经过精心设计</li><li>该功能对代码用户很有帮助</li><li>任何 UI 更改都是明智的，并且看起来不错</li><li>任何并行编程都是安全完成的</li><li>代码没有比需要的复杂</li><li>开发人员没有实现他们将来可能需要的东西</li><li>代码具有适当的单元测试</li><li>测试经过精心设计</li><li>开发人员对所有内容使用了清晰的名称</li><li>注释清晰实用，并且主要说明Why而不是What</li><li>代码已正确文档化</li><li>该代码符合我们的样式指南</li></ul><p>确保检查要求你检查的每一行代码，查看上下文，确保你在改善代码运行状况，并称赞开发人员所做的出色工作。</p><blockquote><p>原文：<a href="https://google.github.io/eng-practices/review/reviewer/looking-for.html">https://google.github.io/eng-practices/review/reviewer/looking-for.html</a></p></blockquote><h2 id="代码审查法的落地"><a href="#代码审查法的落地" class="headerlink" title="代码审查法的落地"></a>代码审查法的落地</h2><p>可见，想要更好的落地代码审查，需要先要确立法则，你可以根据实际情况对上述法则进行借鉴、删减或补充；</p><p>第二，作为技术领导应当积极布道，让开发者了解统一的代码审查法则；</p><p>第三，应当把法则里的具体规则尽可能地通过流程控制、自动化检查则纳入到 Pull Request 中。</p><p>另外提醒作为 Reviewer 要 Peaceful ！！！在代码审查时注意不要带有“教育”性质的去给别人提出修改建议，那样很容易适得其反。</p><p>以下是一些不完全实践，供参考。</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h3 id="规避任何不经-Review-的代码进入到主分支"><a href="#规避任何不经-Review-的代码进入到主分支" class="headerlink" title="规避任何不经 Review 的代码进入到主分支"></a>规避任何不经 Review 的代码进入到主分支</h3><blockquote><p>以 Bitucket 为例。GitHub，GitLab 在设置上大同小异。</p></blockquote><ul><li><p>打开分支权限设置里的选项 <code>Prevent changes without a pull request</code> 打开它。当然如果有需要可以在这个选项里添加 Exception，被添加的人可以不通过 Pull Reuqest 来提交代码。</p></li><li><p>在 Merge Check 里开启 <code>Minimum approvals</code> 这个选项。比如设置 Number of approvals &#x3D; 1，这样需要至少有一个 Reviewers 点击 Approve 按钮才允许 Merge。</p></li></ul><h3 id="自动化检查"><a href="#自动化检查" class="headerlink" title="自动化检查"></a>自动化检查</h3><h3 id="通过CI流水线验证编译和测试"><a href="#通过CI流水线验证编译和测试" class="headerlink" title="通过CI流水线验证编译和测试"></a>通过CI流水线验证编译和测试</h3><ul><li><p>建立自动化构建和测试 Pipeline，这样在创建 Pull Request 的时候可以自动构建、测试以及检查。Jenkins 的 Multi-branch pipeline 可以满足这个需求。</p></li><li><p>开启 Bitucket 的 Merge Check 里 <code>Minimum successful builds</code> 选项，验证构建&#x2F;测试结果，以防止任何没有通过构建和测试的代码可以 Merge 到主分支。</p></li><li><p>另外，可以通过自行编写工具来实现，或可以集成其他 CI 工具来做检查，例如：</p><ul><li>针对 Pull Request 的修改历史来分析提交历史并推荐 Reiewer；</li><li>通过 Lint 工具来检查编码规范；</li><li>通过 REST API 检查是否需要压缩 Commits 来保证清晰的提交历史；</li><li>通过 SonarQube 检查 Quality Gate 等。</li></ul></li></ul><p>实现自动化检查，可以帮助 Reviewers 将审查的工作精力放在代码的具体实现上，其他的交给工具。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>代码审查做的好不好，跟一个团队有没有良好的技术氛围，或者是否存在有技术领导力，有“品位”的技术大牛也是正相关的。</p><ul><li>如果团队里大多数都是有“品位”的工程师，他们会以写出优秀的代码（或挑刺）乐此不疲。</li><li>相反如果团队不重视规范，只追求短期的绩效达成，只会让技术债越欠越多，产品越做越烂。</li></ul><p>欢迎留言分享你的意见或建议。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeReview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins upgrade issue &quot;Windows agents won&#39;t start&quot; workaround</title>
      <link href="/2021/02/jenkins-windows-agent-cannot-start/"/>
      <url>/2021/02/jenkins-windows-agent-cannot-start/</url>
      
        <content type="html"><![CDATA[<p>Today, when I tried to upgrade my team’s Jenkins server from Jenkins 2.235.1 to Jenkins 2.263.3, I met a problem that can not launch the Windows agent.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2021-01-29 23:50:40] [windows-agents] Connecting to xxx.xxx.xxx.xxx</span><br><span class="line">Checking if Java exists</span><br><span class="line">java -version returned 11.0.2.</span><br><span class="line">[2021-01-29 23:50:40] [windows-agents] Installing the Jenkins agent service</span><br><span class="line">[2021-01-29 23:50:40] [windows-agents] Copying jenkins-agent.exe</span><br><span class="line">ERROR: Unexpected error in launching an agent. This is probably a bug in Jenkins</span><br><span class="line">Also: java.lang.Throwable: launched here</span><br><span class="line">at hudson.slaves.SlaveComputer._connect(SlaveComputer.java:286)</span><br><span class="line">at hudson.model.Computer.connect(Computer.java:435)</span><br><span class="line">at hudson.slaves.SlaveComputer.doLaunchSlaveAgent(SlaveComputer.java:790)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">java.lang.NullPointerException</span><br><span class="line">at hudson.os.windows.ManagedWindowsServiceLauncher.launch(ManagedWindowsServiceLauncher.java:298)</span><br></pre></td></tr></table></figure><p>This issue had been raised in the Jenkins Jira project: <a href="https://issues.jenkins.io/browse/JENKINS-63198">JENKINS-63198</a> and <a href="https://issues.jenkins.io/browse/JENKINS-63198">JENKINS-63198</a></p><p>There is also a Windows Support Updates guide <a href="https://www.jenkins.io/blog/2020/07/23/windows-support-updates/">here</a> that mentioned this problem.</p><p>Finally, I fixed this problem by the following steps:</p><ol><li>Update <a href="https://github.com/jenkinsci/windows-slaves-plugin">windows-slaves-plugin</a> to the lastest version 1.7 (fixes for Jenkins 2.248+)</li></ol><p>Then the error should be like this</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2021-01-30 23:53:40] [windows-agents] Connecting to xxx.xxx.xxx.xxx</span><br><span class="line">Checking if Java exists</span><br><span class="line">java -version returned 11.0.2.</span><br><span class="line">[2021-01-30 23:53:47] [windows-agents] Copying jenkins-agent.xml</span><br><span class="line">[2021-01-30 23:53:48] [windows-agents] Copying agent.jar</span><br><span class="line">[2021-01-30 23:53:48] [windows-agents] Starting the service</span><br><span class="line">ERROR: Unexpected error in launching an agent. This is probably a bug in Jenkins</span><br><span class="line">org.jinterop.dcom.common.JIException: Unknown Failure</span><br><span class="line">at org.jvnet.hudson.wmi.Win32Service$Implementation.start(Win32Service.java:149)</span><br><span class="line">Caused: java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor219.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.kohsuke.jinterop.JInteropInvocationHandler.invoke(JInteropInvocationHandler.java:140)</span><br><span class="line">Also:   java.lang.Throwable: launched here</span><br></pre></td></tr></table></figure><ol start="2"><li>Then change <code>jenkins-agent.exe.config</code> file. remove or comment out this line <code>&lt;supportedRuntime version=&quot;v2.0.50727&quot; /&gt;</code> as below</li></ol><blockquote><p>also do this for <code>jenkins-slave.exe.config</code> in case it also exists.</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">runtime</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- see http://support.microsoft.com/kb/936707 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generatePublisherEvidence</span> <span class="attr">enabled</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">runtime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this can be hosted either on .NET 2.0 or 4.0 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;supportedRuntime version=&quot;v2.0.50727&quot; /&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">supportedRuntime</span> <span class="attr">version</span>=<span class="string">&quot;v4.0&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>Then try to Launch agent.</li></ol><p>If it still does not work and has this error message “.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service”, you need to upgrade your .NET Framework.</p><blockquote><p>Here is a <a href="https://shenxianpeng.github.io/2020/07/jenkins-windows-agent-connect-problem/">link</a> for update .NET Framework.</p></blockquote><p>Hopefully, this could help you to fix connect the issue of the Windows agent. Let me know in case of any questions.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年DevOps工程师的学习路线</title>
      <link href="/2021/01/devops-roadmap-2021/"/>
      <url>/2021/01/devops-roadmap-2021/</url>
      
        <content type="html"><![CDATA[<p>DevOps 实际上是什么意思？🤔</p><p>DevOps 是一种软件开发方法，涉及持续开发，持续测试，持续集成，部署和监视。这一系列过程跨越了传统上孤立的开发和运营团队，DevOps 试图消除它们之间的障碍。</p><p>因此，DevOps 工程师基本上与 Development 和 Operations 团队合作。它是这两个主要部分之间的链接。</p><h2 id="概念与工具"><a href="#概念与工具" class="headerlink" title="概念与工具"></a>概念与工具</h2><p>DevOps 包括诸如构建自动化、CI&#x2F;CD、基础架构即代码等概念，并且有许多工具可以实现这些概念。由于这些工具数量众多，因此可能会造成混乱和压倒性的结果。</p><p>最重要的是要了解概念，并为每个类别的学习找一种特定的工具。例如，当你已经知道什么是 CI&#x2F;CD 并知道如何使用 Jenkins 时，也将很容易学习同类型的其他替代工具。</p><p>接下来让就来看看学习 DevOps 需要掌握哪些技能。</p><h3 id="1）软件开发的概念"><a href="#1）软件开发的概念" class="headerlink" title="1）软件开发的概念"></a>1）软件开发的概念</h3><p>作为一名 DevOps 工程师，你不会直接对应用程序进行编程，但是当你与开发团队紧密合作以改善和自动化他们的任务时，你需要了解以下概念：</p><ul><li>开发人员的工作方式</li><li>他们正在使用哪个 git 工作流程</li><li>如何配置应用程序</li><li>自动化测试</li></ul><h3 id="2）操作系统"><a href="#2）操作系统" class="headerlink" title="2）操作系统"></a>2）操作系统</h3><p>作为 DevOps 工程师，你负责准备在操作系统上部署应用程序的所需要的基础结构环境。并且由于大多数服务器是 Linux 服务器，因此你需要了解 Linux 操作系统，并善于使用命令行，所以你需要知道：</p><ul><li>基本的 Shell 命令</li><li>Linux 文件系统</li><li>管理服务器的基础知识</li><li>SSH 密钥管理</li><li>在服务器上安装不同的工具</li></ul><h3 id="3）网络与安全"><a href="#3）网络与安全" class="headerlink" title="3）网络与安全"></a>3）网络与安全</h3><p>你还需要了解网络和安全性的基础知识才能配置基础架构，例如：</p><ul><li>配置防火墙以保护应用程序</li><li>了解 IP 地址，端口和 DNS 的工作方式</li><li>负载均衡器</li><li>代理服务器</li><li>HTTP&#x2F;HTTPS</li></ul><p>但是，要在 DevOps 和 IT Operations 之间划清界线，你不是系统管理员。因此，在这里不需要高级知识，理解和了解基本知识就够了。IT 方面是这些 SysAdmins，Networking 或 Security Engineers 人的专长。</p><h3 id="4）容器化"><a href="#4）容器化" class="headerlink" title="4）容器化"></a>4）容器化</h3><p>随着容器成为新标准，你可能会将应用程序作为容器运行，这意味着你需要大致了解：</p><ul><li>虚拟化的概念</li><li>容器的概念</li><li>学习哪个工具？ Docker - 当今最受欢迎的容器技术</li></ul><h3 id="5）持续集成和部署"><a href="#5）持续集成和部署" class="headerlink" title="5）持续集成和部署"></a>5）持续集成和部署</h3><p>在 DevOps 中，所有代码更改（例如开发人员的新功能和错误修复）都应集成到现有应用程序中，并以自动化方式连续地部署到最终用户。因此，建立完整的 CI&#x2F;CD 管道是 DevOps 工程师的主要任务和职责。</p><p>在完成功能或错误修正后，应自动触发在 CI 服务器（例如 Jenkins ）上运行的管道，该管道：</p><ul><li>运行测试</li><li>打包应用程序</li><li>构建 Docker 镜像</li><li>将 Docker Image 推送到工件存储库，最后</li><li>将新版本部署到服务器（可以是开发，测试或生产服务器）</li></ul><p>因此，你需要在此处学习技能：</p><ul><li>设置 CI&#x2F;CD 服务器</li><li>构建工具和程序包管理器工具以执行测试并打包应用程序</li><li>配置工件存储库（例如 Nexus，Artifactory）</li></ul><p>当然，可以集成更多的步骤，但是此流程代表 CI&#x2F;CD 管道的核心，并且是 DevOps 任务和职责的核心。</p><p>学习哪个工具？Jenkins 是最受欢迎的人之一。其他：Bamboo，Gitlab，TeamCity，CircleCI，TravisCI。</p><h3 id="6）云提供商"><a href="#6）云提供商" class="headerlink" title="6）云提供商"></a>6）云提供商</h3><p>如今，许多公司正在使用云上的虚拟基础架构，而不是管理自己的基础架构。这些是基础架构即服务（IaaS）平台，可提供一系列服务，例如备份，安全性，负载平衡等。</p><p>因此，你需要学习云平台的服务。例如。对于 AWS，你应该了解以下基本知识：</p><ul><li>IAM 服务-管理用户和权限</li><li>VPC 服务-你的专用网络</li><li>EC2 服务-虚拟服务器</li><li>AWS 提供了更多的服务，但是你只需要了解你实际需要的服务即可。例如，当 K8s 集群在 AWS 上运行时，你还需要学习 EKS 服务。</li></ul><p>AWS 是功能最强大，使用最广泛的一种，但也是最困难的一种。</p><p>学习哪个工具？AWS 是最受欢迎的一种。其他热门：Azure，Google Cloud，阿里云，腾讯云。</p><h3 id="7）容器编排"><a href="#7）容器编排" class="headerlink" title="7）容器编排"></a>7）容器编排</h3><p>如前所述，容器已被广泛使用，在大公司中，成百上千个容器正在多台服务器上运行，这意味着需要以某种方式管理这些容器。</p><p>为此目的，有一些容器编排工具，而最受欢迎的是 Kubernetes。因此，你需要学习：</p><ul><li>Kubernetes 如何工作</li><li>管理和管理 Kubernetes 集群</li><li>并在其中部署应用程序</li></ul><p>学习哪个工具？Kubernetes - 最受欢迎，没有之一。</p><h3 id="8）监视和日志管理"><a href="#8）监视和日志管理" class="headerlink" title="8）监视和日志管理"></a>8）监视和日志管理</h3><p>软件投入生产后，对其进行监视以跟踪性能，发现基础结构以及应用程序中的问题非常重要。因此，作为 DevOps 工程师的职责之一是：</p><ul><li>设置软件监控</li><li>设置基础架构监控，例如用于你的 Kubernetes 集群和底层服务器。</li></ul><p>学习哪个工具？Prometheus, Grafana…</p><h3 id="9）基础设施即代码"><a href="#9）基础设施即代码" class="headerlink" title="9）基础设施即代码"></a>9）基础设施即代码</h3><p>手动创建和维护基础架构非常耗时且容易出错，尤其是当你需要复制基础架构时，例如用于开发，测试和生产环境。</p><p>在 DevOps 中，希望尽可能地自动化，那就是将“基础结构即代码（Infrastructure as Configuration）”引入其中。因此使用 IaC ，我们将使用代码来创建和配置基础结构，你需要了解两种 IaC 方式：</p><ul><li>基础设施配置</li><li>配置管理</li></ul><p>使用这些工具，可以轻松地复制和恢复基础结构。因此，你应该在每个类别中都知道一种工具，以使自己的工作更有效率，并改善与同事的协作。</p><p>学习哪个工具？</p><p>基础架构设置：Terraform 是最受欢迎的一种。<br>配置管理：Ansible，Puppet，Chef。</p><h3 id="10）脚本语言"><a href="#10）脚本语言" class="headerlink" title="10）脚本语言"></a>10）脚本语言</h3><p>作为 DevOps 工程师就常见的工作就是编写脚本和小型的应用程序以自动化任务。为了能够做到这一点，你需要了解一种脚本或编程语言。</p><p>这可能是特定于操作系统的脚本语言，例如 bash 或 Powershell。</p><p>还需要掌握一种独立于操作系统的语言，例如 Python 或 Go。这些语言功能更强大，更灵活。如果你善于使用其中之一，它将使你在就业市场上更具价值。</p><p>学习哪个工具？Python：目前是最需要的一个，它易于学习，易于阅读并且具有许多可用的库。其他：Go，NodeJS，Ruby。</p><h3 id="11）版本控制"><a href="#11）版本控制" class="headerlink" title="11）版本控制"></a>11）版本控制</h3><p>上述所有这些自动化逻辑都作为代码编写，使用版本控制工具（例如Git）来管理这些代码和配置文件。</p><p>学习哪个工具？Git - 最受欢迎和广泛使用，没有之一。</p><blockquote><p><a href="https://dev.to/techworld_with_nana/devops-roadmap-2021-how-to-become-a-devops-engineer-1n9p">DevOps Roadmap [2021] - How to become a DevOps Engineer</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>预测 2021 年的 DevOps 趋势</title>
      <link href="/2021/01/devops-trends-in-2021/"/>
      <url>/2021/01/devops-trends-in-2021/</url>
      
        <content type="html"><![CDATA[<p>DevOps 已经走了很长一段路，毫无疑问，它将在今年继续发光。由于许多公司都在寻求有关数字化转型的最佳实践，因此重要的是要了解领导者认为行业发展的方向。从这个意义上讲，以下文章是 DevOps 领导者对 DevOps 趋势的回应的集合，需要在 2021 年关注。</p><p>让我们看看他们每个人对来年的 DevOps 有何评价。</p><ol><li>迁移到微服务将成为必须 —— Wipro Limited 首席 DevOps 工程师</li></ol><p>“从整体迁移到微服务和容器化架构对于所有公司的数字化转型之旅都是必不可少的，它不再是一个选择或选项。这就是Kubernetes 的采用率将上升的地方，当组织迁移到多重云时，Terraform 将成为实现基础架构自动化的最终选择。”</p><ol start="2"><li>Hybrid将成为部署规范 —— JFrog 开发人员关系 VP</li></ol><p>“2020年将加速远程工作，加快向云的迁移，并将 DevOps 从最佳实践转变为每个业务的重要组成部分。随着我们进入2021年，该行业将在多个方面拥抱Hybrid。首先，企业将完全采用混合型劳动力，将远程工作和现场团队协作的优势相结合。 其次，商业模式将变得混合，例如将虚拟规模与本地网络合并的会议。最终，随着公司对堆栈进行现代化以利用云原生技术的优势，混合将成为部署规范，但要意识到并非所有事物都可以迁移到外部。2021年的赢家将是拥抱业务，模型和产品混合的公司。”</p><ol start="3"><li>DataOps将蓬勃发展 - 乐天高级 DevOps 工程师</li></ol><p>“DataOps 肯定会在 2021 年蓬勃发展，COVID 可能会在其中发挥作用。由于 COVID 和 WFH 的情况，数字内容的消费量猛增，这要求自动缩放和自我修复系统的自动化达到新水平，以满足增长和需求。</p><p>到目前为止，DevOps 设置的系统仅用于日志记录，监视和警报（ELK&#x2F;EFK 堆栈，Prometheus&#x2F;Grafana&#x2F;Alertmanager等）。现在，DevOps 现在应该加强并使用可用数据和指标来 产生有价值的见解，学习并应用机器学习模型来预测事件或中断，开发从数据中学习自身并预测能力的自动化以改进预算计划。许多人已经开始对此部分调用 MLOps&#x2F;AIOps。”</p><ol start="4"><li>弹性测试将成为主流 —— Neotys 产品负责人</li></ol><p>从我的角度来看，可观察性，性能测试和弹性测试之间的交叉点将成为主流。 随着 AWS 和 Google 等 WW 领导者最近发布的 Ops 问题，以及各个领域的数字化转型都在加速发展，市场将逐渐意识到，公共或私有云形式提供的无限可扩展性是不够的。” - Neotys 产品负责人 Patrick Wolf</p><ol start="5"><li>GitOps 将成为常态 —— 梅西百货的首席架构师</li></ol><p>“一个“构建，拥有，拥有”的开发过程需要开发人员知道和理解的工具。GitOps 是 DevOps 如何使用开发人员工具来驱动操作的名称。</p><p>GitOps 是一种进行持续交付的方法。 更具体地说，它是用于构建统一部署，监视和管理的 Cloud Native 应用程序的操作模型。 它通过将 Git 用作声明性基础结构和应用程序的真实来源来工作。 当在 Git 中推送和批准提交时，自动化的 CI&#x2F;CD 管道将对你的基础架构进行更改。它还利用差异工具将实际生产状态与源代码控制下的生产状态进行比较，并在出现差异时提醒你。GitOps 的最终目标是加快开发速度，以便你的团队可以安全可靠地对 Kubernetes 中运行的复杂应用程序进行更改和更新。” -梅西百货（Macy’s）首席建筑师 Soumen Sarkar</p><ol start="6"><li>将会有更多的迁移到无服务器 —— ADP Lifion 的站点 SRE 经理</li></ol><p>“2021 年将是注视更多迁移到无服务器的一年。如果容器和业务流程是 Z 代.. 那么无服务器的实时负载将是 Gen+ .. 仅在你使用时使用和付款可能看起来是一样的.. 但请考虑运行基于 k8s pod 的微服务，以便在需要时在无服务器上运行相同的服务。” - ADP Lifion 网站可靠性工程经理 Shivaramakrishnan G</p><ol start="7"><li>NoOps 出现 —— ClickIT Smart Technologies 的 CEO</li></ol><p>“我希望出现更多托管服务，并减少我们的 DevOps 运营并减少客户的运营支出。更多无服务器应用程序，更多无服务器服务，例如 Aurora 无服务器，Fargate，Amazon S3 和无服务器静态网站。数据中心中的 Amazon ECS&#x2F;EKS（新版本 re：invent 2020）以及云管理服务，可让你减少数据中心的维护和开发。同样，将更多云原生的原理和功能移植到数据中心，例如。亲戚。”  - ClickIT Smart Technologies 首席执行官 Alfonso Valdes</p><ol start="8"><li>BizDevOps 将大放异彩 —— Petco 的 DevOps 经理</li></ol><p>“在架构和公司层次结构方面朝着成本优化的方向发展-随着业务的发展，DevOps 的价值不断提高。</p><p>专注于灵活的，云原生的架构和工具，这些功能一旦具备了“大佬”的能力，就可以打包成小型企业使用的包装（Snowflake 或 Hazelcast 与 Oracle&#x2F;Teradata）</p><p>FaaS 才刚刚起步（无服务器，Lambda 等）- 运营问题正在得到解决，人们正在意识到潜力。”</p><ol start="9"><li>基础设施即代码（IaC）的地位将更高 —— 沃尔沃高级解决方案架构师</li></ol><p>“基础架构即代码（IaC）：云中 DevOps 的核心原则。你的基础架构本地或云中的服务器，网络和存储设备（定义为代码）。这使公司可以自动化并简化其基础架构。 IaC 还提供了一个简单的基础结构版本控制系统，该系统可让团队在发生灾难性故障时回退到“有效的最后配置”。这意味着可以快速恢复并减少停机时间。”</p><ol start="10"><li>自动化和混乱工程变得非常重要 —— 直布罗陀印度开发中心的集团开发经理</li></ol><p>“一切都是自动化的-构建，部署，测试，基础架构和发布。</p><p>具有所需质量门的生产线。更快，可重复，可自定义和可靠的自动化是任何项目成功的关键。混沌工程-在当今混合基础设施世界中非常关键的方面。系统行为和客户体验紧密结合在一起，你越早对其进行测试，就越能为客户提供更好的体验。”</p><ol start="11"><li>云原生方法将被标准化 —— Ben Sapp</li></ol><p>“由于云空间已经真正地发展起来（最近十年左右），并且容器化已成为规范，所以一切都非常标准化，几乎就像大型机时代一样。</p><p>当然，会有趋势和赚钱的机会。但是我不知道下一个大破坏者是什么。现在的一切基本上都与五年前的最佳做法相同，但更加可靠。我想越来越多的人将继续从宠物转移到牛身上，剩下诸如 Ansible 和 puppet 之类的工具仅用于打包程序和云 init 来构建容器主机。</p><p>imo 是软件开发的黄金时代。 DevOps 和云原生方法已经实现了许多目标。管道，托管，存储，负载平衡……这些都在 5 分钟之内解决了。”</p><ol start="12"><li>安全将成为重中之重 —— CloudSkiff</li></ol><p>“从 DevSecOps 角度绝对跟踪基础设施中不受控制的变化。作为代码的基础架构很棒，但是有太多可移动的部分：代码库，状态文件，实际云状态。事情倾向于漂移。这些更改可能有多种原因：从开发人员通过 Web 控制台创建或更新基础架构而不告知任何人，到云提供商方面不受控制的更新。处理基础架构漂移与代码库之间的挑战可能会充满挑战。” - CloudSkiff</p><ol start="13"><li>Chaos Engineering 将变得越来越重要 —— International Technology Ventures 的 CTO</li></ol><p>“在更多组织中的 DevOps 规划讨论中，混沌工程将变得越来越重要（且更常见）。大多数组织通常不执行混沌工程学（Chaos Engineering），即在生产中对软件系统进行实验以建立对系统抵御动荡和意外情况能力的信心。</p><p>如果我们在传统的五个成熟度模型框架内考虑 DevOps，那么 Chaos Engineering 将是第 4 或第 5 级学科，将包含在 DevOps 实践的保护范围内。正如将单独的测试&#x2F;质量保证小组的传统角色纳入 DevOops 的学科一样，Chaos Engineering 也应如此。”</p><ol start="14"><li>更关注即时日志以快速验证成功或失败 —— ADESA 平台稳定性总监</li></ol><p>“在后期部署中使用日志来验证发布是否成功，或存在严重错误。人们需要建立的最大联系是定义手动流程，然后实现自动化的巨大飞跃。一键部署，即时日志可快速验证成功或失败，然后触发回滚。随之而来的是复杂性以及跨服务依赖性，是否可以回滚某些内容，或者是否需要对其他服务进行进一步测试。想象一下 100 种微服务（又称管道，甚至还有 100 个容器）。</p><p>作为一项，我总是庆祝成功的回滚，因为它不会对服务产生影响，而且是成功的。” -ADESA平台稳定性总监Craig Schultz</p><ol start="15"><li>DevSecOps 将成为 DevOps 的默认部分 —— JFrog 的 DevOps 架构师</li></ol><p>DevSecOps 的 “Sec” 部分将越来越成为软件开发生命周期中不可或缺的一部分，真正的安全性 “向左移动” 方法将成为新的规范，CI&#x2F;CD 管道中的专用安全性步骤将更少从开发人员的 IDE 到依赖关系和静态代码分析，安全和自动识别和采取措施将是所有流程步骤的一部分。在没有适当（自动？）解决这些问题的情况下，不会发布软件组件。真正的安全问题是免费软件。”</p><p>希望你喜欢我们对 DevOps 趋势的专家综述，并在 2021 年关注。如果你认为这里缺少应考虑的内容，请在评论中分享你的观点。</p><blockquote><p>原文 <a href="https://dzone.com/articles/15-devops-trends-to-expect-in-2021">15 DevOps Trends to Expect in 2021</a> 的翻译。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What&#39;s the difference between result and currentResult in Jenkins?</title>
      <link href="/2021/01/result-vs-currentresult/"/>
      <url>/2021/01/result-vs-currentresult/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is just a note to myself about the difference between Jenkins <code>result</code> and <code>currentResult</code>.</p></blockquote><h2 id="Declarative-Pipeline"><a href="#Declarative-Pipeline" class="headerlink" title="Declarative Pipeline"></a>Declarative Pipeline</h2><p>Here is a test code from this ticket <a href="https://issues.jenkins.io/browse/JENKINS-46325">JENKINS-46325</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage (<span class="string">&#x27;Init&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Init result: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Init currentResult: <span class="variable">$&#123;currentBuild.currentResult&#125;</span>&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            post &#123;</span><br><span class="line">                always &#123;</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Post-Init result: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Post-Init currentResult: <span class="variable">$&#123;currentBuild.currentResult&#125;</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage (<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;During Build result: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;During Build currentResult: <span class="variable">$&#123;currentBuild.currentResult&#125;</span>&quot;</span></span><br><span class="line">                sh <span class="string">&#x27;exit 1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            post &#123;</span><br><span class="line">                always &#123;</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Post-Build result: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;Post-Build currentResult: <span class="variable">$&#123;currentBuild.currentResult&#125;</span>&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Pipeline result: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Pipeline currentResult: <span class="variable">$&#123;currentBuild.currentResult&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Init result: null</span><br><span class="line">Init currentResult: SUCCESS</span><br><span class="line">Post-Init result: null</span><br><span class="line">Post-Init currentResult: SUCCESS</span><br><span class="line">During Build result: null</span><br><span class="line">During Build currentResult: SUCCESS</span><br><span class="line">[test-pipeline] Running shell script</span><br><span class="line">+ <span class="built_in">exit</span> 1</span><br><span class="line">Post-Build result: FAILURE</span><br><span class="line">Post-Build currentResult: FAILURE</span><br><span class="line">Pipeline result: FAILURE</span><br><span class="line">Pipeline currentResult: FAILURE</span><br><span class="line">ERROR: script returned <span class="built_in">exit</span> code 1</span><br><span class="line">Finished: FAILURE</span><br></pre></td></tr></table></figure><h2 id="Scripted-Pipeline"><a href="#Scripted-Pipeline" class="headerlink" title="Scripted Pipeline"></a>Scripted Pipeline</h2><p>Here is a test code from <a href="https://support.cloudbees.com/hc/en-us/articles/218554077-How-to-set-current-build-result-in-Pipeline-">cloudbees support case</a></p><p>Example that forces a failure then prints result:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // <span class="keyword">do</span> something that fails</span><br><span class="line">        sh <span class="string">&quot;exit 1&quot;</span></span><br><span class="line">        currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">    &#125; catch (Exception err) &#123;</span><br><span class="line">        currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;RESULT: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Started by user anonymous</span><br><span class="line">[Pipeline] Allocate node : Start</span><br><span class="line">Running on master <span class="keyword">in</span> /tmp/example/workspace/test</span><br><span class="line">[Pipeline] node &#123;</span><br><span class="line">[Pipeline] sh</span><br><span class="line">[<span class="built_in">test</span>] Running shell script</span><br><span class="line">+ <span class="built_in">exit</span> 1</span><br><span class="line">[Pipeline] <span class="built_in">echo</span></span><br><span class="line">RESULT: FAILURE</span><br><span class="line">[Pipeline] &#125; //node</span><br><span class="line">[Pipeline] Allocate node : End</span><br><span class="line">[Pipeline] End of Pipeline</span><br><span class="line">Finished: FAILURE</span><br></pre></td></tr></table></figure><p>Example that doesn’t fail then prints result:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        // <span class="keyword">do</span> something that does not fail</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Im not going to fail&quot;</span></span><br><span class="line">        currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">    &#125; catch (Exception err) &#123;</span><br><span class="line">        currentBuild.result = <span class="string">&#x27;FAILURE&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;RESULT: <span class="variable">$&#123;currentBuild.result&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Started by user anonymous</span><br><span class="line">[Pipeline] Allocate node : Start</span><br><span class="line">Running on master <span class="keyword">in</span> /tmp/example/workspace/test</span><br><span class="line">[Pipeline] node &#123;</span><br><span class="line">[Pipeline] <span class="built_in">echo</span></span><br><span class="line">Im not going to fail</span><br><span class="line">[Pipeline] <span class="built_in">echo</span></span><br><span class="line">RESULT: SUCCESS</span><br><span class="line">[Pipeline] &#125; //node</span><br><span class="line">[Pipeline] Allocate node : End</span><br><span class="line">[Pipeline] End of Pipeline</span><br><span class="line">Finished: SUCCESS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>These settings in Bitbucket/GitHub recommends enable</title>
      <link href="/2021/01/git-repository-settings/"/>
      <url>/2021/01/git-repository-settings/</url>
      
        <content type="html"><![CDATA[<p>As I have management our team’s git repositories for more than two years, and as my daily work using Bitbucket, so I’ll take it as an example.</p><p>Here are some settings recommend you to enable.</p><ol><li>Set Reject Force Push</li><li>Set Branch Prevent deletion</li><li>Set tags for each hotfix&#x2F;GA releases</li><li>Merge Check -&gt; Minimum approvals (1)</li><li>Yet Another Commit Checker</li></ol><h2 id="Reject-Force-Push"><a href="#Reject-Force-Push" class="headerlink" title="Reject Force Push"></a>Reject Force Push</h2><p>This is the first setting I highly recommend you&#x2F;your team to open it. if not, when someone using the <code>git push -f</code> command to the git repository, you may lost commits if his local code is old then remote repository.</p><p>you have to recover the lost commits manually, I have heard 3 times around me. so enable the hook: Reject Force Push ASAP!</p><h2 id="Set-Branch-Prevent-deletion"><a href="#Set-Branch-Prevent-deletion" class="headerlink" title="Set Branch Prevent deletion"></a>Set Branch Prevent deletion</h2><p>If some branch is very important, you don’t want to lost it, set Branch Prevent deletion ASAP!</p><h2 id="Set-tags-for-each-hotfix-x2F-GA-releases"><a href="#Set-tags-for-each-hotfix-x2F-GA-releases" class="headerlink" title="Set tags for each hotfix&#x2F;GA releases"></a>Set tags for each hotfix&#x2F;GA releases</h2><p>For each hotfix&#x2F;GA release, highly recommend create tags after release.</p><h2 id="Merge-Check"><a href="#Merge-Check" class="headerlink" title="Merge Check"></a>Merge Check</h2><p>Pull Request is a very good workflow process for each team. in case of commits were merged directly without review, we enable Minimum approvals (1).</p><p>So, every branch wants to be merged to the main branch MUST add a reviewer (not allow yourself) and the review must click the Approve button otherwise the merge button is disabled.</p><h2 id="Yet-Another-Commit-Checker"><a href="#Yet-Another-Commit-Checker" class="headerlink" title="Yet Another Commit Checker"></a>Yet Another Commit Checker</h2><p>This is a very powerful feature. it helps to standardize commit messages and create a branch.</p><p>More details about this tool you can refer to <a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket">this introduction</a></p><p>I have a Chinese article to describe how to use Yet Another Commit Checker implement. if you interest it, you can see the post <a href="https://shenxianpeng.github.io/2020/09/commit-messages-specification/">here</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Bitbucket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to open port 22 and make it listening on Windows</title>
      <link href="/2021/01/open-port-22/"/>
      <url>/2021/01/open-port-22/</url>
      
        <content type="html"><![CDATA[<p>Recently our Bamboo server has an error when connecting to the Windows build system.</p><p>Some errors like: Can not connect to the host XXXX 22 port.</p><p>I log into the build machine find port 22 with the below command</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -aon|findstr <span class="string">&quot;22&quot;</span></span><br></pre></td></tr></table></figure><p>but not found port 22 is inbound.</p><h2 id="Inbound-port-22"><a href="#Inbound-port-22" class="headerlink" title="Inbound port 22"></a>Inbound port 22</h2><p>There’s a lot of articles will tell you how to open ports on Windows. see this one</p><p><a href="https://www.windowscentral.com/how-open-port-windows-firewall">https://www.windowscentral.com/how-open-port-windows-firewall</a></p><h2 id="But-still-not-works-for-me"><a href="#But-still-not-works-for-me" class="headerlink" title="But still not works for me"></a>But still not works for me</h2><p>My problem is when I inbound port 22, execute the above command still can’t see the port 22 is listening.</p><p>So I install the <a href="https://github.com/PowerShell/Win32-OpenSSH">Win32-OpenSSH</a>, this will lanch two services, then port 22 is listening.</p><p>Here are the wiki page about download and installation <a href="https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH">https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> OpenSSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git sparse-checkout enable and disable</title>
      <link href="/2021/01/sparse-checkout/"/>
      <url>/2021/01/sparse-checkout/</url>
      
        <content type="html"><![CDATA[<p>This post just a note to myself and it works on my environment. it has not been widely tested.</p><h2 id="Enable-git-sparse-checkout"><a href="#Enable-git-sparse-checkout" class="headerlink" title="Enable git sparse-checkout"></a>Enable git sparse-checkout</h2><p>Just in my case, I cloned a git repo exists problems on the Windows platform with some folder, in order to work on the Windows platform we get a work around solution as following:</p><p>Case 1: when you not already cloned a repository</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> git-src</span><br><span class="line"><span class="built_in">cd</span> git-src</span><br><span class="line">git init</span><br><span class="line">git config core.sparseCheckout <span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/assets/&quot;</span> &gt;&gt; .git/info/sparse-checkout</span><br><span class="line">git remote add origin git@github.com:shenxianpeng/shenxianpeng.git</span><br><span class="line">git fetch</span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>Case 2: when you already cloned a repository</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-src</span><br><span class="line">git config core.sparseCheckout <span class="literal">true</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/assets/&quot;</span> &gt;&gt; .git/info/sparse-checkout</span><br><span class="line"><span class="built_in">rm</span> -rf &lt;other-file/folder-you-dont-need&gt;</span><br><span class="line">git checkout</span><br></pre></td></tr></table></figure><h2 id="Disable-git-sparse-checkout"><a href="#Disable-git-sparse-checkout" class="headerlink" title="Disable git sparse-checkout"></a>Disable git sparse-checkout</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config core.sparseCheckout <span class="literal">false</span></span><br><span class="line">git read-tree --empty</span><br><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Code Sign 默认时间戳服务器 http://timestamp.verisign.com/scripts/timstamp.dll 不可用</title>
      <link href="/2021/01/verisign-server-not-working/"/>
      <url>/2021/01/verisign-server-not-working/</url>
      
        <content type="html"><![CDATA[<p>相信许多程序员在新年开始在做 code sign (数字签名)的时候可能遇到 Verisign Timestamp 服务器不好用了 <a href="http://timestamp.verisign.com/scripts/timstamp.dll">http://timestamp.verisign.com/scripts/timstamp.dll</a> 的情况。出现了如下错误：</p><p><img src="/2021/01/verisign-server-not-working/failed.png"></p><p>原因是 code sign 默认的时间戳服务器无法访问了。</p><p>在 Stack overflow 这个 <a href="https://stackoverflow.com/questions/65541786/is-the-verisign-timestamp-server-down">post</a> 里上面有人给出了答案，是来自于 Verisign Support 的回复：</p><blockquote><p>他们的身份验证服务已出售给赛门铁克(Symante)，现在的服务商是 Digicert。该服务器已弃用了。</p><p>他们建议联系 Digicert 或在网络上找免费的 timestamp servers</p></blockquote><p>以上是别人的回复，我在网络上没有找到一个官方回复，因此打算发邮件正式确认一下，发完不一会就得到了回复：</p><p><img src="/2021/01/verisign-server-not-working/reply.png"></p><p>和上面的回复类似：几年前，Verisign 的身份验证和证书业务被出售给赛门铁克(Symantec)，目前已过渡到Digicert。您将需要与当前供应商合作以获得支持或更新的时间戳URL。请访问 <a href="http://www.digicert.com/">http://www.digicert.com</a> 了解更多信息。</p><p>好了，这下实锤了，放心大胆的开始动手修改到新的时间戳了。</p><p>我找到了 Digicert 的时间戳服务器是 <code>http://timestamp.digicert.com</code>。更换到新的时间戳服务器后，数字签名恢复正常。</p><p>除了上面 Digicert 那个网址，还有如下网址可以作为替换:</p><ul><li><a href="http://timestamp.comodoca.com/authenticode">http://timestamp.comodoca.com/authenticode</a></li><li><a href="http://timestamp.globalsign.com/scripts/timestamp.dll">http://timestamp.globalsign.com/scripts/timestamp.dll</a></li><li><a href="http://tsa.starfieldtech.com/">http://tsa.starfieldtech.com</a></li></ul><p>但我都没有选用，我还是选择了官方的时间戳服务，留作备用吧。一旦又抽风 “官方” 哪天又被卖了呢？</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeSign </tag>
            
            <tag> Timestamp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 年国外 IT 公司对于 DevOps 工程师的要求有哪些？</title>
      <link href="/2021/01/2021-devops-job-requirement/"/>
      <url>/2021/01/2021-devops-job-requirement/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自 2020 年因疫情开始，越来越多的 IT 公司都因不得不在家办公从而彻底转为 WFH（Work From Home） 公司，因此对于 IT 从业者来说，工作机会今后将会是全球性的。</p><p>如果你有意想进入一个跨国公司工作，想与世界各地的人在一起工作，那么就不能仅仅的关注国内的这些大厂，要将眼光放眼到全世界，看看这些耳熟能详的公司对于工程师的职位要求有哪些。</p><p>今天就先来看看 DevOps 岗位的需求是什么样的，了解这些，一来可以帮助我们在2021 年树立学习方向，而来如果你有意向去这些公司，了解并提早做准备才能有机会获取你想要的岗位。</p><p>由于这些职位的介绍和要求会很长，因此我就先说结论。</p><h2 id="主要技能"><a href="#主要技能" class="headerlink" title="主要技能"></a>主要技能</h2><ul><li>国外很多公司他们使用的云服务商主要是 AWS，因此熟悉和使用 AWS</li><li>熟练使用 DevOps 工具，如 Jenkins, Ansible（Chef）, Git 等</li><li>Docker 和 Kubernetes 是每个想从事 DevOps 需要掌握的</li><li>熟悉操作系统，至少要 Linux</li><li>大多数都是要求 Python 很熟练，高级一些的岗位会要求熟悉 Go, Java 语言</li><li>最后，乐于学习，积极主动，具有创造性思维是每个 DevOps 最重要的特质，因此新的技术和工具层出不穷，我们需要保持和新进同行</li></ul><p>具体的职位要求细节，请看后面的职位介绍吧 …</p><span id="more"></span><h2 id="ZOOM：DevOps-Engineer"><a href="#ZOOM：DevOps-Engineer" class="headerlink" title="ZOOM：DevOps Engineer"></a>ZOOM：DevOps Engineer</h2><p>工作地点：San Jose, CA</p><p>岗位链接 <a href="https://www.linkedin.com/jobs/view/2337488435">https://www.linkedin.com/jobs/view/2337488435</a></p><p>ZOOM 不用过多介绍了，2020 年因为疫情，业务极具增长的一家视频会议的公司。也多次被推荐为最佳雇主，以及最佳的工作场所。</p><p>岗位职责</p><ul><li>设计、部署、监控 ZOOM 平台服务</li><li>提升 ZOOM 平台服务从规划到上线的全生命周期策略</li><li>与跨职能干系人紧密合作，分析和解决复杂的生产问题</li><li>构建弹性和可扩展的服务基础设施，以适应基于区域的数据中心</li><li>优化当前CI&#x2F;CD流程，简化服务器配置和部署的自动化工作</li><li>支持测试自动化和部署策略，以优化服务性能，确保产品质量</li></ul><p>职位要求</p><ul><li>本科&#x2F;硕士(CS或相关专业优先)</li><li>至少 5 年 DevOps 或 SRE 经验</li><li>对 AWS 基础架构(如DynamoDB, S3, Nginx, CloudWatch)，Linux 批处理命令，ELK 堆栈和容器编排(如 K8s, Docker)有深入的了解</li><li>熟练使用 Jenkins, Ansible 和 Git 仓库</li><li>能够监控，调试和自动化日常任务</li><li>熟悉云基础设施技术和基于云的测试自动化解决方案</li><li>乐于学习，积极主动，具有创造性思维</li></ul><h2 id="苹果：DevOps-Engineer-CI-x2F-CD"><a href="#苹果：DevOps-Engineer-CI-x2F-CD" class="headerlink" title="苹果：DevOps Engineer (CI&#x2F;CD)"></a>苹果：DevOps Engineer (CI&#x2F;CD)</h2><p>地点：Cupertino, CA</p><p>岗位链接：<a href="https://www.linkedin.com/jobs/view/2346233023/?eBP=JOB_SEARCH_ORGANIC&recommendedFlavor=COMPANY_RECRUIT&refId=RA+GKQ6QNrbwK1PHj3opBQ==&trackingId=/CHeWxW/Hm+ULb2XD5Yyyg==&trk=flagship3_search_srp_jobs">https://www.linkedin.com/jobs/view/2346233023/?eBP=JOB_SEARCH_ORGANIC&amp;recommendedFlavor=COMPANY_RECRUIT&amp;refId=RA%2BGKQ6QNrbwK1PHj3opBQ%3D%3D&amp;trackingId=%2FCHeWxW%2FHm%2BULb2XD5Yyyg%3D%3D&amp;trk=flagship3_search_srp_jobs</a></p><p>我们的团队为苹果的应用程序运行 CI&#x2F;C D管道，支持全球成千上万的开发者。我们对不断改进软件开发生命周期的方式充满热情，并为大规模工程问题重新发明前沿解决方案开辟边界。作为团队的一员，你将开发应用程序和微服务来构建和改进我们的下一代 CI&#x2F;CD 管道。</p><p>职位要求</p><ul><li>精通 Python 编程</li><li>有 Unix&#x2F;Linux 平台工作经验</li><li>熟练使用 DevOps 工具，如 Chef, Docker, Kubernetes</li><li>具有软件开发过程的经验，如构建、单元测试、代码分析、发布过程和代码覆盖</li><li>有 CI&#x2F;CD 流程和平台经验，如 Jenkins</li><li>较强的分析和解决问题的能力</li><li>优秀的书面和口头沟通能力，能够与大型开发团队合作</li></ul><p>工作内容</p><ul><li>开发和维护应用开发团队的 CI&#x2F;CD 流程</li><li>跨团队合作，改进产品的构建、集成和发布流程</li><li>开发和维护应用服务 CI&#x2F;CD 管道的服务和集成</li><li>维护和管理包含 Linux&#x2F;Unix&#x2F;macOS 系统的动态构建场</li><li>能够参与下班后的轮班工作</li></ul><p>教育和经验</p><ul><li>计算机科学或同等学历</li></ul><p>其他要求</p><ul><li>有使用 Django&#x2F;Flask 开发基于 Python 的微服务的经验</li><li>熟悉GitHub开发流程</li><li>有 Jenkins 管理和扩展的经验</li><li>具备扩展 CI&#x2F;CD 系统和微服务的经验</li><li>有 Xcode 和开发 iOS, macOS 和其他苹果平台应用的经验</li></ul><h2 id="Oracle：Software-Developer-4-for-DevOps"><a href="#Oracle：Software-Developer-4-for-DevOps" class="headerlink" title="Oracle：Software Developer 4 for DevOps"></a>Oracle：Software Developer 4 for DevOps</h2><p>工作地点：Pleasanton, CA<br>职位链接：<a href="https://www.linkedin.com/jobs/view/2351849053/?eBP=JOB_SEARCH_ORGANIC&recommendedFlavor=COMPANY_RECRUIT&refId=RA+GKQ6QNrbwK1PHj3opBQ==&trackingId=XQXcRFZiVeqSGJApqI4Grw==&trk=flagship3_search_srp_jobs">https://www.linkedin.com/jobs/view/2351849053/?eBP=JOB_SEARCH_ORGANIC&amp;recommendedFlavor=COMPANY_RECRUIT&amp;refId=RA%2BGKQ6QNrbwK1PHj3opBQ%3D%3D&amp;trackingId=XQXcRFZiVeqSGJApqI4Grw%3D%3D&amp;trk=flagship3_search_srp_jobs</a></p><p>作为 Oracle Analytics Cloud 团队的开发人员，你将有机会在广泛分布的多租户云环境中构建和运行一套大规模集成云服务。你将需要在分布式系统方面有丰富的经验，熟练地解决大型数据系统中的实际挑战，对如何构建具有弹性，高可用性，可扩展性的解决方案有深刻的了解，并且需要具有可靠的设计，开发和交付回溯能力，终端系统。</p><p>职位要求</p><ul><li>计算机科学，计算机工程学士学位或更高学位，或具有8年以上应用经验的同等学历</li><li>关于 Oracle Cloud Infrastructure 的动手经验–用户&#x2F;策略管理，创建资源，配置和部署软件，自动化端到端到端供应</li><li>精通 Python 编程技巧</li><li>精通关系数据库，擅长 SQL</li><li>有使用容器技术的经验，尤其是 Docker</li><li>在 Linux 环境中的经验</li><li>有配置 Git 等源代码系统的经验</li><li>成为 CI&#x2F;CD 和开发最佳实践的拥护者，尤其是在自动化和测试方面</li><li>具有构建高性能，弹性，可扩展性和精心设计的系统的经验</li><li>良好的沟通能力，能够清楚地阐明工程设计</li><li>敏捷软件开发经验</li></ul><p>所需技能：</p><ul><li>熟悉 Kubernetes，Mesos 等（编排）</li><li>身份管理，安全性，网络等</li></ul><h2 id="NVIDIA-DevOps-Engineer"><a href="#NVIDIA-DevOps-Engineer" class="headerlink" title="NVIDIA DevOps Engineer"></a>NVIDIA DevOps Engineer</h2><p>工作地点：Santa Clara, CA<br>职位链接：<a href="https://www.linkedin.com/jobs/view/2249840303/?alternateChannel=search&refId=Y17t502dpy/AU43SIQPRIA==">https://www.linkedin.com/jobs/view/2249840303/?alternateChannel=search&amp;refId=Y17t502dpy%2FAU43SIQPRIA%3D%3D</a></p><p>工作内容</p><ul><li>为多个内部服务开发和支持暂存和生产环境</li><li>与全球各地的各个团队进行协调，以促进和改进 CI&#x2F;CD 的实践</li><li>使用内部 Kubernetes 和商业云帮助构建服务</li><li>你将在团队中灵活地做出技术决策</li></ul><p>岗位要求</p><ul><li>计算机工程，计算机科学或相关技术学科的理学学士学位或同等工作经验</li><li>6年以上经验</li><li>出色的脚本语言编程和调试技能</li><li>成熟的 Linux 系统管理经验（强烈建议使用 CentOS 和 Ubuntu）</li><li>对 CI&#x2F;CD管道和工具有很好的了解（GitLab 或类似的工具）</li><li>数据库管理和性能调优经验</li><li>具有容器（Docker，Kubernetes）Web服务（SOAP&#x2F;REST）和可扩展存储（HDFS&#x2F;Ceph）的经验</li></ul><p>从人群中脱颖而出的方法</p><ul><li>你具有 Python 编程方面的专业知识</li><li>熟悉 Windows 系统管理是一个巨大的优势</li><li>你曾经使用过云服务（AWS，Azure等）</li></ul><h2 id="Cisco-CX-Cloud-Senior-DevOps-Release-Engineer"><a href="#Cisco-CX-Cloud-Senior-DevOps-Release-Engineer" class="headerlink" title="Cisco CX Cloud - Senior DevOps Release Engineer"></a>Cisco CX Cloud - Senior DevOps Release Engineer</h2><p>工作地点：San Jose, CA<br>职位链接：<a href="https://www.linkedin.com/jobs/view/2310027987/?alternateChannel=search&refId=COCpYBYNZm9w483i3SERXg==&trackingId=FpZJedsrgIhNxlm961X75Q==">https://www.linkedin.com/jobs/view/2310027987/?alternateChannel=search&amp;refId=COCpYBYNZm9w483i3SERXg%3D%3D&amp;trackingId=FpZJedsrgIhNxlm961X75Q%3D%3D</a></p><p>工作范围</p><ul><li>你可以跨 CX E&amp;PI 和更广泛的客户体验（CX）组织进行协作，以启用我们的DevOps Release转换功能</li><li>你将以思想和实践的开发人员的身份开展工作，他不仅会认识并建立我们的组织实力，还将为团队带来新的观点和想法</li><li>与多元化的包容性软件工程师团队合作，在发布过程中实现端到端的DevOps，以确保加速的吞吐量和系统可靠性</li><li>与安全，应用程序和基础架构团队合作，从开发，测试，阶段，预生产和生产环境中检测简化的变更生命周期</li><li>运用你的经验将基础架构实现为代码，转换发布管道，并在高性能 DevOps 管道上以 NoOps 的心态部署到生产中</li><li>促进纪律严明的方法以确保部署的可预测性和质量</li><li>基准化和优化关键运营指标，确保我们符合运营SLA</li><li>测试并控制安全性，可靠性，可伸缩性和性能标准</li><li>积极寻求持续改进和学习的机会</li></ul><p>岗位要求</p><ul><li>至少 10 年以上的设计，架构，启用和执行 DevOps 管道</li><li>以诚信，信任和透明的态度进行道德领导</li><li>具有在面向敏捷 DevOps 的团队和文化中担任高级主管的经验，并使用现代框架，技术，将基础架构用作代码工具的 DevOps 实践</li><li>将自动进行配置管理（使用Ansible等工具）</li><li>精通 DevOps，Blue&#x2F;Green 和 Canary 部署以及云工程中的最佳实践</li><li>已经证明了微服务，作为代码的基础架构，监视和日志记录方面的专业知识</li><li>将编写代码，列出在 AWS 上运行的框架和架构</li><li>与跨职能团队合作时，你在复杂产品体系结构的持续集成和连续部署方面拥有深厚的专业知识</li><li>具有出色的能力，可以为支持全球客户群的云原生 SaaS 应用程序实现高可用性，灾难恢复，监视和警报，自动化以及持续的高性能</li><li>具有 Terraform 和 CloudFormation 模板的专业知识</li><li>在代码管道解决方案方面拥有深厚的专业知识</li><li>使用 Docker 和 Kubernetes 管理容器</li><li>使用 Jenkins 等平台管理构建管道</li><li>具有出色的组织和人际关系技巧，可以促进协作；在多功能矩阵管理环境中可以很好地工作</li><li>应该能够为 AWS 编写 Terraform 模块</li><li>已经展示了领域的专业知识，可以使用 SaaS 或消费者云软件公司的 DevOps 团队使用AWS之类的技术执行发布管道转换</li><li>在整合复杂的，跨公司的流程和信息策略方面拥有丰富的经验，包括技术规划和执行以及策略制定和维护</li><li>对临时性工作负载具有丰富的经验</li><li>体验 Kubernetes</li><li>有 Atlantis 知识者优先+</li><li>在 DevOps 执行或工程职位上有10年以上的经验</li><li>具有丰富的经验，可在云体系结构上实现发布管道，并符合代码和临时工作负载</li><li>将基础架构作为代码和将配置作为代码技术的丰富经验</li><li>使用 Terraform，Kubernetes 和 Docker 等工具构建，扩展和保护应用程序云基础架构的丰富经验</li><li>在 GitHub 中管理多个代码库的丰富经验</li><li>在大型公共云中构建 Cloud Native 应用程序的丰富经验</li><li>具有实施可观察性，应用程序监视和日志聚合解决方案的经验</li><li>与跨职能团队合作并指导跨部门团队提供激情和经验，以提供受 DevOps 启发的解决方案</li><li>为大型数据管道开发高度可扩展的云原生架构</li><li>将异构构建，测试，部署和发布活动转换为在AWS上运行的同类企业级 DevOps 实施</li><li>交付和创作持续集成构建和部署自动化方面的丰富经验，例如 CI&#x2F;CD 管道对 CloudFormation 模板，Ansible 和类似框架等解决方案的丰富经验</li><li>与应用程序和基础架构部署相关的 AWS 平台的丰富经验</li><li>能够在 Python，Go和 Java 中流畅开发</li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 年终总结</title>
      <link href="/2020/12/2020-summary/"/>
      <url>/2020/12/2020-summary/</url>
      
        <content type="html"><![CDATA[<p>时间飞快，马上就迎来了 2021 年，又到了总结自己这一年来的所有的经历和收获的时候了。</p><p>2020 是非比寻常的一年，对于每个人不论是生活还是工作，都因为新冠病毒被影响着。</p><p>但生活总归要继续。刷微博、抖音各种社交媒体是一天；工作学习也是一天。我是那种一段时间感觉没进步就特别恐慌的人，做完后者总会让我感觉更安心一些。</p><h2 id="回顾-2020"><a href="#回顾-2020" class="headerlink" title="回顾 2020"></a>回顾 2020</h2><h3 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h3><p>对于 2020 年，我一直努力想要去做到最好，年尾回头看看，还算满意吧。</p><p>在年底写下工作工作总结的时候，发现自己这一年确实做了很多工作。除了做好构建和发布的本职工作之外，做了很多改进流程和提高效率工作，捡一些重要的来说：</p><ul><li><p>通过 Jenkins Shared Libraries 和 Multi-branch Pipeline 完成了无人值守的自动化构建，为团队和我节省了大量的时间；同时也通过验证 PR 构建和测试，提高签入代码的稳定和质量。</p><blockquote><p>输出文章 <a href="https://shenxianpeng.github.io/2020/07/jenkins-best-practice-cn/">每个 Jenkins 用户都应该知道这三个最佳实践</a></p></blockquote></li><li><p>推动团队迁移到企业级的 Artifactory 来下载和存储构建，从而改进 CI&#x2F;CD 的效率和无人值守的能力。为更好的自动化下载、安装、测试等提供方便。</p><blockquote><p>输出文章 <a href="https://shenxianpeng.github.io/2020/10/what-is-artifactory/">写给那些想使用 JFrog Artifactory 管理制品的人</a></p></blockquote></li><li><p>使用 Python 来做了很多关于 Jira, BitBucket 的集成，通过自动化提高效率。另外还发布了一个 Python 项目 <a href="https://pypi.org/project/uopy/">UOPY</a>。</p><blockquote><p>输出文章 <a href="https://shenxianpeng.github.io/2020/09/how-to-release-python-project/">在 GitHub 上发布一个 Python 项目需要注意哪些</a></p></blockquote></li><li><p>落地了 Git 提交信息和分支创建规范，统一了 Git 提交信息和分支创建规范。</p><blockquote><p>输出文章 <a href="https://shenxianpeng.github.io/2020/09/commit-messages-specification/">程序员自我修养之Git提交信息和分支创建规范</a></p></blockquote></li><li><p>学习和使用了一些新工具，比如 Ansible playbook、ELK、JaCoCo 等并应用到项目中。</p><blockquote><p>输出文章 <a href="https://shenxianpeng.github.io/2020/09/getting-to-know-ansible/">初识 Ansible</a>，<a href="https://shenxianpeng.github.io/2020/11/jacoco-imp/">JaCoCo 实践</a></p></blockquote></li></ul><p>作为 DevOps&#x2F;软件工程师还需要有良好的表达能力，否则你做的东西再好，但无法很清晰的跟同事及领导分享出来也是事倍功半。尤其像我在外企，还需要用英文去做分享。</p><p>另外，我想通过坚持阅读和实践，让自己在技术上有比较大的提高。有一段时间我坚持的比较好，完成了好几本技术书籍的阅读，但好的习惯就怕被打破，一旦被打破就很难坚持了。之前一般都是中午午休的时间会阅读半个小时以上的技术书，后来常常因为中午要去新房盯装修，加上每天要做的事情很多（工作、学英语、阅读、装修）的时候，很多时候往往是事情做了，但效果并没有达到预期。</p><h3 id="分享上"><a href="#分享上" class="headerlink" title="分享上"></a>分享上</h3><p>2020 年<a href="https://shenxianpeng.github.io/">博客</a>上一共更新了 41 篇文章，在公众号『DevOps攻城狮』上面一共更新了 26 篇文章。</p><p>这个数量和质量跟一些其他的技术公众号真的没法比，但对于我个人：一个不以写作为生、只写原创文章的攻城狮，只要能不间断的输出，达到这个数量我已经比较满意了。</p><p>而且在年初有一个清华大学的编辑老师找到我，想让我出一本书，这真是让我受宠若惊。我知道自己几斤几两，但能够受到邀请，并寄给我合同，就已经是对我写作的最大鼓励了。</p><p>当时打算写一本《Jenkins 2实践指南》，如果签了合同，我就需要投入至少一年的业余时间死磕自己才有可能完成。</p><p>最后考虑到自己当时的状况：优先做好工作；其次还有比Jenkins更重要的技术我需要去学习；另外周末要装修等一系列的事情…我最终放弃了这个机会。</p><p>我知道自己还处在输入比输出更加迫切的阶段，我想只要心中的小火苗还在，但行好事，莫问前程。</p><h2 id="工作-flag"><a href="#工作-flag" class="headerlink" title="工作 flag"></a>工作 flag</h2><p>对于个人年终总结，不仅可以回顾自己过去的一年做了哪些，哪些没做好，有什么可以改进的，还能通过回顾和总结为新年立一个 flag。</p><p>2021 我希望自己能更加专注，利用好时间，更加有效的工作和学习。</p><p>除了做好工作，最重要的是<strong>提高英语口语</strong>和<strong>深入学习技术</strong>，其次才是输出。</p><p>光有 flag 不行，还要落到具体的行动上。</p><h3 id="提高英语口语"><a href="#提高英语口语" class="headerlink" title="提高英语口语"></a>提高英语口语</h3><p>🚩 2021 继续坚持至少每天半小时口语打卡练习；另外每周一次 50 分钟的与外教的口语交流。希望能够脱稿进行英文分享，同时能通过英语托业考试。</p><h3 id="深入学习技术"><a href="#深入学习技术" class="headerlink" title="深入学习技术"></a>深入学习技术</h3><p>我现在学习技术的方式有这么几种：直接去官网阅读英文文档；如果读完还是没搞明白，就去 Linkedin Learning 或是 Udemy 上去搜相应的技术，不但学习了技术，同时也练习了英文听力；如果需要深入系统的去学习一门编程语言以及一些底层技术，会去读一些经典技术书籍。</p><p>🚩 2021 年坚持每天也至少半个小时来阅读技术，一个月至少读完一本技术书籍并且有输出。</p><h2 id="生活-flag"><a href="#生活-flag" class="headerlink" title="生活 flag"></a>生活 flag</h2><p>生活上希望家人和朋友都能身体健康，生活幸福。</p><p>🚩 财务稳定，最好能增长；自己能够健康生活，减重 10 斤。</p><p>最后，不时的来回顾自己 2021 年的 flag，时不时的看看自己是否偏离了最初的方向。2021 我来了！</p><blockquote><h2 id="过去的年终总结"><a href="#过去的年终总结" class="headerlink" title="过去的年终总结"></a>过去的年终总结</h2><p><a href="https://shenxianpeng.github.io/2019/12/2019-summary/">2019 年终总结</a><br><a href="https://shenxianpeng.github.io/2018/12/from-qa-to-dev/">2018 从测试到开发的五个月</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to backup Jenkins</title>
      <link href="/2020/11/jenkins-backup/"/>
      <url>/2020/11/jenkins-backup/</url>
      
        <content type="html"><![CDATA[<p>I believe most of you have used the Jenkins configuration as code principle, so you build&#x2F;test&#x2F;release process will be described in code.</p><p>It looks like all is good, but not all of the configuration is in code, same of the Jenkins system configuration is store in the Jenkins service, so we also need to backup Jenkins in case of any disaster.</p><p>There are two ways to backup Jenkins, one used Jenkins plugin, the other is create shell scripts.</p><h2 id="Using-plug-in-backup"><a href="#Using-plug-in-backup" class="headerlink" title="Using plug-in backup"></a>Using plug-in backup</h2><p>I used the <code>ThinBackup</code> plugin, here is my thinBackup configuration.</p><p><img src="/2020/11/jenkins-backup/thinBackup-Configuration.png" alt="ThinBackup Configuration"></p><span id="more"></span><ul><li><p>backup to a folder which user <code>jenkins</code> has permission to write. this is important.</p><blockquote><p>Previously I backup Jenkins to a mount folder, but it doesn’t work recently. so I use user <code>jenkins</code> to log in on the Jenkins server and found my <code>jenkins</code> can’t access the directory, but I personal user can.</p></blockquote></li><li><p>I will daily backup my Jenkins server, from Monday to Saturday.</p></li><li><p>Fo me max number of backup sets is 3, because every backup archive more than 400 MB.</p></li><li><p>Others check boxs</p><ul><li>Backup build results</li><li>Backup ‘userContent’ folder</li><li>Backup next build number file</li><li>Backup plugins archives</li><li>Move old backups to ZIP files</li></ul></li></ul><h2 id="Using-shell-script-backup"><a href="#Using-shell-script-backup" class="headerlink" title="Using shell script backup"></a>Using shell script backup</h2><p>Here is a popular repository and code for your reference.</p><ul><li>repository: <a href="https://github.com/sue445/jenkins-backup-script">https://github.com/sue445/jenkins-backup-script</a></li><li>gist: <a href="https://gist.github.com/abayer/527063a4519f205efc74">https://gist.github.com/abayer/527063a4519f205efc74</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
            <tag> Backup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JaCoCo 实现原理 (JaCoCo Implementation Design)</title>
      <link href="/2020/11/jacoco/"/>
      <url>/2020/11/jacoco/</url>
      
        <content type="html"><![CDATA[<p>想要对 Java 项目进行代码覆盖率的测试，很容易就找到 JaCoCo 这个开源代码覆盖率分析工具是众多工具中最后欢迎的哪一个。</p><p>本篇仅仅是在学习 JaCoCo 时对其实现设计文档 <a href="https://www.jacoco.org/jacoco/trunk/doc/implementation.html">https://www.jacoco.org/jacoco/trunk/doc/implementation.html</a> 的粗略翻译。</p><h2 id="实现设计-Implementation-Design"><a href="#实现设计-Implementation-Design" class="headerlink" title="实现设计(Implementation Design)"></a>实现设计(Implementation Design)</h2><p>这是实现设计决策的一个无序列表，每个主题都试图遵循这样的结构:</p><ul><li>问题陈述</li><li>建议的解决方案</li><li>选择和讨论</li></ul><h3 id="覆盖率分析机制-Coverage-Analysis-Mechanism"><a href="#覆盖率分析机制-Coverage-Analysis-Mechanism" class="headerlink" title="覆盖率分析机制(Coverage Analysis Mechanism)"></a>覆盖率分析机制(Coverage Analysis Mechanism)</h3><blockquote><p>覆盖率信息必须在运行时收集。为此，JaCoCo 创建原始类定义的插装版本，插装过程发生在加载类期间使用一个叫做 Java agents 动态地完成。</p></blockquote><p>有几种收集覆盖率信息的不同方法。每种方法都有不同的实现技术。下面的图表给出了 JaCoCo 使用的技术的概述:</p><p><img src="/2020/11/jacoco/implementation.png" alt="实现"></p><p>字节码插装非常快，可以用纯 Java 实现，并且可以与每个 Java VM 一起工作。可以将带有 Java 代理钩子的动态插装添加到 JVM 中，而无需对目标应用程序进行任何修改。</p><p>Java 代理钩子至少需要 1.5 个 JVMs。用调试信息(行号)编译的类文件允许突出显示源代码。不幸的是，一些 Java 语言结构被编译成字节代码，从而产生意外的突出显示结果，特别是在使用隐式生成的代码时（如缺省构造函数或 finally 语句的控制结构）。</p><span id="more"></span><h3 id="覆盖-Agent-隔离-Coverage-Agent-Isolation"><a href="#覆盖-Agent-隔离-Coverage-Agent-Isolation" class="headerlink" title="覆盖 Agent 隔离(Coverage Agent Isolation)"></a>覆盖 Agent 隔离(Coverage Agent Isolation)</h3><blockquote><p>Java 代理由应用程序类装入器装入，因此代理的类与应用程序类生活在相同的名称空间中，这可能会导致冲突，特别是与第三方库 ASM。因此，JoCoCo 构建将所有代理类移动到一个唯一的包中。</p></blockquote><p>JaCoCo 构建将包含在 <code>jacocoagent.jar</code> 中的所有类重命名为具有 <code>org.jacoco.agent.rt_&lt;randomid&gt;</code> 前缀，包括所需的 ASM 库类。标识符是从一个随机数创建的，由于代理不提供任何 API，因此没有人会受到此重命名的影响，这个技巧还允许使用 JaCoCo 验证 JaCoCo 测试。</p><h3 id="最低的Java版本-Minimal-Java-Version"><a href="#最低的Java版本-Minimal-Java-Version" class="headerlink" title="最低的Java版本(Minimal Java Version)"></a>最低的Java版本(Minimal Java Version)</h3><blockquote><p>JaCoCo 需要 Java 1.5 及以上版本。</p></blockquote><p>Java 1.5 VMs 提供了用于动态插装的 Java 代理机制。使用 Java 1.5 语言级别进行编码和测试比使用旧版本更有效、更少出错——而且更有趣。JaCoCo 仍然允许运行针对这些编译的 Java 代码。</p><h3 id="字节码操纵-Byte-Code-Manipulation"><a href="#字节码操纵-Byte-Code-Manipulation" class="headerlink" title="字节码操纵(Byte Code Manipulation)"></a>字节码操纵(Byte Code Manipulation)</h3><blockquote><p>插装需要修改和生成 Java 字节码的机制。JaCoCo 在内部使用 ASM 库来实现这个目的。</p></blockquote><p>实现 Java 字节码规范将是一项广泛且容易出错的任务。因此，应该使用现有的库。ASM库是轻量级的，易于使用，在内存和 CPU 使用方面非常高效，它被积极地维护并包含为一个巨大的回归测试套件，它的简化 BSD 许可证得到了 Eclipse 基金会的批准，可以与 EPL 产品一起使用。</p><h3 id="Java类的身份-Java-Class-Identity"><a href="#Java类的身份-Java-Class-Identity" class="headerlink" title="Java类的身份(Java Class Identity)"></a>Java类的身份(Java Class Identity)</h3><blockquote><p>在运行时加载的每个类都需要一个唯一的标识来关联覆盖率数据，JaCoCo 通过原始类定义的 CRC64 哈希代码创建这样的标识。</p></blockquote><p>在多类加载器环境中，类的纯名称不能明确地标识类。例如，OSGi 允许在相同的虚拟机中加载相同类的不同版本。在复杂的部署场景中，测试目标的实际版本可能与当前开发版本不同。代码覆盖率报告应该保证所呈现的数字是从有效的测试目标中提取出来的。类定义的散列代码允许区分类和类的版本。CRC64 哈希计算简单而快速，结果得到一个小的64位标识符。</p><p>类加载器可能加载相同的类定义，这将导致 Java 运行时系统产生不同的类。对于覆盖率分析来说，这种区别应该是不相关的。类定义可能会被其他基于插装的技术(例如 AspectJ)改变。在这种情况下，哈希码将改变，标识将丢失。另一方面，基于被改变的类的代码覆盖率分析将会产生意想不到的结果。CRC64 代码可能会产生所谓的冲突，即为两个不同的类创建相同的哈希代码。尽管 CRC64 在密码学上并不强，而且很容易计算碰撞示例，但对于常规类文件，碰撞概率非常低。</p><h3 id="覆盖运行时依赖-Coverage-Runtime-Dependency"><a href="#覆盖运行时依赖-Coverage-Runtime-Dependency" class="headerlink" title="覆盖运行时依赖(Coverage Runtime Dependency)"></a>覆盖运行时依赖(Coverage Runtime Dependency)</h3><blockquote><p>插装代码通常依赖于负责收集和存储执行数据的覆盖运行时。JaCoCo 只在生成的插装代码中使用 JRE 类型。</p></blockquote><p>在使用自己的类加载机制的框架中，使运行时库对所有插装类可用可能是一项痛苦或不可能完成的任务。自 Java 1.6 <code>java.lang.instrument.Instrumentation</code>。插装有一个扩展引导带加载器的API。因为我们的最低目标是 Java 1.5，所以 JaCoCo 只通过官方的 JRE API 类型来解耦插装类和覆盖运行时。插装的类通过 <code>Object.equals(Object)</code> 方法与运行时通信。插装类可以使用以下代码检索其探测数组实例。注意，只使用 JRE APIs:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">access</span> <span class="operator">=</span> ...                          <span class="comment">// Retrieve instance</span></span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">3</span>];</span><br><span class="line">args[<span class="number">0</span>] = Long.valueOf(<span class="number">8060044182221863588</span>); <span class="comment">// class id</span></span><br><span class="line">args[<span class="number">1</span>] = <span class="string">&quot;com/example/MyClass&quot;</span>;             <span class="comment">// class name</span></span><br><span class="line">args[<span class="number">2</span>] = Integer.valueOf(<span class="number">24</span>);               <span class="comment">// probe count</span></span><br><span class="line"></span><br><span class="line">access.equals(args);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span>[] probes = (<span class="type">boolean</span>[]) args[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>最棘手的部分发生在第 1 行，上面的代码片段中没有显示必须获得通过 equals() 方法提供对覆盖运行时访问的对象实例。到目前为止，已经实施和测试了不同的方法:</p><ul><li><code>SystemPropertiesRuntime</code>: 这种方法将对象实例存储在系统属性下。这个解决方案打破了系统属性必须只包含 <code>java.lang.String</code> 的约定。字符串值，因此会在依赖于此定义的应用程序(如Ant)中造成麻烦。</li><li><code>LoggerRuntime</code>: 这里我们使用共享的 <code>java.util.logging.Logger</code>。并通过日志参数数组而不是 equals() 方法进行通信。覆盖运行时注册一个自定义处理程序来接收参数数组。这种方法可能会破坏安装自己日志管理器的环境(例如Glassfish)。</li><li><code>ModifiedSystemClassRuntime</code>: 这种方法通过插装将公共静态字段添加到现有的 JRE 类中。与上面的其他方法不同，此方法仅适用于活动 Java 代理的环境。</li><li><code>InjectedClassRuntime</code>：这个方法使用 Java 9 中引入的 <code>java.lang.invoke.MethodHandles.Lookup.defineClass</code> 定义了一个新类。</li></ul><p>从 0.8.3 版本开始，在 JRE 9 或更高版本上运行时，JaCoCo Java 代理实现使用 <code>InjectedClassRuntime</code> 在引导类装入器中定义新类，否则使用<code>ModifiedSystemClassRuntime</code> 向现有 JRE 类添加字段。从版本 0.8.0 开始，字段被添加到类 <code>java.lang.UnknownError</code> 中。version 0.5.0 - 0.7.9 向类 <code>java.util.UUID</code> 中添加了字段，与其他代理发生冲突的可能性较大。</p><h3 id="内存使用-Memory-Usage"><a href="#内存使用-Memory-Usage" class="headerlink" title="内存使用(Memory Usage)"></a>内存使用(Memory Usage)</h3><blockquote><p>对于具有数千类或数十万行代码的大型项目，覆盖率分析应该是可能的。为了允许合理的内存使用，覆盖率分析是基于流模式和“深度优先”遍历的。</p></blockquote><p>一个庞大的覆盖率报告的完整数据树太大了，无法适合合理的堆内存配置。因此，覆盖率分析和报告生成被实现为“深度优先”遍历。也就是说，在任何时间点，工作记忆中只需要保存以下数据:</p><ul><li>当前正在处理的单个类。</li><li>这个类的所有父类(包、组)的汇总信息。</li></ul><h3 id="Java元素标识符-Java-Element-Identifiers"><a href="#Java元素标识符-Java-Element-Identifiers" class="headerlink" title="Java元素标识符(Java Element Identifiers)"></a>Java元素标识符(Java Element Identifiers)</h3><blockquote><p>Java 语言和 Java VM 对Java 元素使用不同的字符串表示格式。例如，Java 中的类型引用读起来像 <code>java.lang.Object</code>。对象，VM 引用的类型与 <code>Ljava/lang/Object</code> 相同。JaCoCo API 仅基于VM标识符。</p></blockquote><p>直接使用 VM 标识符不会在运行时造成任何转换开销。有几种基于 Java VM 的编程语言可能使用不同的符号。因此，特定的转换应该只在用户界面级别发生，例如在报表生成期间。</p><h3 id="JaCoCo实现的模块化-Modularization-of-the-JaCoCo-implementation"><a href="#JaCoCo实现的模块化-Modularization-of-the-JaCoCo-implementation" class="headerlink" title="JaCoCo实现的模块化(Modularization of the JaCoCo implementation)"></a>JaCoCo实现的模块化(Modularization of the JaCoCo implementation)</h3><blockquote><p>JaCoCo 是在提供不同功能的几个模块中实现的。这些模块是作为带有适当清单文件的 OSGi 包提供的。但是它不依赖于 OSGi 本身。</p></blockquote><p>使用 OSGi bundle 允许在开发时和运行时在 OSGi 容器中定义良好的依赖关系。由于对 OSGi 没有依赖关系，捆绑包也可以像普通的 JAR 文件一样使用。</p>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Coverage </tag>
            
            <tag> JaCoCo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible 实践</title>
      <link href="/2020/10/ansible-practice/"/>
      <url>/2020/10/ansible-practice/</url>
      
        <content type="html"><![CDATA[<p>最近在思考如何将团队里的所有的虚拟机都很好的管理并监控起来，但是由于我们的虚拟机的操作系统繁多，包括 Windows, Linux, AIX, HP-UX, Solaris SPARC 和 Solaris x86. 到底选择哪种方式来管理比较好呢？这需要结合具体场景来考虑。</p><h2 id="Ansible-和其他工具的对比"><a href="#Ansible-和其他工具的对比" class="headerlink" title="Ansible 和其他工具的对比"></a>Ansible 和其他工具的对比</h2><p>这里有一个关于 Chef，Puppet，Ansible 和 Saltstack 的对比文章</p><blockquote><p><a href="https://www.edureka.co/blog/chef-vs-puppet-vs-ansible-vs-saltstack/">https://www.edureka.co/blog/chef-vs-puppet-vs-ansible-vs-saltstack/</a></p></blockquote><h2 id="选择合适的工具"><a href="#选择合适的工具" class="headerlink" title="选择合适的工具"></a>选择合适的工具</h2><h3 id="仅管理-Windows-和-Linux"><a href="#仅管理-Windows-和-Linux" class="headerlink" title="仅管理 Windows 和 Linux"></a>仅管理 Windows 和 Linux</h3><p>如果你的虚拟机没有这么多平台，只是 Windows 和 Linux，假如你已经有了 VMware vSphere 来管理了，那么可以通过 VMware vSphere API 来查看这些机器的状态。</p><p>这里是 VMware 官方的 API Library 供使用：</p><ul><li><a href="https://github.com/vmware/pyvmomi">VMware vSphere API Python Bindings</a></li><li><a href="https://github.com/vmware/govmomi">Go library for the VMware vSphere API</a></li></ul><h3 id="管理多个操作系统"><a href="#管理多个操作系统" class="headerlink" title="管理多个操作系统"></a>管理多个操作系统</h3><p>如果你和我的情况一下，想监控很多个操作操作系统，那么就只能通过 ssh 来登录到每一台机器上去查看，比如执行 <code>uptime</code> 等命令。可以写 shell 脚本来完成这些登录、检测等操作。</p><p>另外就是使用 Ansible 的 Playbook。Playbook 里描述了你要做的操作，这是一个权衡，学习 Ansible 的 Playbook 需要花些时间的。</p><p>如果想了解下 Ansible 那么可以试试 Ansible Playbook。以下是我使用 Ansible 做了一些练习。</p><h4 id="Playbook结构"><a href="#Playbook结构" class="headerlink" title="Playbook结构"></a>Playbook结构</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">+- vars</span><br><span class="line">|   +- vars.yml</span><br><span class="line">|   +- ...</span><br><span class="line">+- hosts               <span class="comment"># save all hosts you want to monitor</span></span><br><span class="line">+- run.yml             <span class="comment"># ansible executable file</span></span><br></pre></td></tr></table></figure><h4 id="Playbook具体代码"><a href="#Playbook具体代码" class="headerlink" title="Playbook具体代码"></a>Playbook具体代码</h4><span id="more"></span><p>vars&#x2F;vars.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># system</span></span><br><span class="line"><span class="attr">ip:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_default_ipv4[&#x27;address&#x27;] &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">host_name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_hostname &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">os:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_distribution &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_distribution_version &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">total_mb:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_memtotal_mb &#125;&#125;</span>&quot;</span></span><br><span class="line"><span class="attr">vcpus:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_processor_vcpus &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>hosts</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">unix-vm</span>]</span><br><span class="line"><span class="string">aix</span> <span class="string">ansible_host=walbld01.dev.company.com</span> <span class="string">ansible_user=test</span> <span class="string">ansible_become_pass=test</span></span><br><span class="line"><span class="string">hp-ux</span>  <span class="string">ansible_host=walbld04.dev.company.com</span> <span class="string">ansible_user=test</span> <span class="string">ansible_become_pass=test</span></span><br><span class="line"><span class="string">linux</span> <span class="string">ansible_host=walbld05.dev.company.com</span> <span class="string">ansible_user=test</span> <span class="string">ansible_become_pass=test</span></span><br><span class="line"></span><br><span class="line">[<span class="string">win-vm</span>]</span><br><span class="line"><span class="string">win-bld02</span> <span class="string">ansible_host=walbld02.dev.company.com</span> <span class="string">ansible_user=Administrator</span> <span class="string">ansible_password=admin</span> <span class="string">ansible_port=5985</span> <span class="string">ansible_connection=winrm</span> <span class="string">ansible_winrm_server_cert_validation=ignore</span></span><br><span class="line"></span><br><span class="line">[<span class="string">other-vm</span>]</span><br><span class="line"><span class="string">solaris</span> <span class="string">ansible_host=walbld07.dev.company.com</span> <span class="string">ansible_user=test</span> <span class="string">ansible_become_pass=test</span></span><br><span class="line"><span class="string">win-udb03</span> <span class="string">ansible_host=walbld03.dev.company.com</span> <span class="string">ansible_user=administrator</span> <span class="string">ansible_become_pass=admin</span></span><br></pre></td></tr></table></figure><p>run.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># this playbook is simple test</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;get unix build machine info&quot;</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">unix-vm</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">uname,</span> <span class="string">hostname</span> <span class="string">and</span> <span class="string">uptime</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">&quot;uname &amp;&amp; hostname &amp;&amp; uptime&quot;</span></span><br><span class="line">    <span class="attr">register:</span> <span class="string">output</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">var=output[&#x27;stdout_lines&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;get windows build machine os info&quot;</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">win-vm</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">var=hostvars[&#x27;win-bld02&#x27;].ansible_facts.hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">debug:</span> <span class="string">var=hostvars[&#x27;win-bld02&#x27;].ansible_distribution</span></span><br></pre></td></tr></table></figure><h4 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a>如何执行</h4><p>首先需要安装了 ansible，然后执行</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># run with playbook</span></span><br><span class="line">ansible-playbook -i hosts run.yml</span><br></pre></td></tr></table></figure><blockquote><p>注：上面的代码是脱敏过的，需要根据你的环境进行调整才能执行成功。</p></blockquote><h2 id="Ansible-TroubleShotting"><a href="#Ansible-TroubleShotting" class="headerlink" title="Ansible TroubleShotting"></a>Ansible TroubleShotting</h2><p><code>&quot;msg&quot;: &quot;winrm or requests is not installed: No module named winrm&quot;</code></p><p>Need install <code>pywinrm</code> on your master server.</p><p>“msg”: “plaintext: auth method plaintext requires a password”</p><p>when I run <code>ansible mywin -i hosts -m win_ping -vvv</code>, I notice the output used Python2.7, so I install <code>pywinrm</code> with command <code>sudo pip2 install pywinrm</code>, then my problem was resolved.</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">mywin | UNREACHABLE! =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;changed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plaintext: auth method plaintext requires a password&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;unreachable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Result: You should be using ansible_password and not ansible_pass. <a href="https://github.com/ansible/ansible/issues/16858#issuecomment-250908554">link</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给那些想使用 JFrog Artifactory 管理制品的人</title>
      <link href="/2020/10/what-is-artifactory/"/>
      <url>/2020/10/what-is-artifactory/</url>
      
        <content type="html"><![CDATA[<p>我在使用 Artifactory 做持续集成已经有一段时间了，对企业级 Artifactory 也有了一些经验和总结，希望能通过本篇的分享帮助刚接触这个工具的人了解什么是Artifactory，它能做什么，为什么要选择它，以及在使用过程中应该注意什么。</p><h2 id="什么是Artifactory"><a href="#什么是Artifactory" class="headerlink" title="什么是Artifactory"></a>什么是Artifactory</h2><p>一句话概括：Artifactory 是一个存放制品（Artifacts）的工具。当前，Artifactory 是一个非常有影响力，功能非常强大的工具。</p><h2 id="Artifactory有哪些优势"><a href="#Artifactory有哪些优势" class="headerlink" title="Artifactory有哪些优势"></a>Artifactory有哪些优势</h2><p>可能你的团队已经有了自己的管理制品的方式，比如 FTP 等。Artifactory 能带来什么呢？让我先来看看它有哪些优势。</p><blockquote><p>注：以下优势都是针对 JFrog Aritifacvtory 企业版来介绍的。开源版，即 OSS 版本不具备以下丰富的功能。</p></blockquote><h3 id="优势1：它是一个通用管理仓库"><a href="#优势1：它是一个通用管理仓库" class="headerlink" title="优势1：它是一个通用管理仓库"></a>优势1：它是一个通用管理仓库</h3><p>JFrog Artifactory 企业版完全支持所有主要包格式的存储库管理器。它不但可以管理二进制文件，也可以对市面上几乎所有语言的包的依赖进行管理，如下图所示</p><p><img src="/2020/10/what-is-artifactory/support-package-formats.png" alt="主要的包格式"></p><p>因此，使用 Artifactory 能够将所有的二进制文件和包存储在<strong>一个地方</strong>。</p><span id="more"></span><h3 id="优势2：跟-CI-工具更好的集成"><a href="#优势2：跟-CI-工具更好的集成" class="headerlink" title="优势2：跟 CI 工具更好的集成"></a>优势2：跟 CI 工具更好的集成</h3><p>它支持所有主流 CI 工具（如下图所示），并在部署期间能捕获详尽的构建环境信息，以实现可完全复制的构建</p><p><img src="/2020/10/what-is-artifactory/ci-tools.png"></p><p>另外通过提供的丰富的 REST API，因此 GUI 页面上的任何操作都可以通过代码以编程方式完成，方便实现 CI&#x2F;CD。</p><h3 id="优势3：提供强大的搜索功能"><a href="#优势3：提供强大的搜索功能" class="headerlink" title="优势3：提供强大的搜索功能"></a>优势3：提供强大的搜索功能</h3><p>如果你的构建是存储在 FTP 上，想从大量的制品中找到你要找的那一个，如果不知道它的名字，那么真的很难找到它。</p><p>Artifactory 提供了强大的搜索功能，可以通过带有正则表达的名字进行搜索；还可以通过文件的 checksum；以及通过属性（Properties）等方式进行快速搜索，如下示例</p><h4 id="例1：通过名字搜索"><a href="#例1：通过名字搜索" class="headerlink" title="例1：通过名字搜索"></a>例1：通过名字搜索</h4><p>你想找某一个提交点的构建制品，比如那个提交点的 commit hash 是 <code>a422912</code>，那么你就可以直接输入 <code>*a422912*</code> 回车，就能快速的从众多的制品中找到，例如 Demo_Linux_bin_a422912.zip</p><p><img src="/2020/10/what-is-artifactory/search-by-name.png"></p><h4 id="例2：通过属性搜索"><a href="#例2：通过属性搜索" class="headerlink" title="例2：通过属性搜索"></a>例2：通过属性搜索</h4><p>比如要找属性 <code>release.status</code> 为 <code>released</code> 的所有构建那么就可以这样搜索。</p><p><img src="/2020/10/what-is-artifactory/search-by-property.png"></p><h4 id="例3：通过-checksum-搜索"><a href="#例3：通过-checksum-搜索" class="headerlink" title="例3：通过 checksum 搜索"></a>例3：通过 checksum 搜索</h4><p>如果只知道文件的 <code>checksum</code>，同样也可以进行搜索。例如通过 <code>sha1sum</code> 计算出文件的 <code>checksum</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sha1sum</span> test.zip</span><br><span class="line">ad62c72fb097fc4aa7723e1fc72b08a6ebcacfd1 *test.zip</span><br></pre></td></tr></table></figure><p><img src="/2020/10/what-is-artifactory/search-by-checksum.png"></p><h3 id="优势4：管理制品的生命周期"><a href="#优势4：管理制品的生命周期" class="headerlink" title="优势4：管理制品的生命周期"></a>优势4：管理制品的生命周期</h3><p>通过定义不同成熟度存储库，然后使用 Artifactory <code>Promote</code> 功能可以将制品移动到不同的成熟度存储库，以及通过元数据属性，更好的管理和维护制品的生命周期。</p><p>除了这些优势之外，Artifactory 还有更多的特点，我就不一一介绍了。</p><blockquote><p>更多功能可以浏览 JFrog Artifactory 的官方介绍 <a href="https://jfrog.com/artifactory/features/">https://jfrog.com/artifactory/features/</a></p></blockquote><p>接下来通过一个 Demo 来介绍 Artifactory 应该怎么使用，以及其中有哪些最佳实践，避免走弯路。</p><h2 id="Artifactory首页介绍"><a href="#Artifactory首页介绍" class="headerlink" title="Artifactory首页介绍"></a>Artifactory首页介绍</h2><p><img src="/2020/10/what-is-artifactory/artifactory-home.png" alt="Artifactory Home"></p><h3 id="页面顶部"><a href="#页面顶部" class="headerlink" title="页面顶部"></a>页面顶部</h3><p>你可以看到这个 Artifactory 已经服务了超过 5000 件的制品。还可以看到 Artifactory 的当前版本号，以及最新版本。</p><h3 id="页面中部，从左到右"><a href="#页面中部，从左到右" class="headerlink" title="页面中部，从左到右"></a>页面中部，从左到右</h3><ol><li><p>最左边是搜索功能，通过丰富的搜索条件可以轻松找到制品。然后是一些用户手册、视频、REST API 文档等信息。</p></li><li><p>中间是 Set Me Up，使用它可以选择和筛选你想要操作的存储库，点击特定的存储库可以弹出关于如何使用它的详细说明。</p></li><li><p>最右边是显示的是最近部署的构建和最多下载量的制品（<code>95</code>代表的是下载次数）</p></li></ol><h3 id="页面底部"><a href="#页面底部" class="headerlink" title="页面底部"></a>页面底部</h3><p>在底部是一些与 Artifactory 集成的相关工具和技术用户文档，方便做集成时快速找到找到最权威的技术资料。</p><h2 id="实践和工作流"><a href="#实践和工作流" class="headerlink" title="实践和工作流"></a>实践和工作流</h2><h3 id="设置关注的仓库"><a href="#设置关注的仓库" class="headerlink" title="设置关注的仓库"></a>设置关注的仓库</h3><p>在首页的 Set Me Up 里你也看到了我们有很多仓库（Repository），然而在众多仓库中，大多数成员只对其中一些仓库感兴趣，那么就可以只关注部分仓库。添加喜欢，然后点击喜欢按钮就可以只列出你关注的 Artifact Repository 了。</p><p><img src="/2020/10/what-is-artifactory/artifactory-artifacts.png" alt="Artifacts"></p><h3 id="仓库权限与保留策略"><a href="#仓库权限与保留策略" class="headerlink" title="仓库权限与保留策略"></a>仓库权限与保留策略</h3><table><thead><tr><th>仓库(maturity)</th><th>保留策略(Retention)</th><th>个人账户(Personal Account)</th><th>服务账户(Service Account)</th><th>管理员(Admin)</th></tr></thead><tbody><tr><td>dev</td><td>通常不清理</td><td>read&#x2F;write</td><td>read&#x2F;write</td><td>all</td></tr><tr><td>int</td><td>一周或是几天</td><td>read</td><td>read&#x2F;write</td><td>all</td></tr><tr><td>stage</td><td>永不清理</td><td>read</td><td>read&#x2F;write</td><td>all</td></tr><tr><td>release</td><td>永不清理</td><td>read</td><td>read&#x2F;write</td><td>all</td></tr></tbody></table><p>通过表格很容易了解这个权限的设置和保留策略，这适合大多数的情况，但不一定适合所有企业情况。</p><h3 id="Artifactory仓库命名方法"><a href="#Artifactory仓库命名方法" class="headerlink" title="Artifactory仓库命名方法"></a>Artifactory仓库命名方法</h3><p>在这个列表仓库中，你可以从这些仓库的名称中看到遵循了某些命名约定，这里遵循了 <a href="https://jfrog.com/whitepaper/best-practices-structuring-naming-artifactory-repositories/">JFrog Artifactory 推荐的官方命名</a> 方法，强烈建议你也这么做。它是由四部分组成：</p><p><code>&lt;team&gt;-&lt;technology&gt;-&lt;maturity&gt;-&lt;locator&gt;</code></p><ul><li>图上的 team 我做了脱敏，我们叫它叫 team1 吧。</li><li>然后是技术，这里有很多可选的，比如 generic, Docker, Maven, NPM 等等。我用的 generic，这是由于我们的产品是 C&#x2F;C++ 编译出来的二进制文件，它属于 generic 类别。</li><li>接下来是成熟度（maturity），一个仓库通常由四个级别的成熟度组成，从低到高这里分别是 <code>dev</code>, <code>int</code>, <code>stage</code> 和 <code>release</code>。</li><li>最后是表示制品的所在位置。比如一个跨国公司，它可能在不同区域都有 Aritfacotory 实例来保证上传&#x2F;下载速度等需求。图上的 den 就是当前 Artifactory 所在位置的缩写。</li></ul><h3 id="从构建生成到发布了解它的工作流"><a href="#从构建生成到发布了解它的工作流" class="headerlink" title="从构建生成到发布了解它的工作流"></a>从构建生成到发布了解它的工作流</h3><p><code>dev</code> 意味着 development（开发），该仓库对所有产品成员都具有读写权限，他们可以上传一些库或其他一些二进制文件。</p><p><code>int</code> 表示 integration（集成），比如从 Jenkins 里成功构建的制品将首先放在这个存储库下，如果构建失败，它将不会被上传到 Artifactory。</p><p><code>stage</code> 表示预发布仓库，通过 Unit Test&#x2F;Smoke Test 的制品会被 <code>Promote</code> 这个仓库待进一步测试，比如手动测试。</p><p><code>release</code> 通过测试的制品会被 <code>Promote</code> 到这个仓库下。</p><p>为了更好的管理Artifactory目录和制品的生命周期，我建议<strong>规范分支命名</strong>和对不同阶段的制品<strong>添加属性</strong>。</p><h4 id="1-规范分支命名有利于Artifactory的目录清晰"><a href="#1-规范分支命名有利于Artifactory的目录清晰" class="headerlink" title="1. 规范分支命名有利于Artifactory的目录清晰"></a>1. 规范分支命名有利于Artifactory的目录清晰</h4><p>例如，一个产品叫 ART，它的 Git 仓库也叫 ART，它下面有这样一个分支 <code>feature/ART-1234</code>。</p><p>Jenkins Pipeline 里的环境变量设置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">environment &#123;</span><br><span class="line">  INT_REPO_PATH = &quot;team1-generic-int-den/ART/$&#123;BRANCH_NAME&#125;/$&#123;BUILD_NUMBER&#125;/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看这个分支构建是如何流转的。</p><p>这个分支通过 Jenkins 第1构建成功后，它首先会被 <code>team1-generic-int-den</code> 仓库下的 <code>ART/feature/ART-1234/1/</code> 的目录下面，如果进行第2次构建，并成功，那么它的制品目录会是：<br><code>team1-generic-int-den/ART/feature/ART-1234/2/</code> 以此类推。</p><p>为了更好的管理仓库下面的目录，建议团队事先约定分支命名规范，这样同一种类型的分支的所有构建都会出现在一个目录下面。</p><p>关于命名规范可参见这篇文章<a href="https://shenxianpeng.github.io/2020/09/commit-messages-specification/">程序员自我修养之Git提交信息和分支创建规范</a></p><p>对于 Pull Request Build 如果也想放到 Artifactory 上面，建议像下面这样设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">environment &#123;</span><br><span class="line">  PR_INT_REPO_PATH = &quot;team1-generic-int-den/ART/PRs/$&#123;BRANCH_NAME&#125;/$&#123;BUILD_NUMBER&#125;/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样所有的 Pull Request Build 构建成功后都会被放到 <code>PRs</code> 这个目录下，方便查找和管理。</p><h4 id="2-不同阶段添加不同的属性"><a href="#2-不同阶段添加不同的属性" class="headerlink" title="2. 不同阶段添加不同的属性"></a>2. 不同阶段添加不同的属性</h4><p>如果以上的构建通过了一些质量关卡，比如通过了单元测试、自动化测试以及 SonaQube 的扫描等等，建议添加不同的属性，例如：</p><p><code>unit.test.status=passed</code><br><code>automated.test.status=passed</code><br><code>sonaqube.scan.status=passed</code></p><p>然后根据上面的状态，将符合条件的制品从 <code>int</code> 仓库 Promote 到 <code>stage</code> 仓库，测试工程师进去 <code>stage</code> 仓库下去获取构建并进行测试。通过测试后，对制品添加相应的属性状态，比如在 Property 中添加 <code>manual.test.status=passed</code>。</p><p>之后发布流水线中去到 stage 仓库里去找满足所有条件的构建进行发布。</p><p><code>unit.test.status=passed</code><br><code>automated.test.status=passed</code><br><code>sonaqube.scan.status=passed</code><br><code>manual.test.status=passed</code></p><p>发布成功后，将构建从 <code>stage</code> 仓库 promote 到 <code>release</code> 仓库中，并添加属性 <code>release.status=released</code>，这样就完成了发布。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在软件交付中，质量可信、安全可信是评估版本可靠性的两个重要标准。在这个过程中，就像使用漏斗一样将构建通过层层筛选，从 <code>int</code> 仓库到 <code>stage</code> 仓库，最后到 <code>release</code> 仓库完成了制品的发布。通过 Artifactory 为制品管理的打造一个单一可信源，从而为软件的持续交付铺路。</p><h2 id="往期相关文章"><a href="#往期相关文章" class="headerlink" title="往期相关文章"></a>往期相关文章</h2><ul><li><a href="https://shenxianpeng.github.io/2019/11/Artifactory-install-and-upgrade/">初识 JFrog Artifactory</a></li><li><a href="https://shenxianpeng.github.io/2019/11/Artifactory-integrate-with-Jenkins/">Artifactory 与 Jenkins 集成</a></li><li><a href="https://shenxianpeng.github.io/2020/06/Java-net-SocketException-on-AIX/">解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JFrog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员自我修养之Git提交信息和分支创建规范</title>
      <link href="/2020/09/commit-messages-specification/"/>
      <url>/2020/09/commit-messages-specification/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要制定规范"><a href="#为什么要制定规范" class="headerlink" title="为什么要制定规范"></a>为什么要制定规范</h2><p>古话说，没有规矩不成方圆。在团队协作开发时，每个人提交代码时都会写 commit message，但如果没有规范，每个人都会有自己的书写风格，因此在翻看 git log 时经常看到的是五花八门，十分不利于阅读和维护。</p><p>通过下面两个例子来看看没规范和有规范的对比，以及有规范能带来哪些好处。</p><h3 id="提交信息-没规范-vs-有规范"><a href="#提交信息-没规范-vs-有规范" class="headerlink" title="提交信息 没规范 vs 有规范"></a>提交信息 没规范 vs 有规范</h3><p><img src="/2020/09/commit-messages-specification/bad-commit-message.png" alt="没有规范的 Git 提交信息"></p><p>从这个提交信息里你不知道他修改了什么，修改意图是什么。</p><span id="more"></span><p><img src="/2020/09/commit-messages-specification/angular-commit-message.png" alt="有规范的 Git 提交信息"></p><p>这是 Angular 的提交信息，它遵循了 <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a>，直译过来为常规提交。</p><p>这也是行业内使用最为广泛的 Git 提交信息规范，已经有不少的项目在使用，如果你的项目还没有制定 Git 提交信息规范，建议照搬或参考这个规范来制定。</p><p>对于一个团队，当很多人在一起合作开发一个项目的时候，预先制定好提交信息规范，对于项目的长远发展以及后续人员加入和维护都非常有帮助。</p><p>总结有以下几个好处：</p><ol><li>有助于他人更好的理解你的变更意图，更容易贡献&#x2F;修改代码。</li><li>结构化的提交信息有助于自动化脚本的识别和 CI&#x2F;CD。</li><li>提供自动化生成 <code>CHANGELOGs</code> 的能力。</li><li>最后，这也是体现了一个程序员的自我修养。</li></ol><h3 id="分支创建-没规范-vs-有规范"><a href="#分支创建-没规范-vs-有规范" class="headerlink" title="分支创建 没规范 vs 有规范"></a>分支创建 没规范 vs 有规范</h3><p>如果创建分支没有规范，不加以限制，很多分支会是这样的 <code>ABC-1234-Test</code>, <code>ABC-2345-demo</code>, <code>Hotfix-ABC-3456</code>, <code>Release-1.0</code>，甚至更糟。当分支很多的时候会显得混乱，并且不方便检索。</p><p>如果制定分支创建规范，比如上面的分支在创建时，通过 Hook 强制限制分支开头必须以类型开始，那么新创建的分支将会是这样的：<code>bugfix/ABC-1234</code>, <code>feature/ABC-2345</code>, <code>hotfix/ABC-3456</code>, <code>release/1.0</code> 这不但有助于检索，还方便他人通过类型了解分支用途，以及方便后续的 CI&#x2F;CD 流水线的开发。</p><h2 id="如何解决规范问题"><a href="#如何解决规范问题" class="headerlink" title="如何解决规范问题"></a>如何解决规范问题</h2><p>应该从两方面着手：</p><ul><li>首先，为团队制定提交信息以及创建分支规范，让团队成员了解规范并遵守。</li><li>然后，在提交代码或创建分支时，通过设置的 Git Hook 将不规范的禁止提交到远程仓库。</li></ul><h3 id="制定Git提交信息规范"><a href="#制定Git提交信息规范" class="headerlink" title="制定Git提交信息规范"></a>制定Git提交信息规范</h3><p>制定合理的规范，最有效的方法是参考软件行业里是否有通用的规范。目前行业最为广泛规范是 <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits</a> 很多项目包括 Auglar 也在使用。</p><p>可以根据以上规范制定适合自己团队的规范，例如：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">JIRA-1234 feat: support for async execution</span><br><span class="line"></span><br><span class="line">^-------^ ^--^: ^-------------------------^</span><br><span class="line">|         |     |</span><br><span class="line">|         |     +--&gt; Summary in present tense.</span><br><span class="line">|         |</span><br><span class="line">|         +--&gt; Type: feat, fix, docs, style, refactor, perf, test or chore.</span><br><span class="line">|</span><br><span class="line">+--&gt; Jira ticket number</span><br><span class="line"></span><br><span class="line">Type Must be one of the following:</span><br><span class="line"></span><br><span class="line">    feat: A new feature</span><br><span class="line">    fix: A bug fix</span><br><span class="line">    docs: Documentation only changes</span><br><span class="line">    style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class="line">    refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class="line">    perf: A code change that improves performance</span><br><span class="line">    test: Adding missing or correcting existing tests</span><br><span class="line">    chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure><h2 id="设置-Git-Hooks"><a href="#设置-Git-Hooks" class="headerlink" title="设置 Git Hooks"></a>设置 Git Hooks</h2><p>这里以 Bitbuket 为例，其他 Git 工具比如 GitHub，Gitlab 都有类似的功能。</p><p>Bitbucket 使用的是 <a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket">Yet Another Commit Checker</a> 这个免费插件。</p><p>首先，开启 Yet Another Commit Checker。</p><p><img src="/2020/09/commit-messages-specification/git-hook.png" alt="开启 Yet Another Commit Checker"></p><p>然后逐一介绍 Yet Another Commit Checker 的一些常用的设置。</p><p><img src="/2020/09/commit-messages-specification/commit-checker.png" alt="Yet Another Commit Checker 插件的其他设置选项"></p><h3 id="1-开启-Require-Valid-JIRA-Issue-s"><a href="#1-开启-Require-Valid-JIRA-Issue-s" class="headerlink" title="1. 开启 Require Valid JIRA Issue(s)"></a>1. 开启 Require Valid JIRA Issue(s)</h3><p>开启这个功能，在提交信息的时通过 Hook 自动验证是否有 Jira 单号，单号是否存在。如果是否定的，提交失败。这样就强制在提交代码时 commit message 与 Jira 单号进行关联。</p><h3 id="2-Commit-Message-Regex"><a href="#2-Commit-Message-Regex" class="headerlink" title="2. Commit Message Regex"></a>2. Commit Message Regex</h3><p>比如设置一个这样简单的正则表达式 <code>[A-Z\-0-9]+ .*</code> ，这要求 Jira 单号必须以这种格式 <code>ABCD-1234</code> 开头，并且描述信息要与 Jira 单号之间留一个空格。</p><p>通过以上设置，就将提交信息限定为如下格式：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ABCD-1234 Balabala......</span><br></pre></td></tr></table></figure><p>再比如这个更为复杂的正则表达式，如下</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">^[A-Z-0-9]+ .*(?&lt;type&gt;chore|ci|docs|feat|fix|perf|refactor|revert|style|test|Bld|¯\\_\(ツ\)_\/¯)(?&lt;scope&gt;\(\w+\)?((?=:\s)|(?=!:\s)))?(?&lt;breaking&gt;!)?(?&lt;subject&gt;:\s.*)?|^(?&lt;merge&gt;Merge.* \w+)|^(?&lt;revert&gt;Revert.* \w+)</span><br></pre></td></tr></table></figure><p>这个正则表达式不但限制了开头必须以 JIRA 单号开始，中间有一个空格，还必须在描述信息里填写 type 类型，最后才是描述信息。另外还支持如果是如果是 Merge 或是 Revert 会产生其他的描述信息。</p><p>通过下面的测试用例来具体理解上述的正则表达式会产生什么样的提交信息规范限制。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 测试通过的用例</span><br><span class="line">NV-1234 chore: change build progress</span><br><span class="line">DT-123456 docs: update xdemo usage</span><br><span class="line">QA-123 ci: update jenkins automatic backup</span><br><span class="line">CC-1234 feat: new fucntional about sync</span><br><span class="line">Merge branch master into develop</span><br><span class="line">Reverted: Revert support feature &amp; bugfix branches build</span><br><span class="line">Merge pull request from develop to master</span><br><span class="line"></span><br><span class="line"># 测试不通过的用例</span><br><span class="line">NV-1234 build: update</span><br><span class="line">NV-1234 Chore: change progress</span><br><span class="line">DT-123456 Docs: update xdemo</span><br><span class="line">QA-123ci: update jenkins automatic backup</span><br><span class="line">CC-1234 Feat: new fucntional about sync</span><br><span class="line">DT-17734: 8.2.2 merge from CF1/2- Enhance PORT.STATUS</span><br><span class="line">DT-17636 fix AIX cord dump issue</span><br><span class="line">DT-18183 Fix the UDTHOME problem for secure telnet</span><br><span class="line">DT-18183 Add new condition to get UDTHOME</span><br><span class="line">DT-15567 code merge by Peter Shen.</span><br></pre></td></tr></table></figure><p>测试结果也可以在这里 <a href="https://regex101.com/r/5m0SIJ/10">https://regex101.com/r/5m0SIJ/10</a> 找到​。​</p><p>建议：如果你要在你的 Git 仓库里也要设置这样严格并且复杂的正则表达式，建议一定要经过充分的考虑和测试才把它正式放入你的 Git 仓库的 Hooks 设置中。</p><h3 id="3-Commit-Regex-Error"><a href="#3-Commit-Regex-Error" class="headerlink" title="3. Commit Regex Error"></a>3. Commit Regex Error</h3><p>这个设置是用来提示错误信息的。当团队成员在提交时，如果不符合规范提交失败了，会给出合理的提示信息，这有助于找到问题所在。比如提交失败了，会在命令行里看到如下信息：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Commit Message Specifications:</span><br><span class="line"></span><br><span class="line">&lt;Jira-ticket-number&gt; &lt;type&gt;: &lt;Description&gt;</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">ABC-1234 feat: Support for async execution</span><br><span class="line"></span><br><span class="line">1. Between Jira ticket number and type MUST has one space.</span><br><span class="line">2. Between type and description MUST has a colon and a space.</span><br><span class="line"></span><br><span class="line">Type MUST be one of the following and lowercase</span><br><span class="line"></span><br><span class="line">feat: A new feature</span><br><span class="line">fix: A bug fix</span><br><span class="line">docs: Documentation only changes</span><br><span class="line">style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class="line">refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class="line">perf: A code change that improves performance</span><br><span class="line">test: Adding missing or correcting existing tests</span><br><span class="line">chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure><p>根据这个描述信息，提交者就能很容易知道正确的规范是什么样子的，然后通过 <code>git commit --amend</code> 命令对自己最近一次提交信息做出修改。</p><h3 id="4-Branch-Name-Regex"><a href="#4-Branch-Name-Regex" class="headerlink" title="4. Branch Name Regex"></a>4. Branch Name Regex</h3><p>这个是对创建分支时做出的规范限制。在设置了相应的正则表达后，开发在创建分支时，只有符合正则表达式的条件才可以推送到远程仓库中。</p><p>例如这个创建分支的正则表达式 <code>^(bugfix|feature|release|hotfix).*|(master)|(.*-dev)</code></p><p>这里限制了所有的分支必须以 <code>bugfix</code>, <code>feature</code>, <code>release</code>, <code>hotfix</code> 开头或是也可以这样的 <code>v1.0-dev</code> 这种类。</p><p>你可以根据上面的正则表达式来设计属于自己项目的分支正则表达式。</p><h3 id="5-Branch-Name-Regex-Error"><a href="#5-Branch-Name-Regex-Error" class="headerlink" title="5. Branch Name Regex Error"></a>5. Branch Name Regex Error</h3><p>这个设置是提示推送不规范的分支时的错误信息。预先设置好相应的错误提示信息，有助于用户快速找到推送失败的原因。比如下面的错误信息：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Branches must begin with these types: bugfix/ feature/ release/ hotfix/</span><br></pre></td></tr></table></figure><p>告诉用户，分支必须以 <code>bugfix/</code> <code>feature/</code> <code>release/</code> <code>hotfix/</code> 开头。</p><h3 id="6-其他设置"><a href="#6-其他设置" class="headerlink" title="6. 其他设置"></a>6. 其他设置</h3><p>另外还有一些其他设置，比如关联的 Jira 单子必须处于什么样的状态。这个可以防止已经是关闭状态 Jira 单子，开发还往上面偷偷的提交代码，这样可能导致未经测试的代码进入仓库。</p><p>还有 Require Matching Committer Email 和 Require Matching Committer Name 来限定开发者必须配置好与登录用户名和邮箱相匹配的用户名和邮箱，来规范提交信息里显示的用户名和邮箱，也方便进行 Git 信息的统计等后续数据的收集。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p>Conventional Commits <a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/</a> <br>Angular Commit Guidelines: <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits</a> <br>Projects Using Conventional Commits: <a href="https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits">https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits</a> <br>Yet Another Commit Checker: <a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket">https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Branch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 GitHub 上发布一个 Python 项目需要注意哪些</title>
      <link href="/2020/09/how-to-release-python-project/"/>
      <url>/2020/09/how-to-release-python-project/</url>
      
        <content type="html"><![CDATA[<p>本篇介绍个人或企业在 GitHub 上发布一个 Python 项目需要了解和注意哪些内容</p><ol><li><a href="#%E9%85%8D%E7%BD%AEsetup.py">如何配置setup.py</a></li><li><a href="#%E5%8F%91%E5%B8%83%E5%88%B0PyPI">如何发布到PyPI</a></li><li><a href="#%E5%85%B3%E4%BA%8Epydoc">生成pydoc</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E5%8F%B7">版本号的选择</a></li><li><a href="#%E9%80%89%E6%8B%A9License">License的选择</a></li></ol><h2 id="配置setup-py"><a href="#配置setup-py" class="headerlink" title="配置setup.py"></a>配置setup.py</h2><p>打包和发布一项都是通过准备一个 <code>setup.py</code> 文件来完成的。假设你的项目目录结构如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">demo</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── MANIFEST.<span class="keyword">in</span> <span class="comment"># 打包时，用来定制化生成 `dist/*.tar.gz` 里的内容</span></span><br><span class="line">├── demo</span><br><span class="line">│   └── __init__.py</span><br><span class="line">├── setup.py</span><br><span class="line">├── tests</span><br><span class="line">│   └── __init__.py</span><br><span class="line">│   └── __pycache__/</span><br><span class="line">└── docs</span><br></pre></td></tr></table></figure><p>在使用打包命令 <code>python setup.py sdist bdist_wheel</code>，将会生成在 dist 目录下生成两个文件 <code>demo-1.0.0-py3-none-any.whl</code> 和 <code>demo-1.0.0.tar.gz</code></p><ul><li><p><code>.whl</code> 文件是用于执行 <code>pip install dist/demo-1.0.0-py3-none-any.whl</code> 将其安装到 <code>...\Python38\Lib\site-packages\demo</code> 目录时使用的文件。</p></li><li><p><code>.tar.gz</code> 是打包后的源代码的存档文件。而 <code>MANIFEST.in</code> 则是用来控制这个文件里到底要有哪些内容。</p></li></ul><span id="more"></span><p>下面例子是如何使用 <code>MANIFEST.in</code> 来定制化生成 <code>dist/*.tar.gz</code> 里的内容。<code>MANIFEST.in</code> 文件内容如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">include LICENSE</span><br><span class="line">include README.md</span><br><span class="line">include MANIFEST.<span class="keyword">in</span></span><br><span class="line">graft demo</span><br><span class="line">graft tests</span><br><span class="line">graft docs</span><br><span class="line"><span class="keyword">global</span>-exclude __pycache__</span><br><span class="line"><span class="keyword">global</span>-exclude *.log</span><br><span class="line"><span class="keyword">global</span>-exclude *.pyc</span><br></pre></td></tr></table></figure><p>根据以上文件内容，在使用命令 <code>python setup.py sdist bdist_wheel</code> 生成 <code>demo-1.0.0.tar.gz</code> 文件时会包含 <code>LICENSE</code>, <code>README.md</code>, <code>MANIFEST.in</code> 这三个文件，并且还会包含 <code>demo</code>, <code>tests</code>, <code>docs</code> 三个目录下的所有文件，最后排除掉所有的 <code>__pycache__</code>, <code>*.log</code>, <code>*.pyc</code> 文件。</p><p>更多关于  <code>MANIFEST.in</code> 文件的语法请参看 <a href="https://packaging.python.org/guides/using-manifest-in/">https://packaging.python.org/guides/using-manifest-in/</a></p><blockquote><p>官方有详细的示例和文档 <a href="https://packaging.python.org/tutorials/packaging-projects/">https://packaging.python.org/tutorials/packaging-projects/</a></p><p>Python sample 项目供你参考 <a href="https://github.com/pypa/sampleproject">https://github.com/pypa/sampleproject</a></p></blockquote><p>攒点耐心将上面的链接看完，就完全满足一般项目的发布要求了。</p><h2 id="发布到PyPI"><a href="#发布到PyPI" class="headerlink" title="发布到PyPI"></a>发布到PyPI</h2><p>使用 Python 大家都知道可以通过以下命令来下载你要是使用的外部库，Python 有着大量的第三方库，将开源项目发布到 PyPI 上方便用户使用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install xxxx</span><br></pre></td></tr></table></figure><h3 id="什么是-PyPI"><a href="#什么是-PyPI" class="headerlink" title="什么是 PyPI"></a>什么是 PyPI</h3><p>PyPI 是 The Python Package Index 的缩写，意思是 Python 包索引仓库，用来查找、安装和发布 Python 包。</p><p>PyPI 有两个环境</p><ul><li>测试环境 <a href="https://test.pypi.org/">TestPyPI</a></li><li>正式环境 <a href="https://pypi.org/">PyPI</a></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>如果想熟悉 PyPI 发布工具和发布流程可以使用测试环境 <a href="https://test.pypi.org/">TestPyPI</a></li><li>如果已经熟悉了 PyPI 的发布工具和流程可以直接使用正式环境 <a href="https://pypi.org/">PyPI</a></li><li>TestPyPI 和 PyPI 需要单独注册，即在正式环境注册了，如果去使用测试环境也同样需要注册。注意：同一个账号不能在 PyPI 和 TestPyPI 同时注册。</li></ol><p>假设你的项目已经完成了，准备要发布到 PyPI 了，执行下面的命令，就可以将项目发布到 PyPI 上了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> dist/*</span><br><span class="line"><span class="comment"># 生成代码存档 .tar.gz 文件和构建文件 .whl 文件</span></span><br><span class="line">python setup.py sdist bdist_wheel</span><br><span class="line"><span class="comment"># 如果发布到TestPyPI使用以下命令</span></span><br><span class="line">twine upload --repository testpypi dist/*</span><br><span class="line"><span class="comment"># 如果发布到PyPI使用以下命令</span></span><br><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure><h2 id="关于pydoc"><a href="#关于pydoc" class="headerlink" title="关于pydoc"></a>关于pydoc</h2><p>Python 内置了 doc 的功能，叫 <code>pydoc</code>。执行 <code>python -m pydoc</code> 可以看到它有哪些选项和功能。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> docs</span><br><span class="line">python -m pydoc -w ..\   <span class="comment"># 生成全部文档</span></span><br></pre></td></tr></table></figure><p>执行 <code>python -m pydoc -b</code> 可以在本地立即启动一个 web 页面来访问你 <code>...\Python38\Lib\site-packages\</code> 目录下所有 Libraries 文档。</p><p><img src="/2020/09/how-to-release-python-project/pydoc-es.png" alt="以 elasticsearch 文档为例"></p><p>这些本地的 web 文档如何在外网进行访问？可以通过 GitHub 有内置的 GitHub Pages 功能，很容易提供一个在线网址。</p><p>打开你的 GitHub python 项目设置选项 -&gt; 找到 GitHub Pages -&gt; Source 选择你的分支和路径，保存后就立刻拥有了一个网址。例如：</p><ul><li><a href="https://xxxxx.github.io/demo/">https://xxxxx.github.io/demo/</a> 是你的项目主页，显示是 README.md 信息</li><li><a href="https://xxxxx.github.io/demo/docs/demo.html">https://xxxxx.github.io/demo/docs/demo.html</a> 是你的项目的 pydoc 文档</li></ul><h2 id="关于版本号"><a href="#关于版本号" class="headerlink" title="关于版本号"></a>关于版本号</h2><p>另外如果是正式版本，在发布还需要注意版本号的选择。</p><ul><li>如果是功能简单，完成度也不高，建议从 0.0.1 版本开始。</li><li>如果是功能完善，且完成度很高，那么可以从 1.0.0 版本开始。</li></ul><p>比如一个项目从准备发布到正式发布有四个阶段：Alpha, Beta, 候选发布以及正式发布。假如正式发布的版本号是 1.1.0 版本，根据以下的版本标识的规范：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">X.YaN   # Alpha release</span><br><span class="line">X.YbN   # Beta release</span><br><span class="line">X.YrcN  # Release Candidate</span><br><span class="line">X.Y     # Final release</span><br></pre></td></tr></table></figure><p>得到 Alpha, Beta, 候选发布及正式发布版本分别如下：</p><p>Alpha release 版本号是 <code>1.1.0a1, 1.1.0a1, 1.1.0aN...</code><br>Beta release  版本号是 <code>1.1.0b1, 1.1.0b1, 1.1.0bN...</code><br>Release Candidate 版本号是 <code>1.1.0rc1, 1.1.0rc2, 1.1.0rcN...</code><br>Final release 版本号 <code>1.1.0, 1.1.1, 1.1.N...</code></p><blockquote><p>Python 官方的<a href="https://www.python.org/dev/peps/pep-0440/">版本标识和依赖规范文档</a></p></blockquote><h2 id="选择License"><a href="#选择License" class="headerlink" title="选择License"></a>选择License</h2><p>企业级的项目 License 一般由公司的法律团队来提供，发布者只需拿到 License 文件做一些格式化工作（比如将 license.txt 文件格式化为每行 70~80 个字符）。</p><p>如果是个人项目或是想了解开源许可相关的介绍，常见的软件开源许可证（以下许可证是按条件数量排序的）</p><ul><li>GNU AGPLv3</li><li>GNU GPLv3</li><li>GNU LGPLv3</li><li>Mozilla Public License 2.0</li><li>Apache License 2.0</li><li>MIT License</li><li>Boost Software License 1.0</li><li>The Unlicense</li></ul><p>这里有一篇关于《<a href="https://mp.weixin.qq.com/s/CjeWol3BdGkmGZi-zMnDkQ">Github仓库如何选择开源许可证</a>》文章供参考。</p><blockquote><p>如何选项 License <a href="https://choosealicense.com/licenses/">https://choosealicense.com/licenses\</a><br>如何选项 License GitHub 仓库 <a href="https://github.com/github/choosealicense.com/">https://github.com/github/choosealicense.com\</a><br>如何选项 License 附录 <a href="https://choosealicense.com/appendix">https://choosealicense.com/appendix</a> \</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Release </tag>
            
            <tag> PyPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Python pip install and versioning</title>
      <link href="/2020/08/about-pip-install-and-versioning/"/>
      <url>/2020/08/about-pip-install-and-versioning/</url>
      
        <content type="html"><![CDATA[<h2 id="Backgroup"><a href="#Backgroup" class="headerlink" title="Backgroup"></a>Backgroup</h2><p>If you want to release python project on PyPI, you must need to know about PyPI usage characteristics, then I did some test about pip install command.</p><p>For example: I have a Python project called <code>demo-pip</code>. and beta release would like <code>1.1.0.xxxx</code>, offical release version is <code>1.1.0</code> to see if could success upgrade when using <code>pip</code> command.</p><p>Base on the below test results, I summarized as follows:</p><ol><li>   Install a specific version of demo-pip from PyPI, with <code>--upgrade</code> option or not, they’ll all both success.</li><li>   Install the latest package version of demo-pip from PyPI that version is large than the locally installed package version, with <code>--upgrade</code> option installs successfully. without <code>--upgrade</code> option install failed.</li><li>   Install the latest package version of demo-pip from PyPI that version is less than the locally installed package version, with <code>--upgrade</code> option or not, install failed.</li><li>   1.1.0.xxxx version naming is OK, but when the beta version is larger than 1.1.0, for example, the beta version is 1.1.0.1000, pip install with <code>--upgrade</code> not work when our official release version is 1.1.0.<br>a.One option is the official release version start from 1.1.0.1000, beta version starts from 1.1.0.0001, 1.1.0.0002… Or the beta version should be less than 1.1.0, maybe 1.0.0.xxxx<br>b.Another option is follow up <a href="https://www.python.org/dev/peps/pep-0440/">python official versioning</a> that is the best practice, then the beta release version will be 1.1.b1, 1.1.b2, 1.1.bN… (it passed No.5 test below)</li></ol><h2 id="My-Test-Case"><a href="#My-Test-Case" class="headerlink" title="My Test Case"></a>My Test Case</h2><span id="more"></span><table><thead><tr><th>&lt;No.&gt;</th><th>&lt;Test Case Steps&gt;</th><th>&lt;Test Output&gt;</th><th>&lt;Test Results&gt;</th></tr></thead><tbody><tr><td>1</td><td>1.build and install demo-pip-1.0.5<br>2.install from PyPI. on PyPI, the latest version is 1.0.4</td><td>C:\workspace\demo-pip&gt;pip install dist\demo-pip-1.0.5-py3-none-any.whl<br>Processing c:\workspace\demo-pip\dist\demo-pip-1.0.5-py3-none-any.whl<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0.4<br>    Uninstalling demo-pip-1.0.4:<br>      Successfully uninstalled demo-pip-1.0.4<br>Successfully installed demo-pip-1.0.5<br> <br>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> –upgrade demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Requirement already up-to-date: demo-pip in c:\program files\python38\lib\site-packages (1.0.5)</td><td>install with <code>--upgrade</code> option failed when the installed version number is less than the current version number</td></tr><tr><td>2</td><td>1.rebuild and install demo-pip-1.0.3<br>2.install from PyPI again with <code>--upgrade</code> option</td><td>C:\workspace\demo-pip&gt;pip install dist\demo-pip-1.0.3-py3-none-any.whl<br>Processing c:\workspace\demo-pip\dist\demo-pip-1.0.3-py3-none-any.whl<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0.5<br>    Uninstalling demo-pip-1.0.5:<br>      Successfully uninstalled demo-pip-1.0.5<br>Successfully installed demo-pip-1.0.3<br> <br>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> –upgrade demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Collecting demo-pip<br>  Downloading <a href="https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl">https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl</a> (51 kB)<br>     |████████████████████████████████| 51 kB 362 kB&#x2F;s<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0.3<br>    Uninstalling demo-pip-1.0.3:<br>      Successfully uninstalled demo-pip-1.0.3<br>Successfully installed demo-pip-1.0.4</td><td>install with <code>--upgrade</code> option success from PyPI when install version number is larger than the current version number</td></tr><tr><td>3</td><td>1. create a new build demo-pip-1.0.3.1000<br>2. install demo-pip-1.0.3.1000 with <code>--upgrade</code> option<br>3. install demo-pip-1.0.3.1000, without <code>--upgrade</code> option</td><td>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> –upgrade demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Collecting demo-pip<br>  Downloading <a href="https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl">https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl</a> (51 kB)<br>     |████████████████████████████████| 51 kB 83 kB&#x2F;s<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0.3.1000<br>    Uninstalling demo-pip-1.0.3.1000:<br>      Successfully uninstalled demo-pip-1.0.3.1000<br>Successfully installed demo-pip-1.0.4<br> <br>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Requirement already satisfied: demo-pip in c:\program files\python38\lib\site-packages (1.0.3.1000)</td><td>1. install with <code>--upgrade</code> option success<br> 2. install without <code>--upgrade</code> option failed</td></tr><tr><td>4</td><td>1. create a new build demo-pip-1.0.4.1000<br>2. install demo-pip-1.0.4.1000 with <code>--upgrade</code> option.<br>3. install specific version of demo-pip</td><td>C:\workspace\demo-pip&gt;pip install dist\demo-pip-1.0.4.1000-py3-none-any.whl<br>Processing c:\workspace\demo-pip\dist\demo-pip-1.0.4.1000-py3-none-any.whl<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0.4<br>    Uninstalling demo-pip-1.0.4:<br>      Successfully uninstalled demo-pip-1.0.4<br>Successfully installed demo-pip-1.0.4.1000<br> <br>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> –upgrade demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Requirement already up-to-date: demo-pip in c:\program files\python38\lib\site-packages (1.0.4.1000)<br> <br>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a>  demo-pip&#x3D;&#x3D;1.0.4<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Collecting demo-pip&#x3D;&#x3D;1.0.4<br>  Downloading <a href="https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl">https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl</a> (51 kB)<br>     |████████████████████████████████| 51 kB 362 kB&#x2F;s<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0.4.1000<br>    Uninstalling demo-pip-1.0.4.1000:<br>      Successfully uninstalled demo-pip-1.0.4.1000<br>Successfully installed demo-pip-1.0</td><td>Install failed when the install version number is less than the currently installed version number<br> <br>if install a specific version of demo-pip with <code>--upgrade</code> option or not. will both works.</td></tr><tr><td>5</td><td>1. Follow up python official version naming for beta-version, create a new build demo-pip-1.0.b1<br>2. install from PyPi without <code>--upgrade</code> option<br>3. install from PyPi with <code>--upgrade</code> option</td><td>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Requirement already satisfied: demo-pip in c:\program files\python38\lib\site-packages (1.0b1)<br> <br>C:\workspace\demo-pip&gt;pip install -i <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a> –upgrade demo-pip<br>Looking in indexes: <a href="https://test.pypi.org/simple/">https://test.pypi.org/simple/</a><br>Collecting demo-pip<br>  Downloading <a href="https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl">https://test-files.pythonhosted.org/packages/41/c5/fe16fdc482927b2831c36f96d6e5a1c5b7a2a676ddc4c00c67a9ccf644e9/demo-pip-1.0.4-py3-none-any.whl</a> (51 kB)<br>     |████████████████████████████████| 51 kB 362 kB&#x2F;s<br>Installing collected packages: demo-pip<br>  Attempting uninstall: demo-pip<br>    Found existing installation: demo-pip 1.0b1<br>    Uninstalling demo-pip-1.0b1:<br>      Successfully uninstalled demo-pip-1.0b1<br>Successfully installed demo-pip-1.0.4</td><td>install successful with <code>--upgrade</code> option<br>so it means 1.0.b1 version number is less than 1.0.4 version</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Update Jira server account avatar with rest API</title>
      <link href="/2020/08/update-jira-server-account-avatar-with-rest-api/"/>
      <url>/2020/08/update-jira-server-account-avatar-with-rest-api/</url>
      
        <content type="html"><![CDATA[<h2 id="Backgroud"><a href="#Backgroud" class="headerlink" title="Backgroud"></a>Backgroud</h2><p>When you are using a server account for CI&#x2F;CD, if you want to make the server account avatar to looks professional on Jira update but the server account may not allowed to log to Jira, so you can not update the avatar though GUI, you could use Jira REST API to do this.</p><p>I assume you have an account called <code>robot</code>, here are the examples of how to update though REST API.</p><h2 id="Example-in-Python"><a href="#Example-in-Python" class="headerlink" title="Example in Python"></a>Example in Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"></span><br><span class="line">conn = http.client.HTTPSConnection(<span class="string">&quot;jira.your-company.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&#123;\r\n\t\&quot;id\&quot;: \&quot;24880\&quot;,\r\n\t\&quot;isSelected\&quot;: false,\r\n\t\&quot;isSystemAvatar\&quot;: true,\r\n\t\&quot;urls\&quot;: &#123;\r\n\t\t\&quot;16x16\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?size=xsmall&amp;avatarId=24880\&quot;,\r\n\t\t\&quot;24x24\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?size=small&amp;avatarId=24880\&quot;,\r\n\t\t\&quot;32x32\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?size=medium&amp;avatarId=24880\&quot;,\r\n\t\t\&quot;48x48\&quot;: \&quot;https://jira.your-company.com/secure/useravatar?avatarId=24880\&quot;&#125;\r\n&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;authorization&#x27;</span>: <span class="string">&quot;Basic Ymx3bXY6SzhNcnk5ZGI=&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;postman-token&#x27;</span>: <span class="string">&quot;ecfc3260-9c9f-e80c-e3e8-d413f48dfbf4&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">conn.request(<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;/rest/api/latest/user/avatar?username=robot&quot;</span>, payload, headers)</span><br><span class="line"></span><br><span class="line">res = conn.getresponse()</span><br><span class="line">data = res.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="Example-in-Postman"><a href="#Example-in-Postman" class="headerlink" title="Example in Postman"></a>Example in Postman</h2><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL and Method is PUT</span></span><br><span class="line">https://jira.your-company.com/rest/api/latest/user/avatar?username=robot</span><br><span class="line"></span><br><span class="line"><span class="comment"># Authorization</span></span><br><span class="line"><span class="comment"># Type: Basic Auth</span></span><br><span class="line"><span class="comment"># Username: server-account-username</span></span><br><span class="line"><span class="comment"># Password: server-accoutn-password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Body</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="string">&quot;24880&quot;</span>,</span><br><span class="line"><span class="string">&quot;isSelected&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;isSystemAvatar&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;urls&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;16x16&quot;</span>: <span class="string">&quot;https://jira.your-company.com/secure/useravatar?size=xsmall&amp;avatarId=24880&quot;</span>,</span><br><span class="line"><span class="string">&quot;24x24&quot;</span>: <span class="string">&quot;https://jira.your-company.com/secure/useravatar?size=small&amp;avatarId=24880&quot;</span>,</span><br><span class="line"><span class="string">&quot;32x32&quot;</span>: <span class="string">&quot;https://jira.your-company.com/secure/useravatar?size=medium&amp;avatarId=24880&quot;</span>,</span><br><span class="line"><span class="string">&quot;48x48&quot;</span>: <span class="string">&quot;https://jira.your-company.com/secure/useravatar?avatarId=24880&quot;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-find-the-avatar-id"><a href="#How-to-find-the-avatar-id" class="headerlink" title="How to find the avatar id"></a>How to find the avatar id</h2><p>You replace other avatar ids you like. Here is how to find you avatar id you want <img src="/2020/08/update-jira-server-account-avatar-with-rest-api/find-avatar-id.png" alt="find avatar id"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fixed &quot;Remote session was disconnected because there are no Remote Desktop client access licenses available&quot;</title>
      <link href="/2020/08/rdp-problem/"/>
      <url>/2020/08/rdp-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Sometimes my Windows server 2012 R2 has RDP connect problem below:</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">The remote session was disconnected because there are no Remote Desktop client access licenses available for this computer.</span><br><span class="line">Please contact the server administrator.</span><br></pre></td></tr></table></figure><p><img src="/2020/08/rdp-problem/rdp-failed.png" alt="RDP connect problem"></p><span id="more"></span><h2 id="How-to-Fix"><a href="#How-to-Fix" class="headerlink" title="How to Fix"></a>How to Fix</h2><p>You could log in to the vSphere Web Client if you have via console or have some other way to log in to the machine.</p><ol><li><p>Open regedit.exe and navigate to</p><p> <img src="/2020/08/rdp-problem/regedit.jpg" alt="Regedit"></p></li><li><p>Search and Delete <code>LicensingGracePeriod</code> and <code>LicensingGracePeriodExpirationWarningDays</code></p></li><li><p>If deletion failed, this failure message appears <code>unable to delete all specified values</code>, you need change permission. Refer to the related <a href="https://www.youtube.com/results?search_query=unable+to+delete+all+specified+values">videos</a> on YouTuBe.</p></li><li><p>Reboot the system if it is still doesn’t work.</p></li></ol><p>In my case, every 90 to 120 days, the RDP end of grace period shows up, this is not the final solution. please let me know if you have a better solution.</p><blockquote><p>Finally, thanks to Bill K. shared with me the above solution.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> RDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 generic-webhook-trigger 插件实时获取 Bitbucket Repository Events</title>
      <link href="/2020/08/bitbucket-pull-request-event/"/>
      <url>/2020/08/bitbucket-pull-request-event/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。</p><p>使用过 Jenkins Multi-branch pipeline Job 的用户知道，这个 Job 类型的环境变量中可以得到 Pull Request 的相关信息如下</p><p><img src="/2020/08/bitbucket-pull-request-event/pull-request-env.png" alt="Multi-branch pipeline Job 环境变量"></p><p>为了获取这个变量需要创建这种类型的 Job，并且可能需要 clone 该仓库的代码，有点杀鸡宰牛的意思，看起来并不是一个特别恰当的办法。</p><p>如何通过创建一个普通的 Jenkins Job 就能实时获取 Bitbucket 仓库以及 Pull Request 事件呢？通过以下功能和插件可以实现。</p><span id="more"></span><ol><li>配置 Bitucket 的 Webhook</li><li>通过 Jenkins generic-webhook-trigger 插件接收 Webhook 的 Event 事件</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="设置-Bitbucket-Webhook"><a href="#设置-Bitbucket-Webhook" class="headerlink" title="设置 Bitbucket Webhook"></a>设置 Bitbucket Webhook</h3><p>在需要监听的 Bitbucket 仓库中创建一个 webhook，如下：</p><ul><li>Name: <code>test-demo</code></li><li>URL: <code>http://JENKINS_URL/generic-webhook-trigger/invoke?token=test-demo</code></li></ul><p><img src="/2020/08/bitbucket-pull-request-event/webhook.png" alt="创建一个 webhook"></p><p>备注：Bitbucket 中还有一个另外一个设置项，根据我的测试，该设置项 <strong>Post Webhooks</strong> 与上面的 <strong>Webhooks</strong> 都能实现本文要实现的功能。</p><h3 id="2-配置-Jenkins-Job"><a href="#2-配置-Jenkins-Job" class="headerlink" title="2. 配置 Jenkins Job"></a>2. 配置 Jenkins Job</h3><p><img src="/2020/08/bitbucket-pull-request-event/generic-config.png" alt="配置 Jenkins: 获取 Pull Request ID"></p><p>想获取其他 Event 信息，比如 PR title, commit 等，请参考这个链接 <a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/gwt/bdd/bitbucket-server/bitbucket-server-pull-request.feature">bitbucket-server-pull-request.feature</a>，按照上面的设置即可。</p><p><img src="/2020/08/bitbucket-pull-request-event/generic-config-token.png" alt="配置 Jenkins: token"></p><p>这里的 token 值 <code>test-demo</code> 可以任意起名，但要与 Bitbucket event URL 中的 token 保持一致。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><p>在 Jenkins Job pipeline 里添加了这个代码片段 <code>echo pr_id is $&#123;pr_id&#125;</code> 用来检查输出 Pull Request ID 是否如预期。</p></li><li><p>然后在配置好的 Bitbucket 仓库下面创建一个 Pull Request</p></li><li><p>Jenkins Job 被 Pull Request Open 事件自动触发并执行了</p><p> <img src="/2020/08/bitbucket-pull-request-event/auto-trigger-jenkins.png" alt="Jenkins 通过事件别自动执行"></p></li><li><p>通过 Jenkins 的输出日志看到成功获取到了这个 Pull Request ID 值</p><p> <img src="/2020/08/bitbucket-pull-request-event/pull-request-id.png" alt="获取到了 Pull Request ID"></p></li></ol><h2 id="使用扩展"><a href="#使用扩展" class="headerlink" title="使用扩展"></a>使用扩展</h2><p>假如你有个程序，可以通过传入的 Pull Request ID 并借助 Bitbucket REST API 来获取并分析指定 Pull Request 的内容的。比如获取相关文件的历史记录，从而知道这些文件谁修改的最多以及这次修改涉及到了哪些 Jira 单号，从而做一些 Review 或是执行回归测试的推荐等等。</p><p>有了这个 PR ID 就可以通过 Jenkins 来自动触发去执行你程序了。</p><p>以上的这种方法适合不想或是不知道如何监听 Git 服务器（Bitbucket、GitHub 或是 GitLab 等）事件而需要要单独创建一个服务而准备的。如果你有什么很好的实践，期待你的留言分享。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Annual work summary from 2019.03 - 2020.07</title>
      <link href="/2020/07/annual-work-summary/"/>
      <url>/2020/07/annual-work-summary/</url>
      
        <content type="html"><![CDATA[<p>Summarize what did I do from 2019.03 to 2020.07 when I became a Build Release&#x2F;DevOps engineer.</p><h2 id="Build-automation"><a href="#Build-automation" class="headerlink" title="Build automation"></a>Build automation</h2><ul><li>Support all server windows platform build manual to auto.</li><li>Support clients build from manual to auto.</li><li>Switch Linux&#x2F;Unix build from Bamboo to Jenkins.</li><li>Support all platforms branches&#x2F;Pull Request build.</li><li>Provide auto-build as self-service for a developer, no need to involve build engineer, they could build themselves.</li></ul><h2 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a>Integration</h2><ul><li><p>Integration with Jenkins</p><ul><li>Self-service installation.</li><li>Blackduck, Polaris integration.</li><li>Git stats, analyze Bitbucket data with Elastic stack.</li><li>Monitor legacy build machines status.</li><li>Product escrow, sync xdemo, provide NFS and SYNC mvopensrc, update Bitbucket Jenkins build status, etc.</li></ul></li><li><p>Integration with JFrog Ariifactory</p><ul><li>Establish deploy strategy and directory structure organization.</li><li>Handle artifacts(build, etc) with different maturity.</li></ul></li></ul><h2 id="Infrastructure-management"><a href="#Infrastructure-management" class="headerlink" title="Infrastructure management"></a>Infrastructure management</h2><ul><li>Manage Jenkins for setting, update and backup.</li><li>Ariifactory artifacts cleanup, retention, backup.</li><li>Git branches&#x2F;hooks management.</li><li>VMs tracking, management build machines.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 执行 Shell 如果返回值不为0，作业(Job)停止并失败怎么办？</title>
      <link href="/2020/07/jenkins-tips-3/"/>
      <url>/2020/07/jenkins-tips-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 3》—— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用 Jenkins pipeline 时，如果 Shell 的返回值不为零（也就是 Shell 命令执行时有错误），Jenkins Job 默认会标记当前的 stage 为失败。因此整个 Job 也会失败。</p><p>在有些时候我们希望 Shell 虽然执行失败返回的不为零，但希望Jenkins Job 在执行成功后，要显示成功状态。</p><span id="more"></span><p>例如：通过 Shell 命令列出以 <code>fail-list-</code> 开头的文件，如果存在则通知用户，如果不存在则不通知用户。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a fail-list-*</span><br></pre></td></tr></table></figure><p>默认情况是执行如上命令导致了整个 Job 失败。</p><p><img src="/2020/07/jenkins-tips-3/error.png" alt="失败 log"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过一番调查，使用以下代码片段解决了如上问题。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&quot;Send notification&quot;</span>) &#123;</span><br><span class="line">  steps &#123;</span><br><span class="line">    script &#123;</span><br><span class="line">      <span class="type">def</span> <span class="variable">fileExist</span> <span class="operator">=</span> sh script: <span class="string">&quot;ls -a fail-list-* &gt; /dev/null 2&gt;&amp;1&quot;</span>, returnStatus: <span class="literal">true</span></span><br><span class="line">      <span class="title function_">if</span> <span class="params">( fileExist == <span class="number">0</span> )</span> &#123;</span><br><span class="line">        <span class="comment">// send email to user</span></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// if not found fail-list-* file, make build status success.</span></span><br><span class="line">        currentBuild.result = <span class="string">&#x27;SUCCESS&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在执行 Shell 时，添加了 <code>returnStatus: true</code>。这是将状态码返回并保存起来，然后与 0 进行比较。</p><p>如果不等于 0，如果不添加 <code>currentBuild.result = &#39;SUCCESS&#39;</code>，Jenkins 的整个 Job 还是会标记为失败状态。添加后，人为的忽略错误，将 Job 状态置为成功。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix &quot;.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service&quot;</title>
      <link href="/2020/07/jenkins-windows-agent-connect-problem/"/>
      <url>/2020/07/jenkins-windows-agent-connect-problem/</url>
      
        <content type="html"><![CDATA[<p>When I upgrade Jenkins 2.176.3 to Jenkins 2.235.1, my Windows agent can not connect with master successfully and outcome this warning message “.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service”.</p><span id="more"></span><p>It means I need to upgrade my Windows agent .NET Framework. Here are steps about how to upgrade .NET Framework to version 3.5.</p><h2 id="Install-NET-Framework-3-5"><a href="#Install-NET-Framework-3-5" class="headerlink" title="Install .NET Framework 3.5"></a>Install .NET Framework 3.5</h2><ol><li><p>Open Programs and Features</p><p><img src="/2020/07/jenkins-windows-agent-connect-problem/1.png" alt="Programs and Features"></p></li><li><p>Select .NET Framework 3.5 Features (In my screenshot, it had already installed)</p><p> <img src="/2020/07/jenkins-windows-agent-connect-problem/2.png" alt="Features"></p></li></ol><p>Then try to reconnect the Jenkins agent, then it should back to work.</p><h2 id="Install-Jenkins-agent-service"><a href="#Install-Jenkins-agent-service" class="headerlink" title="Install Jenkins agent service"></a>Install Jenkins agent service</h2><p>If you can not found a <code>Jenkins agent</code> like me,</p><p><img src="/2020/07/jenkins-windows-agent-connect-problem/4.png" alt="Jenkins agent service"></p><p>You can try these steps to install <code>Jenkins agent</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install Jenkins agent service</span></span><br><span class="line"><span class="built_in">cd</span> c:\\jenkins</span><br><span class="line">.\jenkins-agent.exe install</span><br><span class="line">net start jenkinsslave-C__agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># unstall Jenkins agent service</span></span><br><span class="line">sc delete jenkinsslave-C__agent</span><br></pre></td></tr></table></figure><h2 id="Manual-install-NET-Framework-3-5"><a href="#Manual-install-NET-Framework-3-5" class="headerlink" title="Manual install .NET Framework 3.5"></a>Manual install .NET Framework 3.5</h2><p>Btw, if you could not install .NET Framework 3.5 successfully. you can try to install manually by this step</p><ol><li><p>Manually download <a href="https://androidfilehost.com/?fid=1322778262904003837">microsoft-windows-netfx3-ondemand-package.cab</a></p></li><li><p>Specify the path like below to install(note: the path is the directory where the file located)</p><p> <img src="/2020/07/jenkins-windows-agent-connect-problem/3.png" alt="microsoft-windows-netfx3-ondemand-package.cab file path"></p></li></ol><p>In my case no need to reboot the Windows agent.</p><p>Hopefully, this also works for you. Let me know in case you have any comments.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每个 Jenkins 用户都应该知道这三个最佳实践</title>
      <link href="/2020/07/jenkins-best-practice-cn/"/>
      <url>/2020/07/jenkins-best-practice-cn/</url>
      
        <content type="html"><![CDATA[<p>​在使用 Jenkins 实施了企业级的 CI&#x2F;CD 工作，有如下三个最重要的实践和总结。</p><p>第一，Configuration as Code（配置即代码）<br>其次，Jenkins shared libraries（Jenkins 共享库）<br>最后，Multi-Branch Pipeline（多分支流水线）</p><h2 id="配置即代码"><a href="#配置即代码" class="headerlink" title="配置即代码"></a>配置即代码</h2><p>配置即代码(Configuration as Code)是一种在代码仓库里管理配置的方法。</p><h3 id="它有什么好处"><a href="#它有什么好处" class="headerlink" title="它有什么好处"></a>它有什么好处</h3><h4 id="作业透明化"><a href="#作业透明化" class="headerlink" title="作业透明化"></a>作业透明化</h4><span id="more"></span><p>如果你使用过 Bamboo 或 Jenkins 1.x 版本，你知道想要从配置页面(GUI)来快速了解一个作业的逻辑是多么的困难，尤其是对于那些不太了解 CI 工具的人更是难上加难。</p><p>因此如果你准备使用 Jenkins 来作为团队的 CI 工具，一定要使用配置即代码，因为代码对于工程师来说更易读和了解背后的逻辑。</p><h4 id="可追溯性"><a href="#可追溯性" class="headerlink" title="可追溯性"></a>可追溯性</h4><p>对于 GUI 页面配置带来的另外一个重要问题就是无法追溯修改历史，来看别人做了什么修改。能查看其他人的修改对于一些很重要的 Job 是非常重要的，比如像是 Build Jobs 等。把 Jenkins 的配置当作项目代码来管理，这样做的好处不仅在于可跟踪性，还在于在需要时可以回滚到指定版本。</p><h4 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h4><p>配置即代码的使用还有另一个好处：够在硬件或是系统出了问题后快速恢复 Jenkins。但是，如果 Jenkins 作业是通过 GUI 配置的，当托管 Jenkins 的服务器损坏时，你的业务可能面临丢失的风险。因此，从业务连续性角度来看，它也暗示我们要使用配置即代码。</p><h2 id="Jenkins-共享库"><a href="#Jenkins-共享库" class="headerlink" title="Jenkins 共享库"></a>Jenkins 共享库</h2><p>就像编写任何应用程序代码一样，我们需要创建函数、子例程以实现重用和共享。同样的逻辑也适用于 Jenkins Pipeline 配置。比如发送电子邮件、打印日志、将 build 放到 FTP 或Artifactory 等功能都可以放到 Jenkins 共享库中。</p><p>如你所见，以下这些 groovy 文件就是 Jenkins 共享库的一部分，它们用来完成发送电子邮件、git 等操作、更新开源、代码扫描（Polaris）及触发其他任务等工作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xshen@localhost MINGW64 /c/workspace/cicd/src/org/devops (develop)</span><br><span class="line">$ <span class="built_in">ls</span> -l</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 5658 Jun 18 09:23 email.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  898 Jun 13 20:05 git.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1184 Jun  8 12:10 opensrc.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1430 Jul  3 10:33 polaris.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 2936 Jul  3 10:32 trigger.groovy</span><br><span class="line">drwxr-xr-x 1 xshen 1049089    0 Jun  8 12:10 utils/</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  787 May 12 13:24 utils.groovy</span><br></pre></td></tr></table></figure><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>这就是为什么要使用共享库，它不但可以减少重复代码，也更容易维护。比如当你需要管理很多个仓库里的自动化流水线的时候，使用 Jenkins 共享库不需要更新每个代码仓库里的 Jenkinsfile，只更改共享库里的代码即可。</p><p>这样的方式也鼓励重用和跨团队共享。例如，我创建的共享库也被公司其他团队在使用。</p><h2 id="分支流水线"><a href="#分支流水线" class="headerlink" title="分支流水线"></a>分支流水线</h2><p>在下面这张图中，开发的每个 Pull Request 通过 Webhook 触发自动构建和冒烟测试，只有通过<strong>构建测试</strong>和<strong>冒烟测试</strong>的修改才允许被合并到主干分支上。</p><p><img src="/2020/07/jenkins-best-practice-cn/pull-request.png" alt="Pull Request 流程图"></p><p>以上的工作流程是利用 Jenkins 多分支流水线来实现的。在进入细节之前，让我们先看看它是什么样子的。</p><p><img src="/2020/07/jenkins-best-practice-cn/multi-branches.png" alt="Multi-Branch Pepeline Branches"></p><p>在这个页面看到的所有分支都是在代码仓库里创建后就自动生成的，这样开发者都通过这个 Jenkins Job 可以在自己的分支进行自动化构建和测试。</p><blockquote><p>注：如果分支已经从代码仓库删掉了，这些分支则也会相应从这个 Jenkins Job 里删除掉或是像上面那样显示划掉状态（这里取决你 Jenkins 的设置）。Pull Request 也是同理。</p></blockquote><p><img src="/2020/07/jenkins-best-practice-cn/multi-pull-request.png" alt="Multi-Branch Pepeline Pull Requests"></p><p>这样，当开发人员完成他们的工作时，他们可以使用这些 Jenkins Job 来自己创建正式的 Build，而不再需要 Build 工程师的参与。这在引入多分支流水线之前所达不到的，以前开发总是需要 Build 工程师为他们创建 Build 用来测试，对于一个 20 多人的开发团队，可以想象满足这些需求所要花费多少努力。</p><h3 id="好处-1"><a href="#好处-1" class="headerlink" title="好处"></a>好处</h3><p>以上介绍了这个多分支流水线的第一个好处：为团队创建了一个自助服务，节省了开发的时间，也节省了 Build 工程师的时间。</p><p>另一个好处是：使主分支将更加稳定，再也不用花大量时间去查找是谁的提交破坏了主干分支的构建或是功能。因为只有通过构建、安装以及冒烟测试的代码才会被合并到主干分支上。</p><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><p>从人力成本：这样的自助服务，节省了至少 0.5 人以上的人力成本。让过去的重复劳动者，变成现在基础设施的维护者和开发者。</p><p>从质量成本：以我的项目最近一个月大约 30 个 Pull Request 为例，发现其中 6 个在某些平台上存在 Build 问题。你知道如果能在开发阶段就发现问题，而不是被测试、Support 人员甚至是客户发现问题，那么这种发现缺陷的成本就会非常低。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Top 3 best practice</title>
      <link href="/2020/07/jenkins-best-practice/"/>
      <url>/2020/07/jenkins-best-practice/</url>
      
        <content type="html"><![CDATA[<p>I am Xianpeng, a build engineer. Today, I am going to share with you three Jenkins Practice.</p><p>I will talk about Configuration as code, followed up with shared libraries, and then Multi-Branch Pipeline in the end.</p><h2 id="Configuration-as-Code"><a href="#Configuration-as-Code" class="headerlink" title="Configuration as Code"></a>Configuration as Code</h2><p>What is Configuration as Code?</p><p>Configuration as code (CAC) is an approach that managing configuration resources in a bitbucket repository</p><h3 id="What-are-the-benefits"><a href="#What-are-the-benefits" class="headerlink" title="What are the benefits?"></a>What are the benefits?</h3><h4 id="First-Jenkins-Job-Transparency"><a href="#First-Jenkins-Job-Transparency" class="headerlink" title="First, Jenkins Job Transparency"></a>First, Jenkins Job Transparency</h4><span id="more"></span><p>To those who have experience with Bamboo jobs, you know how hard it is to grasp the logic from the GUI, this is especially true to people who don’t know the tools very well. So, when we migrated Bamboo jobs to Jenkins, we decided to use Configuration as code, because the code is more readable and very easy for engineers to understand the logic and flow.</p><h4 id="Secondly-Traceability"><a href="#Secondly-Traceability" class="headerlink" title="Secondly, Traceability"></a>Secondly, Traceability</h4><p>Another drawback of configuring Jenkins Jobs through GUI is that it cannot trace the history and see who did what. The ability to see who made changes is very very important for some critical Jenkins jobs, such as build jobs. With Configuration as code, we treat the Jenkins job code the same way as other application code, the benefits are not only on traceability-wise, but also the ability to roll-back to a specific version if needed.</p><h4 id="Thirdly-Quick-Recovery"><a href="#Thirdly-Quick-Recovery" class="headerlink" title="Thirdly, Quick Recovery"></a>Thirdly, Quick Recovery</h4><p>Using Configuration as code has another benefit, which is the ability to quickly recover Jenkins’s job upon hardware issues. However, if Jenkins Job is configured through GUI, when the server that host the Jenkins corrupted, you might at risk of losing everything relates to Jenkins. So, from the business continuity  perspective, it is also suggesting us to use configuration as code.</p><h2 id="Jenkins-Shared-Libraries"><a href="#Jenkins-Shared-Libraries" class="headerlink" title="Jenkins Shared Libraries"></a>Jenkins Shared Libraries</h2><p>Just like writing any application code, that we need to create functions, subroutines for reuse and sharing purpose. The same logic applies to the Jenkins configuration code. Functionalities such as sending emails, printing logs, deploying the build to FTP&#x2F;Artifactory can be put into Jenkins Shared Libraries. Jenkins Shared Libraries is managed in Bitbucket.</p><p>So, let’s take a look, …</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xshen@localhost MINGW64 /c/workspace/cicd/src/org/devops (develop)</span><br><span class="line">$ <span class="built_in">ls</span> -l</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 5658 Jun 18 09:23 email.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  898 Jun 13 20:05 git.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1184 Jun  8 12:10 opensrc.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1430 Jul  3 10:33 polaris.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 2936 Jul  3 10:32 trigger.groovy</span><br><span class="line">drwxr-xr-x 1 xshen 1049089    0 Jun  8 12:10 utils/</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  787 May 12 13:24 utils.groovy</span><br></pre></td></tr></table></figure><p>As you can see, these groovy files are so-called shared libraries that complete works such as sending emails, git operations, updating opensource and so on.<br>So, it is becoming very clear why we want to use shared libraries because it can reduce duplicate code.</p><p>It is also easier to maintain because instead of updating several places, we just need to update the shared libraries if any changes required. The last but not least, it encourages reuse and sharing cross teams. For example, the shared libraries I created are also used other team.</p><h2 id="Multi-branch-pipeline"><a href="#Multi-branch-pipeline" class="headerlink" title="Multi-branch pipeline"></a>Multi-branch pipeline</h2><p>Next, Multi-branch pipeline. Some of you may have seen the same diagram like this.</p><p><img src="/2020/07/jenkins-best-practice/pull-request.png" alt="Pull Request diagram"></p><p>In this picture, the pull request will trigger an automatic build, which is very helpful to engineers because their changes will not be merged to the main branch unless it passes the build test and smoke test.</p><p>So, I will share more detailed information here with you.</p><p>The thing works behind the scene is called Jenkins Multi-branch Pipeline. Before getting into the details, let’s first see what it looks like.</p><p><img src="/2020/07/jenkins-best-practice/multi-branches.png" alt="Multi-Branch Pipeline Branches"></p><blockquote><p>Note: If your branch or Pull Request has been deleted, the branch or Pull Request will either be removed from the multi-branch Job or show a crossed-out status as shown above, this depending on your Jenkins setting.</p></blockquote><p><img src="/2020/07/jenkins-best-practice/multi-pull-request.png" alt="Multi-Branch Pipeline Pull Requests"></p><p>So, as you can see from this page, there are multi Jenkins jobs. That is because for each bugfix or feature branch in Bitbucket, this multi-branch pipeline will automatically create a Jenkins job for them.</p><p>So, when developers complete their works, they can use these Jenkins jobs to create official build by themselves without the need of involving a build engineer. However, this was not the case in the past. At the time that we did not have these self-service jobs, developers always ask help from me, the build engineer to create a build for them. We have around twenty U2 developers in the team, you can image the efforts needed to satisfy these requirements.</p><p>So, I just covered the first benefit of this multi-branch pipeline, which creates a self-service for the team, save their time, save my time.</p><p>Another benefit of this self-service build and install is that our main branch will be more stable and save us from the time spent on investigating whose commit was problematic because only changes passed build, install and smoke test will be merged into the main branch.</p><p>Now, you may wonder the value of this work, like how many issues have been discovered by this auto build and install test.</p><p>Taking our current development as an example, there were about 30 pull requests merged last month, and six of them were found has built problems on some platforms.</p><p>As you all know, the cost of quality will be very low if we can find issues during the development phase, rather than being found by QA, Support or even customer.</p><p>Please comments in case you have any questions.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将 Jenkins Shell 返回的字符串处理为字符数组</title>
      <link href="/2020/06/Jenkins-tips-2/"/>
      <url>/2020/06/Jenkins-tips-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。</p><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想通过 Shell 先对数据进行处理，然后返回到 Jenkins pipeline 里，但只能得到 Shell 返回的字符串，因此需要在 Jenkinsfile 里把字符串处理成数组，然后通过一个 for 循环对数组中的值进行处理。</p><p>以下是要处理的文本数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br></pre></td></tr></table></figure><p>要将以上文件通过 Jenkins 分别进行处理，得到用户 user1，user2，user3 然后发送邮件。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><p>通过 Shell 表达式只过滤出 user1 user2 user3</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 所有以 fail-list 开头的文件，并赋给一个数组 l</span></span><br><span class="line">l=$(<span class="built_in">ls</span> -a fail-list-*)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$l</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  f=<span class="variable">$&#123;f#fail-list-&#125;</span> <span class="comment"># 使用#号截取左边字符</span></span><br><span class="line">  f=<span class="variable">$&#123;f%.txt&#125;</span>       <span class="comment"># 使用%号截取右边字符</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$f</span>           <span class="comment"># 最终输出仅包含 user 的字符串</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br><span class="line">$ l=$(<span class="built_in">ls</span> -a fail-list-*) &amp;&amp; <span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$l</span>; <span class="keyword">do</span> f=<span class="variable">$&#123;f#fail-list-&#125;</span>; f=<span class="variable">$&#123;f%.txt&#125;</span>; <span class="built_in">echo</span> <span class="variable">$f</span> ; <span class="keyword">done</span>;</span><br><span class="line">user1</span><br><span class="line">user2</span><br><span class="line">user3</span><br></pre></td></tr></table></figure><h3 id="处理字符串为数组"><a href="#处理字符串为数组" class="headerlink" title="处理字符串为数组"></a>处理字符串为数组</h3><p>以下在 Jenkinsfile 使用 groovy 将 Shell 返回的字符串处理成字符数组。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jenkinsfile</span></span><br><span class="line"><span class="comment">// 忽略 stage, steps 等其他无关步骤</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">scripts &#123;</span><br><span class="line">  <span class="comment">// 将 Shell 返回字符串赋给 owners 这个变量。注意在 $ 前面需要加上 \ 进行转义。</span></span><br><span class="line">  <span class="keyword">def</span> owners = sh(<span class="attr">script:</span> <span class="string">&quot;l=\$(ls -a fail-list-*) &amp;&amp; for f in \$l; do f=\$&#123;f#fail-list-&#125;; f=\$&#123;f%.txt&#125;; echo \$f ; done;&quot;</span>, <span class="attr">returnStdout:</span><span class="literal">true</span>).trim()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查看 owners 数组是否为空，isEmpty() 是 groovy 内置方法。</span></span><br><span class="line">  <span class="keyword">if</span> ( ! owners.isEmpty() ) &#123;</span><br><span class="line">    <span class="comment">// 通过 .split() 对 owners string 进行分解，返回字符串数组。然后通过 .each() 对返回的字符串数组进行循环。</span></span><br><span class="line">    owners.split().each &#123; owner -&gt;</span><br><span class="line">      <span class="comment">// 打印最终的用户返回</span></span><br><span class="line">      println <span class="string">&quot;owner is $&#123;owner&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 发送邮件，例子</span></span><br><span class="line">      email.SendEx([</span><br><span class="line">          <span class="string">&#x27;buildStatus&#x27;</span>  : currentBuild.currentResult,</span><br><span class="line">          <span class="string">&#x27;buildExecutor&#x27;</span>: <span class="string">&quot;$&#123;owner&#125;&quot;</span>,</span><br><span class="line">          <span class="string">&#x27;attachment&#x27;</span>   : <span class="string">&quot;fail-list-$&#123;owner&#125;.txt&quot;</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终完成了通过 Groovy 将 Shell 返回的字符串处理成字符数组，实现上述例子中对不同人进行邮件通知的需求。</p><p>希望以上例子对你做其他类似需求的时候有所启示和帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将 Jenkins Shell 返回的字符串处理为字符数组</title>
      <link href="/2020/06/jenkins-tips-2/"/>
      <url>/2020/06/jenkins-tips-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。</p><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想通过 Shell 先对数据进行处理，然后返回到 Jenkins pipeline 里，但只能得到 Shell 返回的字符串，因此需要在 Jenkinsfile 里把字符串处理成数组，然后通过一个 for 循环对数组中的值进行处理。</p><p>以下是要处理的文本数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br></pre></td></tr></table></figure><p>要将以上文件通过 Jenkins 分别进行处理，得到用户 user1，user2，user3 然后发送邮件。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><p>通过 Shell 表达式只过滤出 user1 user2 user3</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list 所有以 fail-list 开头的文件，并赋给一个数组 l</span></span><br><span class="line">l=$(<span class="built_in">ls</span> -a fail-list-*)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$l</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  f=<span class="variable">$&#123;f#fail-list-&#125;</span> <span class="comment"># 使用#号截取左边字符</span></span><br><span class="line">  f=<span class="variable">$&#123;f%.txt&#125;</span>       <span class="comment"># 使用%号截取右边字符</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$f</span>           <span class="comment"># 最终输出仅包含 user 的字符串</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br><span class="line">$ l=$(<span class="built_in">ls</span> -a fail-list-*) &amp;&amp; <span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$l</span>; <span class="keyword">do</span> f=<span class="variable">$&#123;f#fail-list-&#125;</span>; f=<span class="variable">$&#123;f%.txt&#125;</span>; <span class="built_in">echo</span> <span class="variable">$f</span> ; <span class="keyword">done</span>;</span><br><span class="line">user1</span><br><span class="line">user2</span><br><span class="line">user3</span><br></pre></td></tr></table></figure><h3 id="处理字符串为数组"><a href="#处理字符串为数组" class="headerlink" title="处理字符串为数组"></a>处理字符串为数组</h3><p>以下在 Jenkinsfile 使用 groovy 将 Shell 返回的字符串处理成字符数组。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jenkinsfile</span></span><br><span class="line"><span class="comment">// 忽略 stage, steps 等其他无关步骤</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">scripts &#123;</span><br><span class="line">  <span class="comment">// 将 Shell 返回字符串赋给 owners 这个变量。注意在 $ 前面需要加上 \ 进行转义。</span></span><br><span class="line">  <span class="keyword">def</span> owners = sh(<span class="attr">script:</span> <span class="string">&quot;l=\$(ls -a fail-list-*) &amp;&amp; for f in \$l; do f=\$&#123;f#fail-list-&#125;; f=\$&#123;f%.txt&#125;; echo \$f ; done;&quot;</span>, <span class="attr">returnStdout:</span><span class="literal">true</span>).trim()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查看 owners 数组是否为空，isEmpty() 是 groovy 内置方法。</span></span><br><span class="line">  <span class="keyword">if</span> ( ! owners.isEmpty() ) &#123;</span><br><span class="line">    <span class="comment">// 通过 .split() 对 owners string 进行分解，返回字符串数组。然后通过 .each() 对返回的字符串数组进行循环。</span></span><br><span class="line">    owners.split().each &#123; owner -&gt;</span><br><span class="line">      <span class="comment">// 打印最终的用户返回</span></span><br><span class="line">      println <span class="string">&quot;owner is $&#123;owner&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 发送邮件，例子</span></span><br><span class="line">      email.SendEx([</span><br><span class="line">          <span class="string">&#x27;buildStatus&#x27;</span>  : currentBuild.currentResult,</span><br><span class="line">          <span class="string">&#x27;buildExecutor&#x27;</span>: <span class="string">&quot;$&#123;owner&#125;&quot;</span>,</span><br><span class="line">          <span class="string">&#x27;attachment&#x27;</span>   : <span class="string">&quot;fail-list-$&#123;owner&#125;.txt&quot;</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终完成了通过 Groovy 将 Shell 返回的字符串处理成字符数组，实现上述例子中对不同人进行邮件通知的需求。</p><p>希望以上例子对你做其他类似需求的时候有所启示和帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忽略 Jenkins Shell 步骤中的故障</title>
      <link href="/2020/06/Jenkins-tips-1/"/>
      <url>/2020/06/Jenkins-tips-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>不希望 Shell 脚本因失败而中止</li><li>想一直运行 Shell 脚本并报告失败</li></ul><span id="more"></span><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>运行 Shell 时，你可以通过使用内置的 <code>+e</code> 选项来控制执行你的脚本错误。这可以禁用“非 0 退出”的默认行为。</p><p>请参考如下四个示例中的测试 Shell 和测试结果 Console Output。</p><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><p>执行的时候如果出现了返回值为非零（即命令执行失败）将会忽略错误，继续执行下面的脚本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> +e</span><br><span class="line"><span class="built_in">ls</span> no-exit-file</span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/1.png" alt="示例一：测试结果"></p><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><p>执行的时候如果出现了返回值为非零，整个脚本就会立即退出。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">ls</span> no-exit-file</span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/2.png" alt="示例二：测试结果"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><h4 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h4><p>还有一种方式，如果不想停止失败的另一种方法是添加 <code>|| true</code> 到你的命令结尾。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做可能会失败，但并不关注失败的命令时</span></span><br><span class="line"><span class="built_in">ls</span> no-exit-file || <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/3.png" alt="示例三：测试结果"></p><h4 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h4><p>如果要在失败时执行某些操作则添加 <code>|| &lt;doSomethingOnFailure&gt;</code> 。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做可能会失败的事情，并关注失败的命令</span></span><br><span class="line"><span class="comment"># 如果存在错误，则会创建变量 error 并将其设置为 true</span></span><br><span class="line"><span class="built_in">ls</span> no-exit-file || error=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后去判断 error 变量的值。如果为真，则退出 Shell</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$error</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/4.png" alt="示例四：测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忽略 Jenkins Shell 步骤中的故障</title>
      <link href="/2020/06/jenkins-tips-1/"/>
      <url>/2020/06/jenkins-tips-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>不希望 Shell 脚本因失败而中止</li><li>想一直运行 Shell 脚本并报告失败</li></ul><span id="more"></span><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>运行 Shell 时，你可以通过使用内置的 <code>+e</code> 选项来控制执行你的脚本错误。这可以禁用“非 0 退出”的默认行为。</p><p>请参考如下四个示例中的测试 Shell 和测试结果 Console Output。</p><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><p>执行的时候如果出现了返回值为非零（即命令执行失败）将会忽略错误，继续执行下面的脚本。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> +e</span><br><span class="line"><span class="built_in">ls</span> no-exit-file</span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/jenkins-tips-1/1.png" alt="示例一：测试结果"></p><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><p>执行的时候如果出现了返回值为非零，整个脚本就会立即退出。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">ls</span> no-exit-file</span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/jenkins-tips-1/2.png" alt="示例二：测试结果"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><h4 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h4><p>还有一种方式，如果不想停止失败的另一种方法是添加 <code>|| true</code> 到你的命令结尾。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做可能会失败，但并不关注失败的命令时</span></span><br><span class="line"><span class="built_in">ls</span> no-exit-file || <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/jenkins-tips-1/3.png" alt="示例三：测试结果"></p><h4 id="示例四"><a href="#示例四" class="headerlink" title="示例四"></a>示例四</h4><p>如果要在失败时执行某些操作则添加 <code>|| &lt;doSomethingOnFailure&gt;</code> 。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 做可能会失败的事情，并关注失败的命令</span></span><br><span class="line"><span class="comment"># 如果存在错误，则会创建变量 error 并将其设置为 true</span></span><br><span class="line"><span class="built_in">ls</span> no-exit-file || error=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后去判断 error 变量的值。如果为真，则退出 Shell</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$error</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/jenkins-tips-1/4.png" alt="示例四：测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job</title>
      <link href="/2020/06/vm-status-check-via-jenkins/"/>
      <url>/2020/06/vm-status-check-via-jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。</p><span id="more"></span><h2 id="需求分解"><a href="#需求分解" class="headerlink" title="需求分解"></a>需求分解</h2><p>通过一个简单的 shell 脚本可实现定期进行 ssh 登录操作，但如何实现的更优雅一些就需要花点时间了，比如：</p><ol><li>定期自动执行</li><li>输出比较直观的登录测试结果</li><li>支持用户添加新的虚拟机 hostname 到检查列表中</li><li>执行完成后，通知用户等等</li></ol><p>希望在不引入其他 Web 页面的情况下通过现有的工具 Jenkins 使用 Shell 脚本如何实现呢？</p><ol><li>写一个脚本去循环一个 list 里所有的 hostname，经考虑这个 list 最好是一个 file，这样方便后续处理。</li><li>这样当用户通过执行 Jenkins job 传入新的 hostname 时，使用新的 hostname 到 file 里进行 grep，查看是否已存在。</li><li>如果 grep 到，不添加；如果没有 grep 到，将这个 hostname 添加到 file 里。</li><li>将修改后的 file 添加到 git 仓库里，这样下次 Jenkins 的定时任务就会执行最近添加的 hostname 了。</li></ol><h2 id="实现重点"><a href="#实现重点" class="headerlink" title="实现重点"></a>实现重点</h2><ol><li><p>使用 <code>expect</code>。在使用 ssh 连接远程虚拟机的时候需要实现与远程连接时实现交互，例如：可以期待屏幕上的输出，然后进而进行相应的输入。在使用 <code>expect</code> 之前需要先安装，以 Redhat 的安装命令为例： <code>sudo yum install expect</code> 来进行安装。</p><blockquote><p>更多有关 <code>expect</code> 使用的可以参看这个连接：<a href="http://xstarcd.github.io/wiki/shell/expect.html">http://xstarcd.github.io/wiki/shell/expect.html</a></p></blockquote></li><li><p>使用了 Shell 数组。使用 Shell 读取文件数据，进行登录操作，将操作失败的记录到一个数组里，然后打印出来。</p></li><li><p>在通过 Jenkins 提交新的 hostname 到 Git 仓库时，origin 的 URL 需要是 <code>https://$&#123;USERNAME&#125;:$&#123;PASSWORD&#125;@git.company.com/scm/vmm.git</code> 或 <code>git@company.com:scm/vmm.git</code>（需要提前在执行机器上生成了 id_rsa.pub）</p></li></ol><blockquote><p>代码已经上传 GitHub 请参看 <a href="https://github.com/shenxianpeng/vmm.git">https://github.com/shenxianpeng/vmm.git</a></p></blockquote><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><h3 id="开始执行，提供输入新的-hostname"><a href="#开始执行，提供输入新的-hostname" class="headerlink" title="开始执行，提供输入新的 hostname"></a>开始执行，提供输入新的 hostname</h3><p><img src="/2020/06/vm-status-check-via-jenkins/pipeline-start.png"></p><h3 id="执行完成，将执行结果归档以便查看"><a href="#执行完成，将执行结果归档以便查看" class="headerlink" title="执行完成，将执行结果归档以便查看"></a>执行完成，将执行结果归档以便查看</h3><p><img src="/2020/06/vm-status-check-via-jenkins/pipeline-result.png"></p><h3 id="打开归档结果如下"><a href="#打开归档结果如下" class="headerlink" title="打开归档结果如下"></a>打开归档结果如下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment">######### VM login check via SSH results ############</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment">#                                                   #</span></span><br><span class="line"><span class="comment"># Compelted (success) 14/16 (total) login vm check. #</span></span><br><span class="line"><span class="comment">#                                                   #</span></span><br><span class="line"><span class="comment"># Below 2 host(s) login faied, need to check.       #</span></span><br><span class="line"><span class="comment">#                                                   #</span></span><br><span class="line">      abc.company.com</span><br><span class="line">      xyz.company.com</span><br><span class="line"><span class="comment">#                                                   #</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在技术的更新非常快，尤其作为 DevOps 工程师，各种工具层出不穷，想要每一样工具都掌握几乎是不可能的。</p><p>只会工具不了解其背后的原理，等到新工具出现替换掉旧的工具，其实这些年是没有进步的。</p><p>只有认真的把在工作中遇到的每个问题背后来龙去脉去搞懂，才能地基打的稳，这样不论工具怎么变，学习起来都会很快。</p><p>掌握操作系统，Shell，以及一门擅长的编程语言之后再去学习那些工具，要不永远都是漂浮在空中。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题</title>
      <link href="/2020/06/Java-net-SocketException-on-AIX/"/>
      <url>/2020/06/Java-net-SocketException-on-AIX/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。</p></blockquote><p>分享一个花了两天时间才解决的一个问题：使用 Jenkins Artifactory 插件上传制品到 https 协议的企业级的 Artifactory 失败。该问题只在 AIX 平台上出现的，其他 Windows，Linux, Unix 均正常。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近计划将之前使用的 Artifactory OSS（开源版）迁移到 Aritifactory Enterprise（企业版）上。为什么要做迁移？这里有一个 Artifactory 对比的矩阵图 <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix">https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix</a></p><p>简单来说，开源版缺少与 CI 工具集成时常用的 REST API 功能，比如以下常用功能</p><ul><li>设置保留策略(Retention)。设置上传的制品保留几天等，达到定期清理的目的。</li><li>提升(Promote)。通过自动化测试的制品会被提升到 stage（待测试）仓库，通过手工测试的提升到 release（发布）仓库。</li><li>设置属性(set properties)。对于通过不同阶段的制品通过 CI 集成进行属性的设置。</li></ul><p>正好公司已经有企业版了，那就开始迁移吧。本以为会很顺利的完成，没想到唯独在 IBM 的 AIX 出现上传制品失败的问题。</p><blockquote><p>环境信息</p><ul><li>Jenkins ver. 2.176.3</li><li>Artifactory Plugin 3.6.2</li><li>Enterprise Artifactory 6.9.060900900</li><li>AIX 7.1 &amp;&amp; java version 1.8.0</li></ul></blockquote><p>以下是去掉了无相关的信息的错误日志。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[consumer_0] Deploying artifact: https:<span class="comment">//artifactory.company.com/artifactory/generic-int-den/database/develop/10/database2_cdrom_opt_AIX_24ec6f9.tar.Z</span></span><br><span class="line">Error occurred <span class="keyword">for</span> request GET /artifactory/api/system/version HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">Error occurred <span class="keyword">for</span> request PUT /artifactory/generic-<span class="type">int</span>-den/database/develop/<span class="number">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class="number">1591170116591</span>;build.name=develop;build.number=<span class="number">10</span> HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">Error occurred <span class="keyword">for</span> request PUT /artifactory/generic-<span class="type">int</span>-den/database/develop/<span class="number">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class="number">1591170116591</span>;build.name=develop;build.number=<span class="number">10</span> HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">[consumer_0] An exception occurred during execution:</span><br><span class="line"> java.lang.RuntimeException: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class="number">44</span>)</span><br><span class="line"> at org.jfrog.build.extractor.producerConsumer.ConsumerRunnableBase.run(ConsumerRunnableBase.java:<span class="number">11</span>)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:<span class="number">785</span>)</span><br><span class="line"> Caused by: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class="line"> at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">127</span>)</span><br><span class="line"> at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">182</span>)</span><br><span class="line"> at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">152</span>)</span><br><span class="line"> at com.ibm.jsse2.a.a(a.java:<span class="number">227</span>)</span><br><span class="line"> at com.ibm.jsse2.a.a(a.java:<span class="number">168</span>)</span><br><span class="line"> at com.ibm.jsse2.as.a(as.java:<span class="number">702</span>)</span><br><span class="line"> at com.ibm.jsse2.as.i(as.java:<span class="number">338</span>)</span><br><span class="line"> at com.ibm.jsse2.as.a(as.java:<span class="number">711</span>)</span><br><span class="line"> at com.ibm.jsse2.as.startHandshake(as.java:<span class="number">454</span>)</span><br><span class="line"> at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:<span class="number">436</span>)</span><br><span class="line"> at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:<span class="number">384</span>)</span><br><span class="line"> at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:<span class="number">142</span>)</span><br><span class="line"> at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:<span class="number">374</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:<span class="number">393</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class="number">236</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class="number">89</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.ServiceUnavailableRetryExec.execute(ServiceUnavailableRetryExec.java:<span class="number">85</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class="number">110</span>)</span><br><span class="line"> at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line"> at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line"> at org.jfrog.build.client.PreemptiveHttpClient.execute(PreemptiveHttpClient.java:<span class="number">89</span>)</span><br><span class="line"> at org.jfrog.build.client.ArtifactoryHttpClient.execute(ArtifactoryHttpClient.java:<span class="number">253</span>)</span><br><span class="line"> at org.jfrog.build.client.ArtifactoryHttpClient.upload(ArtifactoryHttpClient.java:<span class="number">249</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.uploadFile(ArtifactoryBuildInfoClient.java:<span class="number">692</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.doDeployArtifact(ArtifactoryBuildInfoClient.java:<span class="number">379</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.deployArtifact(ArtifactoryBuildInfoClient.java:<span class="number">367</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class="number">39</span>)</span><br><span class="line"> ... <span class="number">2</span> more</span><br><span class="line">Failed uploading artifacts by spec</span><br></pre></td></tr></table></figure><p>很奇怪会出现上述问题，从开源版的 Artifactory 迁移到企业版的 Artifactory，它们之间最直接的区别是使用了不同的传输协议，前者是 http 后者是 https。</p><blockquote><p>HTTPS 其实是有两部分组成：HTTP + SSL&#x2F;TLS，也就是在 HTTP 上又加了一层处理加密信息的模块，因此更安全。</p></blockquote><p>本以为 Google 一下就能找到此类问题的解决办法，可惜这个问题在其他平台都没有，只有 AIX 上才有，肯定这个 AIX 有什么“过人之处”和其他 Linux&#x2F;Unix 不一样。</p><h2 id="使用-curl-来替代"><a href="#使用-curl-来替代" class="headerlink" title="使用 curl 来替代"></a>使用 <code>curl</code> 来替代</h2><p>由于上述问题重现在需要重新构建，比较花时间，就先试试直接用 <code>curl</code> 命令来调用 Artifactory REST API 看看结果。</p><p>做了以下测试，查看 Artifactory 的版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl  https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">curl: (35) Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 -v 模式，输出更多信息</span></span><br><span class="line">bash-4.3$ curl -v  https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">*   Trying 10.18.12.95...</span><br><span class="line">* Connected to artifactory.company.com (10.18.12.95) port 443 (<span class="comment">#0)</span></span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* NPN, negotiated HTTP1.1</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS alert, Server hello (2):</span><br><span class="line">* Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (35) Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br></pre></td></tr></table></figure><p>果然也出错了，<code>curl</code> 也不行，可能就是执行 <code>curl</code> 命令的时候没有找到指定证书，查了 <code>curl</code> 的 help，有 <code>--cacert</code> 参数可以指定 cacert.pem 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3$ curl --cacert /var/ssl/cacert.pem https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : <span class="string">&quot;6.9.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;revision&quot;</span> : <span class="string">&quot;60900900&quot;</span>,</span><br><span class="line">  <span class="string">&quot;addons&quot;</span> : [ <span class="string">&quot;build&quot;</span>, <span class="string">&quot;docker&quot;</span>, <span class="string">&quot;vagrant&quot;</span>, <span class="string">&quot;replication&quot;</span>, <span class="string">&quot;filestore&quot;</span>, <span class="string">&quot;plugins&quot;</span>, <span class="string">&quot;gems&quot;</span>, <span class="string">&quot;composer&quot;</span>, <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;bower&quot;</span>, <span class="string">&quot;git-lfs&quot;</span>, <span class="string">&quot;nuget&quot;</span>, <span class="string">&quot;debian&quot;</span>, <span class="string">&quot;opkg&quot;</span>, <span class="string">&quot;rpm&quot;</span>, <span class="string">&quot;cocoapods&quot;</span>, <span class="string">&quot;conan&quot;</span>, <span class="string">&quot;vcs&quot;</span>, <span class="string">&quot;pypi&quot;</span>, <span class="string">&quot;release-bundle&quot;</span>, <span class="string">&quot;replicator&quot;</span>, <span class="string">&quot;keys&quot;</span>, <span class="string">&quot;chef&quot;</span>, <span class="string">&quot;cran&quot;</span>, <span class="string">&quot;go&quot;</span>, <span class="string">&quot;helm&quot;</span>, <span class="string">&quot;rest&quot;</span>, <span class="string">&quot;conda&quot;</span>, <span class="string">&quot;license&quot;</span>, <span class="string">&quot;puppet&quot;</span>, <span class="string">&quot;ldap&quot;</span>, <span class="string">&quot;sso&quot;</span>, <span class="string">&quot;layouts&quot;</span>, <span class="string">&quot;properties&quot;</span>, <span class="string">&quot;search&quot;</span>, <span class="string">&quot;filtered-resources&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;webstart&quot;</span>, <span class="string">&quot;support&quot;</span>, <span class="string">&quot;xray&quot;</span> ],</span><br><span class="line">  <span class="string">&quot;license&quot;</span> : <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试了下成功了。</p><p>到这里问题已经解决了，只要使用 <code>curl</code> 调用 Artifactory REST API 就能完成上传操作了。但我用的 Jenkins Artifactory Plugin，如果使用 <code>curl</code> 我需要把之前的代码重新再实现一遍，然后再测试，就为了 AIX 一个平台的问题，实在是“懒”的重新开始。本着这样懒惰的性格，还得继续解决 Jenkins 调用 agent 去执行上传失败的问题。</p><h2 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h2><h3 id="尝试设置-SSL-CERT-FILE-环境变量"><a href="#尝试设置-SSL-CERT-FILE-环境变量" class="headerlink" title="尝试设置 SSL_CERT_FILE 环境变量"></a>尝试设置 <code>SSL_CERT_FILE</code> 环境变量</h3><p>想试试用上述的办法来解决 Jenkins 的问题。如果能有一个环境变量能设置指定 cacert.pem 文件的路径，那样在 Jenkins 调用 agent 执行上传时候就能找到证书，可能就能解决这个问题了。果然是有这样的环境变量的 <code>SSL_CERT_FILE</code>，设置如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> SSL_CERT_FILE=/var/ssl/cacert.pem</span><br></pre></td></tr></table></figure><p>设置好环境变量之后，通过 <code>curl</code> 调用，再不需要使用 <code>--cacert</code> 参数了。这下看起来有戏了，带着喜悦的心情把这个环境变量加到 agent 机器上，设置如下：</p><p><img src="/2020/06/Java-net-SocketException-on-AIX/configure-agent-environment-variable.png"></p><p>或者可以修改 agent 机器上的 <code>/etc/environment</code> 文件。</p><p>结果经测试错误信息依旧，看来 Jenkins 执行的 remote.jar 进行上传时跟本地配置环境没有关联，看来需要从执行 remote.jar 着手，把相应的设置或是环境变量在启动 remote.jar 时传进去。</p><blockquote><p>Jenkins 管理 agent 的原理是通过在 agent 上启动一个 remote.jar 实现的</p></blockquote><h3 id="在启动-remote-jar-时设置环境变量"><a href="#在启动-remote-jar-时设置环境变量" class="headerlink" title="在启动 remote.jar 时设置环境变量"></a>在启动 remote.jar 时设置环境变量</h3><p><code>java</code> 的 <code>-D</code> 参数可以完成这一点。</p><p>进行了大量的搜索和尝试，最终在 IBM 的官方找到了这篇文档 <a href="https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html">https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html</a></p><p>文档大意是，IBM SDK 系统属性 <code>com.ibm.jsse2.overrideDefaultTLS=[true|false]</code> 有 <code>true</code> 和 <code>false</code> 两个值，如果想要与 Oracle <code>SSLContext.getInstance(&quot;TLS&quot;)</code> 的行为相匹配，请将此属性设置为 <code>true</code>，默认值为 <code>false</code>。</p><p>下表显示了系统属性对 SSLContext.getInstance(“TLS”) 的影响</p><table><thead><tr><th>Property value setting</th><th>Protocol enabled</th></tr></thead><tbody><tr><td>false</td><td>TLS V1.0</td></tr><tr><td>true</td><td>TLS V1.0, V1.1, and V1.2</td></tr></tbody></table><p>绝大多数的 Java 应用都是使用 Oracle 的 JDK 来开发的，这里要与 Oracle 的行为保持一致；另外 IBM 的 SDK 默认协议只有 TLS V1.0，而上面的 log 可以看到使用的 TLSv1.2 协议，因此需要将属性设置为 <code>true</code>。</p><p>最终在 Jenkins 的 agent 配置里将 JVM Options 区域加上这句 <code>-Dcom.ibm.jsse2.overrideDefaultTLS=true</code>，断开连接，重新启动 agent，再次执行 Pipeline，成功的把 AIX 上的制品上传到 Artifactory 上了，问题解决了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题并解决问题是一件非常爽的事，从中也学到了很多之前不曾了解过的知识，解决问题的过程比 Google 随便查查更让人印象深刻，再遇到此类问题可能就会举一反三了。</p><p>另外，凡事如果觉得自己在短时间内没有头绪、自己搞不定的时候尽快寻求有经验的同事的帮助。感谢帮助我的同事们，没有他们的帮助和指导就不能这么快的解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题</title>
      <link href="/2020/06/java-net-socketexception-on-aix/"/>
      <url>/2020/06/java-net-socketexception-on-aix/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。</p></blockquote><p>分享一个花了两天时间才解决的一个问题：使用 Jenkins Artifactory 插件上传制品到 https 协议的企业级的 Artifactory 失败。该问题只在 AIX 平台上出现的，其他 Windows，Linux, Unix 均正常。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近计划将之前使用的 Artifactory OSS（开源版）迁移到 Aritifactory Enterprise（企业版）上。为什么要做迁移？这里有一个 Artifactory 对比的矩阵图 <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix">https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix</a></p><p>简单来说，开源版缺少与 CI 工具集成时常用的 REST API 功能，比如以下常用功能</p><ul><li>设置保留策略(Retention)。设置上传的制品保留几天等，达到定期清理的目的。</li><li>提升(Promote)。通过自动化测试的制品会被提升到 stage（待测试）仓库，通过手工测试的提升到 release（发布）仓库。</li><li>设置属性(set properties)。对于通过不同阶段的制品通过 CI 集成进行属性的设置。</li></ul><p>正好公司已经有企业版了，那就开始迁移吧。本以为会很顺利的完成，没想到唯独在 IBM 的 AIX 出现上传制品失败的问题。</p><blockquote><p>环境信息</p><ul><li>Jenkins ver. 2.176.3</li><li>Artifactory Plugin 3.6.2</li><li>Enterprise Artifactory 6.9.060900900</li><li>AIX 7.1 &amp;&amp; java version 1.8.0</li></ul></blockquote><p>以下是去掉了无相关的信息的错误日志。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[consumer_0] Deploying artifact: https:<span class="comment">//artifactory.company.com/artifactory/generic-int-den/database/develop/10/database2_cdrom_opt_AIX_24ec6f9.tar.Z</span></span><br><span class="line">Error occurred <span class="keyword">for</span> request GET /artifactory/api/system/version HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">Error occurred <span class="keyword">for</span> request PUT /artifactory/generic-<span class="type">int</span>-den/database/develop/<span class="number">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class="number">1591170116591</span>;build.name=develop;build.number=<span class="number">10</span> HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">Error occurred <span class="keyword">for</span> request PUT /artifactory/generic-<span class="type">int</span>-den/database/develop/<span class="number">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class="number">1591170116591</span>;build.name=develop;build.number=<span class="number">10</span> HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">[consumer_0] An exception occurred during execution:</span><br><span class="line"> java.lang.RuntimeException: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class="number">44</span>)</span><br><span class="line"> at org.jfrog.build.extractor.producerConsumer.ConsumerRunnableBase.run(ConsumerRunnableBase.java:<span class="number">11</span>)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:<span class="number">785</span>)</span><br><span class="line"> Caused by: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class="line"> at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">127</span>)</span><br><span class="line"> at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">182</span>)</span><br><span class="line"> at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">152</span>)</span><br><span class="line"> at com.ibm.jsse2.a.a(a.java:<span class="number">227</span>)</span><br><span class="line"> at com.ibm.jsse2.a.a(a.java:<span class="number">168</span>)</span><br><span class="line"> at com.ibm.jsse2.as.a(as.java:<span class="number">702</span>)</span><br><span class="line"> at com.ibm.jsse2.as.i(as.java:<span class="number">338</span>)</span><br><span class="line"> at com.ibm.jsse2.as.a(as.java:<span class="number">711</span>)</span><br><span class="line"> at com.ibm.jsse2.as.startHandshake(as.java:<span class="number">454</span>)</span><br><span class="line"> at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:<span class="number">436</span>)</span><br><span class="line"> at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:<span class="number">384</span>)</span><br><span class="line"> at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:<span class="number">142</span>)</span><br><span class="line"> at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:<span class="number">374</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:<span class="number">393</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class="number">236</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class="number">89</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.ServiceUnavailableRetryExec.execute(ServiceUnavailableRetryExec.java:<span class="number">85</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class="number">110</span>)</span><br><span class="line"> at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line"> at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line"> at org.jfrog.build.client.PreemptiveHttpClient.execute(PreemptiveHttpClient.java:<span class="number">89</span>)</span><br><span class="line"> at org.jfrog.build.client.ArtifactoryHttpClient.execute(ArtifactoryHttpClient.java:<span class="number">253</span>)</span><br><span class="line"> at org.jfrog.build.client.ArtifactoryHttpClient.upload(ArtifactoryHttpClient.java:<span class="number">249</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.uploadFile(ArtifactoryBuildInfoClient.java:<span class="number">692</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.doDeployArtifact(ArtifactoryBuildInfoClient.java:<span class="number">379</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.deployArtifact(ArtifactoryBuildInfoClient.java:<span class="number">367</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class="number">39</span>)</span><br><span class="line"> ... <span class="number">2</span> more</span><br><span class="line">Failed uploading artifacts by spec</span><br></pre></td></tr></table></figure><p>很奇怪会出现上述问题，从开源版的 Artifactory 迁移到企业版的 Artifactory，它们之间最直接的区别是使用了不同的传输协议，前者是 http 后者是 https。</p><blockquote><p>HTTPS 其实是有两部分组成：HTTP + SSL&#x2F;TLS，也就是在 HTTP 上又加了一层处理加密信息的模块，因此更安全。</p></blockquote><p>本以为 Google 一下就能找到此类问题的解决办法，可惜这个问题在其他平台都没有，只有 AIX 上才有，肯定这个 AIX 有什么“过人之处”和其他 Linux&#x2F;Unix 不一样。</p><h2 id="使用-curl-来替代"><a href="#使用-curl-来替代" class="headerlink" title="使用 curl 来替代"></a>使用 <code>curl</code> 来替代</h2><p>由于上述问题重现在需要重新构建，比较花时间，就先试试直接用 <code>curl</code> 命令来调用 Artifactory REST API 看看结果。</p><p>做了以下测试，查看 Artifactory 的版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl  https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">curl: (35) Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 -v 模式，输出更多信息</span></span><br><span class="line">bash-4.3$ curl -v  https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">*   Trying 10.18.12.95...</span><br><span class="line">* Connected to artifactory.company.com (10.18.12.95) port 443 (<span class="comment">#0)</span></span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* NPN, negotiated HTTP1.1</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS alert, Server hello (2):</span><br><span class="line">* Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (35) Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br></pre></td></tr></table></figure><p>果然也出错了，<code>curl</code> 也不行，可能就是执行 <code>curl</code> 命令的时候没有找到指定证书，查了 <code>curl</code> 的 help，有 <code>--cacert</code> 参数可以指定 cacert.pem 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3$ curl --cacert /var/ssl/cacert.pem https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : <span class="string">&quot;6.9.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;revision&quot;</span> : <span class="string">&quot;60900900&quot;</span>,</span><br><span class="line">  <span class="string">&quot;addons&quot;</span> : [ <span class="string">&quot;build&quot;</span>, <span class="string">&quot;docker&quot;</span>, <span class="string">&quot;vagrant&quot;</span>, <span class="string">&quot;replication&quot;</span>, <span class="string">&quot;filestore&quot;</span>, <span class="string">&quot;plugins&quot;</span>, <span class="string">&quot;gems&quot;</span>, <span class="string">&quot;composer&quot;</span>, <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;bower&quot;</span>, <span class="string">&quot;git-lfs&quot;</span>, <span class="string">&quot;nuget&quot;</span>, <span class="string">&quot;debian&quot;</span>, <span class="string">&quot;opkg&quot;</span>, <span class="string">&quot;rpm&quot;</span>, <span class="string">&quot;cocoapods&quot;</span>, <span class="string">&quot;conan&quot;</span>, <span class="string">&quot;vcs&quot;</span>, <span class="string">&quot;pypi&quot;</span>, <span class="string">&quot;release-bundle&quot;</span>, <span class="string">&quot;replicator&quot;</span>, <span class="string">&quot;keys&quot;</span>, <span class="string">&quot;chef&quot;</span>, <span class="string">&quot;cran&quot;</span>, <span class="string">&quot;go&quot;</span>, <span class="string">&quot;helm&quot;</span>, <span class="string">&quot;rest&quot;</span>, <span class="string">&quot;conda&quot;</span>, <span class="string">&quot;license&quot;</span>, <span class="string">&quot;puppet&quot;</span>, <span class="string">&quot;ldap&quot;</span>, <span class="string">&quot;sso&quot;</span>, <span class="string">&quot;layouts&quot;</span>, <span class="string">&quot;properties&quot;</span>, <span class="string">&quot;search&quot;</span>, <span class="string">&quot;filtered-resources&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;webstart&quot;</span>, <span class="string">&quot;support&quot;</span>, <span class="string">&quot;xray&quot;</span> ],</span><br><span class="line">  <span class="string">&quot;license&quot;</span> : <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试了下成功了。</p><p>到这里问题已经解决了，只要使用 <code>curl</code> 调用 Artifactory REST API 就能完成上传操作了。但我用的 Jenkins Artifactory Plugin，如果使用 <code>curl</code> 我需要把之前的代码重新再实现一遍，然后再测试，就为了 AIX 一个平台的问题，实在是“懒”的重新开始。本着这样懒惰的性格，还得继续解决 Jenkins 调用 agent 去执行上传失败的问题。</p><h2 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h2><h3 id="尝试设置-SSL-CERT-FILE-环境变量"><a href="#尝试设置-SSL-CERT-FILE-环境变量" class="headerlink" title="尝试设置 SSL_CERT_FILE 环境变量"></a>尝试设置 <code>SSL_CERT_FILE</code> 环境变量</h3><p>想试试用上述的办法来解决 Jenkins 的问题。如果能有一个环境变量能设置指定 cacert.pem 文件的路径，那样在 Jenkins 调用 agent 执行上传时候就能找到证书，可能就能解决这个问题了。果然是有这样的环境变量的 <code>SSL_CERT_FILE</code>，设置如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> SSL_CERT_FILE=/var/ssl/cacert.pem</span><br></pre></td></tr></table></figure><p>设置好环境变量之后，通过 <code>curl</code> 调用，再不需要使用 <code>--cacert</code> 参数了。这下看起来有戏了，带着喜悦的心情把这个环境变量加到 agent 机器上，设置如下：</p><p><img src="/2020/06/java-net-socketexception-on-aix/configure-agent-environment-variable.png"></p><p>或者可以修改 agent 机器上的 <code>/etc/environment</code> 文件。</p><p>结果经测试错误信息依旧，看来 Jenkins 执行的 remote.jar 进行上传时跟本地配置环境没有关联，看来需要从执行 remote.jar 着手，把相应的设置或是环境变量在启动 remote.jar 时传进去。</p><blockquote><p>Jenkins 管理 agent 的原理是通过在 agent 上启动一个 remote.jar 实现的</p></blockquote><h3 id="在启动-remote-jar-时设置环境变量"><a href="#在启动-remote-jar-时设置环境变量" class="headerlink" title="在启动 remote.jar 时设置环境变量"></a>在启动 remote.jar 时设置环境变量</h3><p><code>java</code> 的 <code>-D</code> 参数可以完成这一点。</p><p>进行了大量的搜索和尝试，最终在 IBM 的官方找到了这篇文档 <a href="https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html">https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html</a></p><p>文档大意是，IBM SDK 系统属性 <code>com.ibm.jsse2.overrideDefaultTLS=[true|false]</code> 有 <code>true</code> 和 <code>false</code> 两个值，如果想要与 Oracle <code>SSLContext.getInstance(&quot;TLS&quot;)</code> 的行为相匹配，请将此属性设置为 <code>true</code>，默认值为 <code>false</code>。</p><p>下表显示了系统属性对 SSLContext.getInstance(“TLS”) 的影响</p><table><thead><tr><th>Property value setting</th><th>Protocol enabled</th></tr></thead><tbody><tr><td>false</td><td>TLS V1.0</td></tr><tr><td>true</td><td>TLS V1.0, V1.1, and V1.2</td></tr></tbody></table><p>绝大多数的 Java 应用都是使用 Oracle 的 JDK 来开发的，这里要与 Oracle 的行为保持一致；另外 IBM 的 SDK 默认协议只有 TLS V1.0，而上面的 log 可以看到使用的 TLSv1.2 协议，因此需要将属性设置为 <code>true</code>。</p><p>最终在 Jenkins 的 agent 配置里将 JVM Options 区域加上这句 <code>-Dcom.ibm.jsse2.overrideDefaultTLS=true</code>，断开连接，重新启动 agent，再次执行 Pipeline，成功的把 AIX 上的制品上传到 Artifactory 上了，问题解决了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题并解决问题是一件非常爽的事，从中也学到了很多之前不曾了解过的知识，解决问题的过程比 Google 随便查查更让人印象深刻，再遇到此类问题可能就会举一反三了。</p><p>另外，凡事如果觉得自己在短时间内没有头绪、自己搞不定的时候尽快寻求有经验的同事的帮助。感谢帮助我的同事们，没有他们的帮助和指导就不能这么快的解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 “会写程序的干不过会写PPT的” —— 聊程序员写作</title>
      <link href="/2020/05/programmers-read-and-write/"/>
      <url>/2020/05/programmers-read-and-write/</url>
      
        <content type="html"><![CDATA[<p>在程序员圈子里比较流行这样一句话“会写程序的干不过会写 PPT 的”，还记得 2019 年新东方年会的一首《放飞自我》里有这样一句歌词戳中了绝大大多数程序员的内心</p><p>“干的累死累活，有成果那又如何，到头来干不过写PPT的”。</p><p>一时间大家好像都认同了这个说法，表达着自己的不满和无奈。</p><span id="more"></span><h2 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h2><p>随着自己从业超过 10 年有余，不管是从网络上还是工作中见识了各种各样的能人之后，对于真正的“能力”也有了新的认识。</p><p>在一开始我会觉得那些沉默寡言并且技术还好的才是真正的大神，那些会点技术就开始给人讲的是在班门弄斧。然而，当给团队分享一些技术分享的时候，发现想把一件事给绝大多数不了解的人说明白其实也同样是一种能力。</p><ul><li>首先，在给人讲之前首先得自己完全弄明白</li><li>其次，还要想别人可能会问的问题自己否能答出来</li><li>最后，故事线是什么，怎样逻辑清晰的讲出来</li></ul><h2 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h2><p>最近吴军老师在得到上开设了一门《阅读和写作》里他举了一个例子</p><p>一个项目组中有三个人，第一个人擅长于做专业工作，组里最重要的工作都是他做的，其他人也经常要靠他来指导；第二个人擅长把大家组织到一起，当大家遇到困难时，他能够鼓舞大家的士气，带领大家克服困难取得胜利；第三个人能把他们组的工作讲清楚。</p><p>如果老板要从这几个人中提拔一个人，谁的机会最大呢？我相信很多人会觉得是那个专业能力特别强的。但是，在现实生活中往往是第三个人最大。为什么呢？</p><p>我们假想一下三个人去做汇报的场景</p><ul><li><p>第一个人去做汇报，他讲了一堆专业细节，领导听得无趣，最后他既没有让全组的工作被上级认可，也没有争取到什么资源。也许第二次大家就不推举他做代表了，或者这个项目受不到重视解散了。</p></li><li><p>如果是那个善于组织的人去作报告呢？他给人的印象就是一个行政管理人员，在具体的项目上一直在外围转悠，指手画脚，细节根本讲不清楚，当然汇报的效果也好不了。</p></li><li><p>如果是大家找那个会讲的人去汇报，那么全组的工作最有可能得到认可，而且还争取来很多资源。于是大家都有好处，接下来还会让他代表大家去汇报。久而久之，在外人的印象里，他的功劳第一。</p></li></ul><p>这不是编的故事，大家在单位里看看周围，就会发现情况和这里说的大同小异，这是在一个单位里自然选择的结果。通常由表达能力好的人去汇报工作和作报告，这样的人也因此更容易被看见，被提拔。</p><h2 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h2><p>很多在外企工作的小伙伴会注意到，很多公司的高管都是印度人，我自己也听过印度人在跟领导汇报工作，发现他们讲的确实比我讲的好太多，抛开英语层面不说，在内容和准备方面，确实有这么几点需要像他们学习的。</p><ul><li>PPT 做的很好，用结构化的图表达</li><li>有核心，有重点</li><li>能串起一个故事来，把事情说清楚</li></ul><p>最后你发现印度人做的你都有，比他做的还好，他没有的你也有。但是，他讲的比你好，另在场的所有人都印象深刻，都觉得很牛逼，只有你呵呵一笑。</p><p>作为程序员，吃技术这碗饭，提高技术固然不可缺少，但同时锻炼自己的写作和表达的能力才会更有机会打造自己的品牌，让自己走的更高更远。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最近自己要准备一个英文的 PPT 给国外的老大做分享，我的领导的审核给了我极大的帮助，并深刻的发现，同样想表达一个意思，自己的表达和领导的表达存在相当大的差异。</p><p>举一个例子，为什么用 Jenkins 共享库？来对比修改前后的差别</p><p>修改前：In the early stage of doing this work one year ago, I wrote many duplicate code such as sending emails, printing logs. Shared Libraries could help to solve this problem …</p><p>修改后：Just like writing any application code, that we need to create functions, subroutines for reuse and sharing purpose. The same logic applies to Jenkins configuration code …</p><p>其实没有必要说自己一开始走的一些弯路和错误，虽然很诚实，但这种表达对自己并没有什么好处。另外，从开场白，每页 PPT 之间的衔接，结束语都给出了修改意见。</p><p>到这里，我彻底抛开了对写 PPT 曾经有过的偏见，并<strong>认为写好 PPT 是一种能力</strong>。</p><p>不说了，继续改我的 PPT、背稿去了 …</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何确保在提交 Jenkins Pipeline 前没有语法错误</title>
      <link href="/2020/05/jenkins-pipeline-linter-connector/"/>
      <url>/2020/05/jenkins-pipeline-linter-connector/</url>
      
        <content type="html"><![CDATA[<p>我在做 Jenkins 声明式流水线开发时常会遇到的问题是：修改后的 Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。</p><p>为了减少这种因为语法错误而需要频繁像代码库去提交的情况，如果能在提交之前进行基本的语法校验，来检查当前的 Pipeline 是否存在语法错误就好了。</p><p>经过调查发现 Jenkins 本身提供了这样的语法检查 REST API，可以直接使用这个 API 来对 Pipeline 声明式进行语法校验，这个方式需要执行一长串的 <code>curl</code> 命令，看起来似乎很麻烦，如果能在 IDE 里直接运行就好了。</p><p>VS Code 作为当前当前最流行 IDE 工具，果然找到了相关的插件。</p><p>以下就介绍两种方法：针对 Jenkins 声明式流水线中的 Jenkinsfile 文件进行语法错误检查，这两种方式的原理都是通过调用 Jenkins REST API 来实现的。</p><span id="more"></span><blockquote><p>注意：</p><p>当前只有声明式流水线支持语法校验，脚本式流水线不支持。</p><p>如果使用 Jenkins 回放功能或是使用 Jenkins Web 页面开发 Pipeline 不存在上述问题。</p></blockquote><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p>如果你的项目使用了 Jenkins Shared Libraries，为了方便使用 REST API，那么不妨在该仓库下面创建一个 linter.sh 文件，并将这个文件加到你的 .gitignore 里，这样你可以在这个文件里配置你的用户名和密码就不会意外的被提交到 Git 仓库中。</p><p>以下是 linter.sh 脚本内容如下，供参考。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如何使用</span></span><br><span class="line"><span class="comment"># sh linter.sh your-jenkinsfile-path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为你的 Jenkins 用户名</span></span><br><span class="line">username=admin</span><br><span class="line"><span class="comment"># 替换为你的 Jenkins 密码</span></span><br><span class="line">password=admin</span><br><span class="line"><span class="comment"># 替换为你的 Jenkins URL</span></span><br><span class="line">JENKINS_URL=http://localhost:8080/</span><br><span class="line"></span><br><span class="line">PWD=`<span class="built_in">pwd</span>`</span><br><span class="line">JENKINS_FILE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">curl --user <span class="variable">$username</span>:<span class="variable">$password</span> -X POST -F <span class="string">&quot;jenkinsfile=&lt;<span class="variable">$PWD</span>/<span class="variable">$JENKINS_FILE</span>&quot;</span> <span class="variable">$JENKINS_URL</span>/pipeline-model-converter/validate</span><br></pre></td></tr></table></figure><p>让我们来测试一下效果 <code>sh linter.sh your-jenkinsfile-path</code></p><p>实例 1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh linter.sh Jenkinsfile</span><br><span class="line">Errors encountered validating Jenkinsfile:</span><br><span class="line">WorkflowScript: 161: Expected a stage @ line 161, column 9.</span><br><span class="line">           stages &#123;</span><br><span class="line">           ^</span><br></pre></td></tr></table></figure><p>实例 2</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh linter.sh Jenkinsfile</span><br><span class="line">Errors encountered validating Jenkinsfile:</span><br><span class="line">WorkflowScript: 60: Invalid condition <span class="string">&quot;failed&quot;</span> - valid conditions are [always, changed, fixed, regression, aborted, success, unsuccessful, unstable, failure, notBuilt, cleanup] @ line 60, column 9.</span><br><span class="line">           failed&#123;</span><br><span class="line">           ^</span><br><span class="line"><span class="comment"># 将 failed 改为 failure，再次执行，成功。</span></span><br><span class="line">sh linter.sh Jenkinsfile</span><br><span class="line">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure><p>当 Pipeline 写的很长的时候，总是很难发现有什么地方没有匹配或是缺了括号什么的。有了这个脚本就可以在提交之前检查是否有问题。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure><h2 id="Jenkins-Pipeline-Linter-Connector-插件"><a href="#Jenkins-Pipeline-Linter-Connector-插件" class="headerlink" title="Jenkins Pipeline Linter Connector 插件"></a><code>Jenkins Pipeline Linter Connector</code> 插件</h2><p>第二种方式就是通用了，只要是声明式流水线，就可以使用这个插件去验证是否存在语法错误问题。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在 VSCode 插件里搜索 <code>Jenkins Pipeline Linter Connector</code></p><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>打开 File -&gt; Preferences -&gt; Settings -&gt; Extensions， 找到 <code>Jenkins Pipeline Linter Connector</code>，参考如下配置。</p><p><img src="/2020/05/jenkins-pipeline-linter-connector/settings.png"></p><h3 id="运行插件"><a href="#运行插件" class="headerlink" title="运行插件"></a>运行插件</h3><p>右键 -&gt; Command Palette -&gt; Validate Jenkinsfile</p><p>或</p><p>执行快捷键 Shift + Alt + V</p><h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2020/05/jenkins-pipeline-linter-connector/example1.gif" alt="Example 1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果使用 VSCode 作为开发工具，推荐使用 <code>Jenkins Pipeline Linter Connector</code> 插件。</p><p>如果是 Jenkins Shared Libraries 仓库不妨可以创建一个 shell 脚本，通过执行脚本来进行校验。</p><p>当然，如果只是简单的使用 Jenkinfile 也可以在 Jenkins Web Pipeline 页面里编写，那里自带语法检查。</p><p>如果您还有别的方式，欢迎留言告诉我。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwarch v1.3 介绍</title>
      <link href="/2020/05/nightwatch-v1-3/"/>
      <url>/2020/05/nightwatch-v1-3/</url>
      
        <content type="html"><![CDATA[<p>Nightwatch js 是我之前写自动化测试用例使用了很长一段时间的测试框架，我当时的使用 v0.9 版本并且对使用和 API 进行了翻译。作为一名前测试工程师，对于自动化的知识不能不更新下自己的知识库，一转眼 Nightwatch 1.3 版本已经发布了，可以看到它在 GitHub 上的使用和关注度还是很高的。</p><p><img src="/2020/05/nightwatch-v1-3/nightwatch-star.png"></p><p>Nightwarch.js 是一个端到端的基于 Node.js 使用 W3C Webdriver （以前是 Selenium ）的自动化测试框架。它是一个完整的集成解决方案，用于 web 应用程序和网站的端到端测试，以及 Node.js 单元测试和集成测试。</p><span id="more"></span><p>查看了一下 Nightwatch 的发布历史（<a href="https://github.com/nightwatchjs/nightwatch/releases%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%99%E6%9C%9F%E9%97%B4%E4%BF%AE%E5%A4%8D%E4%BA%86%E4%B8%8D%E5%B0%91">https://github.com/nightwatchjs/nightwatch/releases），可以看到这期间修复了不少</a> Bug，而且在 v1.3 ​版本还新增一些新的功能。</p><ul><li><p>新增 BDD describe Interface - 可以同时运行以 BDD 描述和导出接口编写的测试，无需其他配置。</p></li><li><p>新增 <code>assert.not</code> 断言</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原来这么写</span></span><br><span class="line">browser.<span class="property">assert</span>.<span class="title function_">elementNotPresent</span>()</span><br><span class="line"><span class="comment">// 现在可以这么写</span></span><br><span class="line">browser.<span class="property">assert</span>.<span class="property">not</span>.<span class="title function_">elementPresent</span>(<span class="string">&#x27;.not_present&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>新增一些 APIs - 比如 <code>getElementProperty</code>, <code>domPropertyContains</code>, <code>domPropertyEquals</code>, <code>.property</code></p></li><li><p>新增了 CLI 选项</p><ul><li><code>--headless</code> - 以无头模式启动浏览器（Chrome或Firefox）</li><li><code>--timeout</code> - 设置断言失败之前重试断言的全局超时</li></ul></li></ul><p>如果要从 v1.0 之前的版本升级，参阅如下升级指南。</p><h2 id="升级和启动"><a href="#升级和启动" class="headerlink" title="升级和启动"></a>升级和启动</h2><p>从 NPM 安装 Nightwatch</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install nightwatch --save-dev</span><br></pre></td></tr></table></figure><h3 id="安装浏览器驱动程序"><a href="#安装浏览器驱动程序" class="headerlink" title="安装浏览器驱动程序"></a>安装浏览器驱动程序</h3><h4 id="Geckodriver（Firefox）"><a href="#Geckodriver（Firefox）" class="headerlink" title="Geckodriver（Firefox）"></a>Geckodriver（Firefox）</h4><p>Geckodriver 是用于驱动 Mozilla Firefox 浏览器的 WebDriver 服务。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install geckodriver --save-dev</span><br></pre></td></tr></table></figure><h4 id="Chromedriver"><a href="#Chromedriver" class="headerlink" title="Chromedriver"></a>Chromedriver</h4><p>Chromedriver 是用于驱动 Google Chrome 浏览器的 WebDriver 服务。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install chromedriver --save-dev</span><br></pre></td></tr></table></figure><p>或用一行安装所有内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i nightwatch geckodriver chromedriver --save-dev</span><br></pre></td></tr></table></figure><h2 id="运行演示测试"><a href="#运行演示测试" class="headerlink" title="运行演示测试"></a>运行演示测试</h2><p>Nightwatch 带有一个 example 文件夹，其中包含一些示例测试。</p><p>下面将运行一个基本测试，该测试打开搜索引擎 Ecosia.org，搜索 “nightwatch” 一词，并验证术语 “第一个结果” 是否是 Nightwatch.js 网站。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./node_modules/.bin/nightwatch node_modules/nightwatch/examples/tests/ecosia.js</span><br></pre></td></tr></table></figure><p>Windows 用户可能需要运行节点 node node_modules&#x2F;.bin&#x2F;nightwatch</p><h2 id="手动下载浏览器驱动程序"><a href="#手动下载浏览器驱动程序" class="headerlink" title="手动下载浏览器驱动程序"></a>手动下载浏览器驱动程序</h2><p>Nightwatch 使用兼容 WebDriver 的服务器来控制浏览器。 WebDriver 是 W3C 规范和行业标准，提供了与浏览器进行交互的平台和 HTTP 协议。</p><p>Nightwatch 包括对自动管理以下服务的支持：</p><h3 id="ChromeDriver"><a href="#ChromeDriver" class="headerlink" title="ChromeDriver"></a>ChromeDriver</h3><ul><li>针对 Chrome 浏览器运行测试</li><li>下载网址 <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads%E3%80%82">https://sites.google.com/a/chromium.org/chromedriver/downloads。</a></li></ul><p>从版本 75 开始，Chromedriver 默认启用 W3C Webdriver 协议。如果你现在想坚持使用 JSONWire，请调整 chromeOptions：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">desiredCapabilities : &#123;</span><br><span class="line">  browserName : <span class="string">&#x27;chrome&#x27;</span>,</span><br><span class="line">  chromeOptions: &#123;</span><br><span class="line">    w3c: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GeckoDriver"><a href="#GeckoDriver" class="headerlink" title="GeckoDriver"></a>GeckoDriver</h3><p>针对 Mozilla Firefox 浏览器运行测试。下载网址：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a>.</p><h3 id="Selenium-Standalone-Server"><a href="#Selenium-Standalone-Server" class="headerlink" title="Selenium Standalone Server"></a>Selenium Standalone Server</h3><ul><li>在一个地方管理多个浏览器配置，还可以利用 Selenium Grid 服务</li><li>可以从 Selenium 发布页面下载 selenium 服务器 jar 文件 selenium-server-standalone-3.x.x.jar：<a href="https://selenium-release.storage.googleapis.com/index.html">https://selenium-release.storage.googleapis.com/index.html</a></li></ul><p>重要的是要注意，尽管较早的 Nightwatch 版本（v0.9 及更低版本）需要 Selenium Server，但从 1.0 版本开始不再需要 Selenium。</p><p>特定的 WebDriver 设置指南可在 Docs 网站上找到。旧版 Selenium 驱动程序安装指南以及调试说明可以在 Wiki 上找到。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>示例文件夹中包含示例测试，这些示例演示了多个 Nightwatch 功能的用法。</p><p>你还可以查看 nightwatch-website-tests (<a href="https://github.com/nightwatchjs/nightwatch-website-tests">https://github.com/nightwatchjs/nightwatch-website-tests</a>) 存储库，例如针对 nightwatchjs.org (<a href="https://nightwatchjs.org/">https://nightwatchjs.org/</a>) 网站的测试。</p><h2 id="Nightwatch-单元测试"><a href="#Nightwatch-单元测试" class="headerlink" title="Nightwatch 单元测试"></a>Nightwatch 单元测试</h2><p>Nightwatch 的测试是使用 Mocha 编写的。</p><p>1.克隆项目</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nightwatchjs/nightwatch.git</span><br><span class="line"><span class="built_in">cd</span> nightwatch</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>2.运行测试</p><p>要运行完整的测试套件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>要检查测试范围，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run mocha-coverage</span><br></pre></td></tr></table></figure><p>然后在浏览器中打开生成的 coverage&#x2F;index.html 文件。</p><h2 id="Nightwatch-使用示例"><a href="#Nightwatch-使用示例" class="headerlink" title="Nightwatch 使用示例"></a>Nightwatch 使用示例</h2><p>以下是我写的一个使用 NightwatchJS 对 Nightwatch 官网 <a href="https://nightwatchjs.org/">https://nightwatchjs.org</a> 进行测试的一个测试示例（已经升级到 v1.3 版本）以展示在实际项目中使用 Nightwatchjs 如何组织目录结构，区别配置全局和本地环境。</p><p>示例仓库的 GitHub 地址是 <a href="https://github.com/nightwatchjs-cn/nightwatch-e2e%EF%BC%8C%E6%AC%A2%E8%BF%8E">https://github.com/nightwatchjs-cn/nightwatch-e2e，欢迎</a> Star 和 Fork。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use JMeter to do Performance Testing</title>
      <link href="/2020/05/jmeter-performance-testing/"/>
      <url>/2020/05/jmeter-performance-testing/</url>
      
        <content type="html"><![CDATA[<h2 id="Record-JMeter-Scripts"><a href="#Record-JMeter-Scripts" class="headerlink" title="Record JMeter Scripts"></a>Record JMeter Scripts</h2><p>use JMeter’s HTTP(S) Test Script Recorder, please refer to this official document <a href="https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html">https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html</a></p><h2 id="Running-JMeter-Scripts"><a href="#Running-JMeter-Scripts" class="headerlink" title="Running JMeter Scripts"></a>Running JMeter Scripts</h2><ul><li><p>Debug scripts on JMeter in GUI Mode</p><p>You can debug your record scripts in GUI Mode until there are no errors</p></li><li><p>run test scripts in Non-GUI Mode(Command Line mode) recommend</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jmeter -n -t ..\extras\Test.jmx -l Test.jtl</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h2 id="Running-JMeter-Scripts-on-Jenkins"><a href="#Running-JMeter-Scripts-on-Jenkins" class="headerlink" title="Running JMeter Scripts on Jenkins"></a>Running JMeter Scripts on Jenkins</h2><h3 id="Need-Tools"><a href="#Need-Tools" class="headerlink" title="Need Tools"></a>Need Tools</h3><ol><li>Jmeter - Web Request Load Testing</li><li>Jmeter-plugins<ul><li>ServerAgent-2.2.1 - PerfMon Agent to use with Standard Set</li></ul></li></ol><h3 id="Test-server"><a href="#Test-server" class="headerlink" title="Test server"></a>Test server</h3><p>Two virtual machines</p><ul><li>System under test</li><li>Jmeter execution machine, this server is also Jenkins server</li></ul><h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><h3 id="Develop-test-script"><a href="#Develop-test-script" class="headerlink" title="Develop test script"></a>Develop test script</h3><p>Record Scripts - use JMeter’s HTTP(S) Test Script Recorder, please refer to this official document <a href="https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html">https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html</a></p><h3 id="Create-Jenkins-job-for-running-JMeter-scripts"><a href="#Create-Jenkins-job-for-running-JMeter-scripts" class="headerlink" title="Create Jenkins job for running JMeter scripts"></a>Create Jenkins job for running JMeter scripts</h3><ol><li><p>Create a new item-&gt;select Freestyle project</p></li><li><p>Add build step-&gt;Execute Windows batch command</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//access to jenkins <span class="built_in">jobs</span> workspace, empty the last <span class="built_in">test</span> results</span><br><span class="line">cmd</span><br><span class="line"><span class="built_in">cd</span> C:\Users\peter\.jenkins\<span class="built_in">jobs</span>\TEST-122 Upload large data\workspace</span><br><span class="line">del /Q <span class="string">&quot;jtl&quot;</span>\*</span><br><span class="line">del /Q <span class="string">&quot;PerfMon Metrics Collector&quot;</span>\*</span><br></pre></td></tr></table></figure></li><li><p>Add build step-&gt;Execute Windows batch command</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//add first run jmeter script <span class="built_in">command</span>, <span class="keyword">if</span> you want run others script you can <span class="built_in">continue</span> to add <span class="string">&quot;Execute Windows batch command&quot;</span></span><br><span class="line">jmeter -n -t script/UploadLargeData-1.jmx -l jtl/UploadLargeData-1.jtl</span><br></pre></td></tr></table></figure></li><li><p>Configure build email - Configure System</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//Configure System, Extended E-mail Notification</span><br><span class="line">SMTP server: smtp.gmail.com</span><br><span class="line"></span><br><span class="line">//Job Configure, Enable <span class="string">&quot;Editable Email Notification&quot;</span></span><br><span class="line">Project Recipient List: xianpeng.shen@gmail.com</span><br><span class="line">Project Reply-To List: <span class="variable">$DEFAULT_REPLYTO</span></span><br><span class="line">Content Type: HTML (text/html)</span><br><span class="line">Default Subject:<span class="variable">$DEFAULT_SUBJECT</span></span><br><span class="line">Default Content: <span class="variable">$&#123;SCRIPT, template=&quot;groovy-html.template&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">//Advance setting</span><br><span class="line">Triggers: Always</span><br><span class="line">          Send to Recipient List</span><br></pre></td></tr></table></figure></li></ol><h3 id="Generate-test-report"><a href="#Generate-test-report" class="headerlink" title="Generate test report"></a>Generate test report</h3><p>JMeter-&gt;Add listener-&gt;add jp@gc - PerfMon Metrics Collector, browse Test.jtl, click right key on graph Export to CSV</p><h3 id="Analyze-test-results"><a href="#Analyze-test-results" class="headerlink" title="Analyze test results"></a>Analyze test results</h3><p>Introduction test scenarios</p><p>Using 1, 5, 10, 20, 30, (50) users loading test, record every group user test results</p><blockquote><p>Glossary</p><ul><li>Sample(label) - This indicates the number of virtual users per request.</li><li>Average - It is the average time taken by all the samples to execute specific label</li><li>Median - is a number which divides the samples into two equal halves.</li><li>%_line - is the value below which 90, 95, 99% of the samples fall.</li><li>Min - The shortest time taken by a sample for specific label.</li><li>Max - The longest time taken by a sample for specific label.</li><li>Error% - percentage of failed tests.</li><li>Throughput - how many requests per second does your server handle. Larger is better.</li><li>KB&#x2F;Sec - it is the Throughput measured in Kilobytes per second.</li></ul></blockquote><p>Example: Test results of each scenario shown in the following table</p><table><thead><tr><th>User</th><th># Samples</th><th>Average</th><th>Median</th><th>90% Line</th><th>95% LIne</th><th>Min</th><th>Max</th><th>Error %</th><th>Throughput</th><th>Received</th><th>Send KB&#x2F;sec</th></tr></thead><tbody><tr><td>1</td><td>31</td><td>348</td><td>345</td><td>452</td><td>517</td><td>773</td><td>5</td><td>773</td><td>0.00%</td><td>2.85215</td><td>2.5</td></tr><tr><td>5</td><td>155</td><td>1166</td><td>1164</td><td>1414</td><td>1602</td><td>1639</td><td>9</td><td>1821</td><td>0.00%</td><td>4.26445</td><td>3.73</td></tr><tr><td>10</td><td>310</td><td>2275</td><td>2299</td><td>2687</td><td>2954</td><td>3671</td><td>20</td><td>4104</td><td>0.00%</td><td>4.38547</td><td>3.84</td></tr><tr><td>20</td><td>620</td><td>4479</td><td>4620</td><td>5113</td><td>6152</td><td>6435</td><td>39</td><td>6571</td><td>0.00%</td><td>4.42826</td><td>3.88</td></tr><tr><td>30</td><td>930</td><td>6652</td><td>6899</td><td>7488</td><td>9552</td><td>10051</td><td>4</td><td>10060</td><td>0.00%</td><td>4.46776</td><td>3.91</td></tr></tbody></table><p>Test results analysis chart</p><p><img src="/2020/05/jmeter-performance-testing/response-chart.png" alt="Response Chart"> <img src="/2020/05/jmeter-performance-testing/permon-metrics.png" alt="PerMon Metrics"></p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronize from Bitbucket to GitHub via Jenkins</title>
      <link href="/2020/05/sync-from-bitbucket-to-github/"/>
      <url>/2020/05/sync-from-bitbucket-to-github/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近我们团队需要将一些示例和例子从内部的 Bitbucket 同步到 GitHub。我了解 GitHub 可以创建公共的或是私人的仓库，但我们需要保持以下两点</p><ul><li>只分享我们想给客户分享的内容</li><li>不改变当前的工作流程，即继续使用 Bitbucket</li></ul><span id="more"></span><p>因此我们需要在 GitHub 上创建相应的仓库，然后将内部 Bitbucket 仓库中对应的 master 分支定期的通过 CI job 同步到 BitHub 上去。</p><p><img src="/2020/05/sync-from-bitbucket-to-github/sync-diagrom.png"></p><h2 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h2><p>首先，需要对 Bitbucket 进行分支权限设置</p><ul><li>master 分支只允许通过 Pull Request 来进行修改</li><li>Pull Request 默认的 reviewer 至少需要一人，并且只有同意状态才允许合并</li></ul><p>其次，为了方便产品、售后等人员使用，简化分支策略如下</p><ol><li>从 master 分支上创建 feature 或是 bugfix 分支（取决于你的修改目的）</li><li>然后将你的更改提交到自己的 feature 或 bugfix 分支</li><li>在你自己的分支通过测试后，提交 Pull Request 到 master 分支</li><li>当 reviewer 同意状态，才能进行合并进入到 master 分支</li></ol><p><img src="/2020/05/sync-from-bitbucket-to-github/branch-strategy.png" alt="分支策略"></p><h2 id="Jenkins-Pipeline"><a href="#Jenkins-Pipeline" class="headerlink" title="Jenkins Pipeline"></a>Jenkins Pipeline</h2><p>基于这样的工作不是特别的频繁，也为了方便维护 Jenkins Pipeline 的简单和易于维护，我没有在需要同步的每个仓库里添加 <code>Jenkinsfile</code> 或在 Bitbucket 里添加 <code>webhooks</code>。有以下几点好处：</p><ul><li>只创建一个 Jenkins Job，用一个 <code>Jenkinsfile</code> 满足所有仓库的同步</li><li>减少了冗余的 <code>Jenkinsfile</code> 的代码，修改时只需更维护一个文件</li><li>不需要在每个仓库里添加一个 <code>Jenkinsfile</code>，更纯粹的展示示例，避免给非 IT 人员造成困扰</li></ul><p>不足之处，不能通过 SCM 来触发构建，如果想通过 <code>webhooks</code> 来触发，有的公司需要申请权限来添加 <code>webhooks</code> 比较麻烦；另外可能无法区分从哪个仓库发来的请求，实现指定仓库的同步。</p><p>因此如果不是特别频繁的需要同步，提供手动或是定时同步即可。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个 Jenkinsfile 是用来将 Bitbucket 仓库的 master 分支同步到 GitHub 仓库的 master 分支</span></span><br><span class="line"><span class="comment">// This Jenkinsfile is used to synchronize Bitbucket repositories master branches to GitHub repositories master branches.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Library</span>(<span class="string">&#x27;jenkins-shared-library@develop&#x27;</span>) _</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> email = <span class="keyword">new</span> org.cicd.email()</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line"></span><br><span class="line">  agent &#123;</span><br><span class="line">    label <span class="string">&quot;main-slave&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  parameters &#123;</span><br><span class="line">    booleanParam(<span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">name:</span> <span class="string">&#x27;git-repo-win&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Sync internal git-repo-win master branch with external git-repo-win on GitHub&#x27;</span>)</span><br><span class="line">    booleanParam(<span class="attr">defaultValue:</span> <span class="literal">true</span>,  <span class="attr">name:</span> <span class="string">&#x27;git-repo-lin&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Sync internal git-repo-lin master branch with external git-repo-lin on GitHub&#x27;</span>)</span><br><span class="line">    booleanParam(<span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">name:</span> <span class="string">&#x27;git-repo-aix&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Sync internal git-repo-aix master branch with external git-repo-aix on GitHub&#x27;</span>)</span><br><span class="line">    booleanParam(<span class="attr">defaultValue:</span> <span class="literal">false</span>, <span class="attr">name:</span> <span class="string">&#x27;git-repo-sol&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Sync internal git-repo-sol master branch with external git-repo-sol on GitHub&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  options &#123;</span><br><span class="line">    timestamps()</span><br><span class="line">    buildDiscarder(logRotator(<span class="attr">numToKeepStr:</span><span class="string">&#x27;50&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">&quot;Synchronous master branch&quot;</span>)&#123;</span><br><span class="line">      steps&#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            params.each &#123; key, value -&gt;</span><br><span class="line">              <span class="keyword">def</span> repoName = <span class="string">&quot;$key&quot;</span></span><br><span class="line">              <span class="keyword">if</span> ( value == <span class="literal">true</span>) &#123;</span><br><span class="line">                echo <span class="string">&quot;Start synchronizing $key Bitbucket repository.&quot;</span></span><br><span class="line">                sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                rm -rf $&#123;repoName&#125;</span></span><br><span class="line"><span class="string">                return_status=0</span></span><br><span class="line"><span class="string">                git clone -b master ssh://git@git.your-company.com:7999/~xshen/$&#123;repoName&#125;.git</span></span><br><span class="line"><span class="string">                cd $&#123;repoName&#125;</span></span><br><span class="line"><span class="string">                git config user.name &quot;Sync Bot&quot;</span></span><br><span class="line"><span class="string">                git config user.email &quot;bot@your-company.com&quot;</span></span><br><span class="line"><span class="string">                git remote add github git@github.com:shenxianpeng/$&#123;repoName&#125;.git</span></span><br><span class="line"><span class="string">                git push -u github master</span></span><br><span class="line"><span class="string">                return_status=&quot;\$?&quot;</span></span><br><span class="line"><span class="string">                if [ \$return_status -eq 0 ] ; then</span></span><br><span class="line"><span class="string">                  echo &quot;Synchronize $&#123;repoName&#125; from Bitbucket to GitHub success.&quot;</span></span><br><span class="line"><span class="string">                  cd ..</span></span><br><span class="line"><span class="string">                  rm -rf $&#123;repoName&#125;</span></span><br><span class="line"><span class="string">                  exit 0</span></span><br><span class="line"><span class="string">                else</span></span><br><span class="line"><span class="string">                  echo &quot;Synchronize $&#123;repoName&#125; from Bitbucket to GitHub failed.&quot;</span></span><br><span class="line"><span class="string">                  exit 1</span></span><br><span class="line"><span class="string">                fi&quot;&quot;&quot;</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                echo <span class="string">&quot;$&#123;repoName&#125; parameter value is $value, skip it.&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cleanWs()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            echo <span class="string">&quot;Some error occurs during synchronizing $key process.&quot;</span></span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            email.Send(currentBuild.currentResult, env.CHANGE_AUTHOR_EMAIL)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的 <code>Jenkinsfile</code> 的主要关键点是这句 <code>params.each &#123; key, value -&gt;  &#125;</code>，可以通过对构建时选择参数的进行判断，如果构建时参数已勾选，则会执行同步脚本；否则跳过同步脚本，循环到下一个参数进行判断，这样就实现了可以对指定仓库进行同步。</p><hr><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Recently our team need to share code from internal Bitbucket to external GitHub. I know GitHub can create private and public repository, but we have these points want to keep.</p><ul><li>only share the code what we want to share</li><li>not change current work process, continue use Bitbucket.</li></ul><p>So we have created corresponding repositories in the internal Bitbucket, and the master branches of these repositories will periodically synchronize with the master branches of corresponding repositories on GitHub via Jenkins job.</p><h2 id="Branch-Strategy"><a href="#Branch-Strategy" class="headerlink" title="Branch Strategy"></a>Branch Strategy</h2><p>Then the work process will be like</p><ol><li><p>Create a feature or bugfix branch (it depends on the purpose of your modification).</p></li><li><p>Commit changes to your feature&#x2F;bugfix branch.</p></li><li><p>Please pass your feature&#x2F;bugfix branch test first then create a Pull Request from your branch to master branch, at least one reviewer is required by default.</p></li><li><p>After the reviewer approved, you or reviewer could merge the Pull Request, then the changes will be added to the master branch.</p></li></ol><p>Timing trigger CI job will sync code from internal repositories master branch to GitHub master branch by default. also support manual trigger.</p><p><img src="/2020/05/sync-from-bitbucket-to-github/branch-strategy.png" alt="Branch Strategy"></p><h2 id="Jenkins-Job"><a href="#Jenkins-Job" class="headerlink" title="Jenkins Job"></a>Jenkins Job</h2><p>Base on this work is not very frequency, so I want make the Jenkins job simple and easy to maintain, so I don’t create every <code>Jenkinsfile</code> for every Bitbucket repositories.</p><p>Pros</p><ul><li>Only one <code>Jenkinsfile</code> for all Bitbucket repositories.</li><li>Less duplicate code, less need to change when maintenance.</li><li>Don’t need to add <code>Jenkinsfile</code> into very Bitbucket repositories.</li></ul><p>Cons</p><ul><li>Can not support SCM trigger, in my view this need add <code>Jenkinsfile</code> into repository.</li></ul><p>The main part for this <code>Jenkinsfile</code> is below, use this function <code>params.each &#123; key, value -&gt; &#125;</code> can by passing in parameters when start Jenkins build.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Bitbucket </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 与 Bitbucket Webhooks 的配置和使用</title>
      <link href="/2020/04/Bitbucket-webhooks-cn/"/>
      <url>/2020/04/Bitbucket-webhooks-cn/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Jenkins 的 multi-branch pipeline 想必很多人已经在用了，使用这种类型的 Jenkins Job 最显著的作用就是可以对 Git 仓库里的任何分支和任何 Pull Request（以下简写为 PR）进行构建。</p><p>在做 Jenkins 与 Bitbucket 的集成时，需要安装插件：Bitbucket Branch Source，可以通过该插件在 Jenkins 里进行 webhook 的配置。这种方式对于没有 Bitbucket 仓库的管理权限，CI&#x2F;CD 暂且处于变更比较频繁的阶段，不想麻烦的去申请添加 webhook 的同学来说是非常友好的，就是可以不用通过管理员在 Bitbucket 设置里添加 webhook 也可以实现创建 PR 后触发 Jenkins 构建。</p><p>但我最近遭遇了两次：在创建 PR 后没有触发 Jenkins 自动构建，查了 Jenkins 和 Bitbucket Branch Source 插件的配置，并没有任何改动，也各种 Google 之后也没有找到相应的解决办法（如果有遇到此情况的小伙伴欢迎一起交流）。</p><p>那既然这条路不稳定，不好走，那就走一条可以走通的路、直接的硬路，即在 Bitbucket 对应的仓库中添加 webhooks。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过设置 Webhook 事件，可以监听 git push，创建 Pull Request 等事件，在这些事件发生时自动触发 Jenkins 扫描，从而 Jenkins 可以获取到最新的创建（或删除）的分支（或Pull Request），从而自动构建Jenkins Job。</p><p><img src="/2020/04/Bitbucket-webhooks-cn/scan-multibranch.png" alt="扫描 Multibranch Pipeline"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在申请添加 webhooks 之前，我先在个人的私人仓库下，创建了测试仓库对 webhook 进行了测试，在经过反复的测试，觉得没有问题后，将相应的配置通过管理员添加到对应的 Repository 中。如下示例：</p><ul><li>Webhook name: test-multibranch</li><li>Webhook URL: <a href="http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch">http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch</a></li><li>Test connection: 返回 200, 连接测试通过。</li><li>Events:<ul><li>Repository: Push</li><li>Pull Request: Opened, Merged, Declined, Deleted.</li></ul></li><li>Active: enable</li></ul><p>放两张截图方便参考</p><p>Bitbucket webhooks 设置</p><p><img src="/2020/04/Bitbucket-webhooks-cn/webhook-setting.png" alt="Bitbucket webhooks 设置"></p><p>Jenkins multi-branch pipeline 设置</p><p><img src="/2020/04/Bitbucket-webhooks-cn/jenkins-setting.png" alt="Jenkins multi-branch pipeline 设置"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>通过以上的设置，开发人员在每次创建 PR 都会立即触发 Jenkins 构建，显著的变化有两个：</p><ul><li>比以前依赖插件响应速度要快很多，之前的响应速度一般在 1~2 分支才能触发构建</li><li>稳定程度大大提高，目前为止没有再出现创建 PR 之后没有触发 Jenkins 构建的情况</li></ul><p>最终的与 Jenkins 的集成效果是这样的：</p><ul><li>当创建 (Opened) 一个 Pull Request 时，会自动在 Jenkins 上创建相应的 Pull Request 任务（比如 PR-123）并开始构建。</li><li>当合并 (Merged) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li><li>当拒绝 (Declined) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li><li>当删除 (Deleted) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li></ul><p>已经 Merge 的分支，会显示已经划掉了，灰色的，这种分支不可以再进行执行构建；而 <code>develop</code> 和 <code>master</code> 分支则可以继续手动或自动构建。</p><p><img src="/2020/04/Bitbucket-webhooks-cn/multi-branch.png" alt="Jenkins multi-branch pipeline 设置"></p><p>已经 Merge 了的 Pull Request 同样显示为已经划掉了，灰色的。<code>PR-12</code>, <code>PR-13</code>, <code>PR-14</code> 可以继续手动或自动构建。</p><p><img src="/2020/04/Bitbucket-webhooks-cn/multi-pr.png" alt="Jenkins multi-branch pipeline 设置"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>这里说一下我为什么没有添加 Modified 事件。此前我是添加了 Modified 事件，我发现一些处于待合并的分支不知不觉被 webhook 触发了很多次，由于我们的全平台构建、扫描、以及测试需要至少 2~3 小时的时间，当处于待合并的 Pull Request 过多时，对构建资源的占用可能会是全天的。</p><p>我想应该是其中的哪个事件的特性所导致引起的，果不其然，这时候才注意到 Modified 事件的这段解释：A pull request’s description, title, or target branch is changed. 从解释里可以看到 Modified 事件包含修改 PR 描述、标题、还包括了目标分支的变更都会触发构建。</p><p>其实这个 Modified 事件的这个特性本身是特别好的，可以不断的将已经合并到目标分支的代码拉取到源分支进行构建，保证源分支的代码一直是与最新的代码进行集成、构建和测试，这样集成的结果才是最准确可靠的。但只是不适合目前的我们，因此暂且没有开启 Modified 事件。</p><p>这里没有添加其他 webhook 事件，比如对于主分支的触发事件，这个可以根据具体需要进行添加。如果不是那么频繁，每日构建满足需求，那么在 <code>Pipeline</code> 里添加一个 <code>trigger</code> 就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 与 Bitbucket Webhooks 的配置和使用</title>
      <link href="/2020/04/bitbucket-webhooks-cn/"/>
      <url>/2020/04/bitbucket-webhooks-cn/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Jenkins 的 multi-branch pipeline 想必很多人已经在用了，使用这种类型的 Jenkins Job 最显著的作用就是可以对 Git 仓库里的任何分支和任何 Pull Request（以下简写为 PR）进行构建。</p><p>在做 Jenkins 与 Bitbucket 的集成时，需要安装插件：Bitbucket Branch Source，可以通过该插件在 Jenkins 里进行 webhook 的配置。这种方式对于没有 Bitbucket 仓库的管理权限，CI&#x2F;CD 暂且处于变更比较频繁的阶段，不想麻烦的去申请添加 webhook 的同学来说是非常友好的，就是可以不用通过管理员在 Bitbucket 设置里添加 webhook 也可以实现创建 PR 后触发 Jenkins 构建。</p><p>但我最近遭遇了两次：在创建 PR 后没有触发 Jenkins 自动构建，查了 Jenkins 和 Bitbucket Branch Source 插件的配置，并没有任何改动，也各种 Google 之后也没有找到相应的解决办法（如果有遇到此情况的小伙伴欢迎一起交流）。</p><p>那既然这条路不稳定，不好走，那就走一条可以走通的路、直接的硬路，即在 Bitbucket 对应的仓库中添加 webhooks。</p><span id="more"></span><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过设置 Webhook 事件，可以监听 git push，创建 Pull Request 等事件，在这些事件发生时自动触发 Jenkins 扫描，从而 Jenkins 可以获取到最新的创建（或删除）的分支（或Pull Request），从而自动构建Jenkins Job。</p><p><img src="/2020/04/bitbucket-webhooks-cn/scan-multibranch.png" alt="扫描 Multibranch Pipeline"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在申请添加 webhooks 之前，我先在个人的私人仓库下，创建了测试仓库对 webhook 进行了测试，在经过反复的测试，觉得没有问题后，将相应的配置通过管理员添加到对应的 Repository 中。如下示例：</p><ul><li>Webhook name: test-multibranch</li><li>Webhook URL: <a href="http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch">http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch</a></li><li>Test connection: 返回 200, 连接测试通过。</li><li>Events:<ul><li>Repository: Push</li><li>Pull Request: Opened, Merged, Declined, Deleted.</li></ul></li><li>Active: enable</li></ul><p>放两张截图方便参考</p><p>Bitbucket webhooks 设置</p><p><img src="/2020/04/bitbucket-webhooks-cn/webhook-setting.png" alt="Bitbucket webhooks 设置"></p><p>Jenkins multi-branch pipeline 设置</p><p><img src="/2020/04/bitbucket-webhooks-cn/jenkins-setting.png" alt="Jenkins multi-branch pipeline 设置"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>通过以上的设置，开发人员在每次创建 PR 都会立即触发 Jenkins 构建，显著的变化有两个：</p><ul><li>比以前依赖插件响应速度要快很多，之前的响应速度一般在 1~2 分支才能触发构建</li><li>稳定程度大大提高，目前为止没有再出现创建 PR 之后没有触发 Jenkins 构建的情况</li></ul><p>最终的与 Jenkins 的集成效果是这样的：</p><ul><li>当创建 (Opened) 一个 Pull Request 时，会自动在 Jenkins 上创建相应的 Pull Request 任务（比如 PR-123）并开始构建。</li><li>当合并 (Merged) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li><li>当拒绝 (Declined) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li><li>当删除 (Deleted) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li></ul><p>已经 Merge 的分支，会显示已经划掉了，灰色的，这种分支不可以再进行执行构建；而 <code>develop</code> 和 <code>master</code> 分支则可以继续手动或自动构建。</p><p><img src="/2020/04/bitbucket-webhooks-cn/multi-branch.png" alt="Jenkins multi-branch pipeline 设置"></p><p>已经 Merge 了的 Pull Request 同样显示为已经划掉了，灰色的。<code>PR-12</code>, <code>PR-13</code>, <code>PR-14</code> 可以继续手动或自动构建。</p><p><img src="/2020/04/bitbucket-webhooks-cn/multi-pr.png" alt="Jenkins multi-branch pipeline 设置"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>这里说一下我为什么没有添加 Modified 事件。此前我是添加了 Modified 事件，我发现一些处于待合并的分支不知不觉被 webhook 触发了很多次，由于我们的全平台构建、扫描、以及测试需要至少 2~3 小时的时间，当处于待合并的 Pull Request 过多时，对构建资源的占用可能会是全天的。</p><p>我想应该是其中的哪个事件的特性所导致引起的，果不其然，这时候才注意到 Modified 事件的这段解释：A pull request’s description, title, or target branch is changed. 从解释里可以看到 Modified 事件包含修改 PR 描述、标题、还包括了目标分支的变更都会触发构建。</p><p>其实这个 Modified 事件的这个特性本身是特别好的，可以不断的将已经合并到目标分支的代码拉取到源分支进行构建，保证源分支的代码一直是与最新的代码进行集成、构建和测试，这样集成的结果才是最准确可靠的。但只是不适合目前的我们，因此暂且没有开启 Modified 事件。</p><p>这里没有添加其他 webhook 事件，比如对于主分支的触发事件，这个可以根据具体需要进行添加。如果不是那么频繁，每日构建满足需求，那么在 <code>Pipeline</code> 里添加一个 <code>trigger</code> 就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitbucket Webhooks Configuration</title>
      <link href="/2020/04/Bitbucket-webhooks/"/>
      <url>/2020/04/Bitbucket-webhooks/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>I have set several multi-branch pipeline and it can support Bitbucket Pull Request build. So, when developer create a Pull Request on Bitbucket, Jenkins can auto-trigger PR build. but this jenkins-plugin may not very stable, it had not work two times and I actually don’t know why it does that. But I know the use Git webhook is a direct and hard approach could solve this problem. After my test, the answer is yes. it works as expect.</p><span id="more"></span><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>By setting Webhook events, you can listen for git push, create Pull requests and other events, and automatically trigger Jenkins scan when these events occur, so that Jenkins can get the latest branch (or Pull Request) created (or deleted), and automatically build Jenkins Job.</p><p><img src="/2020/04/Bitbucket-webhooks/scan-multibranch.png" alt="Scan Multibranch Pipeline"></p><h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><ul><li>Webhook name: test-multibranch</li><li>Webhook URL: <a href="http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch">http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch</a></li><li>Test connection: 200(green), it passed.</li><li>Events:<ul><li>Repository: N&#x2F;A</li><li>Pull Request: Opened, Merged, Declined, Deleted.</li></ul></li><li>Active: enable</li></ul><p>Here is setting screenshots.</p><p><img src="/2020/04/Bitbucket-webhooks/webhook-setting.png" alt="Bitbucket webhooks setting"></p><p><img src="/2020/04/Bitbucket-webhooks/jenkins-setting.png" alt="Jenkins multi-branch pipeline setting"></p><p>At first, I also enable Modified event, but I found when there is new merged commits into our develop branch(this is our PR target branch), the holding Pull Request will be triggered and merge develop branch back to source branch then re-build.</p><p>Then I notice the Modified description: A pull request’s description, title, or target branch is changed.</p><p>This is a nice feature to make sure the source code integrate with target branch and build passed, but  this is too frequent for our product builds, because our product pull request build on some Unix platform need almost 3 hours, if has 5 Pull Requests waiting to review, when new commits into develop branch, these 5 PR need to rebuild again, this takes up all the build machines, resulting in those that need to be built not getting the resources.</p><p>After enable above Pull Request event and have these functions.</p><ul><li>when open a new Pull Request on Bitbucket, auto create Pull Request branch and build in Jenkins.</li><li>when merge the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li><li>when decline the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li><li>when delete the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li></ul><p>For other specific branches build my Jenkins job support manually build and timing trigger, so this event settings currently good to me.</p><p>If there is new settings need to add, I will keep update this article in the future.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitbucket Webhooks Configuration</title>
      <link href="/2020/04/bitbucket-webhooks/"/>
      <url>/2020/04/bitbucket-webhooks/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>I have set several multi-branch pipeline and it can support Bitbucket Pull Request build. So, when developer create a Pull Request on Bitbucket, Jenkins can auto-trigger PR build. but this jenkins-plugin may not very stable, it had not work two times and I actually don’t know why it does that. But I know the use Git webhook is a direct and hard approach could solve this problem. After my test, the answer is yes. it works as expect.</p><span id="more"></span><h2 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h2><p>By setting Webhook events, you can listen for git push, create Pull requests and other events, and automatically trigger Jenkins scan when these events occur, so that Jenkins can get the latest branch (or Pull Request) created (or deleted), and automatically build Jenkins Job.</p><p><img src="/2020/04/bitbucket-webhooks/scan-multibranch.png" alt="Scan Multibranch Pipeline"></p><h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><ul><li>Webhook name: test-multibranch</li><li>Webhook URL: <a href="http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch">http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch</a></li><li>Test connection: 200(green), it passed.</li><li>Events:<ul><li>Repository: N&#x2F;A</li><li>Pull Request: Opened, Merged, Declined, Deleted.</li></ul></li><li>Active: enable</li></ul><p>Here is setting screenshots.</p><p><img src="/2020/04/bitbucket-webhooks/webhook-setting.png" alt="Bitbucket webhooks setting"></p><p><img src="/2020/04/bitbucket-webhooks/jenkins-setting.png" alt="Jenkins multi-branch pipeline setting"></p><p>At first, I also enable Modified event, but I found when there is new merged commits into our develop branch(this is our PR target branch), the holding Pull Request will be triggered and merge develop branch back to source branch then re-build.</p><p>Then I notice the Modified description: A pull request’s description, title, or target branch is changed.</p><p>This is a nice feature to make sure the source code integrate with target branch and build passed, but  this is too frequent for our product builds, because our product pull request build on some Unix platform need almost 3 hours, if has 5 Pull Requests waiting to review, when new commits into develop branch, these 5 PR need to rebuild again, this takes up all the build machines, resulting in those that need to be built not getting the resources.</p><p>After enable above Pull Request event and have these functions.</p><ul><li>when open a new Pull Request on Bitbucket, auto create Pull Request branch and build in Jenkins.</li><li>when merge the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li><li>when decline the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li><li>when delete the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li></ul><p>For other specific branches build my Jenkins job support manually build and timing trigger, so this event settings currently good to me.</p><p>If there is new settings need to add, I will keep update this article in the future.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种方法解决 Jenkins 声明式流水线 Exception Method code too large !</title>
      <link href="/2020/04/jenkins-troubleshooting/"/>
      <url>/2020/04/jenkins-troubleshooting/</url>
      
        <content type="html"><![CDATA[<p>这是我第二次在使用 Jenkins 声明式流水线的时候遇到了这个问题，第一次遇到这个问题的时候是在一个 Pipeline 里大概写到 600 多行时候遇到如下错误</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:</span><br><span class="line">General error during <span class="keyword">class</span> <span class="title class_">generation</span>: Method code too large!</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: Method code too large!</span><br><span class="line">at groovyjarjarasm.asm.MethodWriter.a(Unknown Source)</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><span id="more"></span><p>当时我也使用了 Jenkins Shared Libraries，但那时候的代码组织的并不是很好，有不少步骤还没来得及单独抽离出来作为单独的方法。为了解决这个问题，经过一番重构，我将原来的 600 多行的 Pipeline 变成了现在的 300 多行，很不巧，随着继续添加功能，最近又遇到了这个问题。</p><p>出现这个问题的原因是 Jenkins 将整个声明性管道放入单个方法中，并且在一定大小下，JVM 因 java.lang .RuntimeException 失败：方法代码太大！看来我还是有什么方法超过了 64k。</p><p>Jenkins JIRA 上已经有了该问题的单子，但目前为止还是尚未解决。针对这个问题目前有三种方案，但他们都有各自的利弊。</p><h2 id="方法1：将步骤放到管道外的方法中"><a href="#方法1：将步骤放到管道外的方法中" class="headerlink" title="方法1：将步骤放到管道外的方法中"></a>方法1：将步骤放到管道外的方法中</h2><p>自2017年中以来，你可以在管道的末尾声明一个方法，然后在声明性管道中调用它即可。 这样，我们可以达到与共享库相同的效果，但是避免了维护开销。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Test&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                whateverFunction()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void whateverFunction() &#123;</span><br><span class="line">    sh &#x27;ls /&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>没有额外的维护费用</td><td>这个解决方案不知道会不会一直有效</td></tr><tr><td>所有的功能都反映在Jenkinsfile中</td><td>有的方法在多个Jenkinsfile里用到时，这种方法还是会写很多重复的代码</td></tr></tbody></table><h2 id="方法2：从声明式迁移到脚本式管道"><a href="#方法2：从声明式迁移到脚本式管道" class="headerlink" title="方法2：从声明式迁移到脚本式管道"></a>方法2：从声明式迁移到脚本式管道</h2><p>最后，我们可以迁移到脚本化的管道。有了它，我们就有了所有的自由。但是也就会失去我们最初决定使用声明式管道的原因。有了专用的DSL，就很容易理解管道是如何工作的</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>完全没有限制</td><td>需要比较大的重构</td></tr><tr><td></td><td>更容易出错</td></tr><tr><td></td><td>可能需要更多的代码来实现相同的功能</td></tr></tbody></table><h2 id="方法3：使用-Shared-Libraries"><a href="#方法3：使用-Shared-Libraries" class="headerlink" title="方法3：使用 Shared Libraries"></a>方法3：使用 Shared Libraries</h2><p>我当前使用的就是 Jenkins Shared Libraries，有一个共享库来执行一些复杂的步骤。共享库目前看来使用的非常广泛，尤其是在维护一些比较大型的、复杂的项目里用的很多。</p><p>最终我的解决办法是进一步缩减 Pipeline 里的代码，这里我也用到 方法1 的解决方案，将一些步骤提到 Pipeline {} 括号的外面，尤其是那些重复调用的​步骤。​</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>减少了大量重复的代码</td><td>任何一个修改都会影响到所有的引用，要测试好了再将变更放到引用分支里</td></tr><tr><td>可以分块使用</td><td>不熟悉的话很难理解一个步骤到底是做什么的</td></tr><tr><td>生成的Jenkinsfile将易于阅读</td><td></td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>方法1：对于单一的 Repository 的集成，可以快速实现，大多数人上手会很快。<br>方法2：脚本化提供了很少的限制，适合熟悉 Java，Groovy 的高级用户和有更复杂需求的人使用。<br>方法3：对于企业级项目，拥有很多 Repositories，需要进行大量集成，并且想了解共享库，推荐使用此方法。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps Top 30+ 面试问题</title>
      <link href="/2020/04/Top-30-DevOps-Interview-Questions/"/>
      <url>/2020/04/Top-30-DevOps-Interview-Questions/</url>
      
        <content type="html"><![CDATA[<h2 id="DevOps术语和定义"><a href="#DevOps术语和定义" class="headerlink" title="DevOps术语和定义"></a>DevOps术语和定义</h2><ol><li><p>什么是DevOps</p><p> 用最简单的术语来说，DevOps是产品开发过程中开发（Dev）和运营（Ops）团队之间的灰色区域。 DevOps是一种在产品开发周期中强调沟通，集成和协作的文化。因此，它消除了软件开发团队和运营团队之间的孤岛，使他们能够快速，连续地集成和部署产品。</p></li><li><p>什么是持续集成</p><p> 持续集成（Continuous integration，缩写为 CI）是一种软件开发实践，团队开发成员经常集成他们的工作。利用自动测试来验证并断言其代码不会与现有代码库产生冲突。理想情况下，代码更改应该每天在CI工具的帮助下，在每次提交时进行自动化构建（包括编译，发布，自动化测试），从而尽早地发现集成错误，以确保合并的代码没有破坏主分支。</p></li><li><p>什么是持续交付</p></li></ol><span id="more"></span><pre><code>持续交付（Continuous delivery，缩写为 CD）以及持续集成为交付代码包提供了完整的流程。在此阶段，将使用自动构建工具来编译工件，并使其准备好交付给最终用户。它的目标在于让软件的构建、测试与发布变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。</code></pre><ol start="4"><li><p>什么是持续部署</p><p> 持续部署（Continuous deployment）通过集成新的代码更改并将其自动交付到发布分支，从而将持续交付提升到一个新的水平。 更具体地说，一旦更新通过了生产流程的所有阶段，便将它们直接部署到最终用户，而无需人工干预。因此，要成功利用连续部署，软件工件必须先经过严格建立的自动化测试和工具，然后才能部署到生产环境中。</p></li><li><p>什么是持续测试及其好处</p><p> 连续测试是一种在软件交付管道中尽早、逐步和适当地应用自动化测试的实践。在典型的CI&#x2F;CD工作流程中，将小批量发布构建。因此，为每个交付手动执行测试用例是不切实际的。自动化的连续测试消除了手动步骤，并将其转变为自动化例程，从而减少了人工。因此，对于DevOps文化而言，自动连续测试至关重要。</p><p> 持续测试的好处</p><ul><li>确保构建的质量和速度。</li><li>支持更快的软件交付和持续的反馈机制。</li><li>一旦系统中出现错误，请立即检测。</li><li>降低业务风险。 在潜在问题变成实际问题之前进行评估。</li></ul></li><li><p>什么是版本控制及其用途？</p><p> 版本控制（或源代码控制）是一个存储库，源代码中的所有更改都始终存储在这个代码仓库中。版本控件提供了代码开发的操作历史记录，追踪文件的变更内容、时间、人等信息忠实地了记录下来。版本控制是持续集成和持续构建的源头。</p></li><li><p>什么是Git？</p><p> Git是一个分布式版本控制系统，可跟踪代码存储库中的更改。利用GitHub流，Git围绕着一个基于分支的工作流，该工作流随着团队项目的不断发展而简化了团队协作。</p></li></ol><h2 id="实施DevOps的原因"><a href="#实施DevOps的原因" class="headerlink" title="实施DevOps的原因"></a>实施DevOps的原因</h2><ol start="8"><li><p>DevOps为什么重要？DevOps如何使团队在软件交付方面受益？</p><p> 在当今的数字化世界中，组织必须重塑其产品部署系统，使其更强大，更灵活，以跟上竞争的步伐。</p><p> 这就是DevOps概念出现的地方。DevOps在为整个软件开发管道（从构思到部署，再到最终用户）产生移动性和敏捷性方面发挥着至关重要的作用。DevOps是将不断更新和改进产品的更简化，更高效的流程整合在一起的解决方案。</p></li><li><p>解释DevOps对开发人员有何帮助</p><p> 在没有DevOps的世界中，开发人员的工作流程将首先建立新代码，交付并集成它们，然后，操作团队有责任打包和部署代码。之后，他们将不得不等待反馈。而且如果出现问题，由于错误，他们将不得不重新执行一次。沿线是项目中涉及的不同团队之间的无数手动沟通。</p><p> 由于CI&#x2F;CD实践已经合并并自动化了其余任务，因此应用DevOps可以将开发人员的任务简化为仅构建代码。随着流程变得更加透明并且所有团队成员都可以访问，将工程团队和运营团队相结合有助于建立更好的沟通和协作。</p></li><li><p>为什么DevOps最近在软件交付方面变得越来越流行？</p><p>DevOps在过去几年中受到关注，主要是因为它能够简化组织运营的开发，测试和部署流程，并将其转化为业务价值。</p><p>技术发展迅速。因此，组织必须采用一种新的工作流程-DevOps和Agile方法-来简化和刺激其运营，而不能落后于其他公司。DevOps的功能通过Facebook和Netflix的持续部署方法所取得的成功得到了清晰体现，该方法成功地促进了其增长，而没有中断正在进行的运营。</p></li><li><p>CI&#x2F;CD有什么好处？</p><p>CI和CD的结合将所有代码更改统一到一个单一的存储库中，并通过自动化测试运行它们，从而在所有阶段全面开发产品，并随时准备部署。</p><p>CI&#x2F;CD使组织能够按照客户期望的那样快速，高效和自动地推出产品更新。</p><p>简而言之，精心规划和执行良好的CI&#x2F;CD管道可加快发布速度和可靠性，同时减轻产品的代码更改和缺陷。这最终将导致更高的客户满意度。</p></li><li><p>持续交付有什么好处？</p><p>通过手动发布代码更改，团队可以完全控制产品。 在某些情况下，该产品的新版本将更有希望：具有明确业务目的的促销策略。</p><p>通过自动执行重复性和平凡的任务，IT专业人员可以拥有更多的思考能力来专注于改进产品，而不必担心集成进度。</p></li><li><p>持续部署有哪些好处？</p><p>通过持续部署，开发人员可以完全专注于产品，因为他们在管道中的最后任务是审查拉取请求并将其合并到分支。通过在自动测试后立即发布新功能和修复，此方法可实现快速部署并缩短部署持续时间。</p><p>客户将是评估每个版本质量的人。新版本的错误修复更易于处理，因为现在每个版本都以小批量交付。</p></li></ol><h2 id="如何有效实施DevOps"><a href="#如何有效实施DevOps" class="headerlink" title="如何有效实施DevOps"></a>如何有效实施DevOps</h2><ol start="14"><li><p>定义典型的DevOps工作流程</p><p>典型的DevOps工作流程可以简化为4个阶段：</p><ul><li>版本控制：这是存储和管理源代码的阶段。 版本控件包含代码的不同版本。</li><li>持续集成：在这一步中，开发人员开始构建组件，并对其进行编译，验证，然后通过代码审查，单元测试和集成测试进行测试。</li><li>持续交付：这是持续集成的下一个层次，其中发布和测试过程是完全自动化的。 CD确保将新版本快速，可持续地交付给最终用户。</li><li>持续部署：应用程序成功通过所有测试要求后，将自动部署到生产服务器上以进行发布，而无需任何人工干预。</li></ul></li><li><p>DevOps的核心操作是什么？</p><p>DevOps在开发和基础架构方面的核心运营是：</p><p>Software development:</p><ul><li>Code building</li><li>Code coverage</li><li>Unit testing</li><li>Packaging</li><li>Deployment</li></ul><p>Infrastructure:</p><ul><li>Provisioning</li><li>Configuration</li><li>Orchestration</li><li>Deployment</li></ul></li><li><p>在实施DevOps之前，团队需要考虑哪些预防措施？</p><p>当组织尝试应用这种新方法时，对DevOps做法存在一些误解，有可能导致悲惨的失败：</p><ul><li>DevOps不仅仅是简单地应用新工具和&#x2F;或组建新的“部门”并期望它能正常工作。实际上，DevOps被认为是一种文化，开发团队和运营团队遵循共同的框架。</li><li>企业没有为其DevOps实践定义清晰的愿景。对开发团队和运营团队而言，应用DevOps计划是一项显着的变化。因此，拥有明确的路线图，将DevOps集成到您的组织中的目标和期望将消除任何混乱，并从早期就提供清晰的指导方针。</li><li>在整个组织中应用DevOps做法之后，管理团队需要建立持续的学习和改进文化。系统中的故障和问题应被视为团队从错误中学习并防止这些错误再次发生的宝贵媒介。</li></ul></li><li><p>SCM团队在DevOps中扮演什么角色？</p><p>软件配置管理（SCM）是跟踪和保留开发环境记录的实践，包括在操作系统中进行的所有更改和调整。</p><p>在DevOps中，将SCM作为代码构建在基础架构即代码实践的保护下。</p><p>SCM为开发人员简化了任务，因为他们不再需要手动管理配置过程。 现在，此过程以机器可读的形式构建，并且会自动复制和标准化。</p></li><li><p>质量保证（QA）团队在DevOps中扮演什么角色？</p><p>随着DevOps实践在创新组织中变得越来越受欢迎，QA团队的职责和相关性在当今的自动化世界中已显示出下降的迹象。</p><p>但是，这可以被认为是神话。 DevOps的增加并不等于QA角色的结束。 这仅意味着他们的工作环境和所需的专业知识正在发生变化。 因此，他们的主要重点是专业发展以跟上这种不断变化的趋势。</p><p>在DevOps中，质量保证团队在确保连续交付实践的稳定性以及执行自动重复性测试无法完成的探索性测试任务方面发挥战略作用。 他们在评估测试和检测最有价值的测试方面的见识仍然在缓解发布的最后步骤中的错误方面起着至关重要的作用。</p></li><li><p>DevOps使用哪些工具？ 描述您使用任何这些工具的经验</p><p>在典型的DevOps生命周期中，有不同的工具来支持产品开发的不同阶段。 因此，用于DevOps的最常用工具可以分为6个关键阶段：</p><p>持续开发：Git, SVN, Mercurial, CVS, Jira<br>持续整合：Jenkins, Bamboo, CircleCI<br>持续交付：Nexus, Archiva, Tomcat<br>持续部署：Puppet, Chef, Docker<br>持续监控：Splunk, ELK Stack, Nagios<br>连续测试：Selenium，Katalon Studio</p></li><li><p>如何在DevOps实践中进行变更管理</p><p>典型的变更管理方法需要与DevOps的现代实践适当集成。 第一步是将变更集中到一个平台中，以简化变更，问题和事件管理流程。</p><p>接下来，企业应建立高透明度标准，以确保每个人都在同一页面上，并确保内部信息和沟通的准确性。</p><p>对即将到来的变更进行分层并建立可靠的策略，将有助于最大程度地降低风险并缩短变更周期。 最后，组织应将自动化应用到其流程中，并与DevOps软件集成。</p></li></ol><h2 id="如何有效实施CI-x2F-CD"><a href="#如何有效实施CI-x2F-CD" class="headerlink" title="如何有效实施CI&#x2F;CD"></a>如何有效实施CI&#x2F;CD</h2><ol start="21"><li><p>CI&#x2F;CD的一些核心组件是什么？</p><p>稳定的CI&#x2F;CD管道需要用作版本控制系统的存储库管理工具。 这样开发人员就可以跟踪软件版本中的更改。</p><p>在版本控制系统中，开发人员还可以在项目上进行协作，在版本之间进行比较并消除他们犯的任何错误，从而减轻对所有团队成员的干扰。</p><p>连续测试和自动化测试是成功建立无缝CI &#x2F; CD管道的两个最关键的关键。 自动化测试必须集成到所有产品开发阶段（包括单元测试，集成测试和系统测试），以涵盖所有功能，例如性能，可用性，性能，负载，压力和安全性。</p></li><li><p>CI&#x2F;CD的一些常见做法是什么？</p><p>以下是建立有效的CI &#x2F; CD管道的一些最佳实践：</p><ul><li>发展DevOps文化</li><li>实施和利用持续集成</li><li>以相同的方式部署到每个环境</li><li>失败并重新启动管道</li><li>应用版本控制</li><li>将数据库包含在管道中</li><li>监控您的持续交付流程</li><li>使您的CD流水线流畅</li></ul></li><li><p>什么时候是实施CI&#x2F;CD的最佳时间？</p><p>向DevOps的过渡需要彻底重塑其软件开发文化，包括工作流，组织结构和基础架构。 因此，组织必须为实施DevOps的重大变化做好准备。</p></li><li><p>有哪些常见的CI&#x2F;CD服务器</p><p>Visual Studio<br>Visual Studio支持具有敏捷计划，源代码控制，包管理，测试和发布自动化以及持续监视的完整开发的DevOps系统。</p><p>TeamCity<br>TeamCity是一款智能CI服务器，可提供框架支持和代码覆盖，而无需安装任何额外的插件，也无需模块来构建脚本。</p><p>Jenkins<br>它是一个独立的CI服务器，通过共享管道和错误跟踪功能支持开发和运营团队之间的协作。 它也可以与数百个仪表板插件结合使用。</p><p>GitLab<br>GitLab的用户可以自定义平台，以进行有效的持续集成和部署。 GitLab帮助CI &#x2F; CD团队加快代码交付，错误识别和恢复程序的速度。</p><p>Bamboo<br>Bamboo是用于产品发布管理自动化的连续集成服务器。 Bamboo跟踪所有工具上的所有部署，并实时传达错误。</p></li><li><p>描述持续集成的有效工作流程</p><p>实施持续集成的成功工作流程包括以下实践：</p><ul><li>实施和维护项目源代码的存储库</li><li>自动化构建和集成</li><li>使构建自检</li><li>每天将更改提交到基准</li><li>构建所有添加到基准的提交</li><li>保持快速构建</li><li>在生产环境的克隆中运行测试</li><li>轻松获取最新交付物</li><li>使构建结果易于所有人监视</li><li>自动化部署</li></ul></li></ol><h2 id="每种术语之间的差异"><a href="#每种术语之间的差异" class="headerlink" title="每种术语之间的差异"></a>每种术语之间的差异</h2><ol start="26"><li><p>敏捷和DevOps之间有哪些主要区别？</p><p>基本上，DevOps和敏捷是相互补充的。敏捷更加关注开发新软件和以更有效的方式管理复杂过程的价值和原则。同时，DevOps旨在增强由开发人员和运营团队组成的不同团队之间的沟通，集成和协作。</p><p>它需要采用敏捷方法和DevOps方法来形成无缝工作的产品开发生命周期：敏捷原理有助于塑造和引导正确的开发方向，而DevOps利用这些工具来确保将产品完全交付给客户。</p></li><li><p>持续集成，持续交付和持续部署之间有什么区别？</p><p>持续集成（CI）是一种将代码版本连续集成到共享存储库中的实践。这种做法可确保自动测试新代码，并能快速检测和修复错误。</p><p>持续交付使CI进一步迈出了一步，确保集成后，随时可以在一个按钮内就可以释放代码库。因此，CI可以视为持续交付的先决条件，这是CI &#x2F; CD管道的另一个重要组成部分。</p><p>对于连续部署，不需要任何手动步骤。这些代码通过测试后，便会自动推送到生产环境。</p><p>所有这三个组件：持续集成，持续交付和持续部署是实施DevOps的重要阶段。</p><p>一方面，连续交付更适合于活跃用户已经存在的应用程序，这样事情就可以变慢一些并进行更好的调整。另一方面，如果您打算发布一个全新的软件并且将整个过程指定为完全自动化的，则连续部署是您产品的更合适选择。</p></li><li><p>连续交付和连续部署之间有哪些根本区别？</p><p>在连续交付的情况下，主分支中的代码始终可以手动部署。 通过这种做法，开发团队可以决定何时发布新的更改或功能，以最大程度地使组织受益。</p><p>同时，连续部署将在测试阶段之后立即将代码中的所有更新和修补程序自动部署到生产环境中，而无需任何人工干预。</p></li><li><p>持续集成和持续交付之间的区别是什么？</p><p>持续集成有助于确保软件组件紧密协作。 整合应该经常进行； 最好每小时或每天一次。 持续集成有助于提高代码提交的频率，并降低连接多个开发人员的代码的复杂性。 最终，此过程减少了不兼容代码和冗余工作的机会。</p><p>持续交付是CI &#x2F; CD流程中的下一步。 由于代码不断集成到共享存储库中，因此可以持续测试该代码。 在等待代码完成之前，没有间隙可以进行测试。 这样可确保找到尽可能多的错误，然后将其连续交付给生产。</p></li><li><p>DevOps和持续交付之间有什么区别？</p><p>DevOps更像是一种组织和文化方法，可促进工程团队和运营团队之间的协作和沟通。</p><p>同时，持续交付是成功将DevOps实施到产品开发工作流程中的重要因素。 持续交付实践有助于使新发行的版本更加乏味和可靠，并建立更加无缝和短的流程。</p><p>DevOps的主要目的是有效地结合Dev和Ops角色，消除所有孤岛，并实现独立于持续交付实践的业务目标。</p><p>另一方面，如果已经有DevOps流程，则连续交付效果最佳。 因此，它扩大了协作并简化了组织的统一产品开发周期。</p></li><li><p>敏捷，精益IT和DevOps之间有什么区别？</p><p>敏捷是仅专注于软件开发的方法。 敏捷旨在迭代开发，建立持续交付，缩短反馈循环以及在整个软件开发生命周期（SDLC）中改善团队协作。</p><p>精益IT是一种旨在简化产品开发周期价值流的方法。 精益专注于消除不必要的过程，这些过程不会增加价值，并创建流程来优化价值流。</p><p>DevOps专注于开发和部署-产品开发过程的Dev和Ops。 其目标是有效整合自动化工具和IT专业人员之间的角色，以实现更简化和自动化的流程。</p></li></ol><h2 id="准备好在下一次DevOps面试中取得成功吗？"><a href="#准备好在下一次DevOps面试中取得成功吗？" class="headerlink" title="准备好在下一次DevOps面试中取得成功吗？"></a>准备好在下一次DevOps面试中取得成功吗？</h2><p>目前有无数的DevOps面试问题，我们目前还不能完全解决。但是，我们希望这些问题和建议的答案能使您掌握DevOps和CI&#x2F;CD的大量知识，并成功地帮助您完成面试。</p><p>将来，我们将在此列表中添加更多内容。 因此，如果您对此主题有任何建议，请随时与我们联系。最后，我们祝您在测试事业中一切顺利！</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps Top 30+ 面试问题</title>
      <link href="/2020/04/top-30-devops-interview-questions/"/>
      <url>/2020/04/top-30-devops-interview-questions/</url>
      
        <content type="html"><![CDATA[<h2 id="DevOps术语和定义"><a href="#DevOps术语和定义" class="headerlink" title="DevOps术语和定义"></a>DevOps术语和定义</h2><ol><li><p>什么是DevOps</p><p> 用最简单的术语来说，DevOps是产品开发过程中开发（Dev）和运营（Ops）团队之间的灰色区域。 DevOps是一种在产品开发周期中强调沟通，集成和协作的文化。因此，它消除了软件开发团队和运营团队之间的孤岛，使他们能够快速，连续地集成和部署产品。</p></li><li><p>什么是持续集成</p><p> 持续集成（Continuous integration，缩写为 CI）是一种软件开发实践，团队开发成员经常集成他们的工作。利用自动测试来验证并断言其代码不会与现有代码库产生冲突。理想情况下，代码更改应该每天在CI工具的帮助下，在每次提交时进行自动化构建（包括编译，发布，自动化测试），从而尽早地发现集成错误，以确保合并的代码没有破坏主分支。</p></li><li><p>什么是持续交付</p></li></ol><span id="more"></span><pre><code>持续交付（Continuous delivery，缩写为 CD）以及持续集成为交付代码包提供了完整的流程。在此阶段，将使用自动构建工具来编译工件，并使其准备好交付给最终用户。它的目标在于让软件的构建、测试与发布变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。</code></pre><ol start="4"><li><p>什么是持续部署</p><p> 持续部署（Continuous deployment）通过集成新的代码更改并将其自动交付到发布分支，从而将持续交付提升到一个新的水平。 更具体地说，一旦更新通过了生产流程的所有阶段，便将它们直接部署到最终用户，而无需人工干预。因此，要成功利用连续部署，软件工件必须先经过严格建立的自动化测试和工具，然后才能部署到生产环境中。</p></li><li><p>什么是持续测试及其好处</p><p> 连续测试是一种在软件交付管道中尽早、逐步和适当地应用自动化测试的实践。在典型的CI&#x2F;CD工作流程中，将小批量发布构建。因此，为每个交付手动执行测试用例是不切实际的。自动化的连续测试消除了手动步骤，并将其转变为自动化例程，从而减少了人工。因此，对于DevOps文化而言，自动连续测试至关重要。</p><p> 持续测试的好处</p><ul><li>确保构建的质量和速度。</li><li>支持更快的软件交付和持续的反馈机制。</li><li>一旦系统中出现错误，请立即检测。</li><li>降低业务风险。 在潜在问题变成实际问题之前进行评估。</li></ul></li><li><p>什么是版本控制及其用途？</p><p> 版本控制（或源代码控制）是一个存储库，源代码中的所有更改都始终存储在这个代码仓库中。版本控件提供了代码开发的操作历史记录，追踪文件的变更内容、时间、人等信息忠实地了记录下来。版本控制是持续集成和持续构建的源头。</p></li><li><p>什么是Git？</p><p> Git是一个分布式版本控制系统，可跟踪代码存储库中的更改。利用GitHub流，Git围绕着一个基于分支的工作流，该工作流随着团队项目的不断发展而简化了团队协作。</p></li></ol><h2 id="实施DevOps的原因"><a href="#实施DevOps的原因" class="headerlink" title="实施DevOps的原因"></a>实施DevOps的原因</h2><ol start="8"><li><p>DevOps为什么重要？DevOps如何使团队在软件交付方面受益？</p><p> 在当今的数字化世界中，组织必须重塑其产品部署系统，使其更强大，更灵活，以跟上竞争的步伐。</p><p> 这就是DevOps概念出现的地方。DevOps在为整个软件开发管道（从构思到部署，再到最终用户）产生移动性和敏捷性方面发挥着至关重要的作用。DevOps是将不断更新和改进产品的更简化，更高效的流程整合在一起的解决方案。</p></li><li><p>解释DevOps对开发人员有何帮助</p><p> 在没有DevOps的世界中，开发人员的工作流程将首先建立新代码，交付并集成它们，然后，操作团队有责任打包和部署代码。之后，他们将不得不等待反馈。而且如果出现问题，由于错误，他们将不得不重新执行一次。沿线是项目中涉及的不同团队之间的无数手动沟通。</p><p> 由于CI&#x2F;CD实践已经合并并自动化了其余任务，因此应用DevOps可以将开发人员的任务简化为仅构建代码。随着流程变得更加透明并且所有团队成员都可以访问，将工程团队和运营团队相结合有助于建立更好的沟通和协作。</p></li><li><p>为什么DevOps最近在软件交付方面变得越来越流行？</p><p>DevOps在过去几年中受到关注，主要是因为它能够简化组织运营的开发，测试和部署流程，并将其转化为业务价值。</p><p>技术发展迅速。因此，组织必须采用一种新的工作流程-DevOps和Agile方法-来简化和刺激其运营，而不能落后于其他公司。DevOps的功能通过Facebook和Netflix的持续部署方法所取得的成功得到了清晰体现，该方法成功地促进了其增长，而没有中断正在进行的运营。</p></li><li><p>CI&#x2F;CD有什么好处？</p><p>CI和CD的结合将所有代码更改统一到一个单一的存储库中，并通过自动化测试运行它们，从而在所有阶段全面开发产品，并随时准备部署。</p><p>CI&#x2F;CD使组织能够按照客户期望的那样快速，高效和自动地推出产品更新。</p><p>简而言之，精心规划和执行良好的CI&#x2F;CD管道可加快发布速度和可靠性，同时减轻产品的代码更改和缺陷。这最终将导致更高的客户满意度。</p></li><li><p>持续交付有什么好处？</p><p>通过手动发布代码更改，团队可以完全控制产品。 在某些情况下，该产品的新版本将更有希望：具有明确业务目的的促销策略。</p><p>通过自动执行重复性和平凡的任务，IT专业人员可以拥有更多的思考能力来专注于改进产品，而不必担心集成进度。</p></li><li><p>持续部署有哪些好处？</p><p>通过持续部署，开发人员可以完全专注于产品，因为他们在管道中的最后任务是审查拉取请求并将其合并到分支。通过在自动测试后立即发布新功能和修复，此方法可实现快速部署并缩短部署持续时间。</p><p>客户将是评估每个版本质量的人。新版本的错误修复更易于处理，因为现在每个版本都以小批量交付。</p></li></ol><h2 id="如何有效实施DevOps"><a href="#如何有效实施DevOps" class="headerlink" title="如何有效实施DevOps"></a>如何有效实施DevOps</h2><ol start="14"><li><p>定义典型的DevOps工作流程</p><p>典型的DevOps工作流程可以简化为4个阶段：</p><ul><li>版本控制：这是存储和管理源代码的阶段。 版本控件包含代码的不同版本。</li><li>持续集成：在这一步中，开发人员开始构建组件，并对其进行编译，验证，然后通过代码审查，单元测试和集成测试进行测试。</li><li>持续交付：这是持续集成的下一个层次，其中发布和测试过程是完全自动化的。 CD确保将新版本快速，可持续地交付给最终用户。</li><li>持续部署：应用程序成功通过所有测试要求后，将自动部署到生产服务器上以进行发布，而无需任何人工干预。</li></ul></li><li><p>DevOps的核心操作是什么？</p><p>DevOps在开发和基础架构方面的核心运营是：</p><p>Software development:</p><ul><li>Code building</li><li>Code coverage</li><li>Unit testing</li><li>Packaging</li><li>Deployment</li></ul><p>Infrastructure:</p><ul><li>Provisioning</li><li>Configuration</li><li>Orchestration</li><li>Deployment</li></ul></li><li><p>在实施DevOps之前，团队需要考虑哪些预防措施？</p><p>当组织尝试应用这种新方法时，对DevOps做法存在一些误解，有可能导致悲惨的失败：</p><ul><li>DevOps不仅仅是简单地应用新工具和&#x2F;或组建新的“部门”并期望它能正常工作。实际上，DevOps被认为是一种文化，开发团队和运营团队遵循共同的框架。</li><li>企业没有为其DevOps实践定义清晰的愿景。对开发团队和运营团队而言，应用DevOps计划是一项显着的变化。因此，拥有明确的路线图，将DevOps集成到您的组织中的目标和期望将消除任何混乱，并从早期就提供清晰的指导方针。</li><li>在整个组织中应用DevOps做法之后，管理团队需要建立持续的学习和改进文化。系统中的故障和问题应被视为团队从错误中学习并防止这些错误再次发生的宝贵媒介。</li></ul></li><li><p>SCM团队在DevOps中扮演什么角色？</p><p>软件配置管理（SCM）是跟踪和保留开发环境记录的实践，包括在操作系统中进行的所有更改和调整。</p><p>在DevOps中，将SCM作为代码构建在基础架构即代码实践的保护下。</p><p>SCM为开发人员简化了任务，因为他们不再需要手动管理配置过程。 现在，此过程以机器可读的形式构建，并且会自动复制和标准化。</p></li><li><p>质量保证（QA）团队在DevOps中扮演什么角色？</p><p>随着DevOps实践在创新组织中变得越来越受欢迎，QA团队的职责和相关性在当今的自动化世界中已显示出下降的迹象。</p><p>但是，这可以被认为是神话。 DevOps的增加并不等于QA角色的结束。 这仅意味着他们的工作环境和所需的专业知识正在发生变化。 因此，他们的主要重点是专业发展以跟上这种不断变化的趋势。</p><p>在DevOps中，质量保证团队在确保连续交付实践的稳定性以及执行自动重复性测试无法完成的探索性测试任务方面发挥战略作用。 他们在评估测试和检测最有价值的测试方面的见识仍然在缓解发布的最后步骤中的错误方面起着至关重要的作用。</p></li><li><p>DevOps使用哪些工具？ 描述您使用任何这些工具的经验</p><p>在典型的DevOps生命周期中，有不同的工具来支持产品开发的不同阶段。 因此，用于DevOps的最常用工具可以分为6个关键阶段：</p><p>持续开发：Git, SVN, Mercurial, CVS, Jira<br>持续整合：Jenkins, Bamboo, CircleCI<br>持续交付：Nexus, Archiva, Tomcat<br>持续部署：Puppet, Chef, Docker<br>持续监控：Splunk, ELK Stack, Nagios<br>连续测试：Selenium，Katalon Studio</p></li><li><p>如何在DevOps实践中进行变更管理</p><p>典型的变更管理方法需要与DevOps的现代实践适当集成。 第一步是将变更集中到一个平台中，以简化变更，问题和事件管理流程。</p><p>接下来，企业应建立高透明度标准，以确保每个人都在同一页面上，并确保内部信息和沟通的准确性。</p><p>对即将到来的变更进行分层并建立可靠的策略，将有助于最大程度地降低风险并缩短变更周期。 最后，组织应将自动化应用到其流程中，并与DevOps软件集成。</p></li></ol><h2 id="如何有效实施CI-x2F-CD"><a href="#如何有效实施CI-x2F-CD" class="headerlink" title="如何有效实施CI&#x2F;CD"></a>如何有效实施CI&#x2F;CD</h2><ol start="21"><li><p>CI&#x2F;CD的一些核心组件是什么？</p><p>稳定的CI&#x2F;CD管道需要用作版本控制系统的存储库管理工具。 这样开发人员就可以跟踪软件版本中的更改。</p><p>在版本控制系统中，开发人员还可以在项目上进行协作，在版本之间进行比较并消除他们犯的任何错误，从而减轻对所有团队成员的干扰。</p><p>连续测试和自动化测试是成功建立无缝CI &#x2F; CD管道的两个最关键的关键。 自动化测试必须集成到所有产品开发阶段（包括单元测试，集成测试和系统测试），以涵盖所有功能，例如性能，可用性，性能，负载，压力和安全性。</p></li><li><p>CI&#x2F;CD的一些常见做法是什么？</p><p>以下是建立有效的CI &#x2F; CD管道的一些最佳实践：</p><ul><li>发展DevOps文化</li><li>实施和利用持续集成</li><li>以相同的方式部署到每个环境</li><li>失败并重新启动管道</li><li>应用版本控制</li><li>将数据库包含在管道中</li><li>监控您的持续交付流程</li><li>使您的CD流水线流畅</li></ul></li><li><p>什么时候是实施CI&#x2F;CD的最佳时间？</p><p>向DevOps的过渡需要彻底重塑其软件开发文化，包括工作流，组织结构和基础架构。 因此，组织必须为实施DevOps的重大变化做好准备。</p></li><li><p>有哪些常见的CI&#x2F;CD服务器</p><p>Visual Studio<br>Visual Studio支持具有敏捷计划，源代码控制，包管理，测试和发布自动化以及持续监视的完整开发的DevOps系统。</p><p>TeamCity<br>TeamCity是一款智能CI服务器，可提供框架支持和代码覆盖，而无需安装任何额外的插件，也无需模块来构建脚本。</p><p>Jenkins<br>它是一个独立的CI服务器，通过共享管道和错误跟踪功能支持开发和运营团队之间的协作。 它也可以与数百个仪表板插件结合使用。</p><p>GitLab<br>GitLab的用户可以自定义平台，以进行有效的持续集成和部署。 GitLab帮助CI &#x2F; CD团队加快代码交付，错误识别和恢复程序的速度。</p><p>Bamboo<br>Bamboo是用于产品发布管理自动化的连续集成服务器。 Bamboo跟踪所有工具上的所有部署，并实时传达错误。</p></li><li><p>描述持续集成的有效工作流程</p><p>实施持续集成的成功工作流程包括以下实践：</p><ul><li>实施和维护项目源代码的存储库</li><li>自动化构建和集成</li><li>使构建自检</li><li>每天将更改提交到基准</li><li>构建所有添加到基准的提交</li><li>保持快速构建</li><li>在生产环境的克隆中运行测试</li><li>轻松获取最新交付物</li><li>使构建结果易于所有人监视</li><li>自动化部署</li></ul></li></ol><h2 id="每种术语之间的差异"><a href="#每种术语之间的差异" class="headerlink" title="每种术语之间的差异"></a>每种术语之间的差异</h2><ol start="26"><li><p>敏捷和DevOps之间有哪些主要区别？</p><p>基本上，DevOps和敏捷是相互补充的。敏捷更加关注开发新软件和以更有效的方式管理复杂过程的价值和原则。同时，DevOps旨在增强由开发人员和运营团队组成的不同团队之间的沟通，集成和协作。</p><p>它需要采用敏捷方法和DevOps方法来形成无缝工作的产品开发生命周期：敏捷原理有助于塑造和引导正确的开发方向，而DevOps利用这些工具来确保将产品完全交付给客户。</p></li><li><p>持续集成，持续交付和持续部署之间有什么区别？</p><p>持续集成（CI）是一种将代码版本连续集成到共享存储库中的实践。这种做法可确保自动测试新代码，并能快速检测和修复错误。</p><p>持续交付使CI进一步迈出了一步，确保集成后，随时可以在一个按钮内就可以释放代码库。因此，CI可以视为持续交付的先决条件，这是CI &#x2F; CD管道的另一个重要组成部分。</p><p>对于连续部署，不需要任何手动步骤。这些代码通过测试后，便会自动推送到生产环境。</p><p>所有这三个组件：持续集成，持续交付和持续部署是实施DevOps的重要阶段。</p><p>一方面，连续交付更适合于活跃用户已经存在的应用程序，这样事情就可以变慢一些并进行更好的调整。另一方面，如果您打算发布一个全新的软件并且将整个过程指定为完全自动化的，则连续部署是您产品的更合适选择。</p></li><li><p>连续交付和连续部署之间有哪些根本区别？</p><p>在连续交付的情况下，主分支中的代码始终可以手动部署。 通过这种做法，开发团队可以决定何时发布新的更改或功能，以最大程度地使组织受益。</p><p>同时，连续部署将在测试阶段之后立即将代码中的所有更新和修补程序自动部署到生产环境中，而无需任何人工干预。</p></li><li><p>持续集成和持续交付之间的区别是什么？</p><p>持续集成有助于确保软件组件紧密协作。 整合应该经常进行； 最好每小时或每天一次。 持续集成有助于提高代码提交的频率，并降低连接多个开发人员的代码的复杂性。 最终，此过程减少了不兼容代码和冗余工作的机会。</p><p>持续交付是CI &#x2F; CD流程中的下一步。 由于代码不断集成到共享存储库中，因此可以持续测试该代码。 在等待代码完成之前，没有间隙可以进行测试。 这样可确保找到尽可能多的错误，然后将其连续交付给生产。</p></li><li><p>DevOps和持续交付之间有什么区别？</p><p>DevOps更像是一种组织和文化方法，可促进工程团队和运营团队之间的协作和沟通。</p><p>同时，持续交付是成功将DevOps实施到产品开发工作流程中的重要因素。 持续交付实践有助于使新发行的版本更加乏味和可靠，并建立更加无缝和短的流程。</p><p>DevOps的主要目的是有效地结合Dev和Ops角色，消除所有孤岛，并实现独立于持续交付实践的业务目标。</p><p>另一方面，如果已经有DevOps流程，则连续交付效果最佳。 因此，它扩大了协作并简化了组织的统一产品开发周期。</p></li><li><p>敏捷，精益IT和DevOps之间有什么区别？</p><p>敏捷是仅专注于软件开发的方法。 敏捷旨在迭代开发，建立持续交付，缩短反馈循环以及在整个软件开发生命周期（SDLC）中改善团队协作。</p><p>精益IT是一种旨在简化产品开发周期价值流的方法。 精益专注于消除不必要的过程，这些过程不会增加价值，并创建流程来优化价值流。</p><p>DevOps专注于开发和部署-产品开发过程的Dev和Ops。 其目标是有效整合自动化工具和IT专业人员之间的角色，以实现更简化和自动化的流程。</p></li></ol><h2 id="准备好在下一次DevOps面试中取得成功吗？"><a href="#准备好在下一次DevOps面试中取得成功吗？" class="headerlink" title="准备好在下一次DevOps面试中取得成功吗？"></a>准备好在下一次DevOps面试中取得成功吗？</h2><p>目前有无数的DevOps面试问题，我们目前还不能完全解决。但是，我们希望这些问题和建议的答案能使您掌握DevOps和CI&#x2F;CD的大量知识，并成功地帮助您完成面试。</p><p>将来，我们将在此列表中添加更多内容。 因此，如果您对此主题有任何建议，请随时与我们联系。最后，我们祝您在测试事业中一切顺利！</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 年务必知道的最好用的 14 款 CI/CD 工具</title>
      <link href="/2020/03/ci-cd-tools/"/>
      <url>/2020/03/ci-cd-tools/</url>
      
        <content type="html"><![CDATA[<p>“Quality at Speed” 是软件开发中的新规范。</p><p>企业正在朝着 DevOps 方法论和敏捷文化迈进，以加快交付速度并确保产品质量。在 DevOps 中，连续和自动化的交付周期使快速可靠的交付成为可能的基础。</p><p>这导致我们需要适当的持续集成和持续交付（CI&#x2F;CD）工具。 一个好的 CI&#x2F;CD 工具可以利用团队当前的工作流程，以最佳利用自动化功能并创建可靠的 CI&#x2F;CD 管道为团队发展提供所需的动力。</p><p>随着市场上大量 CI&#x2F;CD 工具的出现，团队可能难以做出艰难的决定来挑选合适的工具。该列表包含市场上最好的 14 种 CI&#x2F;CD 工具及其主要特性，使你和团队在选择过程中更加轻松。</p><span id="more"></span><p>以下罗列出了目前市场上最流行的 14 种最佳 CI&#x2F;CD 工具，希望该列表为你在选择 CI&#x2F;CD 前提供了足够的信息，更多详细信息你也可以查看官网做更深入的了解。最终结合你的需求以及现有基础架构以及未来潜力和改进的空间是将影响你最终选择的因素，帮助你选择到最适合你的规格的 CI&#x2F;CD 软件。</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins 是一个开源自动化服务器，在其中进行集中构建和持续集成。它是一个独立的基于 Java 的程序，带有 Windows，macOS，Unix 的操作系统的软件包。Jenkins 支持软件开发项目的构建，部署和自动化，以及成百上千的插件来满足你的需求。它是市场上最具影响力的 CI&#x2F;CD 工具之一。</p><p>Jenkins 主要特性：</p><ul><li>易于在各种操作系统上安装和升级</li><li>简单易用的界面</li><li>可通过社区提供的巨大插件资源进行扩展</li><li>在用户界面中轻松配置环境</li><li>支持主从架构的分布式构建</li><li>根据表达式构建时间表</li><li>在预构建步骤中支持 Shell 和 Windows 命令执行</li><li>支持有关构建状态的通知</li></ul><p>许可：免费。Jenkins 是一个拥有活跃社区的开源工具。</p><p>主页：<a href="https://jenkins.io/">https://jenkins.io/</a></p><h2 id="CircleCI"><a href="#CircleCI" class="headerlink" title="CircleCI"></a>CircleCI</h2><p>CircleCI 是一种 CI&#x2F;CD 工具，支持快速的软件开发和发布。CircleCI 允许从代码构建，测试到部署的整个用户管道自动化。</p><p>你可以将 CircleCI 与 GitHub，GitHub Enterprise 和 Bitbucket 集成，以在提交新代码行时创建内部版本。CircleCI 还可以通过云托管选项托管持续集成，或在私有基础架构的防火墙后面运行。</p><p>CircleCI 主要特性:</p><ul><li>与 Bitbucket，GitHub 和 GitHub Enterprise 集成</li><li>使用容器或虚拟机运行构建</li><li>简易调试</li><li>自动并行化</li><li>快速测试</li><li>个性化的电子邮件和IM通知</li><li>连续和特定于分支机构的部署</li><li>高度可定制</li><li>自动合并和自定义命令以上传软件包</li><li>快速设置和无限构建</li></ul><p>许可：Linux 计划从选择不运行任何并行操作开始。开源项目获得了另外三个免费容器。在注册期间，将看到价格以决定所需的计划。</p><p>主页： <a href="https://circleci.com/">https://circleci.com/</a></p><h2 id="TeamCity"><a href="#TeamCity" class="headerlink" title="TeamCity"></a>TeamCity</h2><p>TeamCity 是 JetBrains 的构建管理和持续集成服务器。</p><p>TeamCity 是一个持续集成工具，可帮助构建和部署不同类型的项目。 TeamCity 在 Java 环境中运行，并与 Visual Studio 和 IDE 集成。该工具可以安装在 Windows 和 Linux 服务器上，支持 .NET 和开放堆栈项目。</p><p>TeamCity 2019.1 提供了新的UI和本机 GitLab 集成。它还支持 GitLab 和 Bitbucket 服务器拉取请求。该版本包括基于令牌的身份验证，检测，Go测试报告以及 AWS Spot Fleet 请求。</p><p>TeamCity主要特性:</p><ul><li>提供多种方式将父项目的设置和配置重用到子项目</li><li>在不同环境下同时运行并行构建</li><li>启用运行历史记录构建，查看测试历史记录报告，固定，标记以及将构建添加到收藏夹</li><li>易于定制，交互和扩展服务器</li><li>保持CI服务器正常运行</li><li>灵活的用户管理，用户角色分配，将用户分组，不同的用户身份验证方式以及带有所有用户操作的日志，以透明化服务器上所有活动</li></ul><p>许可：TeamCity 是具有免费和专有许可证的商业工具。</p><p>主页： <a href="https://www.jetbrains.com/teamcity/">https://www.jetbrains.com/teamcity/</a></p><h2 id="Bamboo"><a href="#Bamboo" class="headerlink" title="Bamboo"></a>Bamboo</h2><p>Bamboo 是一个持续集成服务器，可自动执行软件应用程序版本的管理，从而创建了持续交付管道。Bamboo 涵盖了构建和功能测试，分配版本，标记发行版，在生产中部署和激活新版本。</p><p>Bamboo主要特性:</p><ul><li>支持多达 100 个远程构建代理</li><li>并行运行批次测试并快速获得反馈</li><li>创建图像并推送到注册表</li><li>每个环境的权限，使开发人员和测试人员可以在生产保持锁定状态的情况下按需部署到他们的环境中</li><li>在 Git，Mercurial，SVN Repos 中检测新分支，并将主线的CI方案自动应用于它们</li><li>触发器基于在存储库中检测到的更改构建。 推送来自 Bitbucket 的通知，已设置的时间表，另一个构建的完成或其任何组合。</li></ul><p>许可：Bamboo 定价层基于代理（Slave）而不是用户，代理越多，花费越多。</p><p>主页：<a href="https://www.atlassian.com/software/bamboo">https://www.atlassian.com/software/bamboo</a></p><h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p>GitLab 是一套用于管理软件开发生命周期各个方面的工具。 核心产品是基于 Web 的 Git 存储库管理器，具有问题跟踪，分析和 Wiki 等功能。</p><p>GitLab 允许你在每次提交或推送时触发构建，运行测试和部署代码。你可以在虚拟机，Docker 容器或另一台服务器上构建作业。</p><p>GitLab主要特性:</p><ul><li>通过分支工具查看，创建和管理代码以及项目数据</li><li>通过单个分布式版本控制系统设计，开发和管理代码和项目数据，从而实现业务价值的快速迭代和交付</li><li>提供真实性和可伸缩性的单一来源，以便在项目和代码上进行协作</li><li>通过自动化源代码的构建，集成和验证，帮助交付团队完全接受CI。</li><li>提供容器扫描，静态应用程序安全测试（SAST），动态应用程序安全测试（DAST）和依赖项扫描，以提供安全的应用程序以及许可证合规性</li><li>帮助自动化并缩短发布和交付应用程序的时间</li></ul><p>许可：GitLab 是一个商业工具和免费软件包。它提供了在 GitLab 或你的本地实例和&#x2F;或公共云上托管 SaaS 的功能。</p><p>主页：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><h2 id="Buddy"><a href="#Buddy" class="headerlink" title="Buddy"></a>Buddy</h2><p>Buddy 是一个 CI&#x2F;CD 软件，它使用 GitHub，Bitbucket 和 GitLab 的代码构建，测试，部署网站和应用程序。它使用具有预安装语言和框架的 Docker 容器以及 DevOps 来监视和通知操作，并以此为基础进行构建。</p><p>Buddy主要特性:</p><ul><li>易于将基于 Docker 的映像自定义为测试环境</li><li>智能变更检测，最新的缓存，并行性和全面的优化</li><li>创建，定制和重用构建和测试环境</li><li>普通和加密，固定和可设置范围：工作空间，项目，管道，操作</li><li>与 Elastic，MariaDB，Memcached，Mongo，PostgreSQL，RabbitMQ，Redis，Selenium Chrome 和 Firefox 关联的服务</li><li>实时监控进度和日志，无限历史记录</li><li>使用模板进行工作流管理，以克隆，导出和导入管道</li><li>一流的Git支持和集成</li></ul><p>许可：Buddy 是免费的商业工具。</p><p>主页：<a href="https://buddy.works/">https://buddy.works/</a></p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>Travis CI 是用于构建和测试项目的CI服务。Travis CI 自动检测新提交并推送到 GitHub 存储库的提交。每次提交新代码后，Travis CI 都会构建项目并相应地运行测试。</p><p>该工具支持许多构建配置和语言，例如 Node，PHP，Python，Java，Perl 等。</p><p>Travis 主要特性:</p><ul><li>快速设置</li><li>GitHub项目监控的实时构建视图</li><li>拉取请求支持</li><li>部署到多个云服务</li><li>预装的数据库服务</li><li>通过构建时自动部署</li><li>为每个版本清理虚拟机</li><li>支持 macOS，Linux 和 iOS</li><li>支持多种语言，例如 Android，C，C＃，C ++，Java，JavaScript（带有Node.js），Perl，PHP，Python，R，Ruby 等。</li></ul><p>许可：Travis CI 是一项托管的 CI&#x2F;CD 服务。私人项目可以在 travis-ci.com 上进行收费测试。可以在 travis-ci.org 上免费应用开源项目。</p><p>主页：<a href="https://travis-ci.com/">https://travis-ci.com</a></p><h2 id="Codeship"><a href="#Codeship" class="headerlink" title="Codeship"></a>Codeship</h2><p>Codeship 是一个托管平台，可多次支持早期和自动发布软件。通过优化测试和发布流程，它可以帮助软件公司更快地开发更好的产品。</p><p>Codeship 主要特性:</p><ul><li>与所选的任何工具，服务和云环境集成</li><li>易于使用。提供快速而全面的开发人员支持。</li><li>借助CodeShip的交钥匙环境和简单的UI，使构建和部署工作更快</li><li>选择AWS实例大小，CPU和内存的选项</li><li>通过通知中心为组织和团队成员设置团队和权限</li><li>无缝的第三方集成，智能通知管理和项目仪表板，可提供有关项目及其运行状况的高级概述。</li></ul><p>许可：每月最多免费使用100个版本，无限版本从$49&#x2F;月开始。你可以为更大的实例大小购买更多的并发构建或更多的并行管道。</p><p>主页： <a href="https://codeship.com/">https://codeship.com/</a></p><h2 id="GoCD"><a href="#GoCD" class="headerlink" title="GoCD"></a>GoCD</h2><p>GoCD 来自 ThoughtWorks，是一个开放源代码工具，用于构建和发布支持 CI&#x2F;CD 上的现代基础结构的软件。</p><ul><li>轻松配置相关性以实现快速反馈和按需部署</li><li>促进可信构件：每个管道实例都锚定到特定的变更集</li><li>提供对端到端工作流程的控制，一目了然地跟踪从提交到部署的更改</li><li>容易看到上游和下游</li><li>随时部署任何版本</li><li>允许将任何已知的良好版本的应用程序部署到你喜欢的任何位置</li><li>通过比较内部版本功能获得用于任何部署的简单物料清单</li><li>通过 GoCD 模板系统重用管道配置，使配置保持整洁</li><li>已经有许多插件</li></ul><p>许可：免费和开源</p><p>主页：<a href="https://www.gocd.org/">https://www.gocd.org/</a></p><h2 id="Wercker"><a href="#Wercker" class="headerlink" title="Wercker"></a>Wercker</h2><p>对于正在使用或正在考虑基于 Docker 启动新项目的开发人员，Wercker 可能是一个合适的选择。Wercker 支持组织及其开发团队使用 CI&#x2F;CD，微服务和 Docker。</p><p>2017 年 4 月 17 日，甲骨文宣布已签署最终协议收购 Wercker。</p><p>Wercker 主要特性:</p><ul><li>Git 集成，包括 GitHub，Bitbucket，GitLab 和版本控制</li><li>使用 Wercker CLI 在本地复制 SaaS 环境，这有助于在部署之前调试和测试管道</li><li>支持 Wercker 的 Docker 集成以构建最少的容器并使尺寸可管理</li><li>Walterbot – Wercker 中的聊天机器人 – 允许你与通知交互以更新构建状态</li><li>环境变量有助于使敏感信息远离存储库</li><li>Wercker 利用关键安全功能（包括源代码保护）来关闭测试日志，受保护的环境变量以及用户和项目的可自定义权限</li></ul><p>许可：甲骨文在收购后未提供 Wercker 的价格信息。</p><p>主页：<a href="https://app.wercker.com/">https://app.wercker.com</a></p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore 是一项托管的 CI&#x2F;CD 服务，用于测试和部署软件项目。 Semaphore 通过基于拉取请求的开发过程来建立 CI&#x2F;CD 标准。</p><p>Semaphore 主要特性:</p><ul><li>与 GitHub 集成</li><li>自动执行任何连续交付流程</li><li>在最快的 CI&#x2F;CD 平台上运行</li><li>自动缩放你的项目，以便你仅需支付使用费用</li><li>本机 Docker 支持。测试和部署基于 Docker 的应用程序</li><li>提供 Booster –一种功能，用于通过自动并行化Ruby项目的构建来减少测试套件的运行时间</li></ul><p>许可：灵活。使用传统的CI服务，你会受到计划容量的限制。同时，Semaphore 2.0 将根据你团队的实际需求进行扩展，因此你无需使用该工具就不必付费</p><p>主页：<a href="https://semaphoreci.com/">https://semaphoreci.com/</a></p><h2 id="Nevercode"><a href="#Nevercode" class="headerlink" title="Nevercode"></a>Nevercode</h2><p>Nevercode 支持移动应用程序的 CI&#x2F;CD。它有助于更​​快地构建，测试和发布本机和跨平台应用程序。</p><p>Nevercode 主要特性:</p><ul><li>自动配置和设置</li><li>测试自动化：单元和UI测试，代码分析，真实设备测试，测试并行化</li><li>自动发布：iTunes Connect，Google Play，Crashlytics，T​​estFairy，HockeyApp</li><li>你的构建和测试状态的详细概述</li></ul><p>许可：灵活。针对不同需求进行持续集成的不同计划。你可以从标准计划中选择，也可以请求根据自己的需求量身定制的计划。</p><p>主页：<a href="https://nevercode.io/">https://nevercode.io/</a></p><h2 id="Spinnaker"><a href="#Spinnaker" class="headerlink" title="Spinnaker"></a>Spinnaker</h2><p>Spinnaker 是一个多云连续交付平台，支持在不同的云提供商之间发布和部署软件更改，包括 AWS EC2，Kubernetes，Google Compute Engine，Google Kubernetes Engine，Google App Engine 等。</p><p>Spinnaker主要特性:</p><ul><li>创建部署管道，以运行集成和系统测试，旋转服务器组和降低服务器组以及监视部署。通过 Git 事件，Jenkins，Travis CI，Docker，cron 或其他 Spinnaker 管道触发管道</li><li>创建和部署不可变映像，以实现更快的部署，更轻松的回滚以及消除难以调试的配置漂移问题</li><li>使用它们的指标进行金丝雀分析，将你的发行版与诸如 Datadog，Prometheus，Stackdriver 或 SignalFx 的监视服务相关联</li><li>使用Halyard – Spinnaker的CLI管理工具安装，配置和更新你的 Spinnaker 实例</li><li>设置电子邮件，Slack，HipChat 或 SMS 的事件通知（通过 Twilio）</li></ul><p>许可：开源</p><p>主页：<a href="https://www.spinnaker.io/">https://www.spinnaker.io/</a></p><h2 id="Buildbot"><a href="#Buildbot" class="headerlink" title="Buildbot"></a>Buildbot</h2><p>Buildbot 是一个基于 Python 的 CI 框架，可自动执行编译和测试周期以验证代码更改，然后在每次更改后自动重建并测试树。因此，可以快速查明构建问题。</p><p>Buildbot 主要特性:</p><ul><li>自动化构建系统，应用程序部署以及复杂软件发布过程的管理</li><li>支持跨多个平台的分布式并行执行，与版本控制系统的灵活集成，广泛的状态报告</li><li>在各种从属平台上运行构建</li><li>任意构建过程并使用 C 和 Python 处理项目</li><li>最低主机要求：Python 和 Twisted</li><li>注意：Buildbot 将停止支持 Python 2.7，并需要迁移到 Python 3。</li></ul><p>许可：开源</p><p>主页：<a href="https://buildbot.net/">https://buildbot.net/</a></p><blockquote><p><a href="https://www.katalon.com/resources-center/blog/ci-cd-tools/">英文原文</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给你的 Git 仓库“瘦身”</title>
      <link href="/2020/03/maintaining-a-git-gepository/"/>
      <url>/2020/03/maintaining-a-git-gepository/</url>
      
        <content type="html"><![CDATA[<p>对 Git 仓库的维护通常是为了减少仓库的大小。如果你从另外一个版本控制系统导入了一个仓库，你可能需要在导入后清除掉不必要的文件。本文主要讨论如何从 Git 仓库中删除不需要的文件。</p><span id="more"></span><blockquote><p>请格外小心…..</p><p>本文中的步骤和工具使用的高级技术涉及破坏性操作。确保您在开始之前仔细读过并备份了你的仓库，创建一个备份最容易的方式是使用 –mirror 标志对你的仓库克隆，然后对整个克隆的文件进行打包压缩。有了这个备份，如果在维护期间意外损坏了你的仓库的关键元素，那么你可以通过备份的仓库来恢复。</p><p>请记住，仓库维护对仓库的用户可能会是毁灭性的。与你的团队或者仓库的关注者进行沟通会是很有必要的。确保每个人都已经检查了他们的代码，并且同意在仓库维护期间停止开发。</p></blockquote><h2 id="理解从-Git-的历史记录中删除文件"><a href="#理解从-Git-的历史记录中删除文件" class="headerlink" title="理解从 Git 的历史记录中删除文件"></a>理解从 Git 的历史记录中删除文件</h2><p>回想一下，克隆仓库会克隆整个历史记录——包括每个源代码文件的所有版本。如果一个用户提交了一个较大的文件，比如一个 JAR，则随后的每次克隆都会包含这个文件。即使用户最终在后面的某次提交中删除了这个文件，但是这个文件仍然存在于这个仓库的历史记录中。要想完全的从你的仓库中删除这个文件，你必须：</p><ul><li>从你的项目的当前的文件树中删除该文件;</li><li>从仓库的历史记录中删除文件——重写 Git 历史记录，从包含该文件的所有的提交中删除这个文件;</li><li>删除指向旧的提交历史记录的所有 reflog 历史记录;</li><li>重新整理仓库，使用 <code>git gc</code> 对现在没有使用的数据进行垃圾回收。</li></ul><p>Git 的 <code>gc</code>（垃圾回收）将通过你的任何一个分支或者标签来删除仓库中所有的实际没用的或者以某种方式引用的数据。为了使其发挥作用，我们需要重写包含不需要的文件的所有 Git 仓库历史记录，仓库将不再引用它 <code>git gc</code> 将会丢弃所有没用的数据。</p><p>重写存储库历史是一个棘手的事情，因为每个提交都依赖它的父提交，所以任何一个很小的改变都会改变它的每一个随后的提交的提交。有两个自动化的工具可以帮助你做这件事：</p><ol><li><code>BFG Repo Cleaner</code> —— 快速、简单且易于使用，需要 Java 6 或者更高版本的运行环境。</li><li><code>git filter-branch</code> —— 功能强大、配置麻烦，用于大于仓库时速度较慢，是核心 Git 套件的一部分。</li></ol><p>切记，当你重写历史记录后，无论你是使用 BFG 还是使用 filter-branch，你都需要删除指向旧的历史记录的 <code>reflog</code> 条目，最后运行垃圾回收器来删除旧的数据。</p><h2 id="使用-BFG-重写历史记录"><a href="#使用-BFG-重写历史记录" class="headerlink" title="使用 BFG 重写历史记录"></a>使用 BFG 重写历史记录</h2><p>BFG 是为将像大文件或者密码这些不想要的数据从 Git 仓库中删除而专门设计的，所以它有一一个简单的标志用来删除那些大的历史文件（不在当前的提交里面）：<code>--strip-blobs-bigger-than</code></p><p>BFG <a href="https://repo1.maven.org/maven2/com/madgag/bfg">下载地址</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar bfg.jar --strip-blobs-than 100M</span><br></pre></td></tr></table></figure><p>大小超过 100MB 的任何文件（不包含在你最近的提交中的文件——因为 BFG 默认会保护你的最新提交的内容）将会从你的 Git 仓库的历史记录中删除。如果你想用名字来指明具体的文件，你也可以这样做：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar bfg.jar --delete-files *.mp4</span><br></pre></td></tr></table></figure><p>BFG 的速度要比 git filter-branch 快 10-1000 倍，而且通常更容易使用——查看完整的<a href="https://rtyley.github.io/bfg-repo-cleaner/#usage">使用说明</a>和<a href="https://rtyley.github.io/bfg-repo-cleaner/#examples">示例</a>获取更多细节。</p><h2 id="或者，使用-git-filter-branch-来重写历史记录"><a href="#或者，使用-git-filter-branch-来重写历史记录" class="headerlink" title="或者，使用 git filter-branch 来重写历史记录"></a>或者，使用 git filter-branch 来重写历史记录</h2><p><code>filter-branch</code> 命令可以对 Git 仓库的历史记录重写，就像 BFG 一样，但是过程更慢和更手动化。如果你不知道这些大文件在哪里，那么你第一步就需要找到它们：</p><h3 id="手动查看你-Git-仓库中的大文件"><a href="#手动查看你-Git-仓库中的大文件" class="headerlink" title="手动查看你 Git 仓库中的大文件"></a>手动查看你 Git 仓库中的大文件</h3><p><a href="https://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/">Antony Stubbs</a> 写了一个可以很好地完成这个功能的 BASH 脚本。该脚本可以检查你的包文件的内容并列出大文件。在你开始删除文件之前，请执行以下操作获取并安装此脚本：</p><ol><li><p><a href="https://confluence.atlassian.com/bitbucket/files/321848291/321979854/1/1360604134990/git_find_big.sh">下载脚本</a>到你的本地的系统</p></li><li><p>将它放在一个可以访问你的 Git 仓库的易于找到的位置</p></li><li><p>让脚本成为可执行文件</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 git_find_big.sh</span><br></pre></td></tr></table></figure></li><li><p>克隆仓库到你本地系统</p></li><li><p>改变当前目录到你的仓库根目录</p></li><li><p>手动运行 Git 垃圾回收器</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git gc --auto</span><br></pre></td></tr></table></figure></li><li><p>找出 .git 文件夹的大小</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意文件大小，以便随后参考</span></span><br><span class="line"><span class="built_in">du</span> -hs .git/objects</span><br><span class="line">45M .git/objects</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>git_find_big.sh</code> 脚本来列出你的仓库中的大文件</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git_find_big.sh</span><br><span class="line">All sizes are <span class="keyword">in</span> kB<span class="string">&#x27;s. The pack column is the size of the object, compressed, inside the pack file.</span></span><br><span class="line"><span class="string">size  pack  SHA                                       location</span></span><br><span class="line"><span class="string">592   580   e3117f48bc305dd1f5ae0df3419a0ce2d9617336  media/img/emojis.jar</span></span><br><span class="line"><span class="string">550   169   b594a7f59ba7ba9daebb20447a87ea4357874f43  media/js/aui/aui-dependencies.jar</span></span><br><span class="line"><span class="string">518   514   22f7f9a84905aaec019dae9ea1279a9450277130  media/images/screenshots/issue-tracker-wiki.jar</span></span><br><span class="line"><span class="string">337   92    1fd8ac97c9fecf74ba6246eacef8288e89b4bff5  media/js/lib/bundle.js</span></span><br><span class="line"><span class="string">240   239   e0c26d9959bd583e5ef32b6206fc8abe5fea8624  media/img/featuretour/heroshot.png</span></span><br></pre></td></tr></table></figure></li></ol><p>大文件都是 JAR 文件，包的大小列是最相关的。aui-dependencies.jar 被压缩到 169kb，但是 emojis.jar 只压缩到 500kb。emojis.jar 就是一个待删除的对象。</p><h3 id="运行-filter-branch"><a href="#运行-filter-branch" class="headerlink" title="运行 filter-branch"></a>运行 filter-branch</h3><p>你可以给这个命令传递一个用于重写 Git 索引的过滤器。例如，一个过滤器可以可以将每个检索的提交删除。这个用法如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch&amp;nbsp; _pathname_ &#x27;</span> commitHASH</span><br></pre></td></tr></table></figure><p><code>--index-filter</code> 选项可以修改仓库的索引，<code>--cached</code> 选项从索引中而不是磁盘来删除文件。这样会更快，因为你不需要在运行这个过滤器前检查每个修订版本。<br><code>git rm</code> 中的 <code>ignore-unmatch</code> 选项可以防止在尝试移走不存在的文件 pathname 的时候命令失败。通过指定一个提交 HASH 值，你可以从每个以这个 HASH 值开始的提交中删除 pathname。要从开始处删除，你可以省略这个参数或者指定为 HEAD。</p><p>如果你的大文件在不同的分支，你将需要通过名字来删除每个文件。如果大文件都在一个单独的分支，你可以直接删除这个分支本身。</p><h4 id="选项-1：通过文件名删除文件"><a href="#选项-1：通过文件名删除文件" class="headerlink" title="选项 1：通过文件名删除文件"></a>选项 1：通过文件名删除文件</h4><p>使用下面的步骤来删除大文件：</p><ol><li><p>使用下面的命令来删除你找到的第一个大文件</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git filter-branch --index-filter <span class="string">&#x27;git rm --cached --ignore-unmatch filename&#x27;</span> HEAD</span><br></pre></td></tr></table></figure></li><li><p>重复步骤 1 找到剩下的每个大文件</p></li><li><p>在你的仓库里更新引用。 <code>filter-branch</code> 会为你原先的引用创建一个 <code>refs/original/</code> 下的备份。一旦你确信已经删除了正确的文件，你可以运行下面的命令来删除备份文件，同时可以让垃圾回收器回收大的对象</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git for-each-ref --format=<span class="string">&quot;%(refname)&quot;</span> refs/original/ | xargs -n 1 git update-ref -d</span><br></pre></td></tr></table></figure></li></ol><h4 id="选项-2：直接删除分支"><a href="#选项-2：直接删除分支" class="headerlink" title="选项 2：直接删除分支"></a>选项 2：直接删除分支</h4><p>如果你所有的大文件都在一个单独的分支上，你可以直接删除这个分支。删除这个分支会自动删除所有的引用。</p><ol><li><p>删除分支</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D PROJ567bugfix</span><br></pre></td></tr></table></figure></li><li><p>从后面的分支中删除所有的 reflog 引用</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog expire --expire=now PROJ567bugfix</span><br></pre></td></tr></table></figure></li></ol><h4 id="对不用的数据垃圾回收"><a href="#对不用的数据垃圾回收" class="headerlink" title="对不用的数据垃圾回收"></a>对不用的数据垃圾回收</h4><ol><li><p>删除从现在到后面的所有 reflog 引用（除非你明确地只在一个分支上操作）</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog expire --expire=now --all</span><br></pre></td></tr></table></figure></li><li><p>通过运行垃圾回收器和删除旧的对象重新打包仓库。</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure></li><li><p>把你所有的修改推送回仓库</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --all --force</span><br></pre></td></tr></table></figure></li><li><p>确保你所有的标签也是当前最新的</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push --tags --force</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://confluence.atlassian.com/bitbucket/maintaining-a-git-repository-321848291.html">英文原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款免费的 C/C++ 静态代码分析工具 Cppcheck 与 Jenkins 集成</title>
      <link href="/2020/02/cppcheck/"/>
      <url>/2020/02/cppcheck/</url>
      
        <content type="html"><![CDATA[<p>由于历史遗留原因，我们当前产品的代码仓库里遗留很多 Warning，这些 Warning 不是一时半会可以解决掉的。只有通过不断的丰富自动化测试用例，来保障最后的质量关卡，才敢有条不紊的进行 Warining 的修复，在次之前，如何有效杜绝继续引入更多的 Warining 是当下应该做的。</p><span id="more"></span><p>因此我想在 Pull Request 阶段加入 C&#x2F;C++ 的静态代码扫描的集成，但是很多工具只要涉及的是 C&#x2F;C++ 经常都是收费的，比如这里首选的 SonarQube，Community 版本不支持 C&#x2F;C++ 代码扫描，只有 Developer 以及 Enterprise 等付费版本才支持，在静态代码扫描还没有带来收益之前，盲目的付费只会给产品带来更多的成本，因此决定先寻找其他开源工具来替代。</p><p>最终我选择了 CPPCheck，主要有以下几个原因：</p><ol><li>这是为数不多的 C&#x2F;C++ 开源静态代码扫描工具</li><li>可以与 Jenkins 集成，可以在 Jenkins 里查看结果报告</li><li>支持 Jenkins Pipeline</li></ol><p>本文记录我调查和使用的经验，如果您也相关的需求，提供一点参考。</p><h2 id="安装-Cppcheck"><a href="#安装-Cppcheck" class="headerlink" title="安装 Cppcheck"></a>安装 Cppcheck</h2><p>安装到 Linux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install cppcheck.x86_64</span><br></pre></td></tr></table></figure><p>其他平台安装请参考 cppcheck <a href="http://cppcheck.sourceforge.net/">官网</a></p><p>如果你在 Linux 无法通过命令一键安装，也可通过下载源代码构建 cppcheck。以下是从代码手动构建一个 cppcheck 可执行文件的步骤</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> opt &amp;&amp; <span class="built_in">mkdir</span> cppcheck &amp;&amp; <span class="built_in">cd</span> cppcheck</span><br><span class="line"><span class="comment"># 下载代码</span></span><br><span class="line">wget https://github.com/danmar/cppcheck/archive/1.90.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf 1.90.tar.gz</span><br><span class="line"><span class="comment"># make build</span></span><br><span class="line"><span class="built_in">cd</span> cppcheck-1.90</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">cmake --build .</span><br><span class="line"><span class="comment"># link</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /opt/cppcheck/cppcheck-1.90/cppcheck /usr/bin/cppcheck</span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line"><span class="built_in">which</span> cppcheck</span><br><span class="line">/usr/bin/cppcheck</span><br><span class="line">cppcheck --version</span><br><span class="line">Cppcheck 1.90</span><br></pre></td></tr></table></figure><h2 id="使用-cppcheck-静态代码扫描"><a href="#使用-cppcheck-静态代码扫描" class="headerlink" title="使用 cppcheck 静态代码扫描"></a>使用 cppcheck 静态代码扫描</h2><p>在与 Jenkins 集成之前，先看看这个工具怎么用。通过查阅<a href="http://cppcheck.sourceforge.net/manual.pdf">Cppcheck 官方文档</a>，一般的使用如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如扫描 src 下 public 和 themes 两个目录下的代码将结果输出到 cppcheck.xml</span></span><br><span class="line">cppcheck src/public src/themes --xml 2&gt; cppcheck.xml</span><br></pre></td></tr></table></figure><h2 id="Cppcheck-与-Jenkins-集成"><a href="#Cppcheck-与-Jenkins-集成" class="headerlink" title="Cppcheck 与 Jenkins 集成"></a>Cppcheck 与 Jenkins 集成</h2><p>首先，下载 Cppcheck Jenkins <a href="https://plugins.jenkins.io/cppcheck/">插件</a>，通过 Pipeline Syntax 生成了此代码 <code>publishCppcheck pattern: &#39;cppcheck.xml&#39;</code></p><p>但是在读取 xml 文件进行报告展示时，我遇到了两个问题：</p><p>问题1：分析 cppcheck.xml 我在有的 Linux 机器上成功，有的机器上会失败，我怀疑是我的 JDK 版本不同所致。Jenkins JIRA 我也找到了次问题 <a href="https://issues.jenkins-ci.org/browse/JENKINS-60077">JENKINS-60077</a> 但目前还没有人来解决。</p><p>我之所以没有继续尝试去解决问题1，最主要的原因是它有一个对我来说是更致命的缺陷，那就是下面说的问题。</p><p>问题2： 无法通过 Cppcheck Results 报告直接查看代码，这样就算扫描出来了问题还需要去 git 或是本地的 IDE 上去查看具体的问题，大大降低效率。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看代码文件时会出错</span></span><br><span class="line">Can<span class="string">&#x27;t read file: Can&#x27;</span>t access the file: file:/disk1/agent/workspace/cppcheck-ud113/src/public/dummy/err_printf.c</span><br></pre></td></tr></table></figure><p>并且官方也相应的 Ticket 记录了该问题 <a href="https://issues.jenkins-ci.org/browse/JENKINS-42613">JENKINS-42613</a> 和 <a href="https://issues.jenkins-ci.org/browse/JENKINS-54209">JENKINS-54209</a>，JENKINS-42613 一直在等待 merge，截止发文，都还是暂时没有解决。</p><p>最后我发现 <a href="https://plugins.jenkins.io/warnings-ng/">Warnings Next Generation</a> 这个插件将取代整个 Jenkins 静态分析套件，其中包含了这些插件 Android Lint, CheckStyle, Dry, FindBugs, PMD, Warnings, Static Analysis Utilities, Static Analysis Collector，最后通过 Warnings Next Generation 插件解决了报告展示的问题。</p><p>这里可以通过 Pipeline Syntax 生成读取报告代码 <code>recordIssues(tools: [codeAnalysis(pattern: &#39;cppcheck.xml&#39;)])</code></p><p>更多有关 Warnings Next Generation 插件的使用，请参看<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md">文档</a></p><h3 id="最终-Pipeline-示例如下"><a href="#最终-Pipeline-示例如下" class="headerlink" title="最终 Pipeline 示例如下"></a>最终 Pipeline 示例如下</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">      label <span class="string">&#x27;cppcheck&#x27;</span></span><br><span class="line">      customWorkspace <span class="string">&quot;/agent/workspace/cppcheck&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">    string(name: <span class="string">&#x27;Branch&#x27;</span>, defaultValue: <span class="string">&#x27;develop&#x27;</span>, description: <span class="string">&#x27;Which branch do you want to do cppcheck?&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options &#123;</span><br><span class="line">    timestamps ()</span><br><span class="line">    buildDiscarder(logRotator(numToKeepStr:<span class="string">&#x27;50&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stage(<span class="string">&quot;Checkout&quot;</span>)&#123;</span><br><span class="line">    steps&#123;</span><br><span class="line">      checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/$&#123;Branch&#125;&#x27;</span>]],</span><br><span class="line">      browser: [<span class="variable">$class</span>: <span class="string">&#x27;BitbucketWeb&#x27;</span>, repoUrl: <span class="string">&#x27;https://git.yourcompany.com/projects/repos/cppcheck-example/browse&#x27;</span>],</span><br><span class="line">      doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [</span><br><span class="line">      [<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&#x27;**&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;CheckoutOption&#x27;</span>, <span class="built_in">timeout</span>: 30], [<span class="variable">$class</span>: <span class="string">&#x27;CloneOption&#x27;</span>, depth: 1, noTags: <span class="literal">false</span>, reference: <span class="string">&#x27;&#x27;</span>, shallow: <span class="literal">true</span>,   <span class="built_in">timeout</span>: 30]], submoduleCfg: [],</span><br><span class="line">      userRemoteConfigs: [[credentialsId: <span class="string">&#x27;d1cbab74-823d-41aa-abb7&#x27;</span>, url: <span class="string">&#x27;https://git.yourcompany.com/scm/cppcheck-example.git&#x27;</span>]]])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stage(<span class="string">&quot;Cppcheck&quot;</span>)&#123;</span><br><span class="line">    steps&#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        sh <span class="string">&#x27;cppcheck src/public src/themes --xml 2&gt; cppcheck.xml&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stage(<span class="string">&#x27;Publish results&#x27;</span>)&#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">      recordIssues(tools: [cppCheck(pattern: <span class="string">&#x27;cppcheck.xml&#x27;</span>)])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="报告展示"><a href="#报告展示" class="headerlink" title="报告展示"></a>报告展示</h3><p>我将 CPPCheck 应用到每个 Pull Request 里，当开发提交新的代码时，CPPCheck 就会去扫描代码，然后跟之前的历史记录做对比。CPPCheck 执行成功并生成报告，这里会出现一个按钮，点击进入。</p><p><img src="/2020/02/cppcheck/cppcheck-icon.png" alt="CPPCheck 入口"></p><p>打开之后就会当前分支代码的扫结果。</p><p><img src="/2020/02/cppcheck/cppcheck-view.png" alt="CPPCheck 当前的结果"></p><p>CPPCheck 有三个维度来来展示静态代码扫描结果：</p><ol><li><p>严重程度分布（Severities Distribution）：这里分为 High，Normal，Low 三种级别</p></li><li><p>参考比较（Reference Comparison）：这里会参考之前的数据进行比较，如果有新增就会显示 New，如果是现存的就显示为 Outstanding，如果减少了就会显示 Fixed</p></li><li><p>历史（History）：随着代码的增加和修改，这里会显示一个历史记录的趋势</p></li></ol><p>注意：cppcheck 相关的 xml 是存储在 Jenkins master 上，只有当前的 Jenkins Job 被人为删掉，那么 cppcheck xml 才会被删掉。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-sh-4.2$ <span class="built_in">ls</span> -l cppcheck*</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 418591 Feb 27 05:54 cppcheck-blames.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins    219 Feb 27 05:54 cppcheck-fixed-issues.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 142298 Feb 27 05:54 cppcheck-forensics.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins    219 Feb 27 05:54 cppcheck-new-issues.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 488636 Feb 27 05:54 cppcheck-outstanding-issues.xml</span><br></pre></td></tr></table></figure><p><img src="/2020/02/cppcheck/cppcheck-code.png" alt="查看具体 Warining 代码"></p><p>点击相应的连接就可以直接跳转到具体的代码警告位置了。</p><p>它是不是还挺香的？</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Cppcheck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 VirtualBox 配置一台 Linux 虚拟机</title>
      <link href="/2020/02/Setup-Linux-in-VirtualBox/"/>
      <url>/2020/02/Setup-Linux-in-VirtualBox/</url>
      
        <content type="html"><![CDATA[<p>如果你想使用 Linux 但又不想租用云厂商的虚拟机，那么 VirtualBox 是一个比较好的选择。我们可以在 VirtualBox 安装你需要的绝大数的操作系统。</p><p>为了保证使用的流畅，这里最好使用内存建议 8G 及以上，硬盘 256 GB 的 Windows 电脑。</p><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>下载和安装 VirtualBox <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li><li>CentOS 镜像下载地址 <a href="https://mirror.umd.edu/centos/7/isos/x86_64/">https://mirror.umd.edu/centos/7/isos/x86_64/</a></li><li>Ubuntu 镜像下载地址 <a href="https://ubuntu.com/#download">https://ubuntu.com/#download</a></li></ul><p>安装和配置</p><p><em>本文没有详细介绍每个安装步骤，只列出一些关键步骤。</em></p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 VirtualBox 配置一台 Linux 虚拟机</title>
      <link href="/2020/02/setup-linux-in-virtualbox/"/>
      <url>/2020/02/setup-linux-in-virtualbox/</url>
      
        <content type="html"><![CDATA[<p>如果你想使用 Linux 但又不想租用云厂商的虚拟机，那么 VirtualBox 是一个比较好的选择。我们可以在 VirtualBox 安装你需要的绝大数的操作系统。</p><p>为了保证使用的流畅，这里最好使用内存建议 8G 及以上，硬盘 256 GB 的 Windows 电脑。</p><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>下载和安装 VirtualBox <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></li><li>CentOS 镜像下载地址 <a href="https://mirror.umd.edu/centos/7/isos/x86_64/">https://mirror.umd.edu/centos/7/isos/x86_64/</a></li><li>Ubuntu 镜像下载地址 <a href="https://ubuntu.com/#download">https://ubuntu.com/#download</a></li></ul><p>安装和配置</p><p><em>本文没有详细介绍每个安装步骤，只列出一些关键步骤。</em></p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最有用的 Linux 命令行技巧</title>
      <link href="/2020/02/linux-tips/"/>
      <url>/2020/02/linux-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h2><p>列出当前目录的文件和文件夹。参数:</p><p><code>-l</code> 列出时显示详细信息</p><p><code>-a</code> 显示所有文件，包括隐藏的和不隐藏的</p><span id="more"></span><p>可以组合使用，像这样</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la</span><br></pre></td></tr></table></figure><h2 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h2><p>将源文件复制到目标。参数：</p><p><code>-i</code> 交互模式意味着等待确认，如果目标上有文件将被覆盖。</p><p><code>-r</code> 递归复制，意味着包含子目录（如果有的话）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> –ir source_dir target_dir</span><br></pre></td></tr></table></figure><h2 id="x2F-tmp-空间不够怎么办"><a href="#x2F-tmp-空间不够怎么办" class="headerlink" title="&#x2F;tmp 空间不够怎么办"></a>&#x2F;tmp 空间不够怎么办</h2><p>在 &#x2F;etc&#x2F;fstab 文件里增加一行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/fstab</span><br><span class="line"><span class="comment"># 添加如下一行</span></span><br><span class="line">tmpfs                   /tmp                    tmpfs   defaults,size=4G          0 0</span><br></pre></td></tr></table></figure><p>重启之后，<code>df -h</code> 查看，&#x2F;tmp 目录已经就变成 4G 了。</p><p>More, Refer to these links</p><ul><li><a href="https://likegeeks.com/main-linux-commands-easy-guide/">https://likegeeks.com/main-linux-commands-easy-guide/</a></li><li><a href="https://dzone.com/articles/most-useful-linux-command-line-tricks">https://dzone.com/articles/most-useful-linux-command-line-tricks</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HP-UX 安装工具以及一些使用总结</title>
      <link href="/2020/02/hpxu-tips/"/>
      <url>/2020/02/hpxu-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Java8"><a href="#安装-Java8" class="headerlink" title="安装 Java8"></a>安装 Java8</h2><p>安装包下载链接是 <a href="https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=JDKJRE8018">https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=JDKJRE8018</a></p><p>需要先注册，然后登陆后才能下载，我下载的是 <code>Itanium_JDK_8.0.18_June_2019_Z7550-96733_java8_18018_ia.depot</code></p><p>在线安装文档 <a href="https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-c04481894">https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-c04481894</a></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swinstall -s /tmp/Itanium_JDK_8.0.18_June_2019_Z7550-96733_java8_18018_ia.depot</span><br><span class="line"></span><br><span class="line"><span class="comment"># if swinstall not found</span></span><br><span class="line">/usr/sbin/swinstall -s /tmp/Itanium_JDK_8.0.18_June_2019_Z7550-96733_java8_18018_ia.depot</span><br></pre></td></tr></table></figure><p>安装成功后，会在根目录 opt 下多了一个 java8 目录，检查下 java 版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-5.0$ <span class="built_in">pwd</span></span><br><span class="line">/opt/java8</span><br><span class="line">bash-5.0$ <span class="built_in">cd</span> bin</span><br><span class="line">bash-5.0$ java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0.18-hp-ux&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0.18-hp-ux-b1)</span><br><span class="line">Java HotSpot(TM) Server VM (build 25.18-b1, mixed mode)</span><br></pre></td></tr></table></figure><p>创建软连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /opt/java8/bin/java /bin/java</span><br></pre></td></tr></table></figure><h2 id="安装-gzip-和-gunzip"><a href="#安装-gzip-和-gunzip" class="headerlink" title="安装 gzip 和 gunzip"></a>安装 gzip 和 gunzip</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 gzip</span></span><br><span class="line">/usr/bin/sudo /usr/local/bin/depothelper gzip</span><br></pre></td></tr></table></figure><p>如果你机器上已经有 zip 和 gunzip 了，只需要软连接一下即可，防止出现命令找不到的问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/sudo <span class="built_in">ln</span> -s /usr/contrib/bin/gzip /usr/bin/gzip</span><br><span class="line">/usr/bin/sudo <span class="built_in">ln</span> -s /usr/contrib/bin/gunzip /usr/bin/gunzip</span><br></pre></td></tr></table></figure><h2 id="Can-not-use-bash-in-HP-UX"><a href="#Can-not-use-bash-in-HP-UX" class="headerlink" title="Can not use bash in HP-UX"></a>Can not use <code>bash</code> in HP-UX</h2><p>For example, when you run <code>bash</code> command, you have the following error:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash</span><br><span class="line">/usr/lib/hpux64/dld.so: Unable to find library <span class="string">&#x27;libtermcap.so&#x27;</span>.</span><br></pre></td></tr></table></figure><p>Here is the solution：<a href="https://community.hpe.com/t5/HP-UX-General/Unable-to-use-bash-for-ia-machine-11-23/m-p/3980789#M128592">https://community.hpe.com/t5/HP-UX-General/Unable-to-use-bash-for-ia-machine-11-23/m-p/3980789#M128592</a></p><p>It bcasue the <code>LIBTERMCAP</code> is not installed, you can go <a href="http://hpux.connect.org.uk/hppd/hpux/Shells/bash-3.2/">here</a> to see <code>bash</code>‘s dependencies include <code>gettext</code> <code>libiconv</code> <code>termcap</code>, etc.</p><p>Here are two very useful commands of install and uninstall.</p><ul><li><p>Download <code>bash</code> to command <code>depothelper</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">depothelper bash</span><br></pre></td></tr></table></figure></li><li><p>If you wang to remove the package on your HP-UX system, you can run the command</p><p> <code>sudo /usr/sbin/swremove [package-name]</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HP-UX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Jenkins 定期自动给老板提供 Git 仓库的多维度代码分析报告</title>
      <link href="/2020/01/git-stats-jenkins/"/>
      <url>/2020/01/git-stats-jenkins/</url>
      
        <content type="html"><![CDATA[<p>上一篇（GitStats - Git 历史统计信息工具），我已经给老板提供了他想看的所有仓库的 Git 提交历史分析报告了，并且把报告都部署到了一台虚拟机的 tomcat 上了，老板可以通过网址访问直接查看每个仓库的分析报告了，看看谁的贡献大，谁活跃，谁偷懒了，谁周末写代码了（这里不鼓励 996）。</p><p>最近老板提需求了。</p><p><em>老板：你弄个这个网址的数据咋不更新呢？报告上咋没见你们提交代码呢？</em><br><em>小开：老板儿，您看到这些一个个仓库的数据都是小开我人肉手动生成的，要不您给我点时间，我来做个自动化任务吧。</em></p><span id="more"></span><p>我这么积极主动，不是我奉承老板，我心里也知道老板如果觉得 Git Stats 这个工具好用，肯定希望看到的分析报告是最新的。既然老板先提了，那我就别磨蹭了，赶紧干吧。</p><p>不过用啥实现呢？肯定是 Jenkins 了。一来我已经在 Jenkins 上做了很多的自动化任务了，轻车熟路；二来使用同一套系统不但可以减少繁多的系统入口，降低学习成本，也提高 Jenkins 服务器的利用率。</p><p>设身处地的考虑了下老板的使用需求，他肯定不希望自己去 Jenkins 服务器上去运行 Job 来生成这个Git 仓库的多维度代码分析报告，那么，如果我是老板，我希望：</p><ol><li>这个 Jenkins 任务要定期执行，不需要太频繁，一周更新一次就行；</li><li>另外还要支持对单独仓库的单独执行，一旦老板要立即马上查看某个仓库的的分析报告呢。</li></ol><p>最后实现的效果如下：</p><h2 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h2><p>老板可以勾选他最关心的代码仓库进行更新</p><h2 id="每周末定时执行"><a href="#每周末定时执行" class="headerlink" title="每周末定时执行"></a>每周末定时执行</h2><p>老板在周一上班就能看到最新的分析数据了，可以看到这个任务 Started by timer</p><h2 id="最终的-Jenkinsfile-是这样的"><a href="#最终的-Jenkinsfile-是这样的" class="headerlink" title="最终的 Jenkinsfile 是这样的"></a>最终的 Jenkinsfile 是这样的</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent&#123;</span><br><span class="line">    node &#123;</span><br><span class="line">      label <span class="string">&#x27;main-slave&#x27;</span></span><br><span class="line">      customWorkspace <span class="string">&quot;/workspace/gitstats&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">    USER_CRE = credentials(<span class="string">&quot;d1cbab74-823d-41aa-abb7&quot;</span>)</span><br><span class="line">    webapproot = <span class="string">&quot;/workspace/apache-tomcat-7.0.99/webapps/gitstats&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">    booleanParam(defaultValue: <span class="literal">true</span>, name: <span class="string">&#x27;repo1&#x27;</span>, description: <span class="string">&#x27;uncheck to disable [repo1]&#x27;</span>)</span><br><span class="line">    booleanParam(defaultValue: <span class="literal">true</span>, name: <span class="string">&#x27;repo2&#x27;</span>, description: <span class="string">&#x27;uncheck to disable [repo2]&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  triggers &#123;</span><br><span class="line">    cron <span class="string">&#x27;0 3 * * 7&#x27;</span>    <span class="comment"># 每周日早上进行定时运行，因此此时机器是空闲的。</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options &#123;</span><br><span class="line">    buildDiscarder(logRotator(numToKeepStr:<span class="string">&#x27;10&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stages&#123;</span><br><span class="line">    stage(<span class="string">&quot;Checkout gitstats&quot;</span>)&#123;</span><br><span class="line">      steps&#123;</span><br><span class="line">        <span class="comment"># 准备存放 html 报告目录</span></span><br><span class="line">        sh <span class="string">&quot;mkdir -p html&quot;</span></span><br><span class="line">        <span class="comment"># 下载 gitstats 代码</span></span><br><span class="line">        sh <span class="string">&quot;rm -rf gitstats &amp;&amp; git clone https://github.com/hoxu/gitstats.git&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;Under statistics&quot;</span>) &#123;</span><br><span class="line">      parallel &#123;</span><br><span class="line">        stage(<span class="string">&quot;reop1&quot;</span>) &#123;</span><br><span class="line">          when &#123;</span><br><span class="line">            expression &#123; <span class="built_in">return</span> params.repo1 &#125;  <span class="comment"># 判断是否勾选了</span></span><br><span class="line">          &#125;</span><br><span class="line">          steps &#123;</span><br><span class="line">            <span class="comment"># 下载要进行分析的仓库 repo1</span></span><br><span class="line">            sh <span class="string">&#x27;git clone -b master https://$USER_CRE_USR:&quot;$USER_CRE_PSW&quot;@git.software.com/scm/repo1.git&#x27;</span></span><br><span class="line">            <span class="comment"># 进行仓库 repo1 的历史记录分析</span></span><br><span class="line">            sh <span class="string">&quot;cd gitstats &amp;&amp; ./gitstats ../repo1 ../html/repo1&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          post &#123;</span><br><span class="line">            success &#123;</span><br><span class="line">              <span class="comment"># 如果分析成功，则将分析结果放到 apache-tomcat-7.0.99/webapps/gitstats 目录下</span></span><br><span class="line">              sh <span class="string">&#x27;rm -rf $&#123;webapproot&#125;/repo1 &amp;&amp; mv html/repo1 $&#123;webapproot&#125;&#x27;</span></span><br><span class="line">              <span class="comment"># 然后删掉 repo1 的代码和 html 报告，以免不及时清理造成磁盘空间的过度占用</span></span><br><span class="line">              sh <span class="string">&quot;rm -rf repo1&quot;</span></span><br><span class="line">              sh <span class="string">&quot;rm -rf html/repo1&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stage(<span class="string">&quot;repo2&quot;</span>) &#123;</span><br><span class="line">          when &#123;</span><br><span class="line">            expression &#123; <span class="built_in">return</span> params.repo2 &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          steps &#123;</span><br><span class="line">            sh <span class="string">&#x27;git clone -b master https://$USER_CRE_USR:&quot;$USER_CRE_PSW&quot;@git.software.com/scm/repo2.git&#x27;</span></span><br><span class="line">            sh <span class="string">&quot;cd gitstats &amp;&amp; ./gitstats ../repo2 ../html/repo2&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">          post &#123;</span><br><span class="line">            success &#123;</span><br><span class="line">              sh <span class="string">&#x27;rm -rf $&#123;webapproot&#125;/repo2 &amp;&amp; mv html/repo2 $&#123;webapproot&#125;&#x27;</span></span><br><span class="line">              sh <span class="string">&quot;rm -rf repo2&quot;</span></span><br><span class="line">              sh <span class="string">&quot;rm -rf html/repo2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  post&#123;</span><br><span class="line">    always&#123;</span><br><span class="line">      <span class="comment"># 总是给执行者分送邮件通知，不论是否成功都会对工作空间进行清理</span></span><br><span class="line">      script &#123;</span><br><span class="line">        def email = load <span class="string">&quot;vars/email.groovy&quot;</span></span><br><span class="line">        email.build(currentBuild.result, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      cleanWs()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你是测试、DevOps或是从事研发效能方面的工作，那么利用好开源工具，比如 Jenkins 和 Git Stats 就可以快速帮助老板或是你自己提供一个 Git 仓库的多维度代码分析报告，有助于更加了解产品的代码情况。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Stats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIX 上安装工具以及一些使用总结</title>
      <link href="/2020/01/aix-tips/"/>
      <url>/2020/01/aix-tips/</url>
      
        <content type="html"><![CDATA[<p>记录在使用 AIX 时所遇到的问题和解决办法，以备以后遇到同样问题不要再因为这些再浪费时间，希望也能帮助到你。</p><span id="more"></span><h2 id="在-AIX-上无法解压超一个大约-600-MB-文件"><a href="#在-AIX-上无法解压超一个大约-600-MB-文件" class="headerlink" title="在 AIX 上无法解压超一个大约 600 MB 文件"></a>在 AIX 上无法解压超一个大约 600 MB 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.3$ <span class="built_in">ls</span></span><br><span class="line">data_cdrom_debug_AIX_05949fb.tar.Z</span><br><span class="line">bash-4.3$ gzip -d data_cdrom_debug_AIX_05949fb.tar.Z</span><br><span class="line"><span class="comment"># 错误信息</span></span><br><span class="line">gzip: data_cdrom_debug_AIX_05949fb.tar: File too large</span><br><span class="line"><span class="comment"># 解决办法</span></span><br><span class="line">bash-4.3$ sudo vi /etc/security/limits</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">        fsize = -1 <span class="comment"># 修改为 -1</span></span><br><span class="line">        core = 2097151</span><br><span class="line">        cpu = -1</span><br><span class="line">        data = -1</span><br><span class="line">        rss = 65536</span><br><span class="line">        stack = 65536</span><br><span class="line">        nofiles = 2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要重启</span></span><br><span class="line">bash-4.3$ sudo reboot</span><br><span class="line"></span><br><span class="line">Rebooting . . .</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改之后，重启，再解压就没有问题了。</p><h2 id="安装-Java-Standard-Edition-on-AIX"><a href="#安装-Java-Standard-Edition-on-AIX" class="headerlink" title="安装 Java Standard Edition on AIX"></a>安装 Java Standard Edition on AIX</h2><p>下载地址 <a href="https://developer.ibm.com/javasdk/support/aix-download-service/">https://developer.ibm.com/javasdk/support/aix-download-service/</a></p><ol><li>download Java8_64.sdk.8.0.0.600.tar.gz Java8_64.jre.8.0.0.600.tar.gz</li><li>gzip -d Java8_64.sdk.8.0.0.600.tar.gz and Java8_64.jre.8.0.0.600.tar.gz</li><li>tar -xvf Java8_64.sdk.8.0.0.600.tar  and Java8_64.jre.8.0.0.600.tar</li><li>installp -agXYd .  Java8_64.jre Java8_64.sdk 2&gt;&amp;1 | tee installp.log</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install output</span></span><br><span class="line">Installation Summary</span><br><span class="line">--------------------</span><br><span class="line">Name                        Level           Part        Event       Result</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Java8_64.sdk                8.0.0.600       USR         APPLY       SUCCESS</span><br><span class="line">Java8_64.jre                8.0.0.600       USR         APPLY       SUCCESS</span><br><span class="line">Java8_64.jre                8.0.0.600       ROOT        APPLY       SUCCESS</span><br></pre></td></tr></table></figure><ol start="5"><li>smitty install_all</li><li>Input: Type “.&#x2F;“ in the field</li><li>Acceptance Install the Agreement, then start install.</li></ol><p>Troubleshooting</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.4<span class="comment"># ./java -version</span></span><br><span class="line">Error: Port Library failed to initialize: -70</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solaris 安装工具以及一些使用总结</title>
      <link href="/2020/01/solaris-tips/"/>
      <url>/2020/01/solaris-tips/</url>
      
        <content type="html"><![CDATA[<p>记录在使用 Solaris 时所遇到的问题和解决办法，以备以后遇到同样问题不要再因为这些再浪费时间，希望也能帮助到你。</p><span id="more"></span><h2 id="install-packages-on-solaris"><a href="#install-packages-on-solaris" class="headerlink" title="install packages on solaris"></a>install packages on solaris</h2><p><a href="https://www.opencsw.org/get-it/packages/">https://www.opencsw.org/get-it/packages/</a></p><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><p><a href="https://www.opencsw.org/packages/git/">https://www.opencsw.org/packages/git/</a></p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solaris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Warnings Next Generation 插件</title>
      <link href="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/"/>
      <url>/2019/12/Jenkins-Warnings-Next-Generation-Plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="Jenkins-Warnings-Next-Generation-插件"><a href="#Jenkins-Warnings-Next-Generation-插件" class="headerlink" title="Jenkins Warnings Next Generation 插件"></a>Jenkins Warnings Next Generation 插件</h2><p>Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md">支持的报告格式</a>。</p><span id="more"></span><h3 id="支持的项目类型"><a href="#支持的项目类型" class="headerlink" title="支持的项目类型"></a>支持的项目类型</h3><p>Warnings Next Generation 插件支持以下 Jenkins 项目类型：</p><ul><li>自由式项目</li><li>Maven 项目</li><li>矩阵项目</li><li>脚本化管道（顺序和并行步骤）</li><li>声明式管道（顺序步骤和并行步骤）</li><li>多分支管道</li></ul><h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><p>当作为后续构建任务操作（或步骤）添加时，Warnings Next Generation 插件提供以下功能：</p><ol><li>该插件会扫描 Jenkins 版本的控制台日志或你工作区中的文件中是否存在任何问题。支持一百多种<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md">报告格式</a>，它可以检测到的问题包括：</li></ol><ul><li>来自编译器的错误（C，C＃，Java等）</li><li>来自静态分析工具（CheckStyle，StyleCop，SpotBugs 等）的警告</li><li>来自复制粘贴检测器（CPD, Simian 等）的重复</li><li>漏洞</li><li>在源文件的注释中打开任务</li></ul><ol start="2"><li>该插件会发布有关在构建中发现的问题的报告，因此可以从以下位置导航到摘要报告，主构建页面。你还可以从那里深入了解细节：</li></ol><ul><li>发行新的，固定的和未解决的问题</li><li>按严重性，类别，类型，模块或程序包分发问题</li><li>所有问题的列表，包括来自报告工具的有用评论</li><li>受影响文件的带注释的源代码</li><li>问题趋势图</li></ul><p>该插件不会运行静态分析，它只是可视化此类工具报告的结果。你仍然需要在构建文件或 Jenkinsfile 中启用和配置静态分析工具。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>你可以在 Jenkins 作业配置用户界面中配置插件的每个选项（在自由式，maven 或矩阵作业中）。在这里你需要在工作中添加并启用生成后操作“记录编译器警告和静态分析结果”。</p><p>在管道中，将通过添加 recordIssues 激活插件。也可以使用相同的用户界面来配置此步骤（通过使用 Snippet 编辑器）。请注意，对于脚本化管道，一些其他功能可用于汇总和分组问题，有关详细信息，请参阅“高级管道配置”部分。</p><p>在以下各节中，将同时显示图形配置和管道配置。</p><h3 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h3><p>下图显示了插件的基本配置：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/01.png" alt="静态分析工具"></p><p>首先，你需要指定用于创建问题的工具，根据所选工具，你可能还会配置一些其他参数。</p><p>对于所有读取报告文件的解析器，你需要指定应分析和扫描问题的报告文件的模式。如果未指定模式，则将扫描构建的控制台日志。对于几种流行的工具，提供了默认模式，在这种情况下，如果模式为空，则将使用默认模式。</p><p>为了让扫描程序正确解析你的报告，需要设置文件的编码，否则将使用平台编码，这可能不正确。</p><p>每个工具都由一个 ID 标识，该 ID 用作分析结果的 URL。对于每个工具，都提供了一个默认 URL（和名称），可以根据需要进行更改。例如，如果你打算多次使用解析器，则需要为每个调用指定不同的 ID。</p><p>你可以指定将用于同一配置的多个工具（和模式），由于 Jenkins 的技术（或市场）限制，无法通过使用多个后期构建操作来选择不同的配置。</p><p>通过使用“汇总结果”复选框，可以使用一项新功能。如果选中此选项，则将创建一个结果，其中包含所选工具的所有问题的汇总。这是之前静态分析收集器插件提供的。激活此选项后，你将获得所有问题的唯一入口点。以下屏幕截图显示了此新行为：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/02.png" alt="汇总结果"></p><p>如果未启用此选项，则将为每个工具创建单独的结果。此结果具有唯一的 URL 和图标，因此你可以快速查看创建的报告之间的区别：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/03.png" alt="分开的结果"></p><p>在基本配置部分中，你还可以选择是否针对失败的构建也运行该步骤。默认情况下禁用此选项，因为如果构建失败，分析结果可能会不准确。</p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">recordIssues(</span><br><span class="line">    enabledForFailure: <span class="literal">true</span>, aggregatingResults: <span class="literal">true</span>,</span><br><span class="line">    tools: [java(), checkStyle(pattern: <span class="string">&#x27;checkstyle-result.xml&#x27;</span>, reportEncoding: <span class="string">&#x27;UTF-8&#x27;</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果使用单个工具，则可以使用属性工具代替工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues enabledForFailure: <span class="literal">true</span>, aggregatingResults: <span class="literal">true</span>, tool: checkStyle(pattern: <span class="string">&#x27;checkstyle-result.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="创建对自定义工具的支持"><a href="#创建对自定义工具的支持" class="headerlink" title="创建对自定义工具的支持"></a>创建对自定义工具的支持</h3><p>如果你的项目中没有内置工具，则可以通过多种方式添加其他工具。</p><h4 id="将问题导出为受支持的格式"><a href="#将问题导出为受支持的格式" class="headerlink" title="将问题导出为受支持的格式"></a>将问题导出为受支持的格式</h4><p>将工具的分析结果获取到 Warnings 插件中的一种简单方法是将信息导出为一种已经支持的格式。例如，几种工具将其问题导出为 CheckStyle 或 PMD 格式。如果要使用警告插件的所有功能，则最好将信息导出为本机 XML 或 JSON 格式（此解析器使用 ID 问题）。<br>这些格式已经在用户界面中注册，你可以直接使用它们。你甚至可以在包含单行 JSON 问题的简单日志文件中提供问题，请参见示例。</p><p>这是一个示例步骤，可用于解析本机 JSON（或 XML）格式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues(tool: issues())</span><br></pre></td></tr></table></figure><h4 id="使用自定义插件部署新工具"><a href="#使用自定义插件部署新工具" class="headerlink" title="使用自定义插件部署新工具"></a>使用自定义插件部署新工具</h4><p>最灵活的方法是通过编写将在你自己的小型 Jenkins 插件中部署的 Java 类来定义新工具，有关详细信息，请参见文档“为自定义静态分析工具提供支持”。</p><h4 id="使用Groovy解析器创建新工具"><a href="#使用Groovy解析器创建新工具" class="headerlink" title="使用Groovy解析器创建新工具"></a>使用Groovy解析器创建新工具</h4><p>如果日志消息的格式非常简单，则可以通过在 Jenkins 的用户界面中创建简单的工具配置来定义对工具的支持。 出于安全原因（Groovy 脚本可能会危害你的主服务器），此配置仅在系统配置中可用。 新解析器的配置采用正则表达式，该正则表达式将用于匹配报告格式。 如果表达式匹配，则将调用 Groovy 脚本，该脚本将匹配的文本转换为问题实例。 这是基于 Groovy 的解析器的示例：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/04.png" alt="Groovy 解析器"></p><h4 id="以编程方式创建-Groovy-解析器"><a href="#以编程方式创建-Groovy-解析器" class="headerlink" title="以编程方式创建 Groovy 解析器"></a>以编程方式创建 Groovy 解析器</h4><p>还可以使用 Groovy 脚本从管道，Jenkins 启动脚本或脚本控制台中创建基于 Groovy 的解析器，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def config = io.jenkins.plugins.analysis.warnings.groovy.ParserConfiguration.getInstance()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!config.contains(<span class="string">&#x27;pep8-groovy&#x27;</span>))&#123;</span><br><span class="line">  def newParser = new io.jenkins.plugins.analysis.warnings.groovy.GroovyParser(</span><br><span class="line">    <span class="string">&#x27;pep8-groovy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pep8 Groovy Parser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(.*):(\\d+):(\\d+): (\\D\\d*) (.*)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;return builder.setFileName(matcher.group(1)).setCategory(matcher.group(4)).setMessage(matcher.group(5)).buildOptional()&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;optparse.py:69:11: E401 multiple imports on one line&quot;</span></span><br><span class="line">  )</span><br><span class="line">  config.setParsers(config.getParsers().plus(newParser))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用配置作为代码导入解析器（JCasC）"><a href="#使用配置作为代码导入解析器（JCasC）" class="headerlink" title="使用配置作为代码导入解析器（JCasC）"></a>使用配置作为代码导入解析器（JCasC）</h4><p>还可以使用 JCasC yaml 文件中的部分来指定基于 Groovy 的解析器。这是一个小示例，展示了如何添加这样的解析器：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">unclassified:</span></span><br><span class="line">  <span class="attr">warningsParsers:</span></span><br><span class="line">    <span class="attr">parsers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Example parser&quot;</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">example-id</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">&quot;^\\s*(.*):(\\d+):(.*):\\s*(.*)$&quot;</span></span><br><span class="line">        <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          import edu.hm.hafner.analysis.Severity</span></span><br><span class="line"><span class="string">          builder.setFileName(matcher.group(1))</span></span><br><span class="line"><span class="string">                  .setLineStart(Integer.parseInt(matcher.group(2)))</span></span><br><span class="line"><span class="string">                  .setSeverity(Severity.WARNING_NORMAL)</span></span><br><span class="line"><span class="string">                  .setCategory(matcher.group(3))</span></span><br><span class="line"><span class="string">                  .setMessage(matcher.group(4))</span></span><br><span class="line"><span class="string">          return builder.buildOptional();</span></span><br><span class="line"><span class="string"></span>        <span class="attr">example:</span> <span class="string">&quot;somefile.txt:2:SeriousWarnings:SomethingWentWrong&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用定义的工具"><a href="#使用定义的工具" class="headerlink" title="使用定义的工具"></a>使用定义的工具</h4><p>一旦注册了 Groovy 解析器，就可以在作业的工具配置部分中使用它：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/05.png" alt="Groovy 配置"></p><p>首先，你需要选择工具 “Groovy Parser” 以获取 Groovy 解析器的配置屏幕。 然后，你可以从可用解析器列表中选择解析器。 该列表是根据 Jenkins 的“系统配置”部分中定义的解析器动态创建的。可以使用与其他工具相同的方式来设置自定义 ID 和名称属性。</p><p>为了在管道中使用 Groovy 解析器，你需要使用以下形式的脚本语句：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues sourceCodeEncoding: <span class="string">&#x27;UTF-8&#x27;</span>,</span><br><span class="line">    tool: groovyScript(parserId: <span class="string">&#x27;groovy-id-in-system-config&#x27;</span>, pattern:<span class="string">&#x27;**/*report.log&#x27;</span>, reportEncoding:<span class="string">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="处理受影响的源代码文件的属性"><a href="#处理受影响的源代码文件的属性" class="headerlink" title="处理受影响的源代码文件的属性"></a>处理受影响的源代码文件的属性</h3><p>为了让插件解析并显示你的源代码文件，需要为这些文件设置正确的编码。 此外，如果你的源代码不在工作区中（例如，它已签出到共享代理文件夹中），则该插件将不会自动找到你的源文件。 为了让插件显示这些文件，你可以添加一个附加的源目录：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/06.png" alt="受影响文件"></p><p>以下代码段显示了带有这些选项的示例管道，请注意，如果需要，可以不同地设置报告文件的编码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues sourceCodeEncoding: <span class="string">&#x27;ISO-8859-1&#x27;</span>, sourceDirectory: <span class="string">&#x27;/path/to/sources&#x27;</span>, tool: java(reportEncoding: <span class="string">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>请注意，工作区外部的文件内容可能很敏感。 为了防止意外显示此类文件，你需要在 Jenkins 系统配置屏幕中提供允许的源代码目录的白名单：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/07.png" alt="源代码目录的白名单"></p><p>另外，此配置设置可以由 JCasC yaml 文件中的以下子节提供</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">unclassified:</span></span><br><span class="line">  <span class="attr">warningsPlugin:</span></span><br><span class="line">    <span class="attr">sourceDirectories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;C:\\Temp&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;/mnt/sources&quot;</span></span><br></pre></td></tr></table></figure><h3 id="控制参考构建的选择（基准）"><a href="#控制参考构建的选择（基准）" class="headerlink" title="控制参考构建的选择（基准）"></a>控制参考构建的选择（基准）</h3><p>警告下一代插件的一项重要功能是将问题分类为新问题，未解决问题和已解决问题：</p><ul><li>新增：所有问题，属于当前报告的一部分，但未在参考报告中显示</li><li>已修复：所有问题，属于参考报告的一部分，但不再存在于当前报告中</li><li>未解决：所有问题，是当前报告和参考报告的一部分</li></ul><p>为了计算此分类，插件需要参考构建（基准）。 然后，通过比较当前版本和基准中的问题来计算新的，已修复的和未解决的问题。 有三个选项可控制参考构建的选择。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/08.png" alt="参考"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(), ignoreQualityGate: <span class="literal">false</span>, ignoreFailedBuilds: <span class="literal">true</span>, referenceJobName: <span class="string">&#x27;my-project/master&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="筛选问题"><a href="#筛选问题" class="headerlink" title="筛选问题"></a>筛选问题</h3><p>创建的问题报告可以随后进行过滤。 你可以指定任意数量的包含或排除过滤器。 当前，支持按模块名称，程序包或名称空间名称，文件名，类别或类型过滤问题。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/09.png" alt="筛选"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>), filters: [includeFile(<span class="string">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class="string">&#x27;WHITESPACE&#x27;</span>)]</span><br></pre></td></tr></table></figure><h3 id="Quality-gate-配置"><a href="#Quality-gate-配置" class="headerlink" title="Quality gate 配置"></a>Quality gate 配置</h3><p>你可以定义几个 Quality gate (质量门)，在报告问题后将对其进行检查。这些质量门使你可以修改詹金斯的生产状态，以便立即查看是否满足所需的产品质量。对于这些质量门中的每一个，都可以将构建设置为不稳定或失败。所有质量门都使用一个简单的度量标准：给定质量门将失败的问题数量。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/10.png" alt="质量门"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>), qualityGates: [[threshold: 1, <span class="built_in">type</span>: <span class="string">&#x27;TOTAL&#x27;</span>, unstable: <span class="literal">true</span>]]</span><br></pre></td></tr></table></figure><p>类型确定将用来评估质量门的属性。请参阅枚举 QualityGateType 以查看支持哪些不同类型。</p><h3 id="健康报告配置"><a href="#健康报告配置" class="headerlink" title="健康报告配置"></a>健康报告配置</h3><p>该插件可以参与你项目的运行状况报告。你可以更改将运行状况更改为 0％ 和 100％ 的问题数。此外，可以选择在创建运行状况报告时应考虑的严重性。</p><p><a href="jenkins-warnings-next-generation-plugin/11.png">健康报告配置!</a></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>), healthy: 10, unhealthy: 100, minimumSeverity: <span class="string">&#x27;HIGH&#x27;</span></span><br></pre></td></tr></table></figure><p>该作业根据严重性为 HIGH 和错误的所有警告来调整构建运行状况。如果内部版本包含 10 条或更少的警告，则运行状况为 100％。如果内部版本有 100 个以上的警告，则运行状况为 0％。</p><h3 id="管道配置"><a href="#管道配置" class="headerlink" title="管道配置"></a>管道配置</h3><p>在 Jenkins Pipeline 中使用 Warnings 插件的要求可能很复杂，有时会引起争议。为了尽可能灵活，我决定将主要步骤分为两个独立的部分，然后可以彼此独立使用。</p><h4 id="简单的管道配置"><a href="#简单的管道配置" class="headerlink" title="简单的管道配置"></a>简单的管道配置</h4><p>步骤 recordIssues 提供了简单的管道配置，它提供了与构建后操作相同的属性（请参见上文）。此步骤扫描给定文件集（或控制台日志）中的问题，并在构建中报告这些问题。你可以使用代码片段生成器来创建一个有效的代码片段，以调用此步骤。以下示例显示了此步骤的典型示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues(</span><br><span class="line">    enabledForFailure: <span class="literal">true</span>,</span><br><span class="line">    tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>),</span><br><span class="line">    filters: [includeFile(<span class="string">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class="string">&#x27;WHITESPACE&#x27;</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在此示例中，将扫描文件 <code>* .log</code> 中的 Java 问题。仅包括文件名与模式 <code>MyFile.*.java</code> 匹配的问题。类别 <code>WHITESPACE</code> 的问题将被排除，即使构建失败，也会执行该步骤。</p><p>为了查看所有配置选项，你可以研究<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java">步骤实现</a>。</p><h4 id="声明式管道配置"><a href="#声明式管道配置" class="headerlink" title="声明式管道配置"></a>声明式管道配置</h4><p>声明性管道作业中的插件配置与脚本管道中的配置相同，请参见以下示例，该示例在 Jenkins 上构建分析模型库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent <span class="string">&#x27;any&#x27;</span></span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">&#x27;mvn-default&#x27;</span></span><br><span class="line">        jdk <span class="string">&#x27;jdk-default&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage (<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false -Dmaven.test.failure.ignore&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage (<span class="string">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs spotbugs:spotbugs&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            junit testResults: <span class="string">&#x27;**/target/surefire-reports/TEST-*.xml&#x27;</span></span><br><span class="line"></span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tools: [mavenConsole(), java(), javaDoc()]</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: checkStyle()</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: spotBugs()</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: cpd(pattern: <span class="string">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: pmdParser(pattern: <span class="string">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高级管道配置"><a href="#高级管道配置" class="headerlink" title="高级管道配置"></a>高级管道配置</h4><p>有时仅使用一个步骤发布和报告问题是不够的。例如，如果你使用多个并行步骤来构建产品，并且想要将所有这些步骤中的问题合并为一个结果。然后，你需要拆分扫描和聚合。该插件提供以下两个步骤：</p><ul><li>scanForIssues 此步骤使用特定的解析器扫描报告文件或控制台日志，并创建一个包含报告的中 间 AnnotatedReport 对象。有关详细信息，请参见步骤实现。</li><li>publishIssues：此步骤在你的构建中发布一个新报告，其中包含几个 scanForIssues 步骤的汇总结果。有关详细信息，请参见步骤实现。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">  stage (<span class="string">&#x27;Checkout&#x27;</span>) &#123;</span><br><span class="line">      git branch:<span class="string">&#x27;5.0&#x27;</span>, url: <span class="string">&#x27;git@github.com:jenkinsci/warnings-plugin.git&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  stage (<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">    def mvnHome = tool <span class="string">&#x27;mvn-default&#x27;</span></span><br><span class="line"></span><br><span class="line">    sh <span class="string">&quot;<span class="variable">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false&quot;</span></span><br><span class="line"></span><br><span class="line">    junit testResults: <span class="string">&#x27;**/target/*-reports/TEST-*.xml&#x27;</span></span><br><span class="line"></span><br><span class="line">    def java = scanForIssues tool: java()</span><br><span class="line">    def javadoc = scanForIssues tool: javaDoc()</span><br><span class="line"></span><br><span class="line">    publishIssues issues: [java, javadoc], filters: [includePackage(<span class="string">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stage (<span class="string">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class="line">    def mvnHome = tool <span class="string">&#x27;mvn-default&#x27;</span></span><br><span class="line"></span><br><span class="line">    sh <span class="string">&quot;<span class="variable">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs&quot;</span></span><br><span class="line"></span><br><span class="line">    def checkstyle = scanForIssues tool: checkStyle(pattern: <span class="string">&#x27;**/target/checkstyle-result.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [checkstyle]</span><br><span class="line"></span><br><span class="line">    def pmd = scanForIssues tool: pmdParser(pattern: <span class="string">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [pmd]</span><br><span class="line"></span><br><span class="line">    def cpd = scanForIssues tool: cpd(pattern: <span class="string">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [cpd]</span><br><span class="line"></span><br><span class="line">    def spotbugs = scanForIssues tool: spotBugs(pattern: <span class="string">&#x27;**/target/findbugsXml.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [spotbugs]</span><br><span class="line"></span><br><span class="line">    def maven = scanForIssues tool: mavenConsole()</span><br><span class="line">    publishIssues issues: [maven]</span><br><span class="line"></span><br><span class="line">    publishIssues <span class="built_in">id</span>: <span class="string">&#x27;analysis&#x27;</span>, name: <span class="string">&#x27;All Issues&#x27;</span>, issues: [checkstyle, pmd, spotbugs], filters: [includePackage(<span class="string">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h2><p>以下各节介绍了最重要的新功能。</p><h3 id="发行记录：New-Fixed-Outstanding-问题"><a href="#发行记录：New-Fixed-Outstanding-问题" class="headerlink" title="发行记录：New, Fixed, Outstanding 问题"></a>发行记录：New, Fixed, Outstanding 问题</h3><p>该插件的一大亮点是能够将后续版本的问题分类为 New, Fixed, Outstanding。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/12.png" alt="趋势"></p><p>使用此功能可以更轻松地控制项目的质量：你只能专注于最近引入的警告。</p><p>注意：新警告的检测基于复杂的算法，该算法试图在源代码的两个不同版本中跟踪同一警告。根据源代码的修改程度，它可能会产生一些误报，即，即使应该没有警告也可能会收到一些新的固定警告。该算法的准确性仍在研究中，并将在接下来的几个月中进行完善。</p><h3 id="Severities-严重程度"><a href="#Severities-严重程度" class="headerlink" title="Severities 严重程度"></a>Severities 严重程度</h3><p>该插件在图表中显示问题严重性的分布，它定义了以下默认严重级别，但是扩展警告插件的插件可能会添加其他默认级别。</p><ul><li><strong>Error</strong>：表示通常会导致构建失败的错误</li><li><strong>Warning</strong> (High, Normal, Low)：指示给定优先级的警告。映射到优先级取决于各个解析器。</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/13.png" alt="严重程度"></p><p>请注意，并非每个解析器都能产生不同严重性的警告。某些解析器仅对所有问题使用相同的严重性。</p><h3 id="Build-trend-构建趋势"><a href="#Build-trend-构建趋势" class="headerlink" title="Build trend 构建趋势"></a>Build trend 构建趋势</h3><p>为了查看分析结果的趋势，几个图表显示了每个构建的问题数量。这些图表用于详细信息页面和作业概述中。当前提供以下不同的趋势图类型：</p><h4 id="问题的严重程度分布"><a href="#问题的严重程度分布" class="headerlink" title="问题的严重程度分布"></a>问题的严重程度分布</h4><p>默认趋势图显示问题总数，按严重性堆叠。使用此图表，你可以查看哪种严重程度对问题总数贡献最大。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/14.png" alt="严重度趋势图"></p><h4 id="每种静态分析类型的问题"><a href="#每种静态分析类型的问题" class="headerlink" title="每种静态分析类型的问题"></a>每种静态分析类型的问题</h4><p>如果你要汇总几个静态分析结果，则类型图将使用单独的一行显示每个工具的问题数量。你可以通过单击相应的图例符号暂时隐藏工具。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/15.png" alt="工具趋势图"></p><h4 id="新问题与已修复问题"><a href="#新问题与已修复问题" class="headerlink" title="新问题与已修复问题"></a>新问题与已修复问题</h4><p>如果你对积压的问题感兴趣，可以打开新的与固定的图表。它映射了引入的问题与通过一系列构建解决的问题。这可以帮助你了解整个待办事项列表是在增加还是在减少。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/16.png" alt="新修复趋势图"></p><h4 id="项目健康"><a href="#项目健康" class="headerlink" title="项目健康"></a>项目健康</h4><p>仅当启用了运行状况报告后，运行状况图表才可用。在这种情况下，趋势图将显示健康和不健康区域中的警告数量。你的项目目标应该是使警告数量不逃避图表的绿色部分。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/17.png" alt="健康趋势图"></p><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p>细节视图中的所有趋势图都支持使用图表底部的范围滑块缩放构建轴。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/18.png" alt="放大"></p><h4 id="构建与日期轴"><a href="#构建与日期轴" class="headerlink" title="构建与日期轴"></a>构建与日期轴</h4><p>详细信息视图中的所有趋势图都可以显示每个构建或每天的警告数量。你可以通过选择右上角的相应图标在X轴变体之间切换，每天显示平均警告数。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/19.png" alt="构建与日期"></p><h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>你可以在几个聚合视图中快速，高效地查看报告的问题集。根据问题的数量或类型，你将看到问题的分布</p><ul><li>Static Analysis Tool（静态分析工具）</li><li>Module（模组）</li><li>Package or Namespace（包或命名空间）</li><li>Severity（严重程度）</li><li>Category（类别）</li><li>Type（类型）</li></ul><p>这些详细信息视图中的每一个都是交互式的，即，你可以导航到已分类问题的子集。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/20.png" alt="软件包"></p><h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3><p>一组已报告的问题显示在一个现代化的响应表中。该表使用 Ajax 调用按需加载，它提供以下功能：</p><ul><li><strong>Pagination</strong>（分页）：问题的数量分为几个页面，可以使用提供的页面链接进行选择。请注意，目前分页是在客户端进行的，即从服务器获取整个问题表可能要花费一些时间。</li><li><strong>Sorting</strong>（排序）：可以通过单击表列中的仅一个来对表内容进行排序。</li><li><strong>Filtering, Searching</strong>（过滤，搜索）：你可以通过在搜索框中输入一些文本来过滤显示的问题。</li><li><strong>Content Aware</strong>（内容感知）：仅当有必要显示的内容时才显示列。也就是说，如果工具未报告问题类别，则该类别将被自动隐藏。</li><li><strong>Responsive</strong>（响应式）：布局应适应实际的屏幕阈值。</li><li><strong>Details</strong>（详细信息）：问题的详细信息消息（如果由相应的静态分析工具提供）在表中显示为子行。</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/20.png" alt="详情"></p><h3 id="源代码-Blame（归咎于）"><a href="#源代码-Blame（归咎于）" class="headerlink" title="源代码 Blame（归咎于）"></a>源代码 Blame（归咎于）</h3><p>这个功能需要安装其他插件：<a href="https://github.com/jenkinsci/git-forensics-plugin">Git Forensics 插件</a></p><p>如果未在作业配置中禁用，则插件将执行 <code>git blame</code> 以确定谁是问题的负责 <code>author</code>。在相应的 SCM Blames 视图中，所有问题将与 <code>auther name</code>, <code>email</code>, 和 <code>commit ID</code> 一起列出。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/22.png" alt="Git"></p><p>为了禁用 <code>git blame</code> 功能，请将属性 <code>blameDisabled</code> 设置为 <code>true</code>，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues blameDisabled: <span class="literal">true</span>, tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Git-仓库取证"><a href="#Git-仓库取证" class="headerlink" title="Git 仓库取证"></a>Git 仓库取证</h3><p>此功能需要安装其他插件：<a href="https://github.com/jenkinsci/git-forensics-plugin">Git Forensics 插件</a></p><p>如果未在作业配置中禁用，则该插件将以“犯罪现场代码”的样式（Adam Tornhill，2013年11月）挖掘源代码存储库，以确定受影响文件的统计信息。在相应的 “SCM 取证” 视图中，将列出所有问题以及受影响文件的以下属性：</p><ul><li>提交总数</li><li>不同作者总数</li><li>创作时间</li><li>最后修改时间</li><li>源代码控制概述</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/23.png" alt="取证视图"></p><p>为了禁用 Git 取证功能，请将属性 <code>forensicsDisabled</code>设置为 <code>true</code>，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues forensicsDisabled: <span class="literal">true</span>, tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="源代码视图"><a href="#源代码视图" class="headerlink" title="源代码视图"></a>源代码视图</h3><p>现在，源代码视图使用 JS 库 Prism 在受影响的文件中显示警告。该库为最流行的语言提供语法高亮显示，并在客户端呈现所有内容。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/24.png" alt="源视图"></p><h3 id="发行总数栏"><a href="#发行总数栏" class="headerlink" title="发行总数栏"></a>发行总数栏</h3><p>你可以在 Jenkins 作业表的单独列中显示作业的总数。 默认情况下，Jenkins 主列表视图将显示一个新列，该列计算所有工具的发行总数。 你可以添加可以配置的其他列</p><ul><li>列名</li><li>应考虑的实际工具</li><li>要显示的总计类型（总体警告，新警告，特定严重性等），请参阅 “token宏支持” 部分。</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/25.png" alt="问题列"></p><h3 id="仪表板视图支持"><a href="#仪表板视图支持" class="headerlink" title="仪表板视图支持"></a>仪表板视图支持</h3><p>还提供对 Jenkins 仪表板视图的支持。当前，以下 portlet 可用：</p><h4 id="每个工具和作业表的问题"><a href="#每个工具和作业表的问题" class="headerlink" title="每个工具和作业表的问题"></a>每个工具和作业表的问题</h4><p>问题表显示了作业的问题总数（由每个工具分开）。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/26.png" alt="问题 portlet"></p><h4 id="问题趋势"><a href="#问题趋势" class="headerlink" title="问题趋势"></a>问题趋势</h4><p>可以将趋势图添加为 portlet，该趋势图显示所有作业的发行总数。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/27.png" alt="图表 portlet"></p><h3 id="远程API"><a href="#远程API" class="headerlink" title="远程API"></a>远程API</h3><p>该插件提供以下 REST API 端点。</p><h4 id="所有分析结果的汇总摘要"><a href="#所有分析结果的汇总摘要" class="headerlink" title="所有分析结果的汇总摘要"></a>所有分析结果的汇总摘要</h4><p>可以使用 URL <code>[build-url]/warnings-ng/api/json</code>（或 <code>[build-url]/warnings-ng/api/xml</code>）查询构建中已配置的所有静态分析工具。此汇总显示每个工具的 ID，名称，URL 和问题总数。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.jenkins.plugins.analysis.core.restapi.AggregationApi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;maven&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/maven&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Maven Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Java Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javadoc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/javadoc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaDoc Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;checkstyle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/checkstyle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CheckStyle Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/pmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PMD Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">671</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spotbugs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/spotbugs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpotBugs Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/cpd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CPD Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">123</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open-tasks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/open-tasks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Open Tasks Scanner Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="分析结果汇总"><a href="#分析结果汇总" class="headerlink" title="分析结果汇总"></a>分析结果汇总</h4><p>你可以使用 URL <code>[build-url]/[tool-id]/api/xml</code>（或 <code>[build-url]/[tool-id]/api/json</code>）获得特定分析报告的摘要。摘要包含问题数量，质量门状态以及所有信息和错误消息。</p><p>这是一个示例 XML 报告：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">analysisResultApi</span> <span class="attr">_class</span>=<span class="string">&#x27;io.jenkins.plugins.analysis.core.restapi.AnalysisResultApi&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">totalSize</span>&gt;</span>3<span class="tag">&lt;/<span class="name">totalSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixedSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fixedSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">newSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">newSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noIssuesSinceBuild</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">noIssuesSinceBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">successfulSinceBuild</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">successfulSinceBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qualityGateStatus</span>&gt;</span>WARNING<span class="tag">&lt;/<span class="name">qualityGateStatus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">owner</span> <span class="attr">_class</span>=<span class="string">&#x27;org.jenkinsci.plugins.workflow.job.WorkflowRun&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>46<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/view/White%20Mountains/job/Full%20Analysis%20-%20Model/46/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">owner</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Searching for all files in &#x27;/tmp/node1/workspace/Full Analysis - Model&#x27; that match the pattern</span><br><span class="line">    &#x27;**/target/spotbugsXml.xml&#x27;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; found 1 file<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Successfully parsed file /tmp/node1/workspace/Full Analysis - Model/target/spotbugsXml.xml<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; found 3 issues (skipped 0 duplicates)<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Post processing issues on &#x27;node1&#x27; with encoding &#x27;UTF-8&#x27;<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving absolute file names for all issues<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; affected files for all issues already have absolute paths<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Copying affected files to Jenkins&#x27; build folder /Users/hafner/Development/jenkins/jobs/Full Analysis -</span><br><span class="line">    Model/builds/46</span><br><span class="line">  <span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; 2 copied, 0 not in workspace, 0 not-found, 0 with I/O error<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving module names from module definitions (build.xml, pom.xml, or Manifest.mf files)<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; all issues already have a valid module name<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving package names (or namespaces) by parsing the affected files<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; all affected files already have a valid package name<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Creating fingerprints for all affected code blocks to track issues over different builds<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>No filter has been set, publishing all 3 issues<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>No valid reference build found - all reported issues will be considered outstanding<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Evaluating quality qualityGates<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; WARNING - Total number of issues: 3 - Quality Gate: 1<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; Some quality qualityGates have been missed: overall result is WARNING<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Health report is disabled - skipping<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">analysisResultApi</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Token-宏支持"><a href="#Token-宏支持" class="headerlink" title="Token 宏支持"></a>Token 宏支持</h3><p>Warnings 插件提供了 token <code>ANALYSIS_ISSUES_COUNT</code>，可用于其他后期构建处理步骤，例如在邮件中。为了使用此 token，你需要安装 token 宏插件。token 具有以下可选参数：</p><ul><li><code>tool</code>：选择特定的分析结果，如果未定义，则将所有结果相加</li><li><code>type</code>：选择要使用的计数器的类型，请选择以下之一<ul><li>Total（任何严重性）</li><li>Total（仅错误）</li><li>Total（仅严重度高）</li><li>Total（仅严重级别正常）</li><li>Total（仅限严重性低）</li><li>New  （任何严重程度）</li><li>New  （仅限错误）</li><li>New  （仅限严重性高）</li><li>New  （仅严重性为正常）</li><li>New  （仅限严重性低）</li><li>Delta（任何严重程度）</li><li>Delta（仅错误）</li><li>Delta（仅严重度高）</li><li>Delta（仅严重等级正常）</li><li>Delta（仅严重度低）</li><li>Fixed（任何严重性）</li></ul></li></ul><p>例子：</p><p><code>$&#123;ANALYSIS_ISSUES_COUNT&#125;</code>：扩展到所有分析工具的合计数量</p><p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;&#125;</code>：扩展到CheckStyle问题的总数</p><p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;, type: &quot;NEW&quot;&#125;</code>：扩展到新的 CheckStyle 问题数</p><h2 id="从静态分析套件过渡"><a href="#从静态分析套件过渡" class="headerlink" title="从静态分析套件过渡"></a>从静态分析套件过渡</h2><p>以前，静态分析套件的插件提供了相同的功能集（CheckStyle，PMD，FindBugs，静态分析实用工具，Analysis Collector，任务扫描器，Warnings 等）。为了简化用户体验和开发过程，这些插件和核心功能已合并到Warnings Next Generation 插件中。这些旧的静态分析插件不再需要，现在已经停产。如果当前使用这些旧插件之一，则应尽快迁移到新的记录器和步骤。我仍然会保留旧代码一段时间，但是主要的开发工作将花在新的代码库中。</p><ul><li>迁移 Pipelines</li></ul><p>调用旧的静态分析步骤（例如，findbug，checkstyle 等）的管道需要立即调用新的 recordIssues 步骤。所有静态分析工具都使用相同的步骤，使用 step 属性工具选择实际的解析器。有关可用参数集的更多详细信息，请参见“<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration">配置</a>”部分。</p><ul><li>迁移其他所有工作</li></ul><p>使用旧版 API 的 Freestyle，Matrix 或 Maven Jobs 使用了由每个插件提供的所谓的 Post Build Action。例如，FindBugs 插件确实提供了构建后操作“发布 FindBugs 分析结果”。这些旧的插件特定操作不再受支持，它们现在在用户界面中标记为 [Deprecated]。现在，你需要添加一个新的后期构建步骤-对于所有静态分析工具，此步骤现在称为“记录编译器警告和静态分析结果”。工具的选择是此后期构建步骤配置的一部分。注意：新的后期制作操作无法读取使用旧 API 的后期制作步骤所产生的警告。也就是说，你看不到新旧结果的合并历史记录-你仅看到两个不相关的结果。也不会自动转换以旧格式存储的结果。</p><ul><li>插件的迁移取决于分析核心</li></ul><p>以下插件已集成到此警告插件的新版本中：</p><ul><li>Android-Lint 插件</li><li>Analysis Collector 插件</li><li>CheckStyle 插件</li><li>CCM 插件</li><li>Dry 插件</li><li>PMD 插件</li><li>FindBugs 插件</li><li>Tasks Scanner 插件</li><li>Warnings 插件</li></ul><p>所有其他插件仍需要集成或需要重构以使用新的 API</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Warnings Next Generation 插件</title>
      <link href="/2019/12/jenkins-warnings-next-generation-plugin/"/>
      <url>/2019/12/jenkins-warnings-next-generation-plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="Jenkins-Warnings-Next-Generation-插件"><a href="#Jenkins-Warnings-Next-Generation-插件" class="headerlink" title="Jenkins Warnings Next Generation 插件"></a>Jenkins Warnings Next Generation 插件</h2><p>Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md">支持的报告格式</a>。</p><span id="more"></span><h3 id="支持的项目类型"><a href="#支持的项目类型" class="headerlink" title="支持的项目类型"></a>支持的项目类型</h3><p>Warnings Next Generation 插件支持以下 Jenkins 项目类型：</p><ul><li>自由式项目</li><li>Maven 项目</li><li>矩阵项目</li><li>脚本化管道（顺序和并行步骤）</li><li>声明式管道（顺序步骤和并行步骤）</li><li>多分支管道</li></ul><h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><p>当作为后续构建任务操作（或步骤）添加时，Warnings Next Generation 插件提供以下功能：</p><ol><li>该插件会扫描 Jenkins 版本的控制台日志或你工作区中的文件中是否存在任何问题。支持一百多种<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md">报告格式</a>，它可以检测到的问题包括：</li></ol><ul><li>来自编译器的错误（C，C＃，Java等）</li><li>来自静态分析工具（CheckStyle，StyleCop，SpotBugs 等）的警告</li><li>来自复制粘贴检测器（CPD, Simian 等）的重复</li><li>漏洞</li><li>在源文件的注释中打开任务</li></ul><ol start="2"><li>该插件会发布有关在构建中发现的问题的报告，因此可以从以下位置导航到摘要报告，主构建页面。你还可以从那里深入了解细节：</li></ol><ul><li>发行新的，固定的和未解决的问题</li><li>按严重性，类别，类型，模块或程序包分发问题</li><li>所有问题的列表，包括来自报告工具的有用评论</li><li>受影响文件的带注释的源代码</li><li>问题趋势图</li></ul><p>该插件不会运行静态分析，它只是可视化此类工具报告的结果。你仍然需要在构建文件或 Jenkinsfile 中启用和配置静态分析工具。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>你可以在 Jenkins 作业配置用户界面中配置插件的每个选项（在自由式，maven 或矩阵作业中）。在这里你需要在工作中添加并启用生成后操作“记录编译器警告和静态分析结果”。</p><p>在管道中，将通过添加 recordIssues 激活插件。也可以使用相同的用户界面来配置此步骤（通过使用 Snippet 编辑器）。请注意，对于脚本化管道，一些其他功能可用于汇总和分组问题，有关详细信息，请参阅“高级管道配置”部分。</p><p>在以下各节中，将同时显示图形配置和管道配置。</p><h3 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h3><p>下图显示了插件的基本配置：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/01.png" alt="静态分析工具"></p><p>首先，你需要指定用于创建问题的工具，根据所选工具，你可能还会配置一些其他参数。</p><p>对于所有读取报告文件的解析器，你需要指定应分析和扫描问题的报告文件的模式。如果未指定模式，则将扫描构建的控制台日志。对于几种流行的工具，提供了默认模式，在这种情况下，如果模式为空，则将使用默认模式。</p><p>为了让扫描程序正确解析你的报告，需要设置文件的编码，否则将使用平台编码，这可能不正确。</p><p>每个工具都由一个 ID 标识，该 ID 用作分析结果的 URL。对于每个工具，都提供了一个默认 URL（和名称），可以根据需要进行更改。例如，如果你打算多次使用解析器，则需要为每个调用指定不同的 ID。</p><p>你可以指定将用于同一配置的多个工具（和模式），由于 Jenkins 的技术（或市场）限制，无法通过使用多个后期构建操作来选择不同的配置。</p><p>通过使用“汇总结果”复选框，可以使用一项新功能。如果选中此选项，则将创建一个结果，其中包含所选工具的所有问题的汇总。这是之前静态分析收集器插件提供的。激活此选项后，你将获得所有问题的唯一入口点。以下屏幕截图显示了此新行为：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/02.png" alt="汇总结果"></p><p>如果未启用此选项，则将为每个工具创建单独的结果。此结果具有唯一的 URL 和图标，因此你可以快速查看创建的报告之间的区别：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/03.png" alt="分开的结果"></p><p>在基本配置部分中，你还可以选择是否针对失败的构建也运行该步骤。默认情况下禁用此选项，因为如果构建失败，分析结果可能会不准确。</p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">recordIssues(</span><br><span class="line">    enabledForFailure: <span class="literal">true</span>, aggregatingResults: <span class="literal">true</span>,</span><br><span class="line">    tools: [java(), checkStyle(pattern: <span class="string">&#x27;checkstyle-result.xml&#x27;</span>, reportEncoding: <span class="string">&#x27;UTF-8&#x27;</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果使用单个工具，则可以使用属性工具代替工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues enabledForFailure: <span class="literal">true</span>, aggregatingResults: <span class="literal">true</span>, tool: checkStyle(pattern: <span class="string">&#x27;checkstyle-result.xml&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="创建对自定义工具的支持"><a href="#创建对自定义工具的支持" class="headerlink" title="创建对自定义工具的支持"></a>创建对自定义工具的支持</h3><p>如果你的项目中没有内置工具，则可以通过多种方式添加其他工具。</p><h4 id="将问题导出为受支持的格式"><a href="#将问题导出为受支持的格式" class="headerlink" title="将问题导出为受支持的格式"></a>将问题导出为受支持的格式</h4><p>将工具的分析结果获取到 Warnings 插件中的一种简单方法是将信息导出为一种已经支持的格式。例如，几种工具将其问题导出为 CheckStyle 或 PMD 格式。如果要使用警告插件的所有功能，则最好将信息导出为本机 XML 或 JSON 格式（此解析器使用 ID 问题）。<br>这些格式已经在用户界面中注册，你可以直接使用它们。你甚至可以在包含单行 JSON 问题的简单日志文件中提供问题，请参见示例。</p><p>这是一个示例步骤，可用于解析本机 JSON（或 XML）格式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues(tool: issues())</span><br></pre></td></tr></table></figure><h4 id="使用自定义插件部署新工具"><a href="#使用自定义插件部署新工具" class="headerlink" title="使用自定义插件部署新工具"></a>使用自定义插件部署新工具</h4><p>最灵活的方法是通过编写将在你自己的小型 Jenkins 插件中部署的 Java 类来定义新工具，有关详细信息，请参见文档“为自定义静态分析工具提供支持”。</p><h4 id="使用Groovy解析器创建新工具"><a href="#使用Groovy解析器创建新工具" class="headerlink" title="使用Groovy解析器创建新工具"></a>使用Groovy解析器创建新工具</h4><p>如果日志消息的格式非常简单，则可以通过在 Jenkins 的用户界面中创建简单的工具配置来定义对工具的支持。 出于安全原因（Groovy 脚本可能会危害你的主服务器），此配置仅在系统配置中可用。 新解析器的配置采用正则表达式，该正则表达式将用于匹配报告格式。 如果表达式匹配，则将调用 Groovy 脚本，该脚本将匹配的文本转换为问题实例。 这是基于 Groovy 的解析器的示例：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/04.png" alt="Groovy 解析器"></p><h4 id="以编程方式创建-Groovy-解析器"><a href="#以编程方式创建-Groovy-解析器" class="headerlink" title="以编程方式创建 Groovy 解析器"></a>以编程方式创建 Groovy 解析器</h4><p>还可以使用 Groovy 脚本从管道，Jenkins 启动脚本或脚本控制台中创建基于 Groovy 的解析器，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def config = io.jenkins.plugins.analysis.warnings.groovy.ParserConfiguration.getInstance()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!config.contains(<span class="string">&#x27;pep8-groovy&#x27;</span>))&#123;</span><br><span class="line">  def newParser = new io.jenkins.plugins.analysis.warnings.groovy.GroovyParser(</span><br><span class="line">    <span class="string">&#x27;pep8-groovy&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pep8 Groovy Parser&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;(.*):(\\d+):(\\d+): (\\D\\d*) (.*)&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;return builder.setFileName(matcher.group(1)).setCategory(matcher.group(4)).setMessage(matcher.group(5)).buildOptional()&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;optparse.py:69:11: E401 multiple imports on one line&quot;</span></span><br><span class="line">  )</span><br><span class="line">  config.setParsers(config.getParsers().plus(newParser))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用配置作为代码导入解析器（JCasC）"><a href="#使用配置作为代码导入解析器（JCasC）" class="headerlink" title="使用配置作为代码导入解析器（JCasC）"></a>使用配置作为代码导入解析器（JCasC）</h4><p>还可以使用 JCasC yaml 文件中的部分来指定基于 Groovy 的解析器。这是一个小示例，展示了如何添加这样的解析器：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">unclassified:</span></span><br><span class="line">  <span class="attr">warningsParsers:</span></span><br><span class="line">    <span class="attr">parsers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;Example parser&quot;</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">example-id</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">&quot;^\\s*(.*):(\\d+):(.*):\\s*(.*)$&quot;</span></span><br><span class="line">        <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          import edu.hm.hafner.analysis.Severity</span></span><br><span class="line"><span class="string">          builder.setFileName(matcher.group(1))</span></span><br><span class="line"><span class="string">                  .setLineStart(Integer.parseInt(matcher.group(2)))</span></span><br><span class="line"><span class="string">                  .setSeverity(Severity.WARNING_NORMAL)</span></span><br><span class="line"><span class="string">                  .setCategory(matcher.group(3))</span></span><br><span class="line"><span class="string">                  .setMessage(matcher.group(4))</span></span><br><span class="line"><span class="string">          return builder.buildOptional();</span></span><br><span class="line"><span class="string"></span>        <span class="attr">example:</span> <span class="string">&quot;somefile.txt:2:SeriousWarnings:SomethingWentWrong&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用定义的工具"><a href="#使用定义的工具" class="headerlink" title="使用定义的工具"></a>使用定义的工具</h4><p>一旦注册了 Groovy 解析器，就可以在作业的工具配置部分中使用它：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/05.png" alt="Groovy 配置"></p><p>首先，你需要选择工具 “Groovy Parser” 以获取 Groovy 解析器的配置屏幕。 然后，你可以从可用解析器列表中选择解析器。 该列表是根据 Jenkins 的“系统配置”部分中定义的解析器动态创建的。可以使用与其他工具相同的方式来设置自定义 ID 和名称属性。</p><p>为了在管道中使用 Groovy 解析器，你需要使用以下形式的脚本语句：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues sourceCodeEncoding: <span class="string">&#x27;UTF-8&#x27;</span>,</span><br><span class="line">    tool: groovyScript(parserId: <span class="string">&#x27;groovy-id-in-system-config&#x27;</span>, pattern:<span class="string">&#x27;**/*report.log&#x27;</span>, reportEncoding:<span class="string">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="处理受影响的源代码文件的属性"><a href="#处理受影响的源代码文件的属性" class="headerlink" title="处理受影响的源代码文件的属性"></a>处理受影响的源代码文件的属性</h3><p>为了让插件解析并显示你的源代码文件，需要为这些文件设置正确的编码。 此外，如果你的源代码不在工作区中（例如，它已签出到共享代理文件夹中），则该插件将不会自动找到你的源文件。 为了让插件显示这些文件，你可以添加一个附加的源目录：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/06.png" alt="受影响文件"></p><p>以下代码段显示了带有这些选项的示例管道，请注意，如果需要，可以不同地设置报告文件的编码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues sourceCodeEncoding: <span class="string">&#x27;ISO-8859-1&#x27;</span>, sourceDirectory: <span class="string">&#x27;/path/to/sources&#x27;</span>, tool: java(reportEncoding: <span class="string">&#x27;UTF-8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>请注意，工作区外部的文件内容可能很敏感。 为了防止意外显示此类文件，你需要在 Jenkins 系统配置屏幕中提供允许的源代码目录的白名单：</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/07.png" alt="源代码目录的白名单"></p><p>另外，此配置设置可以由 JCasC yaml 文件中的以下子节提供</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">unclassified:</span></span><br><span class="line">  <span class="attr">warningsPlugin:</span></span><br><span class="line">    <span class="attr">sourceDirectories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;C:\\Temp&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">&quot;/mnt/sources&quot;</span></span><br></pre></td></tr></table></figure><h3 id="控制参考构建的选择（基准）"><a href="#控制参考构建的选择（基准）" class="headerlink" title="控制参考构建的选择（基准）"></a>控制参考构建的选择（基准）</h3><p>警告下一代插件的一项重要功能是将问题分类为新问题，未解决问题和已解决问题：</p><ul><li>新增：所有问题，属于当前报告的一部分，但未在参考报告中显示</li><li>已修复：所有问题，属于参考报告的一部分，但不再存在于当前报告中</li><li>未解决：所有问题，是当前报告和参考报告的一部分</li></ul><p>为了计算此分类，插件需要参考构建（基准）。 然后，通过比较当前版本和基准中的问题来计算新的，已修复的和未解决的问题。 有三个选项可控制参考构建的选择。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/08.png" alt="参考"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(), ignoreQualityGate: <span class="literal">false</span>, ignoreFailedBuilds: <span class="literal">true</span>, referenceJobName: <span class="string">&#x27;my-project/master&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="筛选问题"><a href="#筛选问题" class="headerlink" title="筛选问题"></a>筛选问题</h3><p>创建的问题报告可以随后进行过滤。 你可以指定任意数量的包含或排除过滤器。 当前，支持按模块名称，程序包或名称空间名称，文件名，类别或类型过滤问题。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/09.png" alt="筛选"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>), filters: [includeFile(<span class="string">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class="string">&#x27;WHITESPACE&#x27;</span>)]</span><br></pre></td></tr></table></figure><h3 id="Quality-gate-配置"><a href="#Quality-gate-配置" class="headerlink" title="Quality gate 配置"></a>Quality gate 配置</h3><p>你可以定义几个 Quality gate (质量门)，在报告问题后将对其进行检查。这些质量门使你可以修改詹金斯的生产状态，以便立即查看是否满足所需的产品质量。对于这些质量门中的每一个，都可以将构建设置为不稳定或失败。所有质量门都使用一个简单的度量标准：给定质量门将失败的问题数量。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/10.png" alt="质量门"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>), qualityGates: [[threshold: 1, <span class="built_in">type</span>: <span class="string">&#x27;TOTAL&#x27;</span>, unstable: <span class="literal">true</span>]]</span><br></pre></td></tr></table></figure><p>类型确定将用来评估质量门的属性。请参阅枚举 QualityGateType 以查看支持哪些不同类型。</p><h3 id="健康报告配置"><a href="#健康报告配置" class="headerlink" title="健康报告配置"></a>健康报告配置</h3><p>该插件可以参与你项目的运行状况报告。你可以更改将运行状况更改为 0％ 和 100％ 的问题数。此外，可以选择在创建运行状况报告时应考虑的严重性。</p><p><a href="jenkins-warnings-next-generation-plugin/11.png">健康报告配置!</a></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>), healthy: 10, unhealthy: 100, minimumSeverity: <span class="string">&#x27;HIGH&#x27;</span></span><br></pre></td></tr></table></figure><p>该作业根据严重性为 HIGH 和错误的所有警告来调整构建运行状况。如果内部版本包含 10 条或更少的警告，则运行状况为 100％。如果内部版本有 100 个以上的警告，则运行状况为 0％。</p><h3 id="管道配置"><a href="#管道配置" class="headerlink" title="管道配置"></a>管道配置</h3><p>在 Jenkins Pipeline 中使用 Warnings 插件的要求可能很复杂，有时会引起争议。为了尽可能灵活，我决定将主要步骤分为两个独立的部分，然后可以彼此独立使用。</p><h4 id="简单的管道配置"><a href="#简单的管道配置" class="headerlink" title="简单的管道配置"></a>简单的管道配置</h4><p>步骤 recordIssues 提供了简单的管道配置，它提供了与构建后操作相同的属性（请参见上文）。此步骤扫描给定文件集（或控制台日志）中的问题，并在构建中报告这些问题。你可以使用代码片段生成器来创建一个有效的代码片段，以调用此步骤。以下示例显示了此步骤的典型示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues(</span><br><span class="line">    enabledForFailure: <span class="literal">true</span>,</span><br><span class="line">    tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>),</span><br><span class="line">    filters: [includeFile(<span class="string">&#x27;MyFile.*.java&#x27;</span>), excludeCategory(<span class="string">&#x27;WHITESPACE&#x27;</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在此示例中，将扫描文件 <code>* .log</code> 中的 Java 问题。仅包括文件名与模式 <code>MyFile.*.java</code> 匹配的问题。类别 <code>WHITESPACE</code> 的问题将被排除，即使构建失败，也会执行该步骤。</p><p>为了查看所有配置选项，你可以研究<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java">步骤实现</a>。</p><h4 id="声明式管道配置"><a href="#声明式管道配置" class="headerlink" title="声明式管道配置"></a>声明式管道配置</h4><p>声明性管道作业中的插件配置与脚本管道中的配置相同，请参见以下示例，该示例在 Jenkins 上构建分析模型库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent <span class="string">&#x27;any&#x27;</span></span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">&#x27;mvn-default&#x27;</span></span><br><span class="line">        jdk <span class="string">&#x27;jdk-default&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage (<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false -Dmaven.test.failure.ignore&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage (<span class="string">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs spotbugs:spotbugs&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            junit testResults: <span class="string">&#x27;**/target/surefire-reports/TEST-*.xml&#x27;</span></span><br><span class="line"></span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tools: [mavenConsole(), java(), javaDoc()]</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: checkStyle()</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: spotBugs()</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: cpd(pattern: <span class="string">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: pmdParser(pattern: <span class="string">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高级管道配置"><a href="#高级管道配置" class="headerlink" title="高级管道配置"></a>高级管道配置</h4><p>有时仅使用一个步骤发布和报告问题是不够的。例如，如果你使用多个并行步骤来构建产品，并且想要将所有这些步骤中的问题合并为一个结果。然后，你需要拆分扫描和聚合。该插件提供以下两个步骤：</p><ul><li>scanForIssues 此步骤使用特定的解析器扫描报告文件或控制台日志，并创建一个包含报告的中 间 AnnotatedReport 对象。有关详细信息，请参见步骤实现。</li><li>publishIssues：此步骤在你的构建中发布一个新报告，其中包含几个 scanForIssues 步骤的汇总结果。有关详细信息，请参见步骤实现。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">  stage (<span class="string">&#x27;Checkout&#x27;</span>) &#123;</span><br><span class="line">      git branch:<span class="string">&#x27;5.0&#x27;</span>, url: <span class="string">&#x27;git@github.com:jenkinsci/warnings-plugin.git&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  stage (<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">    def mvnHome = tool <span class="string">&#x27;mvn-default&#x27;</span></span><br><span class="line"></span><br><span class="line">    sh <span class="string">&quot;<span class="variable">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false&quot;</span></span><br><span class="line"></span><br><span class="line">    junit testResults: <span class="string">&#x27;**/target/*-reports/TEST-*.xml&#x27;</span></span><br><span class="line"></span><br><span class="line">    def java = scanForIssues tool: java()</span><br><span class="line">    def javadoc = scanForIssues tool: javaDoc()</span><br><span class="line"></span><br><span class="line">    publishIssues issues: [java, javadoc], filters: [includePackage(<span class="string">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stage (<span class="string">&#x27;Analysis&#x27;</span>) &#123;</span><br><span class="line">    def mvnHome = tool <span class="string">&#x27;mvn-default&#x27;</span></span><br><span class="line"></span><br><span class="line">    sh <span class="string">&quot;<span class="variable">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs&quot;</span></span><br><span class="line"></span><br><span class="line">    def checkstyle = scanForIssues tool: checkStyle(pattern: <span class="string">&#x27;**/target/checkstyle-result.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [checkstyle]</span><br><span class="line"></span><br><span class="line">    def pmd = scanForIssues tool: pmdParser(pattern: <span class="string">&#x27;**/target/pmd.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [pmd]</span><br><span class="line"></span><br><span class="line">    def cpd = scanForIssues tool: cpd(pattern: <span class="string">&#x27;**/target/cpd.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [cpd]</span><br><span class="line"></span><br><span class="line">    def spotbugs = scanForIssues tool: spotBugs(pattern: <span class="string">&#x27;**/target/findbugsXml.xml&#x27;</span>)</span><br><span class="line">    publishIssues issues: [spotbugs]</span><br><span class="line"></span><br><span class="line">    def maven = scanForIssues tool: mavenConsole()</span><br><span class="line">    publishIssues issues: [maven]</span><br><span class="line"></span><br><span class="line">    publishIssues <span class="built_in">id</span>: <span class="string">&#x27;analysis&#x27;</span>, name: <span class="string">&#x27;All Issues&#x27;</span>, issues: [checkstyle, pmd, spotbugs], filters: [includePackage(<span class="string">&#x27;io.jenkins.plugins.analysis.*&#x27;</span>)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h2><p>以下各节介绍了最重要的新功能。</p><h3 id="发行记录：New-Fixed-Outstanding-问题"><a href="#发行记录：New-Fixed-Outstanding-问题" class="headerlink" title="发行记录：New, Fixed, Outstanding 问题"></a>发行记录：New, Fixed, Outstanding 问题</h3><p>该插件的一大亮点是能够将后续版本的问题分类为 New, Fixed, Outstanding。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/12.png" alt="趋势"></p><p>使用此功能可以更轻松地控制项目的质量：你只能专注于最近引入的警告。</p><p>注意：新警告的检测基于复杂的算法，该算法试图在源代码的两个不同版本中跟踪同一警告。根据源代码的修改程度，它可能会产生一些误报，即，即使应该没有警告也可能会收到一些新的固定警告。该算法的准确性仍在研究中，并将在接下来的几个月中进行完善。</p><h3 id="Severities-严重程度"><a href="#Severities-严重程度" class="headerlink" title="Severities 严重程度"></a>Severities 严重程度</h3><p>该插件在图表中显示问题严重性的分布，它定义了以下默认严重级别，但是扩展警告插件的插件可能会添加其他默认级别。</p><ul><li><strong>Error</strong>：表示通常会导致构建失败的错误</li><li><strong>Warning</strong> (High, Normal, Low)：指示给定优先级的警告。映射到优先级取决于各个解析器。</li></ul><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/13.png" alt="严重程度"></p><p>请注意，并非每个解析器都能产生不同严重性的警告。某些解析器仅对所有问题使用相同的严重性。</p><h3 id="Build-trend-构建趋势"><a href="#Build-trend-构建趋势" class="headerlink" title="Build trend 构建趋势"></a>Build trend 构建趋势</h3><p>为了查看分析结果的趋势，几个图表显示了每个构建的问题数量。这些图表用于详细信息页面和作业概述中。当前提供以下不同的趋势图类型：</p><h4 id="问题的严重程度分布"><a href="#问题的严重程度分布" class="headerlink" title="问题的严重程度分布"></a>问题的严重程度分布</h4><p>默认趋势图显示问题总数，按严重性堆叠。使用此图表，你可以查看哪种严重程度对问题总数贡献最大。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/14.png" alt="严重度趋势图"></p><h4 id="每种静态分析类型的问题"><a href="#每种静态分析类型的问题" class="headerlink" title="每种静态分析类型的问题"></a>每种静态分析类型的问题</h4><p>如果你要汇总几个静态分析结果，则类型图将使用单独的一行显示每个工具的问题数量。你可以通过单击相应的图例符号暂时隐藏工具。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/15.png" alt="工具趋势图"></p><h4 id="新问题与已修复问题"><a href="#新问题与已修复问题" class="headerlink" title="新问题与已修复问题"></a>新问题与已修复问题</h4><p>如果你对积压的问题感兴趣，可以打开新的与固定的图表。它映射了引入的问题与通过一系列构建解决的问题。这可以帮助你了解整个待办事项列表是在增加还是在减少。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/16.png" alt="新修复趋势图"></p><h4 id="项目健康"><a href="#项目健康" class="headerlink" title="项目健康"></a>项目健康</h4><p>仅当启用了运行状况报告后，运行状况图表才可用。在这种情况下，趋势图将显示健康和不健康区域中的警告数量。你的项目目标应该是使警告数量不逃避图表的绿色部分。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/17.png" alt="健康趋势图"></p><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p>细节视图中的所有趋势图都支持使用图表底部的范围滑块缩放构建轴。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/18.png" alt="放大"></p><h4 id="构建与日期轴"><a href="#构建与日期轴" class="headerlink" title="构建与日期轴"></a>构建与日期轴</h4><p>详细信息视图中的所有趋势图都可以显示每个构建或每天的警告数量。你可以通过选择右上角的相应图标在X轴变体之间切换，每天显示平均警告数。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/19.png" alt="构建与日期"></p><h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>你可以在几个聚合视图中快速，高效地查看报告的问题集。根据问题的数量或类型，你将看到问题的分布</p><ul><li>Static Analysis Tool（静态分析工具）</li><li>Module（模组）</li><li>Package or Namespace（包或命名空间）</li><li>Severity（严重程度）</li><li>Category（类别）</li><li>Type（类型）</li></ul><p>这些详细信息视图中的每一个都是交互式的，即，你可以导航到已分类问题的子集。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/20.png" alt="软件包"></p><h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3><p>一组已报告的问题显示在一个现代化的响应表中。该表使用 Ajax 调用按需加载，它提供以下功能：</p><ul><li><strong>Pagination</strong>（分页）：问题的数量分为几个页面，可以使用提供的页面链接进行选择。请注意，目前分页是在客户端进行的，即从服务器获取整个问题表可能要花费一些时间。</li><li><strong>Sorting</strong>（排序）：可以通过单击表列中的仅一个来对表内容进行排序。</li><li><strong>Filtering, Searching</strong>（过滤，搜索）：你可以通过在搜索框中输入一些文本来过滤显示的问题。</li><li><strong>Content Aware</strong>（内容感知）：仅当有必要显示的内容时才显示列。也就是说，如果工具未报告问题类别，则该类别将被自动隐藏。</li><li><strong>Responsive</strong>（响应式）：布局应适应实际的屏幕阈值。</li><li><strong>Details</strong>（详细信息）：问题的详细信息消息（如果由相应的静态分析工具提供）在表中显示为子行。</li></ul><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/20.png" alt="详情"></p><h3 id="源代码-Blame（归咎于）"><a href="#源代码-Blame（归咎于）" class="headerlink" title="源代码 Blame（归咎于）"></a>源代码 Blame（归咎于）</h3><p>这个功能需要安装其他插件：<a href="https://github.com/jenkinsci/git-forensics-plugin">Git Forensics 插件</a></p><p>如果未在作业配置中禁用，则插件将执行 <code>git blame</code> 以确定谁是问题的负责 <code>author</code>。在相应的 SCM Blames 视图中，所有问题将与 <code>auther name</code>, <code>email</code>, 和 <code>commit ID</code> 一起列出。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/22.png" alt="Git"></p><p>为了禁用 <code>git blame</code> 功能，请将属性 <code>blameDisabled</code> 设置为 <code>true</code>，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues blameDisabled: <span class="literal">true</span>, tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Git-仓库取证"><a href="#Git-仓库取证" class="headerlink" title="Git 仓库取证"></a>Git 仓库取证</h3><p>此功能需要安装其他插件：<a href="https://github.com/jenkinsci/git-forensics-plugin">Git Forensics 插件</a></p><p>如果未在作业配置中禁用，则该插件将以“犯罪现场代码”的样式（Adam Tornhill，2013年11月）挖掘源代码存储库，以确定受影响文件的统计信息。在相应的 “SCM 取证” 视图中，将列出所有问题以及受影响文件的以下属性：</p><ul><li>提交总数</li><li>不同作者总数</li><li>创作时间</li><li>最后修改时间</li><li>源代码控制概述</li></ul><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/23.png" alt="取证视图"></p><p>为了禁用 Git 取证功能，请将属性 <code>forensicsDisabled</code>设置为 <code>true</code>，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">recordIssues forensicsDisabled: <span class="literal">true</span>, tool: java(pattern: <span class="string">&#x27;*.log&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="源代码视图"><a href="#源代码视图" class="headerlink" title="源代码视图"></a>源代码视图</h3><p>现在，源代码视图使用 JS 库 Prism 在受影响的文件中显示警告。该库为最流行的语言提供语法高亮显示，并在客户端呈现所有内容。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/24.png" alt="源视图"></p><h3 id="发行总数栏"><a href="#发行总数栏" class="headerlink" title="发行总数栏"></a>发行总数栏</h3><p>你可以在 Jenkins 作业表的单独列中显示作业的总数。 默认情况下，Jenkins 主列表视图将显示一个新列，该列计算所有工具的发行总数。 你可以添加可以配置的其他列</p><ul><li>列名</li><li>应考虑的实际工具</li><li>要显示的总计类型（总体警告，新警告，特定严重性等），请参阅 “token宏支持” 部分。</li></ul><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/25.png" alt="问题列"></p><h3 id="仪表板视图支持"><a href="#仪表板视图支持" class="headerlink" title="仪表板视图支持"></a>仪表板视图支持</h3><p>还提供对 Jenkins 仪表板视图的支持。当前，以下 portlet 可用：</p><h4 id="每个工具和作业表的问题"><a href="#每个工具和作业表的问题" class="headerlink" title="每个工具和作业表的问题"></a>每个工具和作业表的问题</h4><p>问题表显示了作业的问题总数（由每个工具分开）。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/26.png" alt="问题 portlet"></p><h4 id="问题趋势"><a href="#问题趋势" class="headerlink" title="问题趋势"></a>问题趋势</h4><p>可以将趋势图添加为 portlet，该趋势图显示所有作业的发行总数。</p><p><img src="/2019/12/jenkins-warnings-next-generation-plugin/27.png" alt="图表 portlet"></p><h3 id="远程API"><a href="#远程API" class="headerlink" title="远程API"></a>远程API</h3><p>该插件提供以下 REST API 端点。</p><h4 id="所有分析结果的汇总摘要"><a href="#所有分析结果的汇总摘要" class="headerlink" title="所有分析结果的汇总摘要"></a>所有分析结果的汇总摘要</h4><p>可以使用 URL <code>[build-url]/warnings-ng/api/json</code>（或 <code>[build-url]/warnings-ng/api/xml</code>）查询构建中已配置的所有静态分析工具。此汇总显示每个工具的 ID，名称，URL 和问题总数。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;io.jenkins.plugins.analysis.core.restapi.AggregationApi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tools&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;maven&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/maven&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Maven Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Java Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;javadoc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/javadoc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JavaDoc Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;checkstyle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/checkstyle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CheckStyle Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/pmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PMD Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">671</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;spotbugs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/spotbugs&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SpotBugs Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/cpd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CPD Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">123</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open-tasks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;latestUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/open-tasks&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Open Tasks Scanner Warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="分析结果汇总"><a href="#分析结果汇总" class="headerlink" title="分析结果汇总"></a>分析结果汇总</h4><p>你可以使用 URL <code>[build-url]/[tool-id]/api/xml</code>（或 <code>[build-url]/[tool-id]/api/json</code>）获得特定分析报告的摘要。摘要包含问题数量，质量门状态以及所有信息和错误消息。</p><p>这是一个示例 XML 报告：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">analysisResultApi</span> <span class="attr">_class</span>=<span class="string">&#x27;io.jenkins.plugins.analysis.core.restapi.AnalysisResultApi&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">totalSize</span>&gt;</span>3<span class="tag">&lt;/<span class="name">totalSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixedSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fixedSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">newSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">newSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noIssuesSinceBuild</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">noIssuesSinceBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">successfulSinceBuild</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">successfulSinceBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qualityGateStatus</span>&gt;</span>WARNING<span class="tag">&lt;/<span class="name">qualityGateStatus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">owner</span> <span class="attr">_class</span>=<span class="string">&#x27;org.jenkinsci.plugins.workflow.job.WorkflowRun&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>46<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/view/White%20Mountains/job/Full%20Analysis%20-%20Model/46/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">owner</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Searching for all files in &#x27;/tmp/node1/workspace/Full Analysis - Model&#x27; that match the pattern</span><br><span class="line">    &#x27;**/target/spotbugsXml.xml&#x27;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; found 1 file<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Successfully parsed file /tmp/node1/workspace/Full Analysis - Model/target/spotbugsXml.xml<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; found 3 issues (skipped 0 duplicates)<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Post processing issues on &#x27;node1&#x27; with encoding &#x27;UTF-8&#x27;<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving absolute file names for all issues<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; affected files for all issues already have absolute paths<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Copying affected files to Jenkins&#x27; build folder /Users/hafner/Development/jenkins/jobs/Full Analysis -</span><br><span class="line">    Model/builds/46</span><br><span class="line">  <span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; 2 copied, 0 not in workspace, 0 not-found, 0 with I/O error<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving module names from module definitions (build.xml, pom.xml, or Manifest.mf files)<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; all issues already have a valid module name<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving package names (or namespaces) by parsing the affected files<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; all affected files already have a valid package name<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Creating fingerprints for all affected code blocks to track issues over different builds<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>No filter has been set, publishing all 3 issues<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>No valid reference build found - all reported issues will be considered outstanding<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Evaluating quality qualityGates<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; WARNING - Total number of issues: 3 - Quality Gate: 1<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; Some quality qualityGates have been missed: overall result is WARNING<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Health report is disabled - skipping<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">analysisResultApi</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Token-宏支持"><a href="#Token-宏支持" class="headerlink" title="Token 宏支持"></a>Token 宏支持</h3><p>Warnings 插件提供了 token <code>ANALYSIS_ISSUES_COUNT</code>，可用于其他后期构建处理步骤，例如在邮件中。为了使用此 token，你需要安装 token 宏插件。token 具有以下可选参数：</p><ul><li><code>tool</code>：选择特定的分析结果，如果未定义，则将所有结果相加</li><li><code>type</code>：选择要使用的计数器的类型，请选择以下之一<ul><li>Total（任何严重性）</li><li>Total（仅错误）</li><li>Total（仅严重度高）</li><li>Total（仅严重级别正常）</li><li>Total（仅限严重性低）</li><li>New  （任何严重程度）</li><li>New  （仅限错误）</li><li>New  （仅限严重性高）</li><li>New  （仅严重性为正常）</li><li>New  （仅限严重性低）</li><li>Delta（任何严重程度）</li><li>Delta（仅错误）</li><li>Delta（仅严重度高）</li><li>Delta（仅严重等级正常）</li><li>Delta（仅严重度低）</li><li>Fixed（任何严重性）</li></ul></li></ul><p>例子：</p><p><code>$&#123;ANALYSIS_ISSUES_COUNT&#125;</code>：扩展到所有分析工具的合计数量</p><p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;&#125;</code>：扩展到CheckStyle问题的总数</p><p><code>$&#123;ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;, type: &quot;NEW&quot;&#125;</code>：扩展到新的 CheckStyle 问题数</p><h2 id="从静态分析套件过渡"><a href="#从静态分析套件过渡" class="headerlink" title="从静态分析套件过渡"></a>从静态分析套件过渡</h2><p>以前，静态分析套件的插件提供了相同的功能集（CheckStyle，PMD，FindBugs，静态分析实用工具，Analysis Collector，任务扫描器，Warnings 等）。为了简化用户体验和开发过程，这些插件和核心功能已合并到Warnings Next Generation 插件中。这些旧的静态分析插件不再需要，现在已经停产。如果当前使用这些旧插件之一，则应尽快迁移到新的记录器和步骤。我仍然会保留旧代码一段时间，但是主要的开发工作将花在新的代码库中。</p><ul><li>迁移 Pipelines</li></ul><p>调用旧的静态分析步骤（例如，findbug，checkstyle 等）的管道需要立即调用新的 recordIssues 步骤。所有静态分析工具都使用相同的步骤，使用 step 属性工具选择实际的解析器。有关可用参数集的更多详细信息，请参见“<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration">配置</a>”部分。</p><ul><li>迁移其他所有工作</li></ul><p>使用旧版 API 的 Freestyle，Matrix 或 Maven Jobs 使用了由每个插件提供的所谓的 Post Build Action。例如，FindBugs 插件确实提供了构建后操作“发布 FindBugs 分析结果”。这些旧的插件特定操作不再受支持，它们现在在用户界面中标记为 [Deprecated]。现在，你需要添加一个新的后期构建步骤-对于所有静态分析工具，此步骤现在称为“记录编译器警告和静态分析结果”。工具的选择是此后期构建步骤配置的一部分。注意：新的后期制作操作无法读取使用旧 API 的后期制作步骤所产生的警告。也就是说，你看不到新旧结果的合并历史记录-你仅看到两个不相关的结果。也不会自动转换以旧格式存储的结果。</p><ul><li>插件的迁移取决于分析核心</li></ul><p>以下插件已集成到此警告插件的新版本中：</p><ul><li>Android-Lint 插件</li><li>Analysis Collector 插件</li><li>CheckStyle 插件</li><li>CCM 插件</li><li>Dry 插件</li><li>PMD 插件</li><li>FindBugs 插件</li><li>Tasks Scanner 插件</li><li>Warnings 插件</li></ul><p>所有其他插件仍需要集成或需要重构以使用新的 API</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年终总结</title>
      <link href="/2019/12/2019-summary/"/>
      <url>/2019/12/2019-summary/</url>
      
        <content type="html"><![CDATA[<p>时间过得飞快，转眼已经是 2020 年的第三天了，回顾 2019 年，我给自己的年终关键词是：尽力。</p><p>这是我作为开发工程师的第二年，虽然 Title 是 SE (Software Engineer)，但主要的工作内容是产品的构建和发布以及 CI&#x2F;CD&#x2F;DevOps 的落地（自称打杂）。流水的记录一下 2019 年发生在工作上的“成绩”。</p><span id="more"></span><p>2019 年在工作中除了完成日常产品构建、发布、Git 管理、VM 管理等，尝试在构建和发布自动化上做大的调整，将手工构建和部分自动构建从 Bamboo 迁移到 Jenkins，通过 Jenkins 的 multi-branch pipeline、Shared Libraries 与 Artifactory 做持续集成。</p><p>2019 年在公司内部提交了一个创新项目，有幸拿到了第一名和首席产品奖。</p><p>因此有机会再去美国，参加了公司的开发者大会。很开心这个项目最终进入到了产品的 Roadmap 里。</p><p>2019 年底 12 月去北京参加了一次两天的《JFrog Jenkins，Artifactory &amp; Kubernetes》训练营，跟 DevOps 行业工具里最有影响力（之一）的公司的工程师学习最佳实践。</p><p>这一年关于持续集成和持续交付收获不少新的知识，但只更新了 11 篇公众号相关原创文章，33 篇 Blog。这差别是因为 Blog 更像笔记，随时记录修改不怕错；公众号更像报纸，发出去的内容无法修改和补充，每次更新都需要一字一句反复修改和阅览确认，最终输出一篇完整的原创内容需要花费比写 Blog 多几倍的时间。</p><p>希望 2020 年能完成更多有价值的内容输出，有机会的话用 8 到 10 个月的业余时间完成一件以前一直不敢想的事（如果完成就写下来，没成就烂在肚子里）。</p><p>分享在 2019 年最后一天收到的一封邮件：</p><p>前段时间大家都做了年末总结。试问，有多少人对自己一年的表现满意？你是否在工作中体现出你的价值？你提交了多少次代码？提交的代码质量怎么样？你解决了多少个客户问题？你发现了多少 bug？<br>你是否在技术和业务知识有所提高？和你的同事比较，你的进步速度你自己是否满意？又有多少人把时间都花在了微信和聊天上？有没有人是待着混日子，或者应付公事的思路在这里工作。<br>我们年龄都差不多，多半是三四十岁。这个年龄被认为是最好的工作年龄。希望你不要在这里浪费你最好的时光。<br>有人可能说，我已经实现或者接近时间财务自由了，我对工作没有大的要求。首先我恭喜你实现财务自由，但同时我想说的是工作绝不只是一份收入来源这么简单。你是否能在工作中得到同事和领导的认可，是否能体现自己的价值。<br>我喜欢和有求知欲，有责任感，有上进心的人一起工作。我同时不喜欢工作时间，整天拿着手机不离手的， 工作上没有上进心的人。如果确实有事情，可以离开作为去打个电话，迅速解决一下。没有事情的闲看，是不赞成的。<br>还有人，到点就准时下班，很像多干几分钟自己就吃亏了一样，这种心态千万不可取。试问，如果你的能力水平不及你的同事，你每天还不比别人多努力，你怎么才能接近或者超过别人？难道永远都想落后？每天多走一里路，每天多做一些吧。</p><p>我读了好几遍，感谢上面的话，从个人角度非常认同以上观点，尤其是说工作绝不是一份收入来源这么简单，它是一个人的价值体现。如果喜欢这份工作，尽力去做到最好吧；如果不喜欢，还是趁早找到自己的乐趣所在。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 历史统计信息生成器</title>
      <link href="/2019/12/git-stats/"/>
      <url>/2019/12/git-stats/</url>
      
        <content type="html"><![CDATA[<p>如果你是研发效能组的一员或者在从事 CI&#x2F;CD 或 DevOps，除了提供基础设施，指标和数据是也是一个很重要的一环，比如需要分析下某个 Git 仓库代码提交情况：</p><ul><li>这个仓库的代码谁提交的代码最多</li><li>这个仓库的活跃度是什么样子的</li><li>各个时段的提交分析数据</li><li>每个版本的贡献排名</li><li>每周&#x2F;每月&#x2F;每年的贡献排名等等</li></ul><p>几天前发现一个 Git 历史统计信息生成工具叫 GitStats ( <a href="http://gitstats.sourceforge.net/">http://gitstats.sourceforge.net/</a> )</p><span id="more"></span><p>这是一个用 python 写的，代码量很少，功能却非常强大的分析工具，也是我目前发现为数不多的可以生成漂亮的报告并且使用很方便的开源项目。</p><p>gitstats 的报告也很强大 (<a href="https://github.com/tomgi/gitstats">https://github.com/tomgi/gitstats</a>) 感兴趣的可以试试</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>安装依赖：Git，Python，Gnuplot。</p><p>如果有 Linux，推荐在 Linux 上下载和安装。我曾尝试用 Windows 来准备环境，要下载 Python2，配置 Cygwin，还要手动配置 Gnuplot （Gnuplot 是一个可移植的命令行驱动的图形工具），挺麻烦的。以下是我在 Linux 上来的安装和使用步骤。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 Python 2</span></span><br><span class="line">sudo yum -y install python27</span><br><span class="line"><span class="comment"># 安装 Gnuplot</span></span><br><span class="line">sudo yum -y install gnuplot</span><br><span class="line"><span class="comment"># 下载 gitstats</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hoxu/gitstats.git</span><br><span class="line"><span class="comment"># 下载你要分析的代码仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/alibaba/fastjson.git</span><br><span class="line"><span class="comment"># 执行命令，生产报告</span></span><br><span class="line"><span class="built_in">cd</span> gitstats</span><br><span class="line">./gitstats ../fastjson ../html/fastjson</span><br><span class="line"><span class="comment"># 经过 15 秒钟的执行，生成报告</span></span><br><span class="line">Generating report...</span><br><span class="line">[0.00393] &gt;&gt; git --git-dir=/workspace/gitstats/.git --work-tree=/workspace/gitstats rev-parse --short HEAD</span><br><span class="line">[0.00236] &gt;&gt; git --version</span><br><span class="line">[0.00716] &gt;&gt; gnuplot --version</span><br><span class="line">Generating graphs...</span><br><span class="line">[0.01676] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/day_of_week.plot&quot;</span></span><br><span class="line">[0.01571] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/files_by_date.plot&quot;</span></span><br><span class="line">[0.01281] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/month_of_year.plot&quot;</span></span><br><span class="line">[0.09293] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/lines_of_code_by_author.plot&quot;</span></span><br><span class="line">[0.01340] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/commits_by_year.plot&quot;</span></span><br><span class="line">[0.01799] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/hour_of_day.plot&quot;</span></span><br><span class="line">[0.01627] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/domains.plot&quot;</span></span><br><span class="line">[0.01268] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/commits_by_year_month.plot&quot;</span></span><br><span class="line">[0.09435] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/commits_by_author.plot&quot;</span></span><br><span class="line">[0.01522] &gt;&gt; gnuplot <span class="string">&quot;/workspace/html/fastjson/lines_of_code.plot&quot;</span></span><br><span class="line">Execution time 15.16208 secs, 4.58247 secs (30.22 %) <span class="keyword">in</span> external commands)</span><br><span class="line">You may now run:</span><br><span class="line"></span><br><span class="line">   sensible-browser <span class="string">&#x27;/workspace/html/fastjson/index.html&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h2><h3 id="常规统计"><a href="#常规统计" class="headerlink" title="常规统计"></a>常规统计</h3><p>可以看到这个项目叫 fastjson，从 2011 年 7 月 31 日开始提交第一次代码，距离当前已经 3060 天了，893 个活跃天。总共文件是 2960 个，一共的代码行数是 25 万行。</p><p><img src="/2019/12/git-stats/git-stats-index.png" alt="常规统计"></p><h3 id="活跃度"><a href="#活跃度" class="headerlink" title="活跃度"></a>活跃度</h3><p>每天中的每小时的、每周中的每天、每周中的每小时，每年中的每月的、每年的提交数量。</p><p>在过去的 32 周里，其中前 12 周到 17 周这段时间很活跃，提交很多。另外可以看到在白天 12 点到晚上 20 点这段时间提交很少，大部分程序员在这段时间都在应对公司里的工作，无法贡献开源项目。</p><p>晚上 20 点之后提交开始增多，看来是一个非常努力的开发者。另外可以看到周一到周日都有提交，周六相对最少，应该是周六休息和放松一下。周日提交明显比周六多，看来还是花费了不少的个人宝贵周末时间。</p><p><img src="/2019/12/git-stats/git-stats-activity-1.png" alt="活跃度-1"></p><p>还能看到该项目主要完成时间在 2016 年到 2017 年，完成的时区是在东八区，这个维度可对不同区域的开发者贡献数量进行分析。</p><p><img src="/2019/12/git-stats/git-stats-activity-2.png" alt="活跃度-2"></p><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><p>列举了所有的作者，提交数，第一次提交及最近一次提交。</p><p><img src="/2019/12/git-stats/git-stats-authors-1.png" alt="贡献者-1"></p><p>这张图也是可以看到谁是该项目的创建者，以及这几年以来每年的谁的贡献最大。还有可以看到提交者所用的邮箱账户。</p><p><img src="/2019/12/git-stats/git-stats-authors-2.png" alt="贡献者-2"></p><h3 id="文件及行数"><a href="#文件及行数" class="headerlink" title="文件及行数"></a>文件及行数</h3><p>文件总数是 2960 个，代码行数是 25 万行。</p><p>另外还可以看到每年的文件增加趋势图以及这些文件类型数量的排名，可以看到 java 文件占了 96.08%，其次是 json。</p><p><img src="/2019/12/git-stats/git-stats-files.png" alt="文件"></p><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>Tags 对于团队是一个很重要分析指标（前提是所要分析的仓库在版本发布后创建了 Tag）可以看到每个版本的贡献度排名。</p><p><img src="/2019/12/git-stats/git-stats-tags.png" alt="Tags"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果感兴趣可以分析一下自己的项目或是去 GitHub 上找一个有意思、有影响力的项目拿来分析一下，比如 996.ICU 以及 vue 等，玩的开心。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Stats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Black Duck 与 Jenkins 集成</title>
      <link href="/2019/12/blackduck-interate-with-jenkins/"/>
      <url>/2019/12/blackduck-interate-with-jenkins/</url>
      
        <content type="html"><![CDATA[<p>最近做了 Black Duck 与 Jenkins 的集成，目标是给测试和开发提供定制化、定时的对各个开发代码仓库的进行源码扫描。</p><h2 id="为什么要做源码扫描"><a href="#为什么要做源码扫描" class="headerlink" title="为什么要做源码扫描"></a>为什么要做源码扫描</h2><span id="more"></span><p>在产品开发中经常需要引入一些开源组件，但这些开源的代码会给产品风险。因此我们在发布自己产品的时候需要对这些开源组件的漏洞和许可信息进行评估。<br><img src="/2019/12/blackduck-interate-with-jenkins/open-source.png" alt="开源不等于安全"></p><p>Black Duck（黑鸭）是一款对源代码进行扫描、审计和代码管理的软件工具（同类型的工具还有 JFrog Xray）。能够搜索安全的开源代码，检测产品的开源代码使用情况，以检查外来代码的开源代码使用情况和风险情况。</p><p>如果不能及时的进行代码扫描，在产品发布快要发布才进行扫描，如果发现问题这时候再去解决就会变得非常被动，因此团队需要尽早发现并解决问题，将 CI 工具进行集成，进行每日、每周、每月扫描就变得十分重要。</p><h2 id="Black-Duck-手动执行一般步骤"><a href="#Black-Duck-手动执行一般步骤" class="headerlink" title="Black Duck 手动执行一般步骤"></a>Black Duck 手动执行一般步骤</h2><ol><li>手动下载指定 Git 仓库及分支代码</li><li>去掉不相关的代码（也可以通过 Black Duck 参数去指定要扫描的特定文件或文件夹）</li><li>手动执行 Black Duck 扫描命令​</li><li>扫描成功后，结果传到内部 Black Duck 网站供相关人员进行审查</li></ol><h2 id="Black-Duck-与-Jenkins-的集成目标"><a href="#Black-Duck-与-Jenkins-的集成目标" class="headerlink" title="Black Duck 与 Jenkins 的集成目标"></a>Black Duck 与 Jenkins 的集成目标</h2><ol><li>一个流水线支持定制化仓库的代码下载</li><li>给开发和测试提供简单的、可随时可以执行源码扫描的界面</li><li>支持定期自动扫描，以及与其他 Jenkins 任务联动执行​</li></ol><h2 id="Black-Duck-参数介绍"><a href="#Black-Duck-参数介绍" class="headerlink" title="Black Duck 参数介绍"></a>Black Duck 参数介绍</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--blackduck.url                                       <span class="comment"># 你的 Black Duck 网址</span></span><br><span class="line">--blackduck.username                                  <span class="comment"># 你的登录用户</span></span><br><span class="line">--blackduck.api.token                                 <span class="comment"># 你的登录用户 Token</span></span><br><span class="line">--detect.project.name                                 <span class="comment"># Black Duck 下面的项目</span></span><br><span class="line">--detect.project.version.name                         <span class="comment"># 项目版本号</span></span><br><span class="line">--detect.source.path                                  <span class="comment"># 要扫描的代码目录</span></span><br><span class="line">--logging.level.com.synopsys.integration              <span class="comment"># 扫描日志级别</span></span><br><span class="line">--blackduck.trust.cert=TRUE                           <span class="comment"># 是否信任 socket (SSL)</span></span><br><span class="line">--detect.blackduck.signature.scanner.snippet.matching <span class="comment"># 扫描片段模式</span></span><br></pre></td></tr></table></figure><p>更多其他参数可以参照官方的 CI 集成文档 <a href="https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/71106939/Synopsys+Detect+for+Jenkins">Synopsys Detect for Jenkins</a></p><h2 id="Black-Duck-配置"><a href="#Black-Duck-配置" class="headerlink" title="Black Duck 配置"></a>Black Duck 配置</h2><p>首先，安装 Black Duck 插件 <a href="https://wiki.jenkins.io/display/JENKINS/Synopsys+Detect+Plugin">Synopsys Detect</a> 到 Jenkins</p><p>然后，配置 Synopsys Detect 插件</p><ul><li>Jenkins -&gt; Confiruration（系统配置）</li><li>Black Duck URL： 公司内部的 Black Duck 网址，例如 <a href="https://yourcompany.blackducksoftware.com/">https://yourcompany.blackducksoftware.com</a></li><li>Black Duck credentials： 注意要选择 credentials 类型为 Secret text, Secret 填写你用户的 Token<br><img src="/2019/12/blackduck-interate-with-jenkins/blackduck-credentials.png" alt="Secret text 配置"></li><li>配置完成后点击 Test connections to Black Duck，显示 Connection successful 表示配置成功。<br><img src="/2019/12/blackduck-interate-with-jenkins/blackduck-config.png" alt="Connection successful"></li></ul><h2 id="Black-Duck-流水线任务效果"><a href="#Black-Duck-流水线任务效果" class="headerlink" title="Black Duck 流水线任务效果"></a>Black Duck 流水线任务效果</h2><p><img src="/2019/12/blackduck-interate-with-jenkins/blackduck-Jenkins-job.png" alt="Build with Parameters"></p><h2 id="Black-Duck-流水线代码"><a href="#Black-Duck-流水线代码" class="headerlink" title="Black Duck 流水线代码"></a>Black Duck 流水线代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">      label <span class="string">&#x27;black-duck&#x27;</span></span><br><span class="line">      customWorkspace <span class="string">&quot;/agent/workspace/blackduck&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">    choice(</span><br><span class="line">      name: <span class="string">&#x27;VERSION&#x27;</span>,</span><br><span class="line">      choices: [<span class="string">&#x27;MVSURE_v1.1&#x27;</span>, <span class="string">&#x27;MVSURE_v1.2&#x27;</span>, <span class="string">&#x27;MVSURE_v2.2&#x27;</span>],</span><br><span class="line">      description: <span class="string">&#x27;Which version do you want scan on black duck? MVSURE_v1.1, MVSURE_v1.2 or others?&#x27;</span>)</span><br><span class="line">    choice(</span><br><span class="line">      name: <span class="string">&#x27;REPO&#x27;</span>,</span><br><span class="line">      choices: [<span class="string">&#x27;blog-server&#x27;</span>, <span class="string">&#x27;blog-client&#x27;</span>, <span class="string">&#x27;blog-docker&#x27;</span>],</span><br><span class="line">      description: <span class="string">&#x27;Which repository code does above VERSION belong to?&#x27;</span>)</span><br><span class="line">    string(</span><br><span class="line">      name: <span class="string">&#x27;BRANCH&#x27;</span>,</span><br><span class="line">      defaultValue: <span class="string">&#x27;develop&#x27;</span>,</span><br><span class="line">      description: <span class="string">&#x27;Which branch does above VERSION belong to?&#x27;</span>)</span><br><span class="line">    choice(</span><br><span class="line">      name: <span class="string">&#x27;SNIPPET-MODES&#x27;</span>,</span><br><span class="line">      choices: [<span class="string">&#x27;SNIPPET_MATCHING&#x27;</span>, <span class="string">&#x27;SNIPPET_MATCHING_ONLY&#x27;</span>, <span class="string">&#x27;FULL_SNIPPET_MATCHING&#x27;</span>, <span class="string">&#x27;FULL_SNIPPET_MATCHING_ONLY&#x27;</span>, <span class="string">&#x27;NONE&#x27;</span>],</span><br><span class="line">      description: <span class="string">&#x27;What snippet scan mode do you want to choose?&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">    ROBOT                  = credentials(<span class="string">&quot;d1cbab74-823d-41aa-abb7-858485121212&quot;</span>)</span><br><span class="line">    hub_detect             = <span class="string">&#x27;https://blackducksoftware.github.io/hub-detect/hub-detect.sh&#x27;</span></span><br><span class="line">    blackduck_url          = <span class="string">&#x27;https://yourcompany.blackducksoftware.com&#x27;</span></span><br><span class="line">    blackduck_user         = <span class="string">&#x27;robot@yourcompany.com&#x27;</span></span><br><span class="line">    detect_project         = <span class="string">&#x27;GITHUB&#x27;</span></span><br><span class="line">    detect_project_version = <span class="string">&#x27;$&#123;VERSION&#125;&#x27;</span></span><br><span class="line">    detect_source_path     = <span class="string">&#x27;$&#123;WORKSPACE&#125;/$&#123;REPO&#125;/src&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 只保留最近十次 Jenkins 执行结果</span></span><br><span class="line">  options &#123;buildDiscarder(logRotator(numToKeepStr:<span class="string">&#x27;10&#x27;</span>))&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 定时触发可以在这里添加</span></span><br><span class="line"></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">&quot;git clone&quot;</span>)&#123; <span class="comment"># 参数化 git clone 代码过程</span></span><br><span class="line">      steps&#123;</span><br><span class="line">        sh <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        if [ -d $&#123;REPO&#125; ]; then</span></span><br><span class="line"><span class="string">            rm -rf $&#123;REPO&#125;</span></span><br><span class="line"><span class="string">        fi</span></span><br><span class="line"><span class="string">        git clone -b $&#123;BRANCH&#125; --depth 1 https://$ROBOT_USR:&quot;$ROBOT_PSW&quot;@git.yourcompany.com/scm/github/$&#123;REPO&#125;.git</span></span><br><span class="line"><span class="string">        &#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;black duck scan&quot;</span>)&#123; <span class="comment"># 参数化 Black Duck 所用到的参数值</span></span><br><span class="line">      steps &#123;</span><br><span class="line">        withCredentials([string(credentialsId: <span class="string">&#x27;robot-black-duck-scan&#x27;</span>, variable: <span class="string">&#x27;TOKEN&#x27;</span>)]) &#123; <span class="comment"># 用 withCredentials 来获得 Token</span></span><br><span class="line">          synopsys_detect <span class="string">&#x27;bash &lt;(curl -s $&#123;hub_detect&#125;) --blackduck.url=$&#123;blackduck_url&#125; --blackduck.username=$&#123;blackduck_user&#125; --blackduck.api.token=$&#123;TOKEN&#125; --detect.project.name=$&#123;detect_project&#125; --detect.project.version.name=$&#123;detect_project_version&#125; --detect.source.path=$&#123;detect_source_path&#125; --logging.level.com.synopsys.integration=debug --blackduck.trust.cert=TRUE --detect.blackduck.signature.scanner.snippet.matching=$&#123;SNIPPET-MODES&#125;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  post &#123;</span><br><span class="line">    <span class="comment"># 不论结果任何都给执行者发送邮件通知</span></span><br><span class="line">    always &#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        def email = load <span class="string">&quot;vars/email.groovy&quot;</span></span><br><span class="line">        wrap([<span class="variable">$class</span>: <span class="string">&#x27;BuildUser&#x27;</span>]) &#123;</span><br><span class="line">            def user = env.BUILD_USER_ID</span><br><span class="line">            email.build(currentBuild.result, <span class="string">&quot;<span class="variable">$&#123;user&#125;</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    success &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;success, cleanup blackduck workspace&quot;</span></span><br><span class="line">      cleanWs()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BlackDuck </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> BlackDuck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2019/12/Docker-commands/"/>
      <url>/2019/12/Docker-commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 常用命令小纸条</p></blockquote><h2 id="Docker-start-stop-restart"><a href="#Docker-start-stop-restart" class="headerlink" title="Docker start|stop|restart"></a>Docker start|stop|restart</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Docker 版本</span></span><br><span class="line">docker -v <span class="comment"># or docker --version</span></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 停止 docker</span></span><br><span class="line">sudo systemctl stop docker.service</span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">sudo systemctl start docker.service</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Docker-run"><a href="#Docker-run" class="headerlink" title="Docker run"></a>Docker run</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现”对话”的能力：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="Login-Artifactory"><a href="#Login-Artifactory" class="headerlink" title="Login Artifactory"></a>Login Artifactory</h2><p>注意：Open Source 版本 Artifactory 不支持 Docker，需要下载 <a href="https://jfrog.com/container-registry/">JFrog Container Registry</a> 或是 Artifactory 企业版。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login -u &lt;USER_NAME&gt; -p &lt;USER_PASSWORD&gt; devasvm.dev.org.com:&lt;REPOSITORY_PORT&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-sh-4.2$ sudo docker login devasvm.dev.org.com:8040</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>把 Docker image 推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// docker tag SOURCE_IMAGE[:TAG] devasvm.dev.org.com:8040/docker-local/IMAGE[:TAG]</span><br><span class="line">-sh-4.2$ sudo docker tag ubuntu:15.10 devasvm.dev.org.com:8040/docker-local/ubuntu:15.10</span><br><span class="line"></span><br><span class="line">// docker push devasvm.dev.org.com:8040/docker-local/IMAGE[:TAG]</span><br><span class="line">-sh-4.2$ sudo docker push devasvm.dev.org.com:8040/docker-local/ubuntu:15.10</span><br><span class="line">The push refers to repository [devasvm.dev.org.com:8040/docker-local/ubuntu]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>更多 Docker 常用命令记录到这里。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2019/12/docker-commands/"/>
      <url>/2019/12/docker-commands/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 常用命令小纸条</p></blockquote><h2 id="Docker-start-stop-restart"><a href="#Docker-start-stop-restart" class="headerlink" title="Docker start|stop|restart"></a>Docker start|stop|restart</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Docker 版本</span></span><br><span class="line">docker -v <span class="comment"># or docker --version</span></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 停止 docker</span></span><br><span class="line">sudo systemctl stop docker.service</span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">sudo systemctl start docker.service</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="Docker-run"><a href="#Docker-run" class="headerlink" title="Docker run"></a>Docker run</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现”对话”的能力：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="Login-Artifactory"><a href="#Login-Artifactory" class="headerlink" title="Login Artifactory"></a>Login Artifactory</h2><p>注意：Open Source 版本 Artifactory 不支持 Docker，需要下载 <a href="https://jfrog.com/container-registry/">JFrog Container Registry</a> 或是 Artifactory 企业版。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login -u &lt;USER_NAME&gt; -p &lt;USER_PASSWORD&gt; devasvm.dev.org.com:&lt;REPOSITORY_PORT&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-sh-4.2$ sudo docker login devasvm.dev.org.com:8040</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>把 Docker image 推送到远程仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// docker tag SOURCE_IMAGE[:TAG] devasvm.dev.org.com:8040/docker-local/IMAGE[:TAG]</span><br><span class="line">-sh-4.2$ sudo docker tag ubuntu:15.10 devasvm.dev.org.com:8040/docker-local/ubuntu:15.10</span><br><span class="line"></span><br><span class="line">// docker push devasvm.dev.org.com:8040/docker-local/IMAGE[:TAG]</span><br><span class="line">-sh-4.2$ sudo docker push devasvm.dev.org.com:8040/docker-local/ubuntu:15.10</span><br><span class="line">The push refers to repository [devasvm.dev.org.com:8040/docker-local/ubuntu]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>更多 Docker 常用命令记录到这里。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京48小时：记一次参加 DevOps 训练营</title>
      <link href="/2019/12/48h-in-Beijing/"/>
      <url>/2019/12/48h-in-Beijing/</url>
      
        <content type="html"><![CDATA[<p>本周二下班我没有像往常一样加会班（我一般都会赶在晚6点后下班来躲过晚高峰期），而是直接挤地铁奔向机场，准备坐八点半去往北京的一班飞机，因为第二天要参加 JFrog 中国在北京望京举办的 Jenkins, Artifactory &amp; Kubernetes 实战训练营。</p><span id="more"></span><p>一是由于公司每人每年都有两天带薪培训假期，如果有特别适合我的，我会自费前往。二是培训内容本身也十分贴近我目前的工作内容，想了解下行业最佳实践与相关同行交流。</p><p>在出行前，跟领导请了假说明意向，顺便问了下去参加类似培训是否会有预算，领导让我报一下，我大概算了车票和酒店的钱，领导就跟公司申请，并且还附带帮我申请了饭钱。公司同意，前提只有一个就是回来要做好分享。就这样我就带着任务去参加这次 JFrog DevOps 训练营了，这里我特别感谢我的领导以及公司。</p><h2 id="再次见北京"><a href="#再次见北京" class="headerlink" title="再次见北京"></a>再次见北京</h2><p>想想离开北京已经5年多了，这是唯一一次在北京停留时间最长的 48 小时，之前有过出差路过北京。以前虽然在北京工作，但那时候我还没有太多关注过生活，这次有意的注意了下，脑子里一直思考一个问题，如果再让我回到北京我还会像当初的执念仅仅想着北京工作几年而已吗？</p><p>下了飞机已经十点半了，从机场到望京这段的机场高速车流量还是很大的，北京的夜生活跟以前的感觉一样，比起二三线城市足足晚了两个多小时。五年前在北我京通常都是九点后从公司走，赶上上线的时候后半夜才到家，第二天中午到公司，每天的时间比二三线城市现在我足足延后了五六个小时。</p><p>我现在的生活是早九晚六，不推崇加班，上班期间也是很忙，但绝大多数人也不会加班，加不加班是自愿。期间去过美国出差，美国的同事很多是早上七八点上班，他们一般中午吃的很简单也很快，吃完饭如果工作忙，他们会立马投入工作，下午三四点钟就离开办公室了，待到五六点钟的极少数，但工作效率其实感觉不差。这让我想起了今年轰轰烈烈的讨论过的996，可能归根到底是我们的社会发展阶段所造成的，年轻人压力很大需要努力赚钱买房，有娃的人有自己的父母来帮忙照顾孩子，年老的人也不考虑自己的退休生活，更多的是希望能帮忙自己的孩子解决一些后顾之忧，就这样年轻人就可以安心的的996了。但是美国人他们不行，很现实的他们如果不三四点钟下班，他们的孩子就没人接，他们需要自己的家庭生活。因此，我们本应该由企业甚至是社会来承担事情，被全社会的来承担了，996就自然而然不可避免的发生了。</p><p>早高峰时段，望京有的路口有年长的大爷大妈在指挥交通，每当绿灯时，大量的电动车和自行车与行人一同穿行，我总担心会被刮到。晚上下班吃完饭回去的时候，路口没有指挥了，行人、自行车以及电动车在红灯时过马路的情况还是挺普遍的，造成了绿灯时机动车通行效率很低。另外，就是走在路上，后面不时的有自行车、电动车骑过，我总是挺担心被撞到，这种走路时候担心的感觉其实是不太舒服的。</p><p>中午跟朋友约了吃饭，听他聊起过去五年多的工作情况，期间他换了好几个公司，有勾心斗角的，有 P2P 黄的（工资还欠着的，还在仲裁中），谈起最近一年北京大厂裁员以及网易最近的裁员风波，都让我感受在哪混着都挺不容易的。随着他要当爸爸了，从没有考虑过要离开北京的他也有了离开的念头，如果不能在将来在北京购买个小房子，他可能就回到家乡，住他自己已经购买房子里生活。</p><p>随着企业成本控制，不少企业已经去二三线城市发展，那里的租金甚至比北京便宜四五倍，如果能招到人的话，他们就可以落地二三线了。当初我在北京的时候，我的室友就在中国移动研究院，后来中国移动研究院搬到了苏州，他和几个小伙伴也都去了苏州，现在已经早早在那里买房了，那边环境很好，有自己的房子，工资也不低，其实生活挺舒服的。尤其是软件行业，有的公司允许远程办公，那只要能满足岗位要求，其他也挺好的。身边就有朋友他们的公司在北京撤除了办公室，他们现在就在家办公，隔一段时间可以去出差去二三线城市的办公室与同事工作交流。</p><p>此时，脑海中的问题一直缠绕，再给你一次机会你还想在留在北京生活吗？我的决定和当初一样回到现在的城市。</p><p>我喜欢这里的工作生活的平衡，加班也都是主动加班学习，没有被迫的加班给领导看；我喜欢这里的海，中午吃完饭就可以跟同事一起散步走到海边看海；我喜欢这里离父母很近，开车半个小时就能到，可以经常与他们相聚照顾他们；我喜欢住在自己的房子，不用担心搬家了，可以不断的改善生活环境；我喜欢这里人不太多、该有的专卖店和商城都有、有地铁，去哪里都不算太远。</p><p>周四下午 5 点培训完，吃了个饭就直奔机场连夜回到家，第二天回来继续上班了。这短短的两天，往返两座城市之间工作和培训，飞机上只需要40分钟，就像没有离开过一样，让人感叹交通的便利。</p><p>祝愿每个人都收获自己享受的生活。</p><p align="right">2019 年 12 月 1 日 23 : 55 : 00</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京48小时：记一次参加 DevOps 训练营</title>
      <link href="/2019/12/48h-in-beijing/"/>
      <url>/2019/12/48h-in-beijing/</url>
      
        <content type="html"><![CDATA[<p>本周二下班我没有像往常一样加会班（我一般都会赶在晚6点后下班来躲过晚高峰期），而是直接挤地铁奔向机场，准备坐八点半去往北京的一班飞机，因为第二天要参加 JFrog 中国在北京望京举办的 Jenkins, Artifactory &amp; Kubernetes 实战训练营。</p><span id="more"></span><p>一是由于公司每人每年都有两天带薪培训假期，如果有特别适合我的，我会自费前往。二是培训内容本身也十分贴近我目前的工作内容，想了解下行业最佳实践与相关同行交流。</p><p>在出行前，跟领导请了假说明意向，顺便问了下去参加类似培训是否会有预算，领导让我报一下，我大概算了车票和酒店的钱，领导就跟公司申请，并且还附带帮我申请了饭钱。公司同意，前提只有一个就是回来要做好分享。就这样我就带着任务去参加这次 JFrog DevOps 训练营了，这里我特别感谢我的领导以及公司。</p><h2 id="再次见北京"><a href="#再次见北京" class="headerlink" title="再次见北京"></a>再次见北京</h2><p>想想离开北京已经5年多了，这是唯一一次在北京停留时间最长的 48 小时，之前有过出差路过北京。以前虽然在北京工作，但那时候我还没有太多关注过生活，这次有意的注意了下，脑子里一直思考一个问题，如果再让我回到北京我还会像当初的执念仅仅想着北京工作几年而已吗？</p><p>下了飞机已经十点半了，从机场到望京这段的机场高速车流量还是很大的，北京的夜生活跟以前的感觉一样，比起二三线城市足足晚了两个多小时。五年前在北我京通常都是九点后从公司走，赶上上线的时候后半夜才到家，第二天中午到公司，每天的时间比二三线城市现在我足足延后了五六个小时。</p><p>我现在的生活是早九晚六，不推崇加班，上班期间也是很忙，但绝大多数人也不会加班，加不加班是自愿。期间去过美国出差，美国的同事很多是早上七八点上班，他们一般中午吃的很简单也很快，吃完饭如果工作忙，他们会立马投入工作，下午三四点钟就离开办公室了，待到五六点钟的极少数，但工作效率其实感觉不差。这让我想起了今年轰轰烈烈的讨论过的996，可能归根到底是我们的社会发展阶段所造成的，年轻人压力很大需要努力赚钱买房，有娃的人有自己的父母来帮忙照顾孩子，年老的人也不考虑自己的退休生活，更多的是希望能帮忙自己的孩子解决一些后顾之忧，就这样年轻人就可以安心的的996了。但是美国人他们不行，很现实的他们如果不三四点钟下班，他们的孩子就没人接，他们需要自己的家庭生活。因此，我们本应该由企业甚至是社会来承担事情，被全社会的来承担了，996就自然而然不可避免的发生了。</p><p>早高峰时段，望京有的路口有年长的大爷大妈在指挥交通，每当绿灯时，大量的电动车和自行车与行人一同穿行，我总担心会被刮到。晚上下班吃完饭回去的时候，路口没有指挥了，行人、自行车以及电动车在红灯时过马路的情况还是挺普遍的，造成了绿灯时机动车通行效率很低。另外，就是走在路上，后面不时的有自行车、电动车骑过，我总是挺担心被撞到，这种走路时候担心的感觉其实是不太舒服的。</p><p>中午跟朋友约了吃饭，听他聊起过去五年多的工作情况，期间他换了好几个公司，有勾心斗角的，有 P2P 黄的（工资还欠着的，还在仲裁中），谈起最近一年北京大厂裁员以及网易最近的裁员风波，都让我感受在哪混着都挺不容易的。随着他要当爸爸了，从没有考虑过要离开北京的他也有了离开的念头，如果不能在将来在北京购买个小房子，他可能就回到家乡，住他自己已经购买房子里生活。</p><p>随着企业成本控制，不少企业已经去二三线城市发展，那里的租金甚至比北京便宜四五倍，如果能招到人的话，他们就可以落地二三线了。当初我在北京的时候，我的室友就在中国移动研究院，后来中国移动研究院搬到了苏州，他和几个小伙伴也都去了苏州，现在已经早早在那里买房了，那边环境很好，有自己的房子，工资也不低，其实生活挺舒服的。尤其是软件行业，有的公司允许远程办公，那只要能满足岗位要求，其他也挺好的。身边就有朋友他们的公司在北京撤除了办公室，他们现在就在家办公，隔一段时间可以去出差去二三线城市的办公室与同事工作交流。</p><p>此时，脑海中的问题一直缠绕，再给你一次机会你还想在留在北京生活吗？我的决定和当初一样回到现在的城市。</p><p>我喜欢这里的工作生活的平衡，加班也都是主动加班学习，没有被迫的加班给领导看；我喜欢这里的海，中午吃完饭就可以跟同事一起散步走到海边看海；我喜欢这里离父母很近，开车半个小时就能到，可以经常与他们相聚照顾他们；我喜欢住在自己的房子，不用担心搬家了，可以不断的改善生活环境；我喜欢这里人不太多、该有的专卖店和商城都有、有地铁，去哪里都不算太远。</p><p>周四下午 5 点培训完，吃了个饭就直奔机场连夜回到家，第二天回来继续上班了。这短短的两天，往返两座城市之间工作和培训，飞机上只需要40分钟，就像没有离开过一样，让人感叹交通的便利。</p><p>祝愿每个人都收获自己享受的生活。</p><p align="right">2019 年 12 月 1 日 23 : 55 : 00</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 版本概述</title>
      <link href="/2019/12/Overview-of-Docker-editions/"/>
      <url>/2019/12/Overview-of-Docker-editions/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-可分为三个版本"><a href="#Docker-可分为三个版本" class="headerlink" title="Docker 可分为三个版本"></a>Docker 可分为三个版本</h2><ul><li>Docker Engine - Community</li><li>Docker Engine - Enterprise</li><li>Docker Enterprise</li></ul><p>Docker Engine - Community 是希望开始使用 Docker 并尝试基于容器的应用程序的个人开发人员和小型团队的理想选择。</p><p>Docker Engine - Enterprise 专为企业开发容器运行时而设计，同时考虑了安全性和企业级SLA。</p><p>Docker Enterprise 专为企业开发和IT团队而设计，他们可以大规模构建，交付和运行关键业务应用程序。</p><table><thead><tr><th>能力</th><th>Docker Engine - Community</th><th>Docker Engine - Enterprise</th><th>Docker Enterprise</th></tr></thead><tbody><tr><td>容器引擎和内建的编配，网络，安全</td><td>√</td><td>√</td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/supported-platforms/#docker-enterprise">认证的基础设施，插件和ISV容器</a></td><td></td><td>√</td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/dtr/">镜像管理</a></td><td></td><td></td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/ucp/">容器应用程序管理</a></td><td></td><td></td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/dtr/user/manage-images/scan-images-for-vulnerabilities/">镜像安全扫描</a></td><td></td><td></td><td>√</td></tr></tbody></table><h2 id="安装-Docker-社区版本"><a href="#安装-Docker-社区版本" class="headerlink" title="安装 Docker 社区版本"></a>安装 Docker 社区版本</h2><ul><li>以 CentOS 安装为例： <a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></li></ul><h2 id="其他-Docker-版本安装"><a href="#其他-Docker-版本安装" class="headerlink" title="其他 Docker 版本安装"></a>其他 Docker 版本安装</h2><ul><li>参考 Docker 官网：<a href="https://docs.docker.com/install/overview/">https://docs.docker.com/install/overview/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 版本概述</title>
      <link href="/2019/12/overview-of-docker-editions/"/>
      <url>/2019/12/overview-of-docker-editions/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-可分为三个版本"><a href="#Docker-可分为三个版本" class="headerlink" title="Docker 可分为三个版本"></a>Docker 可分为三个版本</h2><ul><li>Docker Engine - Community</li><li>Docker Engine - Enterprise</li><li>Docker Enterprise</li></ul><p>Docker Engine - Community 是希望开始使用 Docker 并尝试基于容器的应用程序的个人开发人员和小型团队的理想选择。</p><p>Docker Engine - Enterprise 专为企业开发容器运行时而设计，同时考虑了安全性和企业级SLA。</p><p>Docker Enterprise 专为企业开发和IT团队而设计，他们可以大规模构建，交付和运行关键业务应用程序。</p><table><thead><tr><th>能力</th><th>Docker Engine - Community</th><th>Docker Engine - Enterprise</th><th>Docker Enterprise</th></tr></thead><tbody><tr><td>容器引擎和内建的编配，网络，安全</td><td>√</td><td>√</td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/supported-platforms/#docker-enterprise">认证的基础设施，插件和ISV容器</a></td><td></td><td>√</td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/dtr/">镜像管理</a></td><td></td><td></td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/ucp/">容器应用程序管理</a></td><td></td><td></td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/dtr/user/manage-images/scan-images-for-vulnerabilities/">镜像安全扫描</a></td><td></td><td></td><td>√</td></tr></tbody></table><h2 id="安装-Docker-社区版本"><a href="#安装-Docker-社区版本" class="headerlink" title="安装 Docker 社区版本"></a>安装 Docker 社区版本</h2><ul><li>以 CentOS 安装为例： <a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></li></ul><h2 id="其他-Docker-版本安装"><a href="#其他-Docker-版本安装" class="headerlink" title="其他 Docker 版本安装"></a>其他 Docker 版本安装</h2><ul><li>参考 Docker 官网：<a href="https://docs.docker.com/install/overview/">https://docs.docker.com/install/overview/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制一个 Docker 版 Jenkins 镜像</title>
      <link href="/2019/12/Install-Docker-Jenkins/"/>
      <url>/2019/12/Install-Docker-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>对于如何备份 Jenkins 除了用 Jenkins 插件来定期备份之外，如果把 Jenkins 安装到 Docker 里，定期备份一个 Docker Image 最后传到 Artifactory 中，也是一个不错的方案。</p><span id="more"></span><h2 id="安装-Docker-版-Jenkins"><a href="#安装-Docker-版-Jenkins" class="headerlink" title="安装 Docker 版 Jenkins"></a>安装 Docker 版 Jenkins</h2><p>在 CentOS 上安装 Docker 版 Jenkins，这里推荐用 Long-term Support (LTS) 版本，可以从 Jenkins 官网<a href="https://jenkins.io/download/">下载</a>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载指定 lts 版本 2.130</span></span><br><span class="line">sudo docker pull jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 运行指定 docker Jenkins</span></span><br><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 如果想下载最新的 lts 版</span></span><br><span class="line">sudo docker pull jenkins/jenkins:lts</span><br><span class="line"><span class="comment"># 运行最新的 lts 版 docker Jenkins</span></span><br><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p>启动成功后即可打开 <a href="http://hostname:8080/">http://hostname:8080/</a> 网址</p><h2 id="修改登录密码"><a href="#修改登录密码" class="headerlink" title="修改登录密码"></a>修改登录密码</h2><p>显示所有的 image 以及正在运行的 container</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出来所有 image</span></span><br><span class="line">sudo docker image list</span><br><span class="line"><span class="comment"># 列出当前运行的 container</span></span><br><span class="line">sudo docker ps</span><br><span class="line"><span class="comment"># 进入容器，使用 -it 参数</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it 39bc7a8307d9 /bin/bash</span><br><span class="line"><span class="comment"># 查看默认 admin 密码</span></span><br><span class="line">jenkins@a6195912b579:/$ <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">5193d06c813d46d3b18babeda836363a</span><br></pre></td></tr></table></figure><p>建议登录之后，修改 admin 密码，方便下次登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker commit 39bc7a8307d9 myjenkins:v0.1</span><br></pre></td></tr></table></figure><h2 id="将宿主机目录映射到-Jenkins-Docker-中"><a href="#将宿主机目录映射到-Jenkins-Docker-中" class="headerlink" title="将宿主机目录映射到 Jenkins Docker 中"></a>将宿主机目录映射到 Jenkins Docker 中</h2><p>如果想让 Docker 里的 Jenkins 可以访问宿主机的目录，在运行 docker 时使用 -v 参数进行 mount volume</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 --name mydata -v /data/backup:/home/backup jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 映射成功，可以看到宿主机上的备份文件了</span></span><br><span class="line">jenkins@c85db3f88115:/home/backup$ <span class="built_in">ls</span></span><br><span class="line">FULL-2019-09-14_02-00  FULL-2019-09-28_02-00  FULL-2019-10-19_02-00  FULL-2019-11-02_02-00  FULL-2019-11-23_02-00</span><br><span class="line">FULL-2019-09-21_02-00  FULL-2019-10-05_02-00  FULL-2019-10-26_02-00  FULL-2019-11-09_02-00  FULL-2019-11-30_02-00</span><br></pre></td></tr></table></figure><h2 id="将-Jenkins-Docker-Image-保存在-Artifactory"><a href="#将-Jenkins-Docker-Image-保存在-Artifactory" class="headerlink" title="将 Jenkins Docker Image 保存在 Artifactory"></a>将 Jenkins Docker Image 保存在 Artifactory</h2><p>下载并安装 Artifactory 企业版或是 JFrog Container Registry，注意 Artifactory Open Source 版本不支持 Docker Registry。</p><p>例如我的 JFrog Container Registry 是：dln.dev.mycompany.com:8040，并创建了一个 docker repository 叫 docker-local。</p><p>上传 Docker Image 一共分为三步：</p><p>docker login</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  在登录前需要添加如下配置到 /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span> : [<span class="string">&quot;dln.dev.mycompany.com:8040&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># docker login &lt;DOCKER_SERVER&gt;, example below:</span></span><br><span class="line">sudo docker login dln.dev.mycompany.com:8040</span><br></pre></td></tr></table></figure><p>docker tag</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker tag &lt;IMAGE_ID&gt; artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class="line">sudo docker tag myjenkins:v0.1 dln.dev.mycompany.com:8040/docker-local/myjenkins:v0.1</span><br></pre></td></tr></table></figure><p>docker push</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker push artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class="line">$ sudo docker push dln.dev.mycompany.com:8040/docker-local/myjenkins::v0.1</span><br><span class="line">The push refers to repository [dln.dev.mycompany.com:8040/docker-local/myjenkins]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure><p>登录 JFrog Container Registry 刷新就可以到已经上次的 Image 了。说明：截图是我上传的另外一个镜像 ubuntu:15.10</p><p><img src="/2019/12/Install-Docker-Jenkins/example-image.png" alt="举例"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制一个 Docker 版 Jenkins 镜像</title>
      <link href="/2019/12/install-docker-jenkins/"/>
      <url>/2019/12/install-docker-jenkins/</url>
      
        <content type="html"><![CDATA[<p>对于如何备份 Jenkins 除了用 Jenkins 插件来定期备份之外，如果把 Jenkins 安装到 Docker 里，定期备份一个 Docker Image 最后传到 Artifactory 中，也是一个不错的方案。</p><span id="more"></span><h2 id="安装-Docker-版-Jenkins"><a href="#安装-Docker-版-Jenkins" class="headerlink" title="安装 Docker 版 Jenkins"></a>安装 Docker 版 Jenkins</h2><p>在 CentOS 上安装 Docker 版 Jenkins，这里推荐用 Long-term Support (LTS) 版本，可以从 Jenkins 官网<a href="https://jenkins.io/download/">下载</a>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载指定 lts 版本 2.130</span></span><br><span class="line">sudo docker pull jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 运行指定 docker Jenkins</span></span><br><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 如果想下载最新的 lts 版</span></span><br><span class="line">sudo docker pull jenkins/jenkins:lts</span><br><span class="line"><span class="comment"># 运行最新的 lts 版 docker Jenkins</span></span><br><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p>启动成功后即可打开 <a href="http://hostname:8080/">http://hostname:8080/</a> 网址</p><h2 id="修改登录密码"><a href="#修改登录密码" class="headerlink" title="修改登录密码"></a>修改登录密码</h2><p>显示所有的 image 以及正在运行的 container</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出来所有 image</span></span><br><span class="line">sudo docker image list</span><br><span class="line"><span class="comment"># 列出当前运行的 container</span></span><br><span class="line">sudo docker ps</span><br><span class="line"><span class="comment"># 进入容器，使用 -it 参数</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it 39bc7a8307d9 /bin/bash</span><br><span class="line"><span class="comment"># 查看默认 admin 密码</span></span><br><span class="line">jenkins@a6195912b579:/$ <span class="built_in">cat</span> /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">5193d06c813d46d3b18babeda836363a</span><br></pre></td></tr></table></figure><p>建议登录之后，修改 admin 密码，方便下次登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker commit 39bc7a8307d9 myjenkins:v0.1</span><br></pre></td></tr></table></figure><h2 id="将宿主机目录映射到-Jenkins-Docker-中"><a href="#将宿主机目录映射到-Jenkins-Docker-中" class="headerlink" title="将宿主机目录映射到 Jenkins Docker 中"></a>将宿主机目录映射到 Jenkins Docker 中</h2><p>如果想让 Docker 里的 Jenkins 可以访问宿主机的目录，在运行 docker 时使用 -v 参数进行 mount volume</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 --name mydata -v /data/backup:/home/backup jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 映射成功，可以看到宿主机上的备份文件了</span></span><br><span class="line">jenkins@c85db3f88115:/home/backup$ <span class="built_in">ls</span></span><br><span class="line">FULL-2019-09-14_02-00  FULL-2019-09-28_02-00  FULL-2019-10-19_02-00  FULL-2019-11-02_02-00  FULL-2019-11-23_02-00</span><br><span class="line">FULL-2019-09-21_02-00  FULL-2019-10-05_02-00  FULL-2019-10-26_02-00  FULL-2019-11-09_02-00  FULL-2019-11-30_02-00</span><br></pre></td></tr></table></figure><h2 id="将-Jenkins-Docker-Image-保存在-Artifactory"><a href="#将-Jenkins-Docker-Image-保存在-Artifactory" class="headerlink" title="将 Jenkins Docker Image 保存在 Artifactory"></a>将 Jenkins Docker Image 保存在 Artifactory</h2><p>下载并安装 Artifactory 企业版或是 JFrog Container Registry，注意 Artifactory Open Source 版本不支持 Docker Registry。</p><p>例如我的 JFrog Container Registry 是：dln.dev.mycompany.com:8040，并创建了一个 docker repository 叫 docker-local。</p><p>上传 Docker Image 一共分为三步：</p><p>docker login</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  在登录前需要添加如下配置到 /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span> : [<span class="string">&quot;dln.dev.mycompany.com:8040&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># docker login &lt;DOCKER_SERVER&gt;, example below:</span></span><br><span class="line">sudo docker login dln.dev.mycompany.com:8040</span><br></pre></td></tr></table></figure><p>docker tag</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker tag &lt;IMAGE_ID&gt; artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class="line">sudo docker tag myjenkins:v0.1 dln.dev.mycompany.com:8040/docker-local/myjenkins:v0.1</span><br></pre></td></tr></table></figure><p>docker push</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker push artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class="line">$ sudo docker push dln.dev.mycompany.com:8040/docker-local/myjenkins::v0.1</span><br><span class="line">The push refers to repository [dln.dev.mycompany.com:8040/docker-local/myjenkins]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure><p>登录 JFrog Container Registry 刷新就可以到已经上次的 Image 了。说明：截图是我上传的另外一个镜像 ubuntu:15.10</p><p><img src="/2019/12/install-docker-jenkins/example-image.png" alt="举例"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artifactory 与 Jenkins 集成</title>
      <link href="/2019/11/Artifactory-integrate-with-Jenkins/"/>
      <url>/2019/11/Artifactory-integrate-with-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>上一篇 <a href="https://shenxianpeng.github.io/2019/11/artifactory-install-and-upgrade/">初识 JFrog Artifactory</a>，介绍了什么是 Artifactory，以及如何安装、启动和升级。</p><p>本篇介绍 Artifactory 与 Jenkins 的集成，因为没有与 CI 工具集成的 Artifactory 是没有灵魂的。</p><p>通过集成，可以让 Jenkins 在完成构建之后，可以直接将制品（比如 build）推送到 Artifactory，供测试下载、部署或是后续的 Jenkins 任务去继续进行持续集成。</p><span id="more"></span><h2 id="Jenkins-里配置-Artifactory"><a href="#Jenkins-里配置-Artifactory" class="headerlink" title="Jenkins 里配置 Artifactory"></a>Jenkins 里配置 Artifactory</h2><p>打开 Manage Jenkins-&gt;Configure System，找到 Artifactory，点击 Add Artifactory Server， 输入 Server ID 和 URL</p><ol><li>Server ID 是给你的 Artifactory 起个别名，这样使用 Jenkins pipeline 的时候会用到</li><li>URL 是你的 Artifactory 服务器的地址，例如 <code>http://art.company.com:8040/artifactory</code></li><li>配置完成后，点击Test Connection，返回 <code>Found Artifactory 6.14.0</code> 表示配置成功。</li></ol><p>如图所示: <img src="/2019/11/Artifactory-integrate-with-Jenkins/jenkins-artifactory-integration.png" alt="配置和测试"></p><h2 id="使用-Pipeline-调用-Artifactory"><a href="#使用-Pipeline-调用-Artifactory" class="headerlink" title="使用 Pipeline 调用 Artifactory"></a>使用 Pipeline 调用 Artifactory</h2><p>这里演示了两种方式，我在项目中用的是 Jenkins Shared Library；当然你也可以仅仅使用 Jenkinsfile，把如下两个 groovy 文件组合成一个 Jenkinsfile。</p><h3 id="方式1：Jenkins-Shared-Library"><a href="#方式1：Jenkins-Shared-Library" class="headerlink" title="方式1：Jenkins Shared Library"></a>方式1：Jenkins Shared Library</h3><p><code>build.groovy</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def <span class="function"><span class="title">call</span></span>() &#123;</span><br><span class="line">  pipeline &#123;</span><br><span class="line">    <span class="comment"># 省略其他代码</span></span><br><span class="line">    post &#123;</span><br><span class="line">      <span class="comment"># 这里只有在 Jenkins Job 成功的时候才将 build post 到 artifactory</span></span><br><span class="line">      success &#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          <span class="keyword">if</span> (env.BRANCH_NAME == <span class="string">&#x27;develop&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment"># 如果当前是 develop 分支，则将 release 和 debug build 都 post 到 artifactory</span></span><br><span class="line">            artifactory(<span class="string">&quot;<span class="variable">$&#123;PATTERN_RELEASE_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;TARGET_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NAME&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NUMBER&#125;</span>&quot;</span>)</span><br><span class="line">            artifactory(<span class="string">&quot;<span class="variable">$&#123;PATTERN_DEBUG_PATH&#125;</span>&quot;</span>,   <span class="string">&quot;<span class="variable">$&#123;TARGET_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NAME&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NUMBER&#125;</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">&#x27;PR&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment"># 如果当前是 pull request 分支，则只将 release build 都 post 到 artifactory</span></span><br><span class="line">            artifactory(<span class="string">&quot;<span class="variable">$&#123;PATTERN_RELEASE_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;TARGET_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NAME&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NUMBER&#125;</span>&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>artifactory.groovy</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import groovy.transform.Field</span><br><span class="line"></span><br><span class="line">@Field artifactoryServerId   = <span class="string">&quot;art-1&quot;</span></span><br><span class="line">@Field artifactoryURL        = <span class="string">&quot;http://art.company.com:8040/artifactory&quot;</span></span><br><span class="line">@Field artifactoryCredential = <span class="string">&quot;d1cbab74-823d-41aa-abb7&quot;</span></span><br><span class="line"></span><br><span class="line">def call(String patternPath, String targetPath, String buildName, String buildNumber) &#123;</span><br><span class="line">  rtServer (</span><br><span class="line">    <span class="built_in">id</span>: <span class="string">&quot;<span class="variable">$&#123;artifactoryServerId&#125;</span>&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;<span class="variable">$&#123;artifactoryURL&#125;</span>&quot;</span>,</span><br><span class="line">    credentialsId: <span class="string">&quot;<span class="variable">$&#123;artifactoryCredential&#125;</span>&quot;</span></span><br><span class="line">  )</span><br><span class="line">  rtPublishBuildInfo (</span><br><span class="line">      serverId: <span class="string">&quot;<span class="variable">$&#123;artifactoryServerId&#125;</span>&quot;</span></span><br><span class="line">  )</span><br><span class="line">  rtUpload (</span><br><span class="line">    serverId: <span class="string">&quot;<span class="variable">$&#123;artifactoryServerId&#125;</span>&quot;</span>,</span><br><span class="line">    spec: <span class="string">&quot;&quot;</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">      &quot;</span>files<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        &quot;</span>pattern<span class="string">&quot;: &quot;</span><span class="variable">$&#123;patternPath&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">        &quot;</span>target<span class="string">&quot;: &quot;</span><span class="variable">$&#123;targetPath&#125;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">    buildNumber: <span class="string">&quot;<span class="variable">$&#123;buildNumber&#125;</span>&quot;</span>,</span><br><span class="line">    buildName: <span class="string">&quot;<span class="variable">$&#123;buildName&#125;</span>&quot;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式2：Jenkinsfile"><a href="#方式2：Jenkinsfile" class="headerlink" title="方式2：Jenkinsfile"></a>方式2：Jenkinsfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  <span class="comment"># 省略其他代码</span></span><br><span class="line">  stage(<span class="string">&#x27;config art&#x27;</span>)&#123;</span><br><span class="line">    rtServer (</span><br><span class="line">    <span class="built_in">id</span>: <span class="string">&quot;art-1&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;http://art.company.com:8040/artifactory&quot;</span>,</span><br><span class="line">    credentialsId: <span class="string">&quot;d1cbab74-823d-41aa-abb7&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  post &#123;</span><br><span class="line">    <span class="comment"># 这里只有在 Jenkins Job 成功的时候才将 build post 到 artifactory</span></span><br><span class="line">    success &#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.BRANCH_NAME == <span class="string">&#x27;develop&#x27;</span>) &#123;</span><br><span class="line">          rtUpload (</span><br><span class="line">            serverId: <span class="string">&quot;art-1&quot;</span>,</span><br><span class="line">            spec: <span class="string">&quot;&quot;</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">              &quot;</span>files<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                &quot;</span>pattern<span class="string">&quot;: &quot;</span>/release/build/*.zip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">                &quot;</span>target<span class="string">&quot;: &quot;</span>demo/develop/<span class="string">&quot;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">              ]</span></span><br><span class="line"><span class="string">            &#125;&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">            buildNumber: <span class="string">&quot;<span class="variable">$&#123;buildNumber&#125;</span>&quot;</span>,</span><br><span class="line">            buildName: <span class="string">&quot;<span class="variable">$&#123;buildName&#125;</span>&quot;</span>,</span><br><span class="line">          )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">&#x27;PR&#x27;</span>)) &#123;</span><br><span class="line">          rtUpload (</span><br><span class="line">            serverId: <span class="string">&quot;art-1&quot;</span>,</span><br><span class="line">            spec: <span class="string">&quot;&quot;</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">                &quot;</span>files<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">                  &#123;</span></span><br><span class="line"><span class="string">                  &quot;</span>pattern<span class="string">&quot;: &quot;</span>/release/build/*.zip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">                  &quot;</span>target<span class="string">&quot;: &quot;</span>demo/pull-request/<span class="string">&quot;</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">            &#125;&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">            buildNumber: <span class="string">&quot;<span class="variable">$&#123;buildNumber&#125;</span>&quot;</span>,</span><br><span class="line">            buildName: <span class="string">&quot;<span class="variable">$&#123;buildName&#125;</span>&quot;</span>,</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jenkins-与-Artifactory-集成成功"><a href="#Jenkins-与-Artifactory-集成成功" class="headerlink" title="Jenkins 与 Artifactory 集成成功"></a>Jenkins 与 Artifactory 集成成功</h2><p>蓝色表示构建成功，绿色圆圈表示 Build 已经 Post 到 Artifactory 上了。</p><p><img src="/2019/11/Artifactory-integrate-with-Jenkins/post-to-artifactory.png" alt="显示构建以及 Post 成功"></p><p>点击绿色圆圈可以跳转到 Artifactory 看到制品。</p><p><img src="/2019/11/Artifactory-integrate-with-Jenkins/artifactory-builds.png" alt="Artifactory"></p><p>Jenkins 与 Artifactory 打通了。完！</p>]]></content>
      
      
      <categories>
          
          <category> JFrog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Artifactory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artifactory 与 Jenkins 集成</title>
      <link href="/2019/11/artifactory-integrate-with-Jenkins/"/>
      <url>/2019/11/artifactory-integrate-with-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>上一篇 <a href="https://shenxianpeng.github.io/2019/11/artifactory-install-and-upgrade/">初识 JFrog Artifactory</a>，介绍了什么是 Artifactory，以及如何安装、启动和升级。</p><p>本篇介绍 Artifactory 与 Jenkins 的集成，因为没有与 CI 工具集成的 Artifactory 是没有灵魂的。</p><p>通过集成，可以让 Jenkins 在完成构建之后，可以直接将制品（比如 build）推送到 Artifactory，供测试下载、部署或是后续的 Jenkins 任务去继续进行持续集成。</p><span id="more"></span><h2 id="Jenkins-里配置-Artifactory"><a href="#Jenkins-里配置-Artifactory" class="headerlink" title="Jenkins 里配置 Artifactory"></a>Jenkins 里配置 Artifactory</h2><p>打开 Manage Jenkins-&gt;Configure System，找到 Artifactory，点击 Add Artifactory Server， 输入 Server ID 和 URL</p><ol><li>Server ID 是给你的 Artifactory 起个别名，这样使用 Jenkins pipeline 的时候会用到</li><li>URL 是你的 Artifactory 服务器的地址，例如 <code>http://art.company.com:8040/artifactory</code></li><li>配置完成后，点击Test Connection，返回 <code>Found Artifactory 6.14.0</code> 表示配置成功。</li></ol><p>如图所示: <img src="/2019/11/artifactory-integrate-with-Jenkins/jenkins-artifactory-integration.png" alt="配置和测试"></p><h2 id="使用-Pipeline-调用-Artifactory"><a href="#使用-Pipeline-调用-Artifactory" class="headerlink" title="使用 Pipeline 调用 Artifactory"></a>使用 Pipeline 调用 Artifactory</h2><p>这里演示了两种方式，我在项目中用的是 Jenkins Shared Library；当然你也可以仅仅使用 Jenkinsfile，把如下两个 groovy 文件组合成一个 Jenkinsfile。</p><h3 id="方式1：Jenkins-Shared-Library"><a href="#方式1：Jenkins-Shared-Library" class="headerlink" title="方式1：Jenkins Shared Library"></a>方式1：Jenkins Shared Library</h3><p><code>build.groovy</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def <span class="function"><span class="title">call</span></span>() &#123;</span><br><span class="line">  pipeline &#123;</span><br><span class="line">    <span class="comment"># 省略其他代码</span></span><br><span class="line">    post &#123;</span><br><span class="line">      <span class="comment"># 这里只有在 Jenkins Job 成功的时候才将 build post 到 artifactory</span></span><br><span class="line">      success &#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          <span class="keyword">if</span> (env.BRANCH_NAME == <span class="string">&#x27;develop&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment"># 如果当前是 develop 分支，则将 release 和 debug build 都 post 到 artifactory</span></span><br><span class="line">            artifactory(<span class="string">&quot;<span class="variable">$&#123;PATTERN_RELEASE_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;TARGET_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NAME&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NUMBER&#125;</span>&quot;</span>)</span><br><span class="line">            artifactory(<span class="string">&quot;<span class="variable">$&#123;PATTERN_DEBUG_PATH&#125;</span>&quot;</span>,   <span class="string">&quot;<span class="variable">$&#123;TARGET_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NAME&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NUMBER&#125;</span>&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">&#x27;PR&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment"># 如果当前是 pull request 分支，则只将 release build 都 post 到 artifactory</span></span><br><span class="line">            artifactory(<span class="string">&quot;<span class="variable">$&#123;PATTERN_RELEASE_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;TARGET_PATH&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NAME&#125;</span>&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;BUILD_NUMBER&#125;</span>&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>artifactory.groovy</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import groovy.transform.Field</span><br><span class="line"></span><br><span class="line">@Field artifactoryServerId   = <span class="string">&quot;art-1&quot;</span></span><br><span class="line">@Field artifactoryURL        = <span class="string">&quot;http://art.company.com:8040/artifactory&quot;</span></span><br><span class="line">@Field artifactoryCredential = <span class="string">&quot;d1cbab74-823d-41aa-abb7&quot;</span></span><br><span class="line"></span><br><span class="line">def call(String patternPath, String targetPath, String buildName, String buildNumber) &#123;</span><br><span class="line">  rtServer (</span><br><span class="line">    <span class="built_in">id</span>: <span class="string">&quot;<span class="variable">$&#123;artifactoryServerId&#125;</span>&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;<span class="variable">$&#123;artifactoryURL&#125;</span>&quot;</span>,</span><br><span class="line">    credentialsId: <span class="string">&quot;<span class="variable">$&#123;artifactoryCredential&#125;</span>&quot;</span></span><br><span class="line">  )</span><br><span class="line">  rtPublishBuildInfo (</span><br><span class="line">      serverId: <span class="string">&quot;<span class="variable">$&#123;artifactoryServerId&#125;</span>&quot;</span></span><br><span class="line">  )</span><br><span class="line">  rtUpload (</span><br><span class="line">    serverId: <span class="string">&quot;<span class="variable">$&#123;artifactoryServerId&#125;</span>&quot;</span>,</span><br><span class="line">    spec: <span class="string">&quot;&quot;</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">      &quot;</span>files<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        &quot;</span>pattern<span class="string">&quot;: &quot;</span><span class="variable">$&#123;patternPath&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">        &quot;</span>target<span class="string">&quot;: &quot;</span><span class="variable">$&#123;targetPath&#125;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">    buildNumber: <span class="string">&quot;<span class="variable">$&#123;buildNumber&#125;</span>&quot;</span>,</span><br><span class="line">    buildName: <span class="string">&quot;<span class="variable">$&#123;buildName&#125;</span>&quot;</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式2：Jenkinsfile"><a href="#方式2：Jenkinsfile" class="headerlink" title="方式2：Jenkinsfile"></a>方式2：Jenkinsfile</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  <span class="comment"># 省略其他代码</span></span><br><span class="line">  stage(<span class="string">&#x27;config art&#x27;</span>)&#123;</span><br><span class="line">    rtServer (</span><br><span class="line">    <span class="built_in">id</span>: <span class="string">&quot;art-1&quot;</span>,</span><br><span class="line">    url: <span class="string">&quot;http://art.company.com:8040/artifactory&quot;</span>,</span><br><span class="line">    credentialsId: <span class="string">&quot;d1cbab74-823d-41aa-abb7&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  post &#123;</span><br><span class="line">    <span class="comment"># 这里只有在 Jenkins Job 成功的时候才将 build post 到 artifactory</span></span><br><span class="line">    success &#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.BRANCH_NAME == <span class="string">&#x27;develop&#x27;</span>) &#123;</span><br><span class="line">          rtUpload (</span><br><span class="line">            serverId: <span class="string">&quot;art-1&quot;</span>,</span><br><span class="line">            spec: <span class="string">&quot;&quot;</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">              &quot;</span>files<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                &quot;</span>pattern<span class="string">&quot;: &quot;</span>/release/build/*.zip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">                &quot;</span>target<span class="string">&quot;: &quot;</span>demo/develop/<span class="string">&quot;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">              ]</span></span><br><span class="line"><span class="string">            &#125;&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">            buildNumber: <span class="string">&quot;<span class="variable">$&#123;buildNumber&#125;</span>&quot;</span>,</span><br><span class="line">            buildName: <span class="string">&quot;<span class="variable">$&#123;buildName&#125;</span>&quot;</span>,</span><br><span class="line">          )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">&#x27;PR&#x27;</span>)) &#123;</span><br><span class="line">          rtUpload (</span><br><span class="line">            serverId: <span class="string">&quot;art-1&quot;</span>,</span><br><span class="line">            spec: <span class="string">&quot;&quot;</span><span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">                &quot;</span>files<span class="string">&quot;: [</span></span><br><span class="line"><span class="string">                  &#123;</span></span><br><span class="line"><span class="string">                  &quot;</span>pattern<span class="string">&quot;: &quot;</span>/release/build/*.zip<span class="string">&quot;,</span></span><br><span class="line"><span class="string">                  &quot;</span>target<span class="string">&quot;: &quot;</span>demo/pull-request/<span class="string">&quot;</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">            &#125;&quot;</span><span class="string">&quot;&quot;</span>,</span><br><span class="line">            buildNumber: <span class="string">&quot;<span class="variable">$&#123;buildNumber&#125;</span>&quot;</span>,</span><br><span class="line">            buildName: <span class="string">&quot;<span class="variable">$&#123;buildName&#125;</span>&quot;</span>,</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jenkins-与-Artifactory-集成成功"><a href="#Jenkins-与-Artifactory-集成成功" class="headerlink" title="Jenkins 与 Artifactory 集成成功"></a>Jenkins 与 Artifactory 集成成功</h2><p>蓝色表示构建成功，绿色圆圈表示 Build 已经 Post 到 Artifactory 上了。</p><p><img src="/2019/11/artifactory-integrate-with-Jenkins/post-to-artifactory.png" alt="显示构建以及 Post 成功"></p><p>点击绿色圆圈可以跳转到 Artifactory 看到制品。</p><p><img src="/2019/11/artifactory-integrate-with-Jenkins/artifactory-builds.png" alt="Artifactory"></p><p>Jenkins 与 Artifactory 打通了。完！</p>]]></content>
      
      
      <categories>
          
          <category> JFrog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Artifactory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 JFrog Artifactory</title>
      <link href="/2019/11/Artifactory-install-and-upgrade/"/>
      <url>/2019/11/Artifactory-install-and-upgrade/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Artifactory"><a href="#什么是-Artifactory" class="headerlink" title="什么是 Artifactory"></a>什么是 Artifactory</h2><p>Artifactory 是 JFrog 的一个产品，用作二进制存储库管理器。二进制存储库可以将所有这些二进制统一托管，从而使团队的管理更加高效和简单。</p><p>就跟你用 Git 一样，Git 是用来管理代码的，Artifactory 是用来管理二进制文件的，通常是指 jar, war, pypi, DLL, EXE 等 build 文件。</p><p>我觉得使用 Artifactory 的最大优势是创造了更好的持续集成环境，有助于其他持续集成任务去 Artifactory 里调用，再部署到不同的测试或开发环境，这对于实施 DevOps 至关重要。</p><span id="more"></span><p>如果想了解更多有关 Artifactory，请参看 <a href="https://www.jfrogchina.com/">中文官网</a> 以及 <a href="https://jfrog.com/artifactory/">English Website</a>。</p><h2 id="安装-Artifactory"><a href="#安装-Artifactory" class="headerlink" title="安装 Artifactory"></a>安装 Artifactory</h2><ol><li>从官网下载 Open Source <a href="https://jfrog.com/open-source/#artifactory">Artifactory</a>，这里演示的是安装到 Linux，所以点击 Download RPM 下载</li><li>将下载好的 jfrog-artifactory-oss-6.14.0.rpm 上传到 Linux 上</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在根目录创建一个文件，你也可以在任何目录创建文件夹</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /artifactory</span><br><span class="line"><span class="built_in">cd</span> /artifactory</span><br><span class="line"><span class="comment"># 将下载好的 jfrog-artifactory-oss-6.15.0.rpm 上传到你的 Linux 上</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">jfrog-artifactory-oss-6.14.0.rpm</span><br><span class="line"><span class="comment"># 安装 artifactory</span></span><br><span class="line">sudo rpm -ivh jfrog-artifactory-oss-6.14.0.rpm</span><br></pre></td></tr></table></figure><h2 id="Artifactory-服务启动和关闭"><a href="#Artifactory-服务启动和关闭" class="headerlink" title="Artifactory 服务启动和关闭"></a>Artifactory 服务启动和关闭</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start artifactory.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在使用上面的命令启动服务的时候遇到如下错误：</span></span><br><span class="line"><span class="comment"># Job for artifactory.service failed because a configured resource limit was exceeded. See &quot;systemctl status artifactory.service&quot; and &quot;journalctl -xe&quot; for details.</span></span><br><span class="line"><span class="comment"># 详情：https://www.jfrog.com/jira/browse/RTFACT-19988</span></span><br><span class="line"><span class="comment"># 可尝试如下命令启动</span></span><br><span class="line"><span class="built_in">cd</span> /opt/jfrog/artifactory/app/bin &amp;&amp; ./artifactory.sh start &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop artifactory.service</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status artifactory.service</span><br></pre></td></tr></table></figure><h2 id="访问-Artifactory"><a href="#访问-Artifactory" class="headerlink" title="访问 Artifactory"></a>访问 Artifactory</h2><p>Artifactory 默认端口是8040，安装成功后访问：<code>http://hostname:8040</code> 即可登录（默认用户名 admin 密码 password）<br><img src="/2019/11/Artifactory-install-and-upgrade/homepage.png" alt="Artifactory 首页"></p><h2 id="Artifactory-升级"><a href="#Artifactory-升级" class="headerlink" title="Artifactory 升级"></a>Artifactory 升级</h2><ol><li><p>从官网下载最新的 <a href="https://jfrog.com/open-source/#artifactory">Artifactory</a></p></li><li><p>将下载好的 jfrog-artifactory-oss-6.15.0.rpm（目前最新）上传到你的 Linux 上</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /artifactory</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">jfrog-artifactory-oss-6.14.0.rpm  jfrog-artifactory-oss-6.15.0.rpm</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop artifactory.service</span><br><span class="line"><span class="comment"># 进行升级</span></span><br><span class="line">sudo rpm -U jfrog-artifactory-oss-6.15.0.rpm</span><br><span class="line"><span class="comment"># 输出日志，显示升级成功</span></span><br><span class="line">warning: jfrog-artifactory-oss-6.15.0.rpm: Header V4 DSA/SHA1 Signature, key ID d7639232: NOKEY</span><br><span class="line">Checking <span class="keyword">if</span> ARTIFACTORY_HOME exists</span><br><span class="line">Removing tomcat work directory</span><br><span class="line">Removing Artifactory<span class="string">&#x27;s exploded WAR directory</span></span><br><span class="line"><span class="string">Initializing artifactory service with systemctl...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">************ SUCCESS ****************</span></span><br><span class="line"><span class="string">The upgrade of Artifactory has completed successfully.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Start Artifactory with:</span></span><br><span class="line"><span class="string">&gt; systemctl start artifactory.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Check Artifactory status with:</span></span><br><span class="line"><span class="string">&gt; systemctl status artifactory.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NOTE: Updating the ownership of files and directories. This may take several minutes. Do not stop the installation/upgrade process.</span></span><br></pre></td></tr></table></figure><h2 id="Artifactory-卸载"><a href="#Artifactory-卸载" class="headerlink" title="Artifactory 卸载"></a>Artifactory 卸载</h2><ol><li>停止 Artifactory 服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop artifactory.service</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 root 用户执行 RPM uninstall 命令</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove OSS version</span></span><br><span class="line">yum erase jfrog-artifactory-oss</span><br><span class="line"><span class="comment"># remove PRO version, etc.</span></span><br><span class="line">yum erase jfrog-artifactory-pro</span><br></pre></td></tr></table></figure><p>更多关于 JFrog 产品的卸载，请看：<a href="https://www.jfrog.com/confluence/display/JFROG/Uninstalling+JFrog+Products">https://www.jfrog.com/confluence/display/JFROG/Uninstalling+JFrog+Products</a></p><h2 id="安装-JFrog-CLI"><a href="#安装-JFrog-CLI" class="headerlink" title="安装 JFrog CLI"></a>安装 JFrog CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ON MAC</span></span><br><span class="line">brew install jfrog-cli-go</span><br><span class="line"><span class="comment"># WITH CURL</span></span><br><span class="line">curl -fL https://getcli.jfrog.io | sh</span><br><span class="line"><span class="comment"># WITH NPM</span></span><br><span class="line">npm install -g jfrog-cli-go</span><br><span class="line"><span class="comment"># WITH DOCKER</span></span><br><span class="line">docker run docker.bintray.io/jfrog/jfrog-cli-go:latest jfrog -v</span><br></pre></td></tr></table></figure><p>CLI for JFrog Aritifactory</p><p><a href="https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory">如何在 Artifactory 上使用 JFrog CLI</a></p>]]></content>
      
      
      <categories>
          
          <category> JFrog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 JFrog Artifactory</title>
      <link href="/2019/11/artifactory-install-and-upgrade/"/>
      <url>/2019/11/artifactory-install-and-upgrade/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Artifactory"><a href="#什么是-Artifactory" class="headerlink" title="什么是 Artifactory"></a>什么是 Artifactory</h2><p>Artifactory 是 JFrog 的一个产品，用作二进制存储库管理器。二进制存储库可以将所有这些二进制统一托管，从而使团队的管理更加高效和简单。</p><p>就跟你用 Git 一样，Git 是用来管理代码的，Artifactory 是用来管理二进制文件的，通常是指 jar, war, pypi, DLL, EXE 等 build 文件。</p><p>我觉得使用 Artifactory 的最大优势是创造了更好的持续集成环境，有助于其他持续集成任务去 Artifactory 里调用，再部署到不同的测试或开发环境，这对于实施 DevOps 至关重要。</p><span id="more"></span><p>如果想了解更多有关 Artifactory，请参看 <a href="https://www.jfrogchina.com/">中文官网</a> 以及 <a href="https://jfrog.com/artifactory/">English Website</a>。</p><h2 id="安装-Artifactory"><a href="#安装-Artifactory" class="headerlink" title="安装 Artifactory"></a>安装 Artifactory</h2><ol><li>从官网下载 Open Source <a href="https://jfrog.com/open-source/#artifactory">Artifactory</a>，这里演示的是安装到 Linux，所以点击 Download RPM 下载</li><li>将下载好的 jfrog-artifactory-oss-6.14.0.rpm 上传到 Linux 上</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在根目录创建一个文件，你也可以在任何目录创建文件夹</span></span><br><span class="line">sudo <span class="built_in">mkdir</span> /artifactory</span><br><span class="line"><span class="built_in">cd</span> /artifactory</span><br><span class="line"><span class="comment"># 将下载好的 jfrog-artifactory-oss-6.15.0.rpm 上传到你的 Linux 上</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">jfrog-artifactory-oss-6.14.0.rpm</span><br><span class="line"><span class="comment"># 安装 artifactory</span></span><br><span class="line">sudo rpm -ivh jfrog-artifactory-oss-6.14.0.rpm</span><br></pre></td></tr></table></figure><h2 id="Artifactory-服务启动和关闭"><a href="#Artifactory-服务启动和关闭" class="headerlink" title="Artifactory 服务启动和关闭"></a>Artifactory 服务启动和关闭</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start artifactory.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在使用上面的命令启动服务的时候遇到如下错误：</span></span><br><span class="line"><span class="comment"># Job for artifactory.service failed because a configured resource limit was exceeded. See &quot;systemctl status artifactory.service&quot; and &quot;journalctl -xe&quot; for details.</span></span><br><span class="line"><span class="comment"># 详情：https://www.jfrog.com/jira/browse/RTFACT-19988</span></span><br><span class="line"><span class="comment"># 可尝试如下命令启动</span></span><br><span class="line"><span class="built_in">cd</span> /opt/jfrog/artifactory/app/bin &amp;&amp; ./artifactory.sh start &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop artifactory.service</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status artifactory.service</span><br></pre></td></tr></table></figure><h2 id="访问-Artifactory"><a href="#访问-Artifactory" class="headerlink" title="访问 Artifactory"></a>访问 Artifactory</h2><p>Artifactory 默认端口是8040，安装成功后访问：<code>http://hostname:8040</code> 即可登录（默认用户名 admin 密码 password）<br><img src="/2019/11/artifactory-install-and-upgrade/homepage.png" alt="Artifactory 首页"></p><h2 id="Artifactory-升级"><a href="#Artifactory-升级" class="headerlink" title="Artifactory 升级"></a>Artifactory 升级</h2><ol><li><p>从官网下载最新的 <a href="https://jfrog.com/open-source/#artifactory">Artifactory</a></p></li><li><p>将下载好的 jfrog-artifactory-oss-6.15.0.rpm（目前最新）上传到你的 Linux 上</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /artifactory</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">jfrog-artifactory-oss-6.14.0.rpm  jfrog-artifactory-oss-6.15.0.rpm</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop artifactory.service</span><br><span class="line"><span class="comment"># 进行升级</span></span><br><span class="line">sudo rpm -U jfrog-artifactory-oss-6.15.0.rpm</span><br><span class="line"><span class="comment"># 输出日志，显示升级成功</span></span><br><span class="line">warning: jfrog-artifactory-oss-6.15.0.rpm: Header V4 DSA/SHA1 Signature, key ID d7639232: NOKEY</span><br><span class="line">Checking <span class="keyword">if</span> ARTIFACTORY_HOME exists</span><br><span class="line">Removing tomcat work directory</span><br><span class="line">Removing Artifactory<span class="string">&#x27;s exploded WAR directory</span></span><br><span class="line"><span class="string">Initializing artifactory service with systemctl...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">************ SUCCESS ****************</span></span><br><span class="line"><span class="string">The upgrade of Artifactory has completed successfully.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Start Artifactory with:</span></span><br><span class="line"><span class="string">&gt; systemctl start artifactory.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Check Artifactory status with:</span></span><br><span class="line"><span class="string">&gt; systemctl status artifactory.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NOTE: Updating the ownership of files and directories. This may take several minutes. Do not stop the installation/upgrade process.</span></span><br></pre></td></tr></table></figure><h2 id="Artifactory-卸载"><a href="#Artifactory-卸载" class="headerlink" title="Artifactory 卸载"></a>Artifactory 卸载</h2><ol><li>停止 Artifactory 服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop artifactory.service</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 root 用户执行 RPM uninstall 命令</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove OSS version</span></span><br><span class="line">yum erase jfrog-artifactory-oss</span><br><span class="line"><span class="comment"># remove PRO version, etc.</span></span><br><span class="line">yum erase jfrog-artifactory-pro</span><br></pre></td></tr></table></figure><p>更多关于 JFrog 产品的卸载，请看：<a href="https://www.jfrog.com/confluence/display/JFROG/Uninstalling+JFrog+Products">https://www.jfrog.com/confluence/display/JFROG/Uninstalling+JFrog+Products</a></p><h2 id="安装-JFrog-CLI"><a href="#安装-JFrog-CLI" class="headerlink" title="安装 JFrog CLI"></a>安装 JFrog CLI</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ON MAC</span></span><br><span class="line">brew install jfrog-cli-go</span><br><span class="line"><span class="comment"># WITH CURL</span></span><br><span class="line">curl -fL https://getcli.jfrog.io | sh</span><br><span class="line"><span class="comment"># WITH NPM</span></span><br><span class="line">npm install -g jfrog-cli-go</span><br><span class="line"><span class="comment"># WITH DOCKER</span></span><br><span class="line">docker run docker.bintray.io/jfrog/jfrog-cli-go:latest jfrog -v</span><br></pre></td></tr></table></figure><p>CLI for JFrog Aritifactory</p><p><a href="https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory">如何在 Artifactory 上使用 JFrog CLI</a></p>]]></content>
      
      
      <categories>
          
          <category> JFrog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Console Output 显示彩色</title>
      <link href="/2019/09/output-display-color/"/>
      <url>/2019/09/output-display-color/</url>
      
        <content type="html"><![CDATA[<p>如果想让 Jenkins Console Output 出来一些重要日志醒目的显示，可以让一些日志显示颜色方便查看</p><ol><li>首先需要安装插件： <a href="https://wiki.jenkins.io/display/JENKINS/AnsiColor+Plugin">https://wiki.jenkins.io/display/JENKINS/AnsiColor+Plugin</a></li><li>安装成功后进入系统设置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins privilege management</title>
      <link href="/2019/11/Jenkins-privilege-management/"/>
      <url>/2019/11/Jenkins-privilege-management/</url>
      
        <content type="html"><![CDATA[<p>如何针对 Jenkins 里的不同 Job 进行不同的策略管理。比如某个 Job 所有人都可以查看，但仅限于某些人可以执行，这时候就需要对 Job 行程权限设置。</p><p>这里用的插件是 Role-based Authorization Strategy。安装成功后，打开要设置的 Job, 设置如下：</p><p><img src="/2019/11/Jenkins-privilege-management/jenkins-privilege-management.png" alt="Enable project-based security"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins privilege management</title>
      <link href="/2019/11/jenkins-privilege-management/"/>
      <url>/2019/11/jenkins-privilege-management/</url>
      
        <content type="html"><![CDATA[<p>如何针对 Jenkins 里的不同 Job 进行不同的策略管理。比如某个 Job 所有人都可以查看，但仅限于某些人可以执行，这时候就需要对 Job 行程权限设置。</p><p>这里用的插件是 Role-based Authorization Strategy。安装成功后，打开要设置的 Job, 设置如下：</p><p><img src="/2019/11/jenkins-privilege-management/jenkins-privilege-management.png" alt="Enable project-based security"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何设置 NFS 共享以及在不同的平台 Windows/Linux/Unix 进行挂载</title>
      <link href="/2019/09/nfs/"/>
      <url>/2019/09/nfs/</url>
      
        <content type="html"><![CDATA[<p>例如我有一个共享仓库的代码所在用的空间非常大（超过 20 G），在每个产品构建时候都需要用到这个仓库的代码（从里面 copy 第三方库），如果每个人都要 git clone 这个第三方仓库，一是网络开销非常大，二是 git clone 时间长，而且占用大量的物理空间。</p><p>这可以通过 NFS 共享来解决。</p><p>另外希望这个代码仓库能自动更新，这里引入了 Jenkins。用它来检查如果这个容量巨大的仓库有代码提交就自动执行 git pull 操作，更新最新的代码到共享服务器上。</p><span id="more"></span><p>什么是 NFS？NFS（Network File System）即网络文件系统，是 FreeBSD 支持的文件系统中的一种，它允许网络中的计算机之间共享资源。在 NFS 的应用中，本地 NFS 的客户端应用可以透明地读写位于远端 NFS 服务器上的文件，就像访问本地文件一样，Windows 上俗称共享。</p><h2 id="设置-NFS"><a href="#设置-NFS" class="headerlink" title="设置 NFS"></a>设置 NFS</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如在 Linux 上, 共享服务器的 ip 是 192.168.1.1</span></span><br><span class="line">sudo vi /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是我的 exports 文件的配置</span></span><br><span class="line"><span class="comment"># 假设内网 ip 是这样的区间 192.168.1.1 ~ 192.168.1.250</span></span><br><span class="line"><span class="comment"># ro 表示只读</span></span><br><span class="line"><span class="comment"># all_squash 表示不管使用 NFS 的用户是谁，他的身份都会被限定成为一个指定的普通用户身份(nfsnobody)</span></span><br><span class="line">/agent/workspace/opensrc 192.168.1.*(ro,all_squash)</span><br><span class="line">/agent/workspace/opensrc dev-team-a*.com(ro,all_squash)</span><br><span class="line">/agent/workspace/opensrc dev-team-b*.com(ro,all_squash)</span><br><span class="line">/agent/workspace/opensrc dev-ci*(ro,all_squash)</span><br></pre></td></tr></table></figure><h2 id="NFS-操作"><a href="#NFS-操作" class="headerlink" title="NFS 操作"></a>NFS 操作</h2><h3 id="启动-NFS-服务"><a href="#启动-NFS-服务" class="headerlink" title="启动 NFS 服务"></a>启动 NFS 服务</h3><p>启动 NFS 服务，需要启动 portmap 和 nfs 两个服务，并且 portmap 一定要先于 nfs 启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service portmap start</span><br><span class="line">service nfs start</span><br><span class="line"><span class="comment"># 查看 portmap 状态</span></span><br><span class="line">service portmap status</span><br></pre></td></tr></table></figure><h3 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nfs status</span><br></pre></td></tr></table></figure><h3 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nfs stop</span><br></pre></td></tr></table></figure><h3 id="导出配置"><a href="#导出配置" class="headerlink" title="导出配置"></a>导出配置</h3><p>当改变&#x2F;etc&#x2F;exports配置文件后，不用重启 NFS 服务直接用这个 exportfs 即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo exportfs -rv</span><br></pre></td></tr></table></figure><h2 id="挂载到不同平台"><a href="#挂载到不同平台" class="headerlink" title="挂载到不同平台"></a>挂载到不同平台</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install the NFS Client(Services for NFS)</span></span><br><span class="line"><span class="comment"># Step 1: Open Programs and Features</span></span><br><span class="line"><span class="comment"># Step 2: Click Turn Windows features on or off</span></span><br><span class="line"><span class="comment"># Step 3: Find and check option Services for NFS</span></span><br><span class="line"><span class="comment"># Step 4: Once installed, click Close and exit back to the desktop. refer to https://graspingtech.com/mount-nfs-share-windows-10/</span></span><br><span class="line">$ mount -o anon 192.168.1.1:/agent/workspace/opensrc Z:</span><br></pre></td></tr></table></figure><h3 id="Linux-x2F-Unix"><a href="#Linux-x2F-Unix" class="headerlink" title="Linux&#x2F;Unix"></a>Linux&#x2F;Unix</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">sudo mount -t nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># AIX</span></span><br><span class="line">sudo nfso -o nfs_use_reserved_ports=1     <span class="comment"># should only first time mount need to run this command</span></span><br><span class="line">sudo mount -F nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># HP-UX</span></span><br><span class="line">sudo mount -F nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solaris-SPARC</span></span><br><span class="line"><span class="comment"># 如果你不能直接在命令行执行 mount</span></span><br><span class="line">sudo /usr/sbin/mount -F nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Shell </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Could not read from remote repository 问题</title>
      <link href="/2019/09/could-not-read-from-remote-repository/"/>
      <url>/2019/09/could-not-read-from-remote-repository/</url>
      
        <content type="html"><![CDATA[<p>最近我在运行 Jenkins Job 时候突然发现 git clone 代码的时候突然报了这个错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@git.companyname.com:7999/repo/opensrc.git</span><br><span class="line">Cloning into <span class="string">&#x27;opensrc&#x27;</span>...</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>这个错误只在我刚开始使用 git 的时候遇到过，那时候我还不知道如何使用 ssh 的方式来 clone 代码。怎么会出现这个错误呢？我也没改过什么，非常不理解。</p><h2 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h2><span id="more"></span><p>Google 了没有找到我遇到的这个问题，绝大多数都是应为没有生成 ssh-key，生成后将 pub key 添加到 Github 或是其他 Web git 管理平台，基本就解决了。以 GitHub 为例</p><p>首先，生成 SSH key</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记得替换成你自己的邮箱账号</span></span><br><span class="line">ssh-keygen -t rsa -C xianpeng.shen@gmail.com</span><br></pre></td></tr></table></figure><p>其次，拷贝 SSH pub key 到你使用的 git web 平台，比如 Github 等等。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> %userprofile%/.ssh</span><br><span class="line"><span class="comment"># 打开 id_rsa.pub 并拷贝内容</span></span><br><span class="line">notepad id_rsa.pub</span><br></pre></td></tr></table></figure><p>最后，打开 <a href="https://github.com/settings/ssh/new">https://github.com/settings/ssh/new</a> 把你复制的内容贴进去保存即可。</p><p>对于我遇到的问题，这种解决方式是无效的，因为同样的账号在别的虚拟机上并不存在这个问题，因为同样是 HP-UX 虚拟机，我用另外一个账号生成 ssh-key, git clone 代码是没有问题的，那我猜测是这两个账号的之间存在差异。</p><h2 id="通过-SSH-连接测试排查"><a href="#通过-SSH-连接测试排查" class="headerlink" title="通过 SSH 连接测试排查"></a>通过 SSH 连接测试排查</h2><p>首先，我查看了这两个账号的 .gitconfig 文件，确实有差异。当我将好用的账号的 .gitconfig 内容复制到不好用的账号的 .gitconfig 文件时，并不好用。</p><p>其次，我发现执行 git clone 的时候在当前目录下生成了一个 core 文件，说明已经 coredump 了，但是这个 core 直接打开大部分都是乱码，错误信息很难准确定位。</p><p>最后，我通过命令来测试 SSH 连接的。对于 Github 是这个命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>我当前使用和出问题的是 Bitbucket，它的 SSH 连接测试命令是：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -vvv git\@bitbucket.org</span><br></pre></td></tr></table></figure><p>我先用好 git clone 好用的账号，测试结果如下，这里我省略一些其他返回信息。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -vvv git\@bitbucket.org</span><br><span class="line">OpenSSH_6.2p1+sftpfilecontrol-v1.3-hpn13v12, OpenSSL 0.9.8y 5 Feb 2013      <span class="comment"># OpenSSH 版本不同</span></span><br><span class="line">HP-UX Secure Shell-A.06.20.006, HP-UX Secure Shell version                  <span class="comment"># 原来是调用路径不同</span></span><br><span class="line">debug1: Reading configuration data /opt/ssh/etc/ssh_config</span><br><span class="line">debug3: RNG is ready, skipping seeding</span><br><span class="line">debug2: ssh_connect: needpriv 0</span><br><span class="line">debug1: Connecting to bitbucket.org [18.205.93.1] port 22.</span><br><span class="line">debug1: Connection established.</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">debug2: we did not send a packet, <span class="built_in">disable</span> method</span><br><span class="line">debug1: No more authentication methods to try.</span><br><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>我再用 git clone 不好用的账号进行测试，结果返回如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -vvv git\@bitbucket.org</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.0.2s  28 May 2019                                  <span class="comment"># OpenSSH 版本不同</span></span><br><span class="line">debug1: Reading configuration data /usr/local/etc/ssh_config                <span class="comment"># 原来是调用路径不同</span></span><br><span class="line">debug2: resolving <span class="string">&quot;bitbucket.org&quot;</span> port 22</span><br><span class="line">debug2: ssh_connect_direct</span><br><span class="line">debug1: Connecting to bitbucket.org [180.205.93.10] port 22.</span><br><span class="line">debug1: Connection established.</span><br><span class="line">Memory fault(coredump)</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>明显看到他们使用了不同版本的 OpenSSH，说明他们的环境变量有所不同。我之前查看过环境变量，但由于变量很多，不能一下判断那个变量可能会有影响。</p><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>回到 git clone 失败的那个账号下面的 .profile 文件查看，这里确实添加了一个 &#x2F;usr&#x2F;bin 的环境变量，导致这个账号在执行 git clone 时候用了另外版本的 OpenSSH，我用的是 HP-UX，它对于包之前的依赖以及版本要求都非常高，把这个环境变量去掉之后，保存，重新登录到虚拟机，执行 git clone 恢复正常。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit Squash</title>
      <link href="/2019/08/git-commit-squash/"/>
      <url>/2019/08/git-commit-squash/</url>
      
        <content type="html"><![CDATA[<h2 id="If-your-commits-on-local-not-pushed-to-remote"><a href="#If-your-commits-on-local-not-pushed-to-remote" class="headerlink" title="If your commits on local not pushed to remote"></a>If your commits on local not pushed to remote</h2><h3 id="combine-local-commits-you-could-follow-this-flow"><a href="#combine-local-commits-you-could-follow-this-flow" class="headerlink" title="combine local commits, you could follow this flow"></a>combine local commits, you could follow this flow</h3><p>Here is <a href="https://www.youtube.com/watch?v=V5KrD7CmO4o">short video</a> (only 3 minutes) and good explanation of <code>git rebase -i</code> usage.</p><p>list your local repository log</p><p><img src="/2019/08/git-commit-squash/example-01.png" alt="list your logs in oneline"></p><p>If you want to combine these 3 commits (add6152, 3650100, 396a652) to 1 commit, execute this command</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3      <span class="comment"># last three commits</span></span><br></pre></td></tr></table></figure><p><img src="/2019/08/git-commit-squash/example-02.png" alt="list last three commits"></p><p>Select which commit you want to squash (type s or squash are OK)</p><p><img src="/2019/08/git-commit-squash/example-03.png" alt="combine three commits to one"></p><p>then press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-04.png" alt="comment out some commits message you don&#39;t need"></p><p>Comment out some commits message you don’t need, press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-05.png" alt="comment out some commits message you don&#39;t need"></p><p>Check log, you will see your local repository logs has combine to one commit</p><p><img src="/2019/08/git-commit-squash/example-06.png" alt="comment out some commits message you don&#39;t need"></p><h2 id="If-your-commits-had-pushed-to-remote"><a href="#If-your-commits-had-pushed-to-remote" class="headerlink" title="If your commits had pushed to remote"></a>If your commits had pushed to remote</h2><h3 id="combine-remote-commits-you-could-follow-this-flow"><a href="#combine-remote-commits-you-could-follow-this-flow" class="headerlink" title="combine remote commits, you could follow this flow"></a>combine remote commits, you could follow this flow</h3><p>list your repository logs</p><p><img src="/2019/08/git-commit-squash/example-07.png" alt="list your logs in oneline"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># so you can create another branch from bugfix/UNV-1234 named bugfix/UNV-1234-for-squash</span></span><br><span class="line">xshen@dln-l-xs01 MINGW64 /c/U2GitCode/git-test (bugfix/UNV-1234)</span><br><span class="line">$ git checkout -b bugfix/UNV-1234-for-squash</span><br><span class="line">Switched to a new branch <span class="string">&#x27;bugfix/UNV-1234-for-squash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># combine last 2 commits</span></span><br><span class="line">$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>change one commit from pick to squash, see the screenshot below. press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-08.png" alt="select a commit you want to squash"></p><p>change commit message, for example “UNV-1234 combine all commit to one commit”, then press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-09.png" alt="comment out commit message you don&#39;t want to display"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># push your new create branch to remote.</span></span><br><span class="line">git push -u origin bugfix/UNV-1234-for-squash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Squash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins troubleshooting summary</title>
      <link href="/2019/08/jenkins-troubleshooting/"/>
      <url>/2019/08/jenkins-troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="ERROR-Error-cloning-remote-repo-‘origin’-timeout-x3D-10"><a href="#ERROR-Error-cloning-remote-repo-‘origin’-timeout-x3D-10" class="headerlink" title="ERROR: Error cloning remote repo ‘origin’ timeout&#x3D;10"></a>ERROR: Error cloning remote repo ‘origin’ timeout&#x3D;10</h2><p>Recently, my Jenkins build failed when execute <code>git clone</code> with following this error message: ERROR: Error cloning remote repo ‘origin’.</p><ol><li>first I suspect it is the network reason, maybe because clone from Bitbucket need took up a lot bandwidth during <code>git clone</code> and causing this disconnection. but when I try to git clone on the agent, it works well.</li><li>Then I noticed the there is <code>timeout=10</code> in the Jenkins console log, I suddenly remembered that I deleted a very large folder a few days ago from git repo, and this may cause the repo more bigger, so it may take more time do a complete clone and it exceeds the Jenkins default clone timeout <code>10</code>.</li></ol><p>Googling and finally I found this issue JENKINS-47660 which is the same problem as mine.</p><span id="more"></span><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Finally I found the the property of Advanced clone behaviors in Git clone in Jenkins, an checked Shallow clone then set Shallow clone depth equals to 1. (This setting is equivalent to –depth 1), and I changed timeout from 10 minutes to 15 minutes.</p><p><img src="/2019/08/jenkins-troubleshooting/advanced-clone-behaviour.png" alt="Advanced clone behaviours"></p><h2 id="Full-Log-below"><a href="#Full-Log-below" class="headerlink" title="Full Log below"></a>Full Log below</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using credential d1cbab74-823d-41aa-abb7</span><br><span class="line"> Wiping out workspace first.</span><br><span class="line"> Cloning the remote Git repository</span><br><span class="line"> Cloning with configured refspecs honoured and without tags</span><br><span class="line"> Cloning repository https://git.company.com/scm/db/blog.git</span><br><span class="line">  &gt; C:\Program Files\Git\bin\git.exe init C:\agent\workspace\develop # timeout=10</span><br><span class="line"> Fetching upstream changes from https://git.company.com/scm/db/blog.git</span><br><span class="line">  &gt; C:\Program Files\Git\bin\git.exe --version # timeout=10</span><br><span class="line"> using GIT_ASKPASS to set credentials blwmv</span><br><span class="line">  &gt; C:\Program Files\Git\bin\git.exe fetch --no-tags --progress https://git.company.com/scm/db/blog.git +refs/heads/develop:refs/remotes/origin/develop</span><br><span class="line"> ERROR: Error cloning remote repo &#x27;origin&#x27;</span><br><span class="line"> hudson.plugins.git.GitException: Command &quot;C:\Program Files\Git\bin\git.exe fetch --no-tags --progress https://git.company.com/scm/db/blog.git +refs/heads/develop:refs/remotes/origin/develop&quot; returned status code 130:</span><br><span class="line"> stdout:</span><br><span class="line"> stderr: remote: Counting objects: 1</span><br><span class="line">remote: Counting objects: 242690, done.</span><br><span class="line"> remote: Compressing objects:   0% (1/75028)</span><br><span class="line">remote: Compressing objects:   1% (751/75028)</span><br><span class="line">remote: Compressing objects:   2% (1501/75028)</span><br><span class="line">remote: Compressing objects:   3% (2251/75028)</span><br><span class="line">remote: Compressing objects:   4% (3002/75028)</span><br><span class="line">remote: Compressing objects:   5% (3752/75028)</span><br><span class="line">... ...</span><br><span class="line">remote: Compressing objects: 100% (75028/75028), done.</span><br><span class="line"> Receiving objects:   0% (1/242690)</span><br><span class="line">Receiving objects:   1% (2427/242690)</span><br><span class="line">Receiving objects:   1% (4762/242690), 972.00 KiB | 949.00 KiB/s</span><br><span class="line">Receiving objects:   2% (4854/242690), 972.00 KiB | 949.00 KiB/s</span><br><span class="line">Receiving objects:   3% (7281/242690), 1.38 MiB | 919.00 KiB/s</span><br><span class="line">Receiving objects:   3% (8998/242690), 1.82 MiB | 645.00 KiB/s</span><br><span class="line">Receiving objects:   4% (9708/242690), 1.82 MiB | 645.00 KiB/s</span><br><span class="line">Receiving objects:   4% (9778/242690), 1.82 MiB | 645.00 KiB/s</span><br><span class="line">Receiving objects:   5% (12135/242690), 1.82 MiB | 645.00 KiB/s</span><br><span class="line">... ...</span><br><span class="line">Receiving objects:  86% (209321/242690), 1.01 GiB | 2.08 MiB/s</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:2042)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandWithCredentials(CliGitAPIImpl.java:1761)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$400(CliGitAPIImpl.java:72)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$1.execute(CliGitAPIImpl.java:442)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$2.execute(CliGitAPIImpl.java:655)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler$1.call(RemoteGitImpl.java:153)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler$1.call(RemoteGitImpl.java:146)</span><br><span class="line"> at hudson.remoting.UserRequest.perform(UserRequest.java:212)</span><br><span class="line"> at hudson.remoting.UserRequest.perform(UserRequest.java:54)</span><br><span class="line"> at hudson.remoting.Request$2.run(Request.java:369)</span><br><span class="line"> at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)</span><br><span class="line"> at java.util.concurrent.FutureTask.run(Unknown Source)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</span><br><span class="line"> at java.lang.Thread.run(Unknown Source)</span><br><span class="line"> Suppressed: hudson.remoting.Channel$CallSiteStackTrace: Remote call to dendevu2uvbw01</span><br><span class="line"> at hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1743)</span><br><span class="line"> at hudson.remoting.UserRequest$ExceptionResponse.retrieve(UserRequest.java:357)</span><br><span class="line"> at hudson.remoting.Channel.call(Channel.java:957)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler.execute(RemoteGitImpl.java:146)</span><br><span class="line"> at sun.reflect.GeneratedMethodAccessor1074.invoke(Unknown Source)</span><br><span class="line"> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line"> at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler.invoke(RemoteGitImpl.java:132)</span><br><span class="line"> at com.sun.proxy.$Proxy124.execute(Unknown Source)</span><br><span class="line"> at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1152)</span><br><span class="line"> at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1192)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.scm.SCMStep.checkout(SCMStep.java:124)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:93)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:80)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution.lambda$start$0(SynchronousNonBlockingStepExecution.java:47)</span><br><span class="line"> at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line"> at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> [Pipeline] // ws</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> [Pipeline] // node</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> [Pipeline] // stage</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> Failed in branch Windows build</span><br></pre></td></tr></table></figure><h2 id="java-io-IOException-error-x3D-24-Too-many-open-files"><a href="#java-io-IOException-error-x3D-24-Too-many-open-files" class="headerlink" title="java.io.IOException: error&#x3D;24, Too many open files"></a>java.io.IOException: error&#x3D;24, Too many open files</h2><p>I’m using a centos VM as Jenkins server, recently I have this problem “java.io.IOException: error&#x3D;24, Too many open files”, and run any Jenkins job will be failure.</p><ol><li>Run <code>ulimit -n</code> the default value on my machine is <code>1024</code>.</li><li>Run <code>ulimit -n 4096</code> to increase this value to <code>4096</code> solved my problem</li></ol><h3 id="Permanent-solution"><a href="#Permanent-solution" class="headerlink" title="Permanent solution"></a>Permanent solution</h3><p>Use your root user to change <code>etc/security/limits.conf</code> file as below:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jenkins      soft   nofile  4096</span><br><span class="line">jenkins      hard   nofile  8192</span><br></pre></td></tr></table></figure><p>Explanation</p><p>jenkins   – a user&#x2F;group name<br>soft&#x2F;hard – type of link. Note: soft link can be from 0 to hard link.<br>nofile    – number of open files And the is value.</p><p>Log out then log in to your Jenkins server and use your ID <code>jenkins</code> to run <code>ulimit -a</code> command again.</p><p>If the output like below, Congrats, your change already take effect.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash-4.2$ <span class="built_in">id</span></span><br><span class="line">uid=990(jenkins) gid=984(jenkins) <span class="built_in">groups</span>=984(jenkins)</span><br><span class="line">bash-4.2$ <span class="built_in">ulimit</span> -a</span><br><span class="line"></span><br><span class="line">open files                      (-n) 4096</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Refers to <a href="https://stackoverflow.com/questions/46065008/too-many-open-files-error-cant-open-jenkins-after-installing-many-plugins">https://stackoverflow.com/questions/46065008/too-many-open-files-error-cant-open-jenkins-after-installing-many-plugins</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过 Jenkins 进行资源的锁定和释放</title>
      <link href="/2019/08/jenkins-lock-resource/"/>
      <url>/2019/08/jenkins-lock-resource/</url>
      
        <content type="html"><![CDATA[<h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>日常工作中需要切换到不同平台（包括 Linux, AIX, Windows, Solris, HP-UX）不同的版本进行开发和验证问题，但是由于虚拟机有限，并不能保证每个开发和测试都有所以平台的虚拟机并且安装了不同的版本，因此准备各种各样的开发和测试环境会花费很长时间。</p><span id="more"></span><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>对于这样的需求，一般都会首先想到 Docker；其次是从 Artifactory 取 Build 然后通过 CI 工具进行安装；最后从 Source Code 进行构建然后安装。</p><ul><li><p>先说 Docker，由于我们所支持的平台繁多，包括 Linux, AIX, Windows, Solris, HP-UX, Docker 只适用于 Linux 和 Windows，因此不能满足这样的需求。</p></li><li><p>由于其他原因我们的 Artifactory 暂时还不能使用，最后只能选择用 Source Code 进行构建然后进行安装。这两种方式都需要解决锁定资源以及释放资源的问题。如果当前环境有人正在使用，那么这台虚拟机的资源应该被锁住，不允许 Jenkins 再去调用这台正在使用的 node，以保证环境在使用过程中不被破坏。</p></li></ul><p>本文主要介绍如何通过 Jenkins Lockable Resources Plugin 来实现资源的上锁和解锁。</p><h2 id="演示-Demo"><a href="#演示-Demo" class="headerlink" title="演示 Demo"></a>演示 Demo</h2><ol><li><p>设置 Lockable Resources</p><ul><li>Jenkins -&gt; configuration -&gt; Lockable Resources Manager -&gt; Add Lockable Resource<br> <img src="/2019/08/jenkins-lock-resource/config-lock-resource.png" alt="我设置了两个 Resources "><br> 这里的 Labels 是你的 node 的 Label，在 Jenkins -&gt; Nodes 设置</li></ul></li><li><p>查看 Lockable Resources 资源池</p><p> <img src="/2019/08/jenkins-lock-resource/lock-resource-pool.png" alt="显示我有两个资源可用 "></p></li><li><p>测试锁资源</p><ul><li>这里我配置的是参数化类型的 Job，可以选择不同平台，不同仓库进行构建<br> <img src="/2019/08/jenkins-lock-resource/build-with-parameters.png" alt=" Build With Parameters "> build-with-parameters</li><li>运行第一个 Job<br> <img src="/2019/08/jenkins-lock-resource/build-with-parameters-1.png" alt=" 第一个 Job 已经运行 "></li><li>查看当前可用资源数量 Free resources &#x3D; 1，看到已经被 #47 这个 Job 所使用<br> <img src="/2019/08/jenkins-lock-resource/lock-resource-pool-1.png" alt="当前可用资源数为1"></li><li>继续运行第二个 Job<br> <img src="/2019/08/jenkins-lock-resource/build-with-parameters-2.png" alt=" 第二个 Job 已经运行 "></li><li>查看当前可用资源数量 Free resources &#x3D; 0，看到已经被 #48 这个 Job 所使用<br> <img src="/2019/08/jenkins-lock-resource/lock-resource-pool-2.png" alt="当前可用资源数为0"></li><li>最关键是这一步，如果继续运行第三个 Job，是否能够被继续行呢<br> <img src="/2019/08/jenkins-lock-resource/build-with-parameters-3.png" alt=" 第三个 Job 已经运行 "></li><li>可以看到这个任务没有开始执行，看下 log 是否真的没有被执行。通过日志发现，当前正在等待可用的资源<br> <img src="/2019/08/jenkins-lock-resource/build-with-parameters-3-log.png" alt=" 第三个 Job log "></li></ul></li><li><p>测试释放锁</p><ul><li>现在释放一个资源，看下第三个 Job 是否能拿到资源，并且执行<br> <img src="/2019/08/jenkins-lock-resource/unlock-job-1.png" alt=" 释放 Job 1 锁 "></li><li>从下图可以看到 第三个 Job 已经运行成功了<br> <img src="/2019/08/jenkins-lock-resource/unlock-job-1-after.png" alt=" 第三个 Job 运行 "></li></ul></li></ol><h2 id="Jenkins-pipeline-代码"><a href="#Jenkins-pipeline-代码" class="headerlink" title="Jenkins pipeline 代码"></a>Jenkins pipeline 代码</h2><p>整个 pipeline 最关键的部分就是如何上锁和释放，这里是通过 lock 和 input message 来实现。</p><p>当前 Job 只要用户不点击 Yes，就会一直处于没有完成的状态，那么的它的锁会一直生效中。直到点击 Yes， Job 结束，锁也就释放了。</p><p>具体可以参考下面的 Jenkinsfile。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">&#x27;PreDevENV&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options &#123;</span><br><span class="line">        lock(label: <span class="string">&#x27;PreDevENV&#x27;</span>, quantity: 1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">&#x27;platform&#x27;</span>,</span><br><span class="line">            choices: [<span class="string">&#x27;Linux&#x27;</span>, <span class="string">&#x27;AIX&#x27;</span>, <span class="string">&#x27;Windows&#x27;</span>, <span class="string">&#x27;Solris&#x27;</span>, <span class="string">&#x27;HP-UX&#x27;</span>],</span><br><span class="line">            description: <span class="string">&#x27;Required: which platform do you want to build&#x27;</span>)</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">&#x27;repository&#x27;</span>,</span><br><span class="line">            choices: [<span class="string">&#x27;repo-0.1&#x27;</span>, <span class="string">&#x27;repo-1.1&#x27;</span>, <span class="string">&#x27;repo-2.1&#x27;</span>, <span class="string">&#x27;repo-3.1&#x27;</span>, <span class="string">&#x27;repo-4.1&#x27;</span>],</span><br><span class="line">            description: <span class="string">&#x27;Required: which repository do you want to build&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;branch&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Required: which branch do you want to build&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;git clone&#x27;</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;git clone source&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;start build&#x27;</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;start build&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;install build&#x27;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;installing&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;unlock your resource&#x27;</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                input message: <span class="string">&quot;do you have finished?&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Yes, I have finished&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在大型企业里维护多分支流水线</title>
      <link href="/2019/08/jenkins-multi-branch-pipeline/"/>
      <url>/2019/08/jenkins-multi-branch-pipeline/</url>
      
        <content type="html"><![CDATA[<p>Jenkins 是 DevOps 领域里非常好的 CI&#x2F;CD 工具，它凭借其独特的功能，几乎可以满足你一切的的业务要求。其中一个独特的功能是多分支流水线(Multi-branch 流水线)，可以动态配置流水线。但是，随着公司的发展，单独的多分支流水线并不能完全满足你的所有需求，特别是在涉及大型企业时，你需要考虑流水线的集中管理，治理，稳定性，限制和安全性等其他事项。因此对于具有 Jenkins 流水线的大规模 CI&#x2F;CD 环境，你需要添加之前没有想到的更多功能。</p><span id="more"></span><p><img src="/2019/08/jenkins-multi-branch-pipeline/cover.jpeg" alt="jenkins multi branch"></p><h2 id="动态配置流水线"><a href="#动态配置流水线" class="headerlink" title="动态配置流水线"></a>动态配置流水线</h2><p>当一个开发人员创建一个新分支并将其推送到远程代码仓库时，Jenkins 会为这个新分支动态创建流水线。根据代码仓库，甚至也可以作为动态创建 Pull Request 流水线。这个动态功能在使用 Feature 分支或其他类似功能的团队中非常有用，由于本文的主题不是多分支流水线，你可以在<a href="https://jenkins.io/doc/tutorials/build-a-multibranch-pipeline-project/">端到端多分支流水线项目创建</a>中找到详细信息和一些示例。</p><h2 id="流水线即代码"><a href="#流水线即代码" class="headerlink" title="流水线即代码"></a>流水线即代码</h2><p>在多分支流水线中，脚本存储在项目代码仓库中，这就是“流水线即代码”的概念。此外，当你拥有小型开发人员团队或项目没有大量分支时，它非常有用。这样，开发人员可以根据需要更改流水线，将更改推送到分支，并立即看到更改生效，但对于拥有数百或数千名拥有大量项目的开发人员的大型企业而言，这种方案就完成不可行了。</p><h2 id="集中式库"><a href="#集中式库" class="headerlink" title="集中式库"></a>集中式库</h2><p>当你的团队或项目增加时，是时候考虑一种方法，比如通过共享的的方式应该在所有项目中。从长远来看，这种“集中式库”变得非常关键，因为随着规模的扩大，流水线中出现了新的要求或变化，在这种情况下，手动更改每个流水线或脚本对管理员来说将是一场噩梦。因此，如果你在一个地方进行更改并且每个流水线都得到更新，那么拥有该集中式库将更加实用。这是 Jenkins <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/">共享库</a>概念的用武之地。有关详细信息，你可以访问<a href="https://jenkins.io/doc/book/pipeline/shared-libraries/">该站点</a>。</p><p>即使你只有一个流水线，仍然可以使用集中式库。</p><h2 id="治理与稳定"><a href="#治理与稳定" class="headerlink" title="治理与稳定"></a>治理与稳定</h2><p>如果你的团队有对 CI&#x2F;CD 一定了解的开发人员，并且你确信他们不会做出重大更改或编写脚本错误导致影响环境的稳定性，那么将流水线脚本放在代码中是很好的。但是，你真的确定吗？</p><p>有人很可能会意外删除流水线文件或者可能出现小错误，这些小错误都会影响 CI&#x2F;CD 的稳定性。如果你在早期发现这些错误时很容易解决这些错误，如果没有，这些微小的变化或错误将可能比你想象的更严重的影响 CI&#x2F;CD，它将被传播到不同项目中的所有分支或 tag，这会变得很难解决。</p><p>你需要将正确的流水线脚本推送到所有分支和&#x2F;或代码仓库，或是要求每个开发人员提取最新的脚本，这种类型的问题集中式库这种更高级的方式来解决，除此之外，你的环境会因为有人可能会删除 Jenkins 文件或输入一些拼写错误带来风险。</p><h2 id="远程文件插件"><a href="#远程文件插件" class="headerlink" title="远程文件插件"></a>远程文件插件</h2><p>为了消除不必要的更改的风险并降低使用的库的复杂性，我们需要以某种方式将流水线脚本与项目&#x2F;代码代码仓库分开，同时仍继续使用多分支流水线功能。为此，我们有<a href="https://plugins.jenkins.io/remote-file">远程文件插件</a>。</p><p>这个插件使多分支流水线能够从其他代码仓库运行&#x2F;加载流水线脚本，而不是将它们放在项目&#x2F;代码代码仓库中，通过这个功能，你可以拥有一个单独的代码仓库，你可以在其中放置所有流水线脚本，并且只能为你自己提供访问权限。这样，你将拥有与集中式库相同的集中式流水线脚本代码仓库。此外，你可以将流水线脚本存储在集中式库本身中。</p><p>这个功能的好处是除了有访问权限的人之外，没有人能够在流水线脚本中进行更改。你在集中流水线脚本中所做的任何更改都将影响使用该脚本文件的所有多分支流水线。这样，你无需等待所有开发人员获取更新版本或将脚本推送到所有代码仓库上的所有分支。</p><p>另一个好处是，如果你将集中式流水线脚本放入 BitBucket 或 GitHub 等代码仓库中，你还将拥有代码审查功能。这样，你可以与其他人共享代码仓库，同时仍可限制或查看其他人所做的更改。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在大型企业中创建 CI&#x2F;CD 流水线并不容易，你需要考虑治理，限制，稳定性和安全性等概念。在此上下文中，借助 Jenkins 的其他功能，<a href="https://plugins.jenkins.io/remote-file">Remote File Plugin</a> 提供了一个独特的功能，用于集中，维护和共享流水线脚本。</p><p>有关插件的详细信息，你可以访问插件的 Wiki 页面。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git branching strategy</title>
      <link href="/2019/07/git-branching-strategy/"/>
      <url>/2019/07/git-branching-strategy/</url>
      
        <content type="html"><![CDATA[<p>随着近些年 Git 的快速普及，想必无论开发还是测试在日常工作中都要用到 Git。</p><p>对于刚刚接触的 Git 的人来说，打开一个 Git 仓库，面对十几个甚至几十个分支时，有的人不理解，有的人云里雾里，为什么会创建这么多分支？</p><p>对于开发需要知道如何通过 Git 分支来管理产品的开发和发布，尤其是对于大型的项目的开发，只有 master 和 develop 分支是无法满足产品管理和发布要求的，我们还需要其他分支以便更好的管理产品代码。</p><p>对于测试更多的了解开发过程及分支管理有助于测试及开展自动化测试用例，可以针对不同的分支进行测试用例的编写，在以后回归测试里可以通过分支或是 tag 找到对应的测试用例。</p><span id="more"></span><h2 id="Git-分支策略"><a href="#Git-分支策略" class="headerlink" title="Git 分支策略"></a>Git 分支策略</h2><p>这是一个大型的项目的 Git 分支管理策略，了解这张图可以涵盖 99% 的产品需求。</p><p><img src="/2019/07/git-branching-strategy/diagram.png" alt="大型项目的 Git 分支策略图"></p><p>上面这张图大体上分为 master, hotfix, release, develop 分支：</p><ul><li><p>master - 只用于存放稳定版本的提交，且只限于 merge 操作。每次发布成功后，要将 release 分支的代码 merge 到 master 和 develop 分支，并且在 master 上打上相应的 tag，如图里的 v1.1, v1.1.01 等。</p></li><li><p>develop - 开发分支是所有开发者最常用的分支，当前的 Bug 和 Features 都需要修复到这个分支上面去。需要每次创建 bugfix 或 feature 类型的分支，创建 Pull Request 进行代码 review，然后才能 merge 分支到 develop 分支上。</p></li><li><p>release - 发布分支是在产品 code freeze 后创建的， 这时候测试要开始大规模的测试了，新创建的 release 分支是不允许开发再往里面添加有关 feature 的代码，只有测试发现 bug 并被开发修复的代码才允许通过 Pull Request 的方式 merge 到 release 分支里。如果开发要提交 feature 的代码只能提交到 develop 分支里。等到产品成功发布后会将 release 分支 merge 到 master 分支并打上相应的 tag （版本号），还要将 release 分支 merge 到 develop 分支。</p></li><li><p>develop - 开发分支是所有开发者最常用的分支，当前的 Bug 和 Features 都需要修复到这个分支上面去。</p></li></ul><p>这个图有几个关键点：</p><ul><li>hotfix 分支是从最新的 hotfix 分支上创建的</li><li>hotfix 分支发布后将会合并到 develop 分支</li><li>release 分支是从 develop 分支上创建的</li><li>release 分支发布后将会合并到 develop 和 master 分支</li><li>release 分支上发现的缺陷将会修复到 release 分支</li></ul><p>如果你是那 1% 不能满足的产品需求，欢迎留言。</p><blockquote><p>相关阅读：<a href="https://shenxianpeng.github.io/2021/05/branch-naming-convention/">分支命名约定</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Branch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Jenkins 来提交修改的代码 git push by Jenkins</title>
      <link href="/2019/07/git-push-by-Jenkins/"/>
      <url>/2019/07/git-push-by-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>在持续集成中，你可能需要通过 Jenkins 来修改代码，并且将修改后的代码提交到Git仓库里。怎么做呢？最方便的做法还是 Jenkins 提供对应的插件，但是很遗憾我没找到合适的。另外我也觉得通过脚本的方式来实现会更加稳定，不用担心 Jenkins 以及插件升级带来潜在不好用的可能。</p><span id="more"></span><p>以下 <code>pipeline</code> 片段供参考使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// This pipeline is used <span class="keyword">for</span> bumping build number</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        MYGIT = credentials(<span class="string">&quot;d1cbab74-823d-41aa-abb7&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Git clone repo&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;git clone -b develop --depth 1 https://$MYGIT_USR:&quot;$MYGIT_PSW&quot;@github.com/shenxianpeng/blog.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Change code stage&#x27;</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Git push to remote repo&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">                cd blog</span></span><br><span class="line"><span class="string">                git add .</span></span><br><span class="line"><span class="string">                git commit -m &quot;Bld # 1001&quot;</span></span><br><span class="line"><span class="string">                git push https://$MYGIT_USR:&quot;$MYGIT_PSW&quot;@github.com/shenxianpeng/blog.git --all&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面我所遇到最大的坑，我之前脚本是这样写的：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&#x27;Git push to remote&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    // not works script</span><br><span class="line"></span><br><span class="line">    steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;cd blog&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;git add .&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;git commit -m &quot;$&#123;JIRA_NO&#125; Bld # $&#123;BUILD_NO&#125;&quot;&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;git push https://$MYGIT_USR:&quot;$MYGIT_PSW&quot;@github.com/shenxianpeng/blog.git --all&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最后一个阶段提交代码时，shell 脚本不能使用单引号 ‘’，要使用三引号才行’’’ ‘’’。我在这里花了很多时间，一直找不到问题所在，因为我在上面的shell脚本使用的时候用单引号 ‘’ 可以正常 git clone 代码，但在提交代码时不行，最后我 Jenkins 的 Pipeline Syntax 生成的脚本，提交代码成功。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Git </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Execute sudo without password</title>
      <link href="/2019/07/execute-sudo-without-password/"/>
      <url>/2019/07/execute-sudo-without-password/</url>
      
        <content type="html"><![CDATA[<p>在使用 Jenkins pipeline 的时候，在 Linux 需要用 root 来执行，我想通过 Jenkins pipeline 的语法来解决，但是只找到这种方式：<a href="https://jenkins.io/doc/pipeline/steps/ssh-steps/">SSH Pipeline Steps</a></p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def remote = [:]</span><br><span class="line">remote.name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">remote.host = <span class="string">&#x27;test.domain.com&#x27;</span></span><br><span class="line">remote.user = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">remote.password = <span class="string">&#x27;password&#x27;</span></span><br><span class="line">remote.allowAnyHosts = <span class="literal">true</span></span><br><span class="line">stage(<span class="string">&#x27;Remote SSH&#x27;</span>) &#123;</span><br><span class="line">    sshCommand remote: remote, <span class="built_in">command</span>: <span class="string">&quot;ls -lrt&quot;</span></span><br><span class="line">    sshCommand remote: remote, <span class="built_in">command</span>: <span class="string">&quot;for i in &#123;1..5&#125;; do echo -n \&quot;Loop \$i \&quot;; date ; sleep 1; done&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* <span class="built_in">command</span></span><br><span class="line">    * Type: String</span><br><span class="line">* dryRun (optional)</span><br><span class="line">    * Type: boolean</span><br><span class="line">* failOnError (optional)</span><br><span class="line">    * Type: boolean</span><br><span class="line">* remote (optional)</span><br><span class="line">    * Nested Choice of Objects</span><br><span class="line">* sudo (optional)</span><br><span class="line">    * Type: boolean</span><br></pre></td></tr></table></figure><p>从 example 来看需要提供的参数比较多，很多参数我已经在 Pipeline 的 environment 已经设置过了，这里再设置就显得不够优美，且限于没有足够的 example，你知道的 Jenkinsfile 调试非常痛苦和麻烦，我就没通过这种方式来尝试解决。</p><p>通过 Linux 设置来解决</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// open a shell console and <span class="built_in">type</span></span><br><span class="line">$ sudo visudo</span><br><span class="line"></span><br><span class="line">// <span class="built_in">type</span> your user name</span><br><span class="line">jenkins ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>但即使这样设置，通过 Jenkins 执行 shell 脚本的时候还是出现如下问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure><p>最后通过如下脚本解决了我的问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// Jenkinsfile</span><br><span class="line"></span><br><span class="line">environment &#123;</span><br><span class="line">    JENKINS = credentials(&quot;d1cbab74-823d-41aa-abb7-85848595&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sh &#x27;sudo -S &lt;&lt;&lt; &quot;$JENKINS_PSW&quot; sh test.sh&#x27;</span><br></pre></td></tr></table></figure><p>如果你有更好的方式，欢迎留言评论，谢谢。</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Shell </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加 Disqus 留言功能</title>
      <link href="/2019/07/add-disqus-to-hexo/"/>
      <url>/2019/07/add-disqus-to-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="在你的-Hexo-网站添加-Disqus"><a href="#在你的-Hexo-网站添加-Disqus" class="headerlink" title="在你的 Hexo 网站添加 Disqus"></a>在你的 Hexo 网站添加 Disqus</h2><p>去 Disqus 创建一个账号，在这个过程中有需要选择一个 shortname，完成后，你可以在设置页码找到你的 shortname</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://YOURSHORTNAMEHERE.disqus.com/admin/settings/general</span><br></pre></td></tr></table></figure><p>在你 Hexo 博客里打开 <code>_config.yml</code>, 然后输入 disqus_shortnameand: YOURSHORTNAMEHERE，像这样：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">disqus_shortname: myshortnamegoeshere</span><br><span class="line">comments: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>也需要更改 <code>_config.yml</code> 文件如下，例如我的：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改默认 url: http://yoursite.com 为：</span></span><br><span class="line">url: https://shenxianpeng.github.io</span><br></pre></td></tr></table></figure><p>复制这段代码到 <code>blog\themes\landscape\layout\_partial\footer.ejs</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (config.<span class="property">disqus_shortname</span>)&#123; %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> disqus_shortname = <span class="string">&#x27;&lt;%= config.disqus_shortname %&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &lt;% <span class="keyword">if</span> (page.<span class="property">permalink</span>)&#123; %&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> disqus_url = <span class="string">&#x27;&lt;%= page.permalink %&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &lt;% &#125; %&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> dsq = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    dsq.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    dsq.<span class="property">async</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    dsq.<span class="property">src</span> = <span class="string">&#x27;//go.disqus.com/&lt;% if (page.comments)&#123; %&gt;embed.js&lt;% &#125; else &#123; %&gt;count.js&lt;% &#125; %&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    (<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>] || <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>]).<span class="title function_">appendChild</span>(dsq);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>也需要复制这些文件到 <code>footer.ejs</code> 到最底部：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;disqus_thread&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>最后 <code>footer.ejs</code> 文件是这样的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">sidebar</span> === <span class="string">&#x27;bottom&#x27;</span>)&#123; %&gt;</span><br><span class="line">  &lt;%- <span class="title function_">partial</span>(<span class="string">&#x27;_partial/sidebar&#x27;</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (config.<span class="property">disqus_shortname</span>)&#123; %&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> disqus_shortname = <span class="string">&#x27;&lt;%= config.disqus_shortname %&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &lt;% <span class="keyword">if</span> (page.<span class="property">permalink</span>)&#123; %&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> disqus_url = <span class="string">&#x27;&lt;%= page.permalink %&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &lt;% &#125; %&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> dsq = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      dsq.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      dsq.<span class="property">async</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      dsq.<span class="property">src</span> = <span class="string">&#x27;//go.disqus.com/&lt;% if (page.comments)&#123; %&gt;embed.js&lt;% &#125; else &#123; %&gt;count.js&lt;% &#125; %&gt;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      (<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>] || <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>]).<span class="title function_">appendChild</span>(dsq);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer-info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="symbol">&amp;copy;</span> &lt;%= date(new Date(), &#x27;YYYY&#x27;) %&gt; &lt;%= config.author || config.title %&gt;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &lt;%= __(&#x27;powered_by&#x27;) %&gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://hexo.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Hexo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;disqus_thread&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>最后清理和构建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p>现在你可以看到我的博客已经可以添加评论了 : )</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Disqus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinsfile example - 实现交互、clone 多个仓库以及 git push</title>
      <link href="/2019/07/Jenkinsfile-example/"/>
      <url>/2019/07/Jenkinsfile-example/</url>
      
        <content type="html"><![CDATA[<p>这个pipeline里包含了如下几个技术：</p><ul><li>如何使用其他机器，agent</li><li>如何使用环境变量，environment</li><li>如何在build前通过参数化输入，parameters</li><li>如何使用交互，input</li><li>如何同时clone多个repos</li><li>如何进行条件判断，anyOf</li></ul><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">&#x27;windows-agent&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        MY_CRE = credentials(<span class="string">&quot;2aee7e0c-a728-4d9c-b25b-ad5451a12d&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">        // Jenkins parameter</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">&#x27;REPO&#x27;</span>,</span><br><span class="line">            choices: [<span class="string">&#x27;repo1&#x27;</span>, <span class="string">&#x27;repo2&#x27;</span>, <span class="string">&#x27;repo3&#x27;</span>, <span class="string">&#x27;repo4&#x27;</span>],</span><br><span class="line">            description: <span class="string">&#x27;Required: pick a repo you want to build&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;BRANCH&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Required: chose a branch you want to checkout&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;BUILD_NO&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Required: input build number&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;JIRA_NO&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Optional: input jira ticket number for commit message&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&quot;Are you sure?&quot;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                // make sure you want to start this build</span><br><span class="line">                input message: <span class="string">&quot;<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;BRANCH&#125;</span>:<span class="variable">$&#123;BUILD_NO&#125;</span>, are you sure?&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;I&#x27;m sure!&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Git clone repos&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // git <span class="built_in">clone</span> one repo <span class="built_in">source</span> code</span><br><span class="line">                checkout([</span><br><span class="line">                    <span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;refs/heads/$&#123;BRANCH&#125;&#x27;</span>]], browser: [<span class="variable">$class</span>: <span class="string">&#x27;GitHub&#x27;</span>, repoUrl: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;&#x27;</span>], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;CleanBeforeCheckout&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&#x27;**&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;../$&#123;REPO&#125;&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;2aee7e0c-a728-4d9c-b25b&#x27;</span>, url: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;.git&#x27;</span>]]])</span><br><span class="line"></span><br><span class="line">                // git <span class="built_in">clone</span> another repo <span class="built_in">source</span> code</span><br><span class="line">                checkout([</span><br><span class="line">                    <span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;refs/heads/$&#123;BRANCH&#125;&#x27;</span>]], browser: [<span class="variable">$class</span>: <span class="string">&#x27;GitHub&#x27;</span>, repoUrl: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;&#x27;</span>], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;CleanBeforeCheckout&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&#x27;**&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;../$&#123;REPO&#125;&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;2aee7e0c-a728-4d9c-b25b&#x27;</span>, url: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;.git&#x27;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Build repo1 and repo2&#x27;</span>) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                // <span class="keyword">if</span> REPO=repo1 or REPO=repo2, execute build_repo12.sh</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo1&#x27;</span></span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo2&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;$&#123;REPO&#125;/build_repo12.sh $&#123;REPO&#125; $&#123;BUILD_NO&#125; $&#123;JIRA_NO&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Build repo3 and repo4&#x27;</span>) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                // <span class="keyword">if</span> REPO=repo3 or REPO=repo4, execute build_repo34.sh</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo3&#x27;</span></span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo4&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;$&#123;REPO&#125;/build_repo34.sh $&#123;REPO&#125; $&#123;BUILD_NO&#125; $&#123;JIRA_NO&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Git push to remote repo&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // commit code to remote repo</span><br><span class="line">                sshagent([<span class="string">&#x27;2aee7e0c-a728-4d9c-b25b&#x27;</span>]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;git push https://%MY_CRE_USR%:%MY_CRE_PSW%@github.com/<span class="variable">$&#123;REPO&#125;</span>.git&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinsfile example - 实现交互、clone 多个仓库以及 git push</title>
      <link href="/2019/07/jenkinsfile-example/"/>
      <url>/2019/07/jenkinsfile-example/</url>
      
        <content type="html"><![CDATA[<p>这个pipeline里包含了如下几个技术：</p><ul><li>如何使用其他机器，agent</li><li>如何使用环境变量，environment</li><li>如何在build前通过参数化输入，parameters</li><li>如何使用交互，input</li><li>如何同时clone多个repos</li><li>如何进行条件判断，anyOf</li></ul><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">&#x27;windows-agent&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        MY_CRE = credentials(<span class="string">&quot;2aee7e0c-a728-4d9c-b25b-ad5451a12d&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">        // Jenkins parameter</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">&#x27;REPO&#x27;</span>,</span><br><span class="line">            choices: [<span class="string">&#x27;repo1&#x27;</span>, <span class="string">&#x27;repo2&#x27;</span>, <span class="string">&#x27;repo3&#x27;</span>, <span class="string">&#x27;repo4&#x27;</span>],</span><br><span class="line">            description: <span class="string">&#x27;Required: pick a repo you want to build&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;BRANCH&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Required: chose a branch you want to checkout&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;BUILD_NO&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Required: input build number&#x27;</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">&#x27;JIRA_NO&#x27;</span>,</span><br><span class="line">            defaultValue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            description: <span class="string">&#x27;Optional: input jira ticket number for commit message&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&quot;Are you sure?&quot;</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                // make sure you want to start this build</span><br><span class="line">                input message: <span class="string">&quot;<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;BRANCH&#125;</span>:<span class="variable">$&#123;BUILD_NO&#125;</span>, are you sure?&quot;</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;I&#x27;m sure!&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Git clone repos&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // git <span class="built_in">clone</span> one repo <span class="built_in">source</span> code</span><br><span class="line">                checkout([</span><br><span class="line">                    <span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;refs/heads/$&#123;BRANCH&#125;&#x27;</span>]], browser: [<span class="variable">$class</span>: <span class="string">&#x27;GitHub&#x27;</span>, repoUrl: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;&#x27;</span>], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;CleanBeforeCheckout&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&#x27;**&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;../$&#123;REPO&#125;&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;2aee7e0c-a728-4d9c-b25b&#x27;</span>, url: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;.git&#x27;</span>]]])</span><br><span class="line"></span><br><span class="line">                // git <span class="built_in">clone</span> another repo <span class="built_in">source</span> code</span><br><span class="line">                checkout([</span><br><span class="line">                    <span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;refs/heads/$&#123;BRANCH&#125;&#x27;</span>]], browser: [<span class="variable">$class</span>: <span class="string">&#x27;GitHub&#x27;</span>, repoUrl: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;&#x27;</span>], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;CleanBeforeCheckout&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&#x27;**&#x27;</span>], [<span class="variable">$class</span>: <span class="string">&#x27;RelativeTargetDirectory&#x27;</span>, relativeTargetDir: <span class="string">&#x27;../$&#123;REPO&#125;&#x27;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;2aee7e0c-a728-4d9c-b25b&#x27;</span>, url: <span class="string">&#x27;https://github.com/$&#123;REPO&#125;.git&#x27;</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Build repo1 and repo2&#x27;</span>) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                // <span class="keyword">if</span> REPO=repo1 or REPO=repo2, execute build_repo12.sh</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo1&#x27;</span></span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo2&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;$&#123;REPO&#125;/build_repo12.sh $&#123;REPO&#125; $&#123;BUILD_NO&#125; $&#123;JIRA_NO&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;Build repo3 and repo4&#x27;</span>) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                // <span class="keyword">if</span> REPO=repo3 or REPO=repo4, execute build_repo34.sh</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo3&#x27;</span></span><br><span class="line">                    environment name: <span class="string">&#x27;REPO&#x27;</span>, value: <span class="string">&#x27;repo4&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;$&#123;REPO&#125;/build_repo34.sh $&#123;REPO&#125; $&#123;BUILD_NO&#125; $&#123;JIRA_NO&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;Git push to remote repo&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // commit code to remote repo</span><br><span class="line">                sshagent([<span class="string">&#x27;2aee7e0c-a728-4d9c-b25b&#x27;</span>]) &#123;</span><br><span class="line">                    sh <span class="string">&quot;git push https://%MY_CRE_USR%:%MY_CRE_PSW%@github.com/<span class="variable">$&#123;REPO&#125;</span>.git&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 管理</title>
      <link href="/2019/07/git-management/"/>
      <url>/2019/07/git-management/</url>
      
        <content type="html"><![CDATA[<h2 id="查找是否有遗漏提交"><a href="#查找是否有遗漏提交" class="headerlink" title="查找是否有遗漏提交"></a>查找是否有遗漏提交</h2><p>从一个分支找到所有的 commit 和 ticket 号，然后去另外一个分支去查找这些提交是否也在这个分支里。</p><span id="more"></span><p>找一个分支的所有 commit 和 ticket 号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 develop 分支上获取所有的 commit 和 ticket 号，然后根据 ticket 号进行排序</span></span><br><span class="line">git <span class="built_in">log</span> origin/develop --pretty=oneline --abbrev-commit | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f2,1 | <span class="built_in">sort</span> -t <span class="string">&#x27; &#x27;</span> -k 2 &gt;&gt; develop_involve_tickets.txt</span><br><span class="line"></span><br><span class="line">--pretty=oneline    <span class="comment"># 显示为一行</span></span><br><span class="line">--abbrev-commit     <span class="comment"># 显示短的提交号</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cut</span> --<span class="built_in">help</span>          <span class="comment"># 切出来所需要的字段</span></span><br><span class="line">-d                  <span class="comment"># 字段分隔符, &#x27; &#x27;分隔空格</span></span><br><span class="line">-f                  <span class="comment"># 只选择某些字段</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span> --<span class="built_in">help</span>         <span class="comment"># 利用 sort 将剪出来的字段进行排序</span></span><br><span class="line">-t                  <span class="comment"># 字段分隔， &#x27; &#x27;分隔空格</span></span><br><span class="line">-k                  <span class="comment"># 通过键进行键定义排序;KEYDEF 给出位置和类型</span></span><br></pre></td></tr></table></figure><p>然后去另外一个分支去找是否有次提交</p><p>由于在 SVN 时代时，每次修改都会在描述里添加 ticket 号，所以切换到 master 分支后，直接搜索所有 ticket 号是否存在就好了.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">filename=<span class="string">&#x27;C:\develop_involve_tickets.txt&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line">    var=`grep -ir <span class="variable">$line</span> src`</span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="variable">$var</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;not found&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> &gt;&gt; ../not_found_in_master.txt</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;found&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> &gt;&gt; ../found_in_master.txt</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">&quot;<span class="variable">$filename</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multibranch Pipeline</title>
      <link href="/2019/06/multi-branch-pipeline/"/>
      <url>/2019/06/multi-branch-pipeline/</url>
      
        <content type="html"><![CDATA[<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>Like database product, it runs on multi-platform, but for software enginner they may only works on one platform, how they could identify their code works on all platform? manually build the various platforms? NO!</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Most people would know we can use Jenkins pipeline, they may create multi Jenkins job for different stuation.</p><p>How to do it in an elegant way, I would want to share how to use multibranch pipeline to achieve.</p><ol><li>When create a pull request, auto parallel start simple build.</li><li>Reviewers can decide whether to merge base on build results.</li><li>After code merged, auto start full build.</li></ol><span id="more"></span><h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><p>What are the benefits:</p><ol><li>One Jenkins job and one pipeline can manage multi branches.</li><li>Do not need to compile platforms to verify, save huge time and machines.</li><li>Stop looking for other people’s mistakes, no one can break the build.</li><li>Builds can be generated quickly for QA testing</li></ol><h2 id="Jenkinsfile-example"><a href="#Jenkinsfile-example" class="headerlink" title="Jenkinsfile example"></a>Jenkinsfile example</h2><p>In case of reduce simple build time and let PR creater and reviewer know the builds status as soon as possbile, you may need to do something different here, like below, used when condition and branch variable to check it is a develop branch or pull request branch.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">when &#123;</span><br><span class="line">    branch <span class="string">&#x27;PR-*&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">when &#123;</span><br><span class="line">    branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The entire code pipeline looks like this:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// This Jenkinsfile is an explame <span class="keyword">for</span> multibranch pipeline</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&quot;All platform builds&quot;</span>) &#123;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(<span class="string">&quot;Windows build&quot;</span>) &#123;</span><br><span class="line">                    agent &#123;</span><br><span class="line">                        node &#123;</span><br><span class="line">                            label <span class="string">&#x27;windows-vm01&#x27;</span></span><br><span class="line">                            customWorkspace <span class="string">&#x27;C:\\agent\\workspace\\blog&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stages &#123;</span><br><span class="line">                        stage(<span class="string">&quot;PR build&quot;</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">&#x27;PR-*&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                checkout scm</span><br><span class="line">                                <span class="built_in">dir</span>(<span class="string">&#x27;src\\build&#x27;</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;build.bat PR&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(<span class="string">&quot;Release build&quot;</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                cleanWs()</span><br><span class="line">                                checkout scm</span><br><span class="line">                                <span class="built_in">dir</span>(<span class="string">&#x27;src\\build&#x27;</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;build.bat release&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(<span class="string">&quot;Deploy&quot;</span>) &#123;</span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">&quot;====if you have more stage, can add stage like this===&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(<span class="string">&quot;Linux build&quot;</span>) &#123;</span><br><span class="line">                    agent &#123;</span><br><span class="line">                        node &#123;</span><br><span class="line">                            label <span class="string">&#x27;linux-vm01&#x27;</span></span><br><span class="line">                            customWorkspace <span class="string">&#x27;/agent/workspace/blog&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stages &#123;</span><br><span class="line">                        stage(<span class="string">&quot;PR build&quot;</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">&#x27;PR-*&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                checkout scm</span><br><span class="line">                                <span class="built_in">dir</span>(<span class="string">&#x27;src/build&#x27;</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;build.sh PR&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(<span class="string">&quot;Release build&quot;</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">&#x27;develop&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                cleanWs()</span><br><span class="line">                                checkout scm</span><br><span class="line">                                <span class="built_in">dir</span>(<span class="string">&#x27;src/build&#x27;</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;build.sh release&#x27;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(<span class="string">&quot;AIX build&quot;</span>)&#123;</span><br><span class="line">                    steps&#123;</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;====same as windows/Linux example, can write the code here you need ====&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Code Coverage Tool - Squish Coco use examples</title>
      <link href="/2019/05/squishcoco/"/>
      <url>/2019/05/squishcoco/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ol><li>You need to ask for a <a href="https://www.froglogic.com/coco/free-trial/">free trial license</a> and install<ul><li>You will receive a mail with username&#x2F;password to login for downloading</li></ul></li><li>I test it on the Windows platform, so I download the Windows installer, then install Squish Coco and Add-in</li><li>Installed Visual Studio 2010 or higher, I used VS2017 Professional</li></ol><span id="more"></span><h2 id="Add-in"><a href="#Add-in" class="headerlink" title="Add-in"></a>Add-in</h2><ul><li>go to ..squishcoco\Setup, see quishCocoVSIX2017.vsix, double click, reopen VS2017, squishcoco will be there</li></ul><h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><p>Start Visual Studio and create a new C++ application</p><ol><li>Click on “File→New→Project…” to pop up the new project wizard.</li><li>Choose a project type of “Visual C++2” and the “Win32 Console Application” template.</li><li>Enter a project name of squishcoco_sample, then click the “OK” button.</li><li>When the wizard’s second page appears, click the “Finish” button.</li></ol><p>At this stage the application is not yet instrumented, so now we will create a copy of the build.<br><img src="/2019/05/squishcoco/configuration-manager.png" alt="configuration-manager"></p><ol><li>Open the configuration manager by clicking “Build→Configuration Manager…”.</li><li>In the “Configuration” column, select “New…” in the combobox.</li><li>In the “New Project Configuration” dialog:<ol><li>Enter Code Coverage in the “Name” field,</li><li>Select Release or Debug in the “Copy settings from” selection dialog.</li><li>Click the “OK” button.</li></ol></li></ol><p>Add test code</p><p>squishcoco_sample.cpp</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// squishcoco_sample.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">myprint</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter your age: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;age);</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt;=<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re young guys\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;<span class="number">40</span> &amp;&amp; age &lt;=<span class="number">70</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re midle guys\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt; <span class="number">70</span> &amp;&amp; age &lt;=<span class="number">100</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re old guys\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;You&#x27;re awesome\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    myprint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myprint.cpp</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">myprint</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;you have call printf function\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Activate-instrumentation"><a href="#Activate-instrumentation" class="headerlink" title="Activate instrumentation"></a>Activate instrumentation</h2><p>use the Microsoft® Visual Studio® Add-In:<br><img src="/2019/05/squishcoco/squishcoco-add-in.png" alt="squishcoco-add-in"></p><ol><li>Click “Tools→Code Coverage Build Mode…” to pop up the Squish Coco wizard.</li><li>In the “Project:” selection dialog, select squishcoco_sample.</li><li>In the selection dialog “Configuration:”, select Code Coverage.</li><li>In the Configuration section at the bottom, select the radio button “Modify”, and then click on the button, “Enable code coverage for C++ projects”.</li></ol><p>The Code Coverage configuration has now been modified to generate code coverage information. The “SquishCoco” output window summarizes all the modifications that have been made:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Modifying configuration &#x27;Code Coverage&#x27; for the project &#x27;squishcoco_sample&#x27; for the platform &#x27;Code Coverage|Win32&#x27;</span><br><span class="line">    Compiler Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended</span><br><span class="line">    Linker Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended</span><br><span class="line">    Librarian Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended</span><br><span class="line">    File Specific Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended for the file &#x27;squishcoco_sample.cpp&#x27;</span><br><span class="line">Modifying configuration &#x27;Code Coverage&#x27; for the project &#x27;squishcoco_sample&#x27; for the platform &#x27;Code Coverage|x64&#x27;</span><br><span class="line">    Compiler Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended</span><br><span class="line">    Linker Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended</span><br><span class="line">    Librarian Configuration</span><br><span class="line">        Additional command line arguments &#x27; --cs-exclude-file-abs-regex=&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#x27; are appended</span><br><span class="line">    File Specific Configuration</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Build-project"><a href="#Build-project" class="headerlink" title="Build project"></a>Build project</h2><p>Build project will cause the executable squishcoco_sample.exe to be built and the code coverage instrumentation file squishcoco_sample.exe.csmes to be generated</p><p>Double click on squishcoco_sample.exe.csmes to inspect this file in CoverageBrowser</p><p>Right now there is no code coverage statistics visible in CoverageBrowser, this is because the application has not yet been executed. Click on squishcoco_sample.cpp in the source list to display the main function. All the instrumented lines are shown grayed out, to indicate that nothing has been executed.</p><p>Now execute squishcoco_sample.exe by double clicking it. This will result in a file called squishcoco_sample.exe.csexe being generated. The file contains a code coverage snapshot which can be imported into Coverage Browser</p><ol><li>Click “File-&gt;Load Execution Report…”.</li><li>Select the “File” item and enter the path of the squishcoco_sample.exe.csexe file.</li><li>Click on the “Import” button.<br>This will cause the code coverage statistics to be updated. Now, in the source code window, the main function’s return statement will be colored green to indicate that this line has been executed.</li></ol><h2 id="Final-result"><a href="#Final-result" class="headerlink" title="Final result"></a>Final result</h2><p><img src="/2019/05/squishcoco/squishcoco-result.png" alt="squishcoco-result"></p>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Coverage </tag>
            
            <tag> SquishCoco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Coverage tools of C/C++</title>
      <link href="/2019/05/code-coverage-tools/"/>
      <url>/2019/05/code-coverage-tools/</url>
      
        <content type="html"><![CDATA[<p>Code Coverage is a measurement of how many lines, statements, or blocks of your code are tested using your suite of automated tests. It’s an essential metric to understand the quality of your QA efforts.</p><p>Code coverage shows you how much of your application is not covered by automated tests and is therefore vulnerable to defects. it is typically measured in percentage values – the closer to 100%, the better.</p><p>When you’re trying to demonstrate test coverage to your higher-ups, code coverage tools (and other tools of the trade, of course) come in quite useful.</p><p>List of Code Coverage Tools</p><p>| Tools  | Support Language  | Cost | Partners  |<br>|—|—|—|—|—|<br>| <a href="https://www.froglogic.com/coco/">Squish Coco</a>  | C, C++, C#, SystemC, Tcl and QML | Not disclosed |<a href="https://www.froglogic.com/coco/">Botom of this page Selected Clients</a>|<br>| <a href="http://www.bullseye.com/productInfo.html">BullseyeCoverage</a> | C, C++ |$800 for 1-year license and up |   |<br>| <a href="https://www.verifysoft.com/en_code_coverage.html">Testwell</a>| C, C++, C#, Java| Not disclosed| |<br>| <a href="https://www.parasoft.com/products/ctest">Parasoft C&#x2F;C++test</a> |C, C++   | Not disclosed  | <a href="https://www.parasoft.com/company/partners">partners</a> |<br>| <a href="https://www.vectorcast.com/software-testing-products/c-unit-testing">VECTOR Code Coverage</a> | C, C++ | Not disclosed (free trial available)| <a href="https://www.vectorcast.com/partners">partners</a> |<br>|<a href="https://www.eclemma.org/jacoco/">JaCoCo</a>| Java | Open Source| Most famous code coverage tool in Java area |</p>]]></content>
      
      
      <categories>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> C </tag>
            
            <tag> Coverage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitSCM clone code don&#39;t display branch</title>
      <link href="/2019/05/GitSCM-clone-code-don-t-display-branch/"/>
      <url>/2019/05/GitSCM-clone-code-don-t-display-branch/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一个 regression bug，是产品完成构建之后，build commit number 不对，显示的 HEAD 而不是常见的 97b34931ac HASH number,这是什么原因呢？<br>我检查了 build 脚本没有发现问题，branch 的输出是正确的，那我怀疑是引入 Jenkins 的原因，果然登录到远程的 agent 上去查看分支名称如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\workspace\blog&gt;git branch</span><br><span class="line">* (HEAD detached at 97b3493)</span><br></pre></td></tr></table></figure><p>果然问题出在了 Jenkins 上。这个问题有简单办法解决，就是直接使用git命令来clone代码，而不使用Git插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 -b u2opensrc https://username:<span class="string">&quot;passwowrd&quot;</span>@git.github.com/scm/blog.git blog</span><br></pre></td></tr></table></figure><p>这种方式固然简单，不会出错，但它是明码显示，我岂能容忍这种不堪的处理方式吗？肯定还是要在 Git 插件上找到解决办法的。<br>随后google一下，果然有遇到和我一样问题的人，问题链接 <a href="https://stackoverflow.com/questions/44006070/jenkins-gitscm-finishes-the-clone-in-a-detached-head-state-how-can-i-make-sure">这里</a>。</p><p>他说他做了很多调查，还跟专业的 Jenkins 人士联系，试了很多次，最后找到这个办法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/feature/*&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&quot;**&quot;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;99f978af-XXXX-XXXX-8147-2cf8f69ef864&#x27;</span>, url: <span class="string">&#x27;http://TFS_SERVER:8080/tfs/DefaultCollection/Product/_git/Project&#x27;</span>]]])</span><br></pre></td></tr></table></figure><p>主要是在 extensions:[] 中加入这句 [$class: ‘LocalBranch’, localBranch: “**”]</p><p>这是 Jenkins 的 Bug 吗？带着这个疑问随后通过 Pipeline Syntax，找到 checkout: Check out from version control，在 Additional Behaviours 里有 Check out to specific local branch 这个配置项</p><p>If given, checkout the revision to build as HEAD on this branch.<br>If selected, and its value is an empty string or “**”, then the branch name is computed from the remote branch without the origin. In that case, a remote branch origin&#x2F;master will be checked out to a local branch named master, and a remote branch origin&#x2F;develop&#x2F;new-feature will be checked out to a local branch named develop&#x2F;newfeature.</p><p>看介绍原来 Jenkins 自带这个设置，只是它不是默认选项，所以才遇到刚才那个问题。随后选择这个设置，然后填入”**”，然后生成 Pipeline 脚本，就跟上面的脚本一样了。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitSCM clone code don&#39;t display branch</title>
      <link href="/2019/05/gitscm-clone-code-don-t-display-branch/"/>
      <url>/2019/05/gitscm-clone-code-don-t-display-branch/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一个 regression bug，是产品完成构建之后，build commit number 不对，显示的 HEAD 而不是常见的 97b34931ac HASH number,这是什么原因呢？<br>我检查了 build 脚本没有发现问题，branch 的输出是正确的，那我怀疑是引入 Jenkins 的原因，果然登录到远程的 agent 上去查看分支名称如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\workspace\blog&gt;git branch</span><br><span class="line">* (HEAD detached at 97b3493)</span><br></pre></td></tr></table></figure><p>果然问题出在了 Jenkins 上。这个问题有简单办法解决，就是直接使用git命令来clone代码，而不使用Git插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 -b u2opensrc https://username:<span class="string">&quot;passwowrd&quot;</span>@git.github.com/scm/blog.git blog</span><br></pre></td></tr></table></figure><p>这种方式固然简单，不会出错，但它是明码显示，我岂能容忍这种不堪的处理方式吗？肯定还是要在 Git 插件上找到解决办法的。<br>随后google一下，果然有遇到和我一样问题的人，问题链接 <a href="https://stackoverflow.com/questions/44006070/jenkins-gitscm-finishes-the-clone-in-a-detached-head-state-how-can-i-make-sure">这里</a>。</p><p>他说他做了很多调查，还跟专业的 Jenkins 人士联系，试了很多次，最后找到这个办法</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&#x27;*/feature/*&#x27;</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">&#x27;LocalBranch&#x27;</span>, localBranch: <span class="string">&quot;**&quot;</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;99f978af-XXXX-XXXX-8147-2cf8f69ef864&#x27;</span>, url: <span class="string">&#x27;http://TFS_SERVER:8080/tfs/DefaultCollection/Product/_git/Project&#x27;</span>]]])</span><br></pre></td></tr></table></figure><p>主要是在 extensions:[] 中加入这句 [$class: ‘LocalBranch’, localBranch: “**”]</p><p>这是 Jenkins 的 Bug 吗？带着这个疑问随后通过 Pipeline Syntax，找到 checkout: Check out from version control，在 Additional Behaviours 里有 Check out to specific local branch 这个配置项</p><p>If given, checkout the revision to build as HEAD on this branch.<br>If selected, and its value is an empty string or “**”, then the branch name is computed from the remote branch without the origin. In that case, a remote branch origin&#x2F;master will be checked out to a local branch named master, and a remote branch origin&#x2F;develop&#x2F;new-feature will be checked out to a local branch named develop&#x2F;newfeature.</p><p>看介绍原来 Jenkins 自带这个设置，只是它不是默认选项，所以才遇到刚才那个问题。随后选择这个设置，然后填入”**”，然后生成 Pipeline 脚本，就跟上面的脚本一样了。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过参数化上传文件到 FTP 服务器</title>
      <link href="/2019/05/upload-to-ftp-parameterization-by-bat/"/>
      <url>/2019/05/upload-to-ftp-parameterization-by-bat/</url>
      
        <content type="html"><![CDATA[<p>实现 CI&#x2F;CD 过程中，常常需要将构建好的 build 上传到一个公共的服务器，供测试、开发来获取最新的 build。如何上传 build 成果物到 FTP server，又不想把 FTP server登录的用户名和密码存在脚本里，想做这样的参数化如何实现呢？</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upload_to_ftp.bat [hostname] [username] [password] [local_path] [remote_pat]</span><br></pre></td></tr></table></figure><span id="more"></span><p>windows batch 由于它的局限性，在实现上是比较麻烦的，但还是有办法。如何用 windows batch 来实现呢？借助一个临时文件，把需要的参数写入到临时文件里，然后通过 ftp -s 参数读取文件，最后把临时文件删除的方式来实现。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ftp_hostname=%1</span><br><span class="line"><span class="built_in">set</span> ftp_username=%2</span><br><span class="line"><span class="built_in">set</span> ftp_password=%3</span><br><span class="line"><span class="built_in">set</span> local_path=%4</span><br><span class="line"><span class="built_in">set</span> remote_path=%5</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> %ftp_hostname%! == ! ( <span class="built_in">echo</span> <span class="string">&quot;ftp_hostname not set correctly&quot;</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %ftp_username%! == ! ( <span class="built_in">echo</span> <span class="string">&quot;ftp_username not set correctly&quot;</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %ftp_password%! == ! ( <span class="built_in">echo</span> <span class="string">&quot;ftp_password not set correctly&quot;</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %local_path%! == ! ( <span class="built_in">echo</span> <span class="string">&quot;local_path not set correctly&quot;</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %remote_path%! == ! ( <span class="built_in">echo</span> <span class="string">&quot;remote_path not set correctly&quot;</span> &amp; goto USAGE )</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> open %ftp_hostname% &gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> user %ftp_username% %ftp_password% &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">cd</span> %remote_path% &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> lcd %local_path% &gt;&gt;ftp.txt</span><br><span class="line"><span class="built_in">echo</span> prompt off &gt;&gt;ftp.txt</span><br><span class="line"><span class="built_in">echo</span> bin &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> mput * &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">bye</span> &gt;&gt; ftp.txt</span><br><span class="line">ftp -n -s:ftp.txt</span><br><span class="line"></span><br><span class="line">del ftp.txt</span><br><span class="line">goto END</span><br><span class="line"></span><br><span class="line">:USAGE</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.   - -------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span>.   - upload_to_ftp.bat [hostname] [username] [password] [local_path] [remote_pat]  -</span><br><span class="line"><span class="built_in">echo</span>.   - Example:                                                                      -</span><br><span class="line"><span class="built_in">echo</span>.   - upload_to_ftp.bat 192.168.1.1 guest guest D:\Media\* C:\Builds\               -</span><br><span class="line"><span class="built_in">echo</span>.   - -------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line">:END</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Automation </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automatically commit code by Jenkins</title>
      <link href="/2019/05/auto-bump-build-version/"/>
      <url>/2019/05/auto-bump-build-version/</url>
      
        <content type="html"><![CDATA[<p>When we need to release a product, we should change copyright, build version, release month, release note…<br>How to modify multiple files automatically?<br>I used a Jenkins pipeline project, the project is parameterized(string parameter) and regular expressions to implement.</p><ol><li><p>Here is the string parameter for copyright:</p><ul><li><p>Name: copyright</p></li><li><p>Default Value: 1995—2019</p></li><li><p>Description: Copyright format:1995—2019</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&#x27;change copyrigh&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;sed -i -E &quot;s/(1995—[0-9]&#123;4&#125;)/$&#123;copyright&#125;/&quot; 1033/AutoRun.ini&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Here is the string parameter for build version:</p><ul><li><p>Name: build_version</p></li><li><p>Default Value: 1.2.2.1002</p></li><li><p>Description: build version format: 1.2.2.1002</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&#x27;change build version&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;sed -i -E &quot;s/([0-9].[0-9].[0-9].[0-9]&#123;4&#125;)/$&#123;build_version&#125;/&quot; 1033/AutoRun.ini&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Here is the string parameter for build version:</p><ul><li><p>Name: release_month</p></li><li><p>Default Value: May 2019</p></li><li><p>Description: release month format: May 2019</p>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&#x27;change release month&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">        sed -i -E &quot;s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/&quot; 1033/AutoRun.ini</span></span><br><span class="line"><span class="string">        sed -i -E &quot;s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/&quot; 1033/MainMenu.ini</span></span><br><span class="line"><span class="string">        &#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>push change to Git</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&#x27;git push to Git&#x27;</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sshagent([<span class="string">&#x27;8dd766ba-ac0f-4302-afa8-bee59c726dee&#x27;</span>]) &#123;</span><br><span class="line">            sh(<span class="string">&quot;git add 1033/AutoRun.ini&quot;</span>)</span><br><span class="line">            sh(<span class="string">&quot;git add 1033/MainMenu.ini&quot;</span>)</span><br><span class="line">            sh(<span class="string">&quot;git commit -m &#x27;Bld # <span class="variable">$&#123;build_version&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            sh(<span class="string">&quot;git push -u origin master&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Whole Jenkins Pipeline looks like:</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        label <span class="string">&#x27;master&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages&#123;</span><br><span class="line">        stage(<span class="string">&#x27;git clone&#x27;</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                git branch: <span class="string">&#x27;master&#x27;</span>,</span><br><span class="line">                credentialsId: <span class="string">&#x27;8dd766ba-ac0f-4302-afa8-bee59c726dee&#x27;</span>,</span><br><span class="line">                url: <span class="string">&#x27;git@github.com:shenxianpeng/blog.git&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;change copyrigh&#x27;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;sed -i -E &quot;s/(1995—[0-9]&#123;4&#125;)/$&#123;copyright&#125;/&quot; 1033/AutoRun.ini&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;change release month&#x27;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">            sed -i -E &quot;s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/&quot; 1033/AutoRun.ini</span></span><br><span class="line"><span class="string">            sed -i -E &quot;s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/&quot; 1033/MainMenu.ini</span></span><br><span class="line"><span class="string">            &#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;change build version&#x27;</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            sh label: <span class="string">&#x27;&#x27;</span>, script: <span class="string">&#x27;sed -i -E &quot;s/([0-9].[0-9].[0-9].[0-9]&#123;4&#125;)/$&#123;build_version&#125;/&quot; 1033/AutoRun.ini&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">&#x27;git push to Git&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sshagent([<span class="string">&#x27;8dd766ba-ac0f-4302-afa8-bee59c726dee&#x27;</span>]) &#123;</span><br><span class="line">                    sh(<span class="string">&quot;git add 1033/AutoRun.ini&quot;</span>)</span><br><span class="line">                    sh(<span class="string">&quot;git add 1033/MainMenu.ini&quot;</span>)</span><br><span class="line">                    sh(<span class="string">&quot;git commit -m &#x27;Bld # <span class="variable">$&#123;build_version&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">                    sh(<span class="string">&quot;git push -u origin master&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Release </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Linux agent configuration</title>
      <link href="/2019/05/jenkins-linux-agent/"/>
      <url>/2019/05/jenkins-linux-agent/</url>
      
        <content type="html"><![CDATA[<h2 id="Prepare-Java-runtime"><a href="#Prepare-Java-runtime" class="headerlink" title="Prepare Java runtime"></a>Prepare Java runtime</h2><h3 id="Check-if-had-installed-java"><a href="#Check-if-had-installed-java" class="headerlink" title="Check if had installed java"></a>Check if had installed java</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_65&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_65-b17)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="if-not-Here-is-an-article-telling-you-how-to-install-it"><a href="#if-not-Here-is-an-article-telling-you-how-to-install-it" class="headerlink" title="if not Here is an article telling you how to install it"></a>if not Here is an <a href="https://www.javahelps.com/2015/03/install-oracle-jdk-in-ubuntu.html">article</a> telling you how to install it</h4><h2 id="Create-Node"><a href="#Create-Node" class="headerlink" title="Create Node"></a>Create Node</h2><h3 id="1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine"><a href="#1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine" class="headerlink" title="1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine"></a>1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine</h3><h4 id="2-List-Linux-agent-settings"><a href="#2-List-Linux-agent-settings" class="headerlink" title="2. List Linux agent settings"></a>2. List Linux agent settings</h4><table><thead><tr><th>Items</th><th>Settings</th></tr></thead><tbody><tr><td>Name</td><td>Linux-build-machine</td></tr><tr><td>Description</td><td>used for Linux build</td></tr><tr><td>of executors</td><td>1</td></tr><tr><td>Remote root directory</td><td>&#x2F;home&#x2F;agent</td></tr><tr><td>Labels</td><td>Linux, build</td></tr><tr><td>Usage</td><td>Use this node as much as possible</td></tr><tr><td>Launch method</td><td>Launch agent agents via SSH</td></tr><tr><td>Host</td><td>192.168.1.112</td></tr><tr><td>Credentials</td><td>username&#x2F;password</td></tr><tr><td>Host Key Verification Strategy</td><td>Manually trusted key Verification Strategy</td></tr><tr><td>Availability</td><td>Keep this agent online as much as paossible</td></tr></tbody></table><h4 id="3-How-to-set-credentials"><a href="#3-How-to-set-credentials" class="headerlink" title="3. How to set credentials"></a>3. How to set credentials</h4><table><thead><tr><th>credentials</th><th>configuration</th></tr></thead><tbody><tr><td>Domain</td><td>Global credentials (unrestricted)</td></tr><tr><td>Kind</td><td>Username with password</td></tr><tr><td>Scope</td><td>Global(Jenkins, nodes, items, all child items, etc)</td></tr><tr><td>Username</td><td>root</td></tr><tr><td>Password</td><td>mypassword</td></tr><tr><td>Description</td><td>Linux agent username &amp; password</td></tr></tbody></table><h4 id="4-Save-then-Connect"><a href="#4-Save-then-Connect" class="headerlink" title="4. Save then Connect"></a>4. Save then Connect</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Remoting version: 3.29</span><br><span class="line">This is a Unix agent</span><br><span class="line">Evacuated stdout</span><br><span class="line">Agent successfully connected and online</span><br><span class="line">SSHLauncher&#123;host=&#x27;192.168.1.112&#x27;, port=22, credentialsId=&#x27;d1cbab74-823d-41aa-abb7-8584859503d0&#x27;, jvmOptions=&#x27;&#x27;, javaPath=&#x27;/usr/bin/java&#x27;,</span><br><span class="line">prefixStartSlaveCmd=&#x27;&#x27;, suffixStartSlaveCmd=&#x27;&#x27;, launchTimeoutSeconds=210, maxNumRetries=10, retryWaitTime=15,</span><br><span class="line">sshHostKeyVerificationStrategy=hudson.plugins.sshslaves.verifiers.ManuallyTrustedKeyVerificationStrategy, tcpNoDelay=true, trackCredentials=true&#125;</span><br><span class="line">[05/11/19 01:33:37] [SSH] Opening SSH connection to 192.168.1.112:22.</span><br><span class="line">[05/11/19 01:33:37] [SSH] SSH host key matches key seen previously for this host. Connection will be allowed.</span><br><span class="line">[05/11/19 01:33:37] [SSH] Authentication successful.</span><br><span class="line">[05/11/19 01:33:37] [SSH] The remote user&#x27;s environment is:</span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><table><thead><tr><th>Problem</th><th>how to fix</th></tr></thead><tbody><tr><td>[04&#x2F;22&#x2F;19 23:15:07] [SSH] WARNING: No entry currently exists in the Known Hosts file for this host. Connections will be denied until this new host and its associated key is added to the Known Hosts file.</td><td>ssh-keyscan HOSTNAME &gt;&gt; known_hosts</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;.ssh&#x2F;known_hosts [SSH] No Known Hosts file was found at &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;.ssh&#x2F;known_hosts.</td><td>changing the Host key verification strategy in LAUNCH METHOD from “Known Hosts file verification strategy” to “Manually trusted key verification strategy”</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Windows agent configuration</title>
      <link href="/2019/05/jenkins-windows-agent/"/>
      <url>/2019/05/jenkins-windows-agent/</url>
      
        <content type="html"><![CDATA[<h2 id="Prepare-Java-runtime"><a href="#Prepare-Java-runtime" class="headerlink" title="Prepare Java runtime"></a>Prepare Java runtime</h2><h3 id="1-Download-Java"><a href="#1-Download-Java" class="headerlink" title="1. Download Java"></a>1. <a href="https://www.java.com/en/download/">Download Java</a></h3><h4 id="2-Configure-Java-Windows-path"><a href="#2-Configure-Java-Windows-path" class="headerlink" title="2. Configure Java Windows path"></a>2. Configure Java Windows path</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=C:\Program Files\Java\jdk1.8.0_201</span><br><span class="line">CLASSPATH=.;%JAVA_HOME%\lib;%JAVA_HOME%\jre\lib</span><br></pre></td></tr></table></figure><h2 id="Create-Node"><a href="#Create-Node" class="headerlink" title="Create Node"></a>Create Node</h2><h3 id="1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine"><a href="#1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine" class="headerlink" title="1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine"></a>1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine</h3><h4 id="2-List-windows-agent-settings"><a href="#2-List-windows-agent-settings" class="headerlink" title="2. List windows agent settings"></a>2. List windows agent settings</h4><table><thead><tr><th>Items</th><th>Settings</th></tr></thead><tbody><tr><td>Name</td><td>window-build-machine</td></tr><tr><td>Description</td><td>used for windows build</td></tr><tr><td>of executors</td><td>1</td></tr><tr><td>Remote root directory</td><td>C:\agent</td></tr><tr><td>Labels</td><td>windows, build</td></tr><tr><td>Usage</td><td>Use this node as much as possible</td></tr><tr><td>Launch method</td><td>Let Jenkins control this Windows slave as a Windows service</td></tr><tr><td>Administrator user name</td><td>.\Administrator</td></tr><tr><td>Password</td><td>mypassword</td></tr><tr><td>Host</td><td>192.168.1.111</td></tr><tr><td>Run service as</td><td>Use Administrator account given above</td></tr><tr><td>Availability</td><td>Keep this agent online as much as paossible</td></tr></tbody></table><h4 id="3-Save-then-Connect"><a href="#3-Save-then-Connect" class="headerlink" title="3. Save then Connect"></a>3. Save then Connect</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2019-05-11 01:32:50] [windows-slaves] Connecting to 192.168.1.111</span><br><span class="line">Checking <span class="keyword">if</span> Java exists</span><br><span class="line">java -version returned 1.8.0.</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Copying jenkins-slave.xml</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Copying slave.jar</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Starting the service</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Waiting <span class="keyword">for</span> the service to become ready</span><br><span class="line">[2019-05-11 01:32:55] [windows-slaves] Connecting to port 52,347</span><br><span class="line">&lt;===[JENKINS REMOTING CAPACITY]===&gt;Remoting version: 3.29</span><br><span class="line">This is a Windows agent</span><br><span class="line">Agent successfully connected and online</span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><p>The following issues I met and how I fixed them.</p><h3 id="1-ERROR-Message-not-found-for-errorCode-0xC00000AC"><a href="#1-ERROR-Message-not-found-for-errorCode-0xC00000AC" class="headerlink" title="1. ERROR: Message not found for errorCode: 0xC00000AC"></a>1. ERROR: Message not found for errorCode: 0xC00000AC</h3><p>You need need to install JDK, and config JAVA environment variable.</p><h3 id="2-How-to-fix-add-windows-node-as-Windows-service-error"><a href="#2-How-to-fix-add-windows-node-as-Windows-service-error" class="headerlink" title="2. How to fix add windows node as Windows service error"></a>2. How to fix add windows node as Windows service error</h3><p>Ref to <a href="https://issues.jenkins-ci.org/browse/JENKINS-16418">JENKINS-16418</a>.</p><h3 id="3-org-jinterop-dcom-common-JIException-Message-not-found-for-errorCode-0x00000005"><a href="#3-org-jinterop-dcom-common-JIException-Message-not-found-for-errorCode-0x00000005" class="headerlink" title="3. org.jinterop.dcom.common.JIException: Message not found for errorCode: 0x00000005"></a>3. org.jinterop.dcom.common.JIException: Message not found for errorCode: 0x00000005</h3><p>Fixed permission for the following registry keys</p><ol><li>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Wow6432Node\CLSID{72C24DD5-D70A-438B-8A42-98424B88AFB8}</li><li>HKEY_CLASSES_ROOT\CLSID{76A64158-CB41-11D1-8B02-00600806D9B6}</li></ol><p>Steps to fix it</p><ul><li>Open ‘regedit’ (as Administrator), Find (Ctrl+F) the registry key: “{72C24DD5-D70A-438B-8A42-98424B88AFB8}” in HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Wow6432Node\CLSID</li><li>Right click and select ‘Permissions’, Change owner to administrators group (Advanced…).</li><li>Change permissions for administrators group. Grant Full Control。</li><li>Change owner back to TrustedInstaller (user is “NT Service\TrustedInstaller” on local machine)</li></ul><p>Repeat the above steps to fix permission for HKEY_CLASSES_ROOT\CLSID{76A64158-CB41-11D1-8B02-00600806D9B6}</p><p>Finally, Restart Remote Registry Service (Administrative Tools &#x2F; Services).</p><h3 id="4-ERROR-Unexpected-error-in-launching-an-agent"><a href="#4-ERROR-Unexpected-error-in-launching-an-agent" class="headerlink" title="4. ERROR: Unexpected error in launching an agent"></a>4. ERROR: Unexpected error in launching an agent</h3><p>This is probably a bug in Jenkins.</p><ol><li>Login remote machine and open Services find <code>jenkinsslave-C__agent</code></li><li>Set startup type: Automatic</li><li>Log On: select This account, type correct account and password</li><li>start jenkinsslave-C__agent</li></ol><h3 id="5-Caused-by-org-jinterop-dcom-common-JIRuntimeException-Message-not-found-for-errorCode-0x800703FA"><a href="#5-Caused-by-org-jinterop-dcom-common-JIRuntimeException-Message-not-found-for-errorCode-0x800703FA" class="headerlink" title="5. Caused by: org.jinterop.dcom.common.JIRuntimeException: Message not found for errorCode: 0x800703FA"></a>5. Caused by: org.jinterop.dcom.common.JIRuntimeException: Message not found for errorCode: 0x800703FA</h3><p>Slave under domain account, If your slave is running under a domain account and you get an error code 0x800703FA, change a group policy:</p><ol><li>open the group policy editor (gpedit.msc)</li><li>go to Computer Configuration-&gt;Administrative Templates-&gt;System-&gt; UserProfiles, “Do not forcefully unload the user registry at user logoff”</li><li>Change the setting from “Not Configured” to “Enabled”, which disables the new User Profile Service feature (‘DisableForceUnload’ is the value added to the registry)</li></ol><h3 id="6-ERROR-Message-not-found-for-errorCode-0xC0000001-Caused-by-jcifs-smb-SmbException-Failed-to-connect-0-0-0-0-lt-00-gt-x2F-10-xxx-xxx-xxx"><a href="#6-ERROR-Message-not-found-for-errorCode-0xC0000001-Caused-by-jcifs-smb-SmbException-Failed-to-connect-0-0-0-0-lt-00-gt-x2F-10-xxx-xxx-xxx" class="headerlink" title="6. ERROR: Message not found for errorCode: 0xC0000001 Caused by: jcifs.smb.SmbException: Failed to connect: 0.0.0.0&lt;00&gt;&#x2F;10.xxx.xxx.xxx"></a>6. ERROR: Message not found for errorCode: 0xC0000001 Caused by: jcifs.smb.SmbException: Failed to connect: 0.0.0.0&lt;00&gt;&#x2F;10.xxx.xxx.xxx</h3><p>Need to enable SMB1</p><ol><li>Search in the start menu for ‘Turn Windows features on or off’ and open it.</li><li>Find ‘SMB1.0&#x2F;CIFS File Sharing Support’ in the list of optional features that appears, and select the checkbox next to it.</li><li>Click OK and Windows will add the selected feature.</li></ol><p>You’ll be asked to restart your computer as part of this process.</p><h3 id="7-NET-Framework-2-0-or-later-is-required-on-this-computer-to-run-a-Jenkins-agent-as-a-Windows-service"><a href="#7-NET-Framework-2-0-or-later-is-required-on-this-computer-to-run-a-Jenkins-agent-as-a-Windows-service" class="headerlink" title="7. .NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service"></a>7. .NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service</h3><p>Need to upgrade your .NET Framework. Here is a <a href="https://shenxianpeng.github.io/2020/07/jenkins-windows-agent-connect-problem/">link</a> for update .NET Framework.</p><h3 id="6-more-connect-jenkins-agent-problem-on-windows"><a href="#6-more-connect-jenkins-agent-problem-on-windows" class="headerlink" title="6. more connect jenkins agent problem on windows"></a>6. more connect jenkins agent problem on windows</h3><p>Please refer to this link <a href="https://github.com/jenkinsci/windows-slaves-plugin/blob/master/docs/troubleshooting.adoc">https://github.com/jenkinsci/windows-slaves-plugin/blob/master/docs/troubleshooting.adoc</a></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从测试到开发的五个月</title>
      <link href="/2018/12/from-qa-to-dev/"/>
      <url>/2018/12/from-qa-to-dev/</url>
      
        <content type="html"><![CDATA[<p>每当工作闲暇，我都会时常想起好久没有更新微信公众号的文章了，总想等工作不忙的时候赶紧跟大家分享我从测试转开发这段时间的经历和感受，但工作总是有忙不完的忙，一刻都停不下来。</p><p>终于等到这一周有两天工作不是那么忙碌了，才决定将前几天写到一半的文章更新完。这是我这几个月下来感受最轻松的两天，暂时没有bug需要去调查和测试，不用去看十几年的C代码，终于有大块时间去写我负责的Python Client端代码了。这种写着代码，听着歌曲去重构，Debug，修改Unit Test Suite感觉真是幸福。</p><p>幸福的时光总是短暂的，今天就又来了两个Bug需要去调查 ε&#x3D;(´ο｀*)))唉…</p><p>又把我打回原形，调查大半天之后发现原来是QA测的不对，可以松口气晚上可以不用工作更新下微信公众号了。</p><p>这五个月来，几乎每天都是白天八小时，晚上继续背着电脑回家准备继续工作，周日偶尔去公司，经常在家学习。因为角色的转变，新的项目，需要学习的地方很多。从业务到技术，再加上产品发布在即，作为一名开发新人也肩负起Bug Fix的任务，十年前的代码，全英文的文档，复杂的系统，如果不全力一搏，真担心自己转型失败，那就太打脸了。</p><p>一天的工作忙碌和压力，使得我晚上总是吃的停不下来，吃饭是我一天当中最轻松的时刻。去年我跟别人打赌减肥赢奖金，我毫无怨念的拿到了第一的奖金，可是今年再和别人打赌减肥，至今我都还没开始，马上年底了，输掉奖金是毫无悬念的。总结下来，大概是因为今年工作太忙，工作压力大的缘故，使得我无法在八小时之余安心去继续练习吉他，做keep，年假还没来得及休，真是计划不如变化快。</p><p>虽然我还是个小开发，当角色变了，角度也会有变化。</p><h2 id="自动化测试是本分，DevOps是阶梯"><a href="#自动化测试是本分，DevOps是阶梯" class="headerlink" title="自动化测试是本分，DevOps是阶梯"></a>自动化测试是本分，DevOps是阶梯</h2><p>这几年下来相信你也会真切感受到，如果一名测试人员不懂自动化测试，不会写自动化测试脚本，不但难有升职或是跳槽的机会，很有可能会被企业所淘汰。</p><p>个人觉得DevOps是未来一段时间很多企业要走的路，一般的二线城市能把DevOps讲明白并且实施的人太少了，所以尽早掌握实施DevOps的人，就有机会成为DevOps教练或是测试架构师这样的角色。</p><h2 id="没有做好抗压的准备，不要去做开发"><a href="#没有做好抗压的准备，不要去做开发" class="headerlink" title="没有做好抗压的准备，不要去做开发"></a>没有做好抗压的准备，不要去做开发</h2><p>这几个月来遇到压力非常多，从刚开始的学习C语言，到C语言考核；从学习全英文的业务文档，到业务文档的分享（也是一种考核）；从调研C代码的代码覆盖率、Git分享，到调查并解决Bug；从每天的站立会汇报到每周与国外同事的例会。终于等到九月份，Title从Quality Assurance Engineer变成了Software Engineer，这其中的压力、痛苦和短暂的喜悦只有走过的人才知道。</p><h2 id="与年龄想匹配的能力"><a href="#与年龄想匹配的能力" class="headerlink" title="与年龄想匹配的能力"></a>与年龄想匹配的能力</h2><p>这点非常重要，如果现在问你，你与刚毕业两三年的同行年轻人有哪些优势？如果你不能肯定和清楚的说出自己优势的话，那就要好好反思一下了。</p><p>如果从开发角度来说，我现在就是与年龄不相匹配的能力，因此测试相关的技能以及DevOps相关知识依旧是我要好好掌握的功课。</p><h2 id="学好英语"><a href="#学好英语" class="headerlink" title="学好英语"></a>学好英语</h2><p>对于国内公司来说，工作上不会用到英语，但我想说如果想在测试和开发领域有更长远发展，英文非常重要。一般最流行开源的自动化测试框架、技术、DevOps相关的工具以及搜索最有效的解决问题的方案一般都是英文。如果你的英语不好，坚持一年半载去硬啃一手英文资料，形成习惯，受益终生。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最受欢迎的 Python 自动化测试框架推荐</title>
      <link href="/2018/09/most-popular-python-automated-testing-framework/"/>
      <url>/2018/09/most-popular-python-automated-testing-framework/</url>
      
        <content type="html"><![CDATA[<p>随着技术的进步和自动化技术的出现，市面上出现了一些自动化测试框架。只需要进行一些适用性和效率参数的调整，这些自动化测试框架就能够开箱即用，大大节省了开发时间。</p><p>本文整理了当前最受欢迎的 Python 自动化测试框架。</p><h2 id="Robot-Framework"><a href="#Robot-Framework" class="headerlink" title="Robot Framework"></a>Robot Framework</h2><p>这是最流行的开源 Python 自动化测试框架，表格式的测试数据语法和关键词驱动测试使得它在全球的测试人员中非常流行。它还拥有众多可用的工具和库，并且留有 API 扩展空间，使得这个框架非常先进和健壮。</p><p>Robot Framework 完全用 Python 开发，对于验收测试非常有用。该框架可以运行在 Java 和.NET 环境，同时支持跨平台，如 Windows、MacOS 和 Linux。它无疑是最易用的自动化测试框架，能允许开发者进行并行测试。</p><h2 id="RedwoodHQ"><a href="#RedwoodHQ" class="headerlink" title="RedwoodHQ"></a>RedwoodHQ</h2><p>这是一个流行的自动化测试工具，它之所以流行是因为它支持大部分流行的编程语言，如 Java、Python、C# 等。它还支持多个测试人员在一个平台上协作并运行测试用例。</p><p>RedwoodHQ 有一个内置的 IDE（集成开发环境），可以在那里创建、修改以及运行测试用例。RedwoodHQ 是对用户最友好或对测试人员最友好的平台之一，它关注一个重大项目的全部测试过程。</p><h2 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h2><p>这是一套 Javascript 行为驱动开发测试框架（BDD），不依赖于其他任何框架和 DOM，适用于任何使用 JavaScript 的地方。除了 JavaScript 之外，Jasmine 还被用于 Python 和 Ruby 自动化测试。</p><p>因此，使用 Jasmine 可以并行运行客户端测试用例和服务端测试用例。它是一个将客户端和服务端单元测试结合起来的完美的测试框架，而且被认为是测试领域的未来。</p><h2 id="Pytest"><a href="#Pytest" class="headerlink" title="Pytest"></a>Pytest</h2><p>如果项目比较小、复杂度比较低，Pytest 是最适合的自动化测试平台。大部分 Python 开发者用它来进行单元测试。它也具有 Robot Framework 所闻名的验收测试能力。</p><p>Pytest 最好的特性之一是，它提供了测试用例的详细失败信息，使开发者可以快速准确地改正问题。它还有各种可用插件来给现有测试技术和测试用例增加更多功能和多样性。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做好功能测试</title>
      <link href="/2018/08/how-to-do-functional-testing/"/>
      <url>/2018/08/how-to-do-functional-testing/</url>
      
        <content type="html"><![CDATA[<p>当你第一次开始接触测试这个行业的时候，首先听说的应该都是功能测试。</p><p>功能测试是通过一些测试手段来验证开发做出的代码是否符合产品需求。这些年功能测试好像不太受欢迎了，不少同学开始尝试自动化测试，测试开发等等，结果是功能测试、自动化测试、测试开发一样都没做好。</p><p>我们通常认为的功能测试是根据需求，采取以下测试流程：需求分析，用例编写，用例评审，提测验证，Bug回归验证，上线与线上回归等测试。如此日复一日，年复一年，可是等准备换工作的时候却得不到认可，你也遇到这种情况吗？</p><p>那么如何做好功能测试？功能测试用到哪些知识？有哪些相关的建议呢？</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>业务方在提出需求的时候，产品是要分析这个需求的价值，影响范围和实现代价的。在需求评审的时候，作为一个测试人员必须了解这次需求的内容，影响到哪些现有的功能，涉及到的操作系统或是类别等，然后准确的评估出工作量，防止因评估不足造成后期测试不充分。</p><p>再者，关注开发和产品的讨论，关注需求最后如何实现？其中做出的变动和难点就是测试的时候必须重点关注的部分，不能因为这些暂时和你没有关系就不去关注，防止欠债越来越多，不能做好充分的的测试。</p><p>第三，需求评审结束后，要求产品更新此次评审过程中的所有改动部分，同时确保之后的任何需求变化都及时更新。</p><p>第四，根据产品需求，同时与在会人员进行探讨，设计测试方案及时间安排，此时可以粗粒度考虑，时间上要合理。</p><h2 id="用例设计与评审"><a href="#用例设计与评审" class="headerlink" title="用例设计与评审"></a>用例设计与评审</h2><p>测试用例是每个测试人员工作过程中必须要完成的工作，它对测试工作起到指导作用，也是相关业务的一个文档沉淀。在以往面试的经验中，有许多人的测试用例写的没有章法，他们是凭着感觉去写测试用例，也没有从用户的角度来思考如何编写测试用例，对于测试用例设计较为常见的方法论也不清楚。</p><p>假如面试的时候给你一个场景：一个全新的App要发布，如果让你来测试，你能想到哪些测试方案？如果你只能想到如何去测试app的功能的话，作为功能测试人员就考虑不够全面。此时除了App的功能以外，还应关注App的兼容性，易用性，接口的功能测试和性能测试，数据的存储以及容灾情况等等都应考虑在内。</p><p>测试用例可设计为两类： 一类是开发自测和验收提测试标准的冒烟测试用例；一类是针对需求的全面测试用例。</p><p>编写完测试用例后主动联系相关人员进行用例评审，在评审过程中及时修改不合适的用例。</p><h2 id="测试流程，注重项目控制"><a href="#测试流程，注重项目控制" class="headerlink" title="测试流程，注重项目控制"></a>测试流程，注重项目控制</h2><p>项目的流程控制在需求开始的时候就应该重视起来，只是很多时候我们没有意识到这是测试的工作，有的是产品来控制，有的是专门的项目经理来控制。</p><p>测试人员需要有关注整体项目的意识。如果你不关注项目进度，什么时候提测什么时候开始测试，那么在测试过程中会遇到测试的内容和最初的需求不一致时候就会额外需要时间来解决，导致项目延期。另外主动关注项目，长此以往，你的这份主动性也会是你有效的竞争力。</p><p>需求一旦明确了由你来负责的时候，就要时刻来关注项目的情况。中间变更需求的时候，要评估是否影响项目进度，如果影响了重新进行排期。如果开发提测试晚了，是否影响上线时间，如果影响需要及时跟相关的人员沟通，发风险邮件，通知大家详细的情况。</p><p>同时在测试过程中，发现了bug需要详细描述问题，以方便开发去进行重现和修改。同时给bug准确分级，实时跟踪进度，保证项目高质量的按期完成。</p><h2 id="上线回归与项目总结"><a href="#上线回归与项目总结" class="headerlink" title="上线回归与项目总结"></a>上线回归与项目总结</h2><p>一个需求上线完成后，要及时进行线上回归，同时必须回归我们在需求评审的时候考虑到的可能影响到的原有的功能，以确保新功能完全上线成功。</p><p>在一个项目完成后，最好有一份个人总结报告，总结整个项目过程中遇到的问题及最后的解决办法，有哪些需要注意的问题？有什么可以借鉴的方案或是改进策略？项目中有没有通用性的问题等等。</p><h2 id="能力的总结和沉淀"><a href="#能力的总结和沉淀" class="headerlink" title="能力的总结和沉淀"></a>能力的总结和沉淀</h2><p>在找工作的时候，很多做功能测试多年的同学都遭遇过面试失败，究其原因，我觉得最核心的原因是：不具备相应工作年限应该具备的能力。</p><p>我们应该时常问自己一句话：离开现有的平台，我还有什么？如果仅仅是对现在公司业务和工具的熟悉，那是没有任何优势可言的。</p><p>对同类业务流程的掌握，项目的整体把控，快速了解业务并能根据需求选择测试方案，引入提高测试效率测试方案和工具，测试过程中遇到问题的预判和解决办法等才是功能测试人员必须具备的能力。</p><p>这些方面你做到了吗？不要抱怨功能测试如何如何，认清行业现状和自己的优缺点，做好自己的职业规划。</p><p>如果你不善于编码，那么做务专家也是功能测试人员一个很好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FunctionTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做了9年测试，我为何转开发？</title>
      <link href="/2018/07/why-I-move-to-development/"/>
      <url>/2018/07/why-I-move-to-development/</url>
      
        <content type="html"><![CDATA[<p>最近几个月以来一直没有更新公众号文章，是因为五月开始，因为项目原因我有机会转为开发，我非常珍惜这一机会，所以一直在努力学习开发相关的技能。</p><p>做了9年测试，我为何转开发？</p><p>从三年前我在心里就种下了做开发的种子，因为这些年做自动化测试的原因，在写了很多自动化测试用例代码之后，觉得自己还是喜欢写代码，我想在技术上有更深入的学习，无疑作为开发是最直接的办法，所以一直在努力多看、多写代码，一直准备着等待能成为开发测试工程师，或是开发工程师的那一天。</p><p>最近茹炳晟的一篇文章我看了也很受启发《我为何从开发转测试，并坚持了16年，我们正好是相反的职业历程，虽然如此，但是都是想往更好的职业发展方向上去努力，他在视频里提到了很多未来测试可以做的工作，不了解的可以去看看，可以开阔大家的思路，个人觉得良好的代码能力是做好工程师相关的工作基础。测试不是只要认真仔细的点点点就可以了，不是测试这工作更适合女生，不是做测试比做开发轻松，不是可以不思进取还能高枕无忧，做好测试同样需要比别人更多的努力才能看起来轻而易举。</p><p>因为我学的是毕业之后再没接触的C语言，在这几个月的学习过程中，深刻体会了做开发我还有太多未知的领域知识需要去学习，作为开发语言需要深入的学习，这跟学自动化测试不一样，初学自动化测试脚本语言可以边用边查边学，但C语言不一样，它需要很系统的去学，从数组，指针，结构体，链表，二叉树，数据机构都要一个个突破，了解算法、操作系统、编译原理等等。</p><p>虽然是转开发，但是作为测试出身，我会一如既往的关注测试。</p><p>希望通过角色的转变能让我有更全方位的角度来看待产品质量，测试相关的思考和技术，分享更多有价值的内容。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-print</title>
      <link href="/2018/07/C-print/"/>
      <url>/2018/07/C-print/</url>
      
        <content type="html"><![CDATA[<p>如何打印下面的字符？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$</span><br><span class="line">##</span><br><span class="line">$$$</span><br><span class="line">###</span><br><span class="line">$$$</span><br><span class="line">##</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> <span class="built_in">array</span>[] = &#123;<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">1</span>; row &lt;= <span class="number">7</span>; row++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hashNum = <span class="number">1</span>; hashNum &lt;= <span class="number">4</span> - <span class="built_in">abs</span>(<span class="number">4</span> - row); hashNum++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">array</span>[row % <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-print</title>
      <link href="/2018/07/c-print/"/>
      <url>/2018/07/c-print/</url>
      
        <content type="html"><![CDATA[<p>如何打印下面的字符？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$</span><br><span class="line">##</span><br><span class="line">$$$</span><br><span class="line">###</span><br><span class="line">$$$</span><br><span class="line">##</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> <span class="built_in">array</span>[] = &#123;<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> row = <span class="number">1</span>; row &lt;= <span class="number">7</span>; row++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> hashNum = <span class="number">1</span>; hashNum &lt;= <span class="number">4</span> - <span class="built_in">abs</span>(<span class="number">4</span> - row); hashNum++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">array</span>[row % <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C - Score Input Sort Show</title>
      <link href="/2018/05/C-score-input-sort-show/"/>
      <url>/2018/05/C-score-input-sort-show/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"><span class="comment">//Score Input Sort Show</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortAsc</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortDesc</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> scores[N];</span><br><span class="line">    input(scores);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[SORT ASC]\n&quot;</span>);</span><br><span class="line">    sortAsc(scores);</span><br><span class="line">    show(scores);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[SORT DESC]\n&quot;</span>);</span><br><span class="line">    sortDesc(scores);</span><br><span class="line">    show(scores);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">double</span> socres[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter %d student&#x27;s score: &quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        scanf_s(<span class="string">&quot;%lf&quot;</span>, &amp;socres[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortAsc</span><span class="params">(<span class="type">double</span> socres[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (socres[j] &gt; socres[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = socres[j];</span><br><span class="line">                    socres[j] = socres[j + <span class="number">1</span>];</span><br><span class="line">                    socres[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortDesc</span><span class="params">(<span class="type">double</span> socres[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (socres[j] &lt; socres[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = socres[j];</span><br><span class="line">                    socres[j] = socres[j + <span class="number">1</span>];</span><br><span class="line">                    socres[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">double</span> scores[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Chinese\tMath\tEnglish\tPhysics\tChemistry\t\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\t&quot;</span>, scores[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n********************************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C - Score Input Sort Show</title>
      <link href="/2018/05/c-score-input-sort-show/"/>
      <url>/2018/05/c-score-input-sort-show/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5</span></span><br><span class="line"><span class="comment">//Score Input Sort Show</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortAsc</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sortDesc</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">double</span>[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> scores[N];</span><br><span class="line">    input(scores);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[SORT ASC]\n&quot;</span>);</span><br><span class="line">    sortAsc(scores);</span><br><span class="line">    show(scores);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[SORT DESC]\n&quot;</span>);</span><br><span class="line">    sortDesc(scores);</span><br><span class="line">    show(scores);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(<span class="type">double</span> socres[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please enter %d student&#x27;s score: &quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        scanf_s(<span class="string">&quot;%lf&quot;</span>, &amp;socres[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortAsc</span><span class="params">(<span class="type">double</span> socres[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (socres[j] &gt; socres[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = socres[j];</span><br><span class="line">                    socres[j] = socres[j + <span class="number">1</span>];</span><br><span class="line">                    socres[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sortDesc</span><span class="params">(<span class="type">double</span> socres[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (socres[j] &lt; socres[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = socres[j];</span><br><span class="line">                    socres[j] = socres[j + <span class="number">1</span>];</span><br><span class="line">                    socres[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">double</span> scores[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;********************************************\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Chinese\tMath\tEnglish\tPhysics\tChemistry\t\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\t&quot;</span>, scores[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n********************************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-Language 计算图形的面积</title>
      <link href="/2018/05/calculate-graph-area/"/>
      <url>/2018/05/calculate-graph-area/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算图形的面积：</span></span><br><span class="line"><span class="comment">1. 圆的面积 = π * radius * radius</span></span><br><span class="line"><span class="comment">2. 矩形面积 = weight * height</span></span><br><span class="line"><span class="comment">3. 三角形面积 = 1/2 * weight * height</span></span><br><span class="line"><span class="comment">@author Xianpeng Shen</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">calcCircle</span><span class="params">(<span class="type">double</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">calcSquare</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">calcTriangle</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">validate</span><span class="params">(<span class="type">double</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> choice;                <span class="comment">// 用户选择</span></span><br><span class="line">    <span class="type">double</span> area;               <span class="comment">// 图形面积</span></span><br><span class="line">    <span class="type">double</span> radius;             <span class="comment">// 圆半径</span></span><br><span class="line">    <span class="type">double</span> weight, height;     <span class="comment">// 图形的宽和高</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. 圆\n2. 矩形\n3. 三角形\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;本系统支持三种图形面积计算，请选择：&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">while</span> (choice &gt; <span class="number">3</span> || choice &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;只能输入1~3整数，请重新输入：&quot;</span>);</span><br><span class="line">        scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf_s(<span class="string">&quot;%lf&quot;</span>, &amp;radius);</span><br><span class="line">            <span class="keyword">if</span> (!(validate(radius))) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不能为负数，请重新输入一个整数：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!validate(radius));</span><br><span class="line">        area = calcCircle(radius);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入矩形的长和宽：&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf_s(<span class="string">&quot;%lf%lf&quot;</span>, &amp;weight, &amp;height);</span><br><span class="line">            <span class="keyword">if</span> (!validate(weight) || !validate(height)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不能为负数，请重新输入两个正数：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!validate(weight) || !validate(height));</span><br><span class="line">        area = calcSquare(weight, height);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入三角形的底和高：&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf_s(<span class="string">&quot;%lf%lf&quot;</span>, &amp;weight, &amp;height);</span><br><span class="line">            <span class="keyword">if</span> (!validate(weight) || !validate(height)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;不能为负数，请重新输入两个正数：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!validate(weight) || !validate(height));</span><br><span class="line">        area = calcTriangle(weight, height);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;只能输入1~3整数，请重新输入：&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;图形面积为：%.2lf\n&quot;</span>, area);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">calcCircle</span><span class="params">(<span class="type">double</span> radius)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">calcSquare</span><span class="params">(<span class="type">double</span> weight, <span class="type">double</span> height)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> weight * height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">calcTriangle</span><span class="params">(<span class="type">double</span> weight, <span class="type">double</span> height)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> weight * height / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">validate</span><span class="params">(<span class="type">double</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span>;        <span class="comment">// 如果 num&gt;0, 返回一个非零值，表示真。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-Language 自定义函数</title>
      <link href="/2018/05/C-self-defining-function/"/>
      <url>/2018/05/C-self-defining-function/</url>
      
        <content type="html"><![CDATA[<p>求次幂函数power</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span>, <span class="type">int</span>)</span>;  <span class="comment">// 形式参数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf的%d次幂等于:%.2lf\n&quot;</span>, <span class="number">5.2</span>, <span class="number">2</span>, power(<span class="number">5.2</span>, <span class="number">2</span>));  <span class="comment">//实际参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span> num1, <span class="type">int</span> num2)</span> <span class="comment">// 形式参数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result *= num1; <span class="comment">// 累乘</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-Language 自定义函数</title>
      <link href="/2018/05/c-self-defining-function/"/>
      <url>/2018/05/c-self-defining-function/</url>
      
        <content type="html"><![CDATA[<p>求次幂函数power</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span>, <span class="type">int</span>)</span>;  <span class="comment">// 形式参数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf的%d次幂等于:%.2lf\n&quot;</span>, <span class="number">5.2</span>, <span class="number">2</span>, power(<span class="number">5.2</span>, <span class="number">2</span>));  <span class="comment">//实际参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span> num1, <span class="type">int</span> num2)</span> <span class="comment">// 形式参数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result *= num1; <span class="comment">// 累乘</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我眼中的高级测试工程师</title>
      <link href="/2018/05/senior-test-engineer/"/>
      <url>/2018/05/senior-test-engineer/</url>
      
        <content type="html"><![CDATA[<p>满足什么样的技术和经验才算高级工程师呢？说说我心中的高级工程师。</p><h3 id="具有丰富的行业测试经验"><a href="#具有丰富的行业测试经验" class="headerlink" title="具有丰富的行业测试经验"></a>具有丰富的行业测试经验</h3><p>最好有传统和互联网大公司工作经验，没有的话至少与这些公司的高级测试工程师有交流，了解他们是如何开展测试的，有助提高自己的眼界。</p><h3 id="有良好的测试基础"><a href="#有良好的测试基础" class="headerlink" title="有良好的测试基础"></a>有良好的测试基础</h3><p>掌握必要的测试理论，熟悉测试流程，需求分析，测试用例设计方法，根据项目实际需要制定测试方案。</p><h3 id="有丰富的业务能力"><a href="#有丰富的业务能力" class="headerlink" title="有丰富的业务能力"></a>有丰富的业务能力</h3><p>做好功能测试的前提是熟悉业务，能更好的站在产品的角度去设计测试用例，才能发现基本功能以外的问题，能给产品提出建设性的需求和意见。</p><h3 id="熟悉相关的测试工具"><a href="#熟悉相关的测试工具" class="headerlink" title="熟悉相关的测试工具"></a>熟悉相关的测试工具</h3><p>软件测试用到的相关工具非常多，了解和使用过这些工具，能更好的结合公司的要求及项目的需求来权衡引入哪些工具，提高工作效率。</p><ol><li>管理工具：比如JIRA，Testlink，Wiki，Confluence</li><li>持续集成：Jenkins，Bamboo，Travis CI等，了解他们之间的区别以及如何实施。</li><li>自动化测试：web和mobile平台之间是如何做自动化才测试的，用到哪些工具。了解Selenium，WebDriver，Appium，Robotium测试框架，以及用哪些语言去开发自动化测试用例，Python？Java？JavaScript？知道如何选择如何实施。</li><li>性能测试：了解Jmeter，LoadRunner这两个主要的性能测试工具，如何开展性能测试。</li></ol><h3 id="有良好的代码能力"><a href="#有良好的代码能力" class="headerlink" title="有良好的代码能力"></a>有良好的代码能力</h3><p>良好的代码能力可以快速掌握自动化测试，甚至可以开发测试平台。另外，当你跳槽到任何一家公司可以让你快速熟悉Java、Python、Javascript等任何语言编写的自动化测试用例。</p><h3 id="语言能力"><a href="#语言能力" class="headerlink" title="语言能力"></a>语言能力</h3><p>包括沟通能力和外语能力。沟通是一个测试人员在工作中必不可少的一项基本技能，良好的沟通会让开发人员了解问题所在，接受你的意见，从产品人员那里更好的了解需求。虽然只有在外企的时候才会用到英语，但是随着测试人员也需要学习很多的技术，开源社区的发展，很多第一手资料都是用英文写的，所以学好英文对于扩展和学习新知识有很大帮助。</p><p>所以说成为一名优秀的高级测试工程师所要求的能力还是很多的，一起努力吧！💪</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error: Permission denied (publickey)</title>
      <link href="/2018/05/permission-denied-publickey/"/>
      <url>/2018/05/permission-denied-publickey/</url>
      
        <content type="html"><![CDATA[<p>如果你想在一台电脑上配置 github 和 bitbucket，如何配置多个 SSH git key？<br>输入以下命令生成 SSH Key，注意在生成过程中最好输入新的名字，比如 id_rsa_github 和 id_rsa_bitbucket</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@youremail.com&quot;</span></span><br></pre></td></tr></table></figure><p>然后将生成的 SSH key 文件内容复制到对应网址的个人用户设置中即可。但是明明按照官方教程做的但是在 git clone 的时候还是遇到以下问题：<br>Error: Permission denied (publickey)<br>困恼了几天的错误终于解决了。</p><p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/">参看这个文档</a></p><p>由于我用的是macOS Sierra 10.13.3，<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent">文档这里</a>写着如果是macOS Sierra 10.12.2 及以后的版本需要在<br>~&#x2F;.ssh 目录下创建一个 config 文件<br>congfig 文件的具体配置如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host *</span><br><span class="line"> AddKeysToAgent <span class="built_in">yes</span></span><br><span class="line"> UseKeychain <span class="built_in">yes</span></span><br><span class="line"> IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line"> AddKeysToAgent <span class="built_in">yes</span></span><br><span class="line"> UseKeychain <span class="built_in">yes</span></span><br><span class="line"> IdentityFile ~/.ssh/id_rsa_bitbucket</span><br></pre></td></tr></table></figure><p>配置了这个文件之后，再次尝试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:shenxianpeng/blog.git</span><br></pre></td></tr></table></figure><p>可以 download 代码了，两个 SSH git 都好用了 : )</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinsfile 配置</title>
      <link href="/2018/04/Jenkinsfile-configure/"/>
      <url>/2018/04/Jenkinsfile-configure/</url>
      
        <content type="html"><![CDATA[<p>最近在做有关 DevOps Build 的时候，学习了 Jenkins 的 Pipeline 的功能，不得不提到的就是 Jenkinsfile 这个文件。</p><p>以下面是我配置的 Jenkinsfile 文件及简单说明，更多有关 <a href="https://jenkins.io/doc/book/pipeline/">Pipeline</a> 请看官方文档。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="comment">// Build 阶段</span></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Building...&#x27;</span></span><br><span class="line">                bat <span class="string">&#x27;npm run build webcomponent-sample&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单元测试阶段</span></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Unit Test&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Unit Testing...&#x27;</span></span><br><span class="line">                bat <span class="string">&#x27;npm test webcomponent-sample&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            post &#123;</span><br><span class="line">                success &#123;</span><br><span class="line">                <span class="comment">// 执行成功后生产报告</span></span><br><span class="line">                publishHTML <span class="attr">target</span>: [</span><br><span class="line">                    <span class="attr">allowMissing</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">alwaysLinkToLastBuild</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">keepAll</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">reportDir</span>: <span class="string">&#x27;components/webcomponent-sample/coverage/chrome&#x27;</span>,</span><br><span class="line">                    <span class="attr">reportFiles</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">                    <span class="attr">reportName</span>: <span class="string">&#x27;RCov Report&#x27;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// E2E 测试阶段</span></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;E2E Test&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                bat <span class="string">&#x27;node nightwatch e2e/demo/test.js&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Release&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Release...&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post &#123;</span><br><span class="line">        <span class="comment">// 执行成功是触发</span></span><br><span class="line">        success &#123;</span><br><span class="line">            mail <span class="attr">bcc</span>: <span class="string">&#x27;email@qq.com&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&quot;&lt;b&gt;Project: $&#123;env.JOB_NAME&#125; &lt;br&gt;Build Number: $&#123;env.BUILD_NUMBER&#125; &lt;br&gt;Build URL: $&#123;env.BUILD_URL&#125; &quot;</span>, <span class="attr">cc</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">charset</span>: <span class="string">&#x27;UTF-8&#x27;</span>, <span class="attr">from</span>: <span class="string">&#x27;jenkins@qq.com&#x27;</span>, <span class="attr">mimeType</span>: <span class="string">&#x27;text/html&#x27;</span>, <span class="attr">replyTo</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">subject</span>: <span class="string">&quot;SUCCESS: Project Name -&gt; $&#123;env.JOB_NAME&#125;&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行失败时触发</span></span><br><span class="line">        failure &#123;</span><br><span class="line">            mail <span class="attr">bcc</span>: <span class="string">&#x27;email@qq.com&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&quot;&lt;b&gt;Project: $&#123;env.JOB_NAME&#125; &lt;br&gt;Build Number: $&#123;env.BUILD_NUMBER&#125; &lt;br&gt;Build URL: $&#123;env.BUILD_URL&#125; &quot;</span>, <span class="attr">cc</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">charset</span>: <span class="string">&#x27;UTF-8&#x27;</span>, <span class="attr">from</span>: <span class="string">&#x27;jenkins@qq.com&#x27;</span>, <span class="attr">mimeType</span>: <span class="string">&#x27;text/html&#x27;</span>, <span class="attr">replyTo</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">subject</span>: <span class="string">&quot;FAILURE: Project Name -&gt; $&#123;env.JOB_NAME&#125;&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinsfile 配置</title>
      <link href="/2018/04/jenkinsfile-configure/"/>
      <url>/2018/04/jenkinsfile-configure/</url>
      
        <content type="html"><![CDATA[<p>最近在做有关 DevOps Build 的时候，学习了 Jenkins 的 Pipeline 的功能，不得不提到的就是 Jenkinsfile 这个文件。</p><p>以下面是我配置的 Jenkinsfile 文件及简单说明，更多有关 <a href="https://jenkins.io/doc/book/pipeline/">Pipeline</a> 请看官方文档。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="comment">// Build 阶段</span></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Building...&#x27;</span></span><br><span class="line">                bat <span class="string">&#x27;npm run build webcomponent-sample&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单元测试阶段</span></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Unit Test&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Unit Testing...&#x27;</span></span><br><span class="line">                bat <span class="string">&#x27;npm test webcomponent-sample&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            post &#123;</span><br><span class="line">                success &#123;</span><br><span class="line">                <span class="comment">// 执行成功后生产报告</span></span><br><span class="line">                publishHTML <span class="attr">target</span>: [</span><br><span class="line">                    <span class="attr">allowMissing</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">alwaysLinkToLastBuild</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">keepAll</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">reportDir</span>: <span class="string">&#x27;components/webcomponent-sample/coverage/chrome&#x27;</span>,</span><br><span class="line">                    <span class="attr">reportFiles</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">                    <span class="attr">reportName</span>: <span class="string">&#x27;RCov Report&#x27;</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// E2E 测试阶段</span></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;E2E Test&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                bat <span class="string">&#x27;node nightwatch e2e/demo/test.js&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">stage</span>(<span class="params"><span class="string">&#x27;Release&#x27;</span></span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Release...&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post &#123;</span><br><span class="line">        <span class="comment">// 执行成功是触发</span></span><br><span class="line">        success &#123;</span><br><span class="line">            mail <span class="attr">bcc</span>: <span class="string">&#x27;email@qq.com&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&quot;&lt;b&gt;Project: $&#123;env.JOB_NAME&#125; &lt;br&gt;Build Number: $&#123;env.BUILD_NUMBER&#125; &lt;br&gt;Build URL: $&#123;env.BUILD_URL&#125; &quot;</span>, <span class="attr">cc</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">charset</span>: <span class="string">&#x27;UTF-8&#x27;</span>, <span class="attr">from</span>: <span class="string">&#x27;jenkins@qq.com&#x27;</span>, <span class="attr">mimeType</span>: <span class="string">&#x27;text/html&#x27;</span>, <span class="attr">replyTo</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">subject</span>: <span class="string">&quot;SUCCESS: Project Name -&gt; $&#123;env.JOB_NAME&#125;&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行失败时触发</span></span><br><span class="line">        failure &#123;</span><br><span class="line">            mail <span class="attr">bcc</span>: <span class="string">&#x27;email@qq.com&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&quot;&lt;b&gt;Project: $&#123;env.JOB_NAME&#125; &lt;br&gt;Build Number: $&#123;env.BUILD_NUMBER&#125; &lt;br&gt;Build URL: $&#123;env.BUILD_URL&#125; &quot;</span>, <span class="attr">cc</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">charset</span>: <span class="string">&#x27;UTF-8&#x27;</span>, <span class="attr">from</span>: <span class="string">&#x27;jenkins@qq.com&#x27;</span>, <span class="attr">mimeType</span>: <span class="string">&#x27;text/html&#x27;</span>, <span class="attr">replyTo</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">subject</span>: <span class="string">&quot;FAILURE: Project Name -&gt; $&#123;env.JOB_NAME&#125;&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps 实践</title>
      <link href="/2018/04/devops-practice/"/>
      <url>/2018/04/devops-practice/</url>
      
        <content type="html"><![CDATA[<p>我想大多数的团队都面临这样的问题：</p><ol><li>发布周期长</li><li>开发和测试时间短</li><li>开发和测试是两个独立的团队</li><li>不稳定的交付质量</li><li>低收益难维护的UI自动化测试脚本</li><li>不合理的测试权重分配</li></ol><p>解决方法：</p><p>引入 DevOps 和分层自动化</p><ul><li>组件化产品<ul><li>产品开发引入模块化，数据驱动会使得产品更加容易实施 Unit，Server，UI 自动化测试</li></ul></li><li>优化工程师<ul><li>开发和测试在未来将没有界限，他们都是开发者，都会产品的质量和客户负责</li></ul></li><li>分层自动化<ul><li>更合理的测试权重分配，更底层的测试收益越高</li></ul></li><li>引入工具<ul><li>实施DevOps引入必要的工具，Bitbucket, Jenkins, Sonar, Pipelines, Docker, test framework …</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 命令备忘</title>
      <link href="/2018/02/git-command-cheat/"/>
      <url>/2018/02/git-command-cheat/</url>
      
        <content type="html"><![CDATA[<p>有些git命令总是记不住，在我这台 Ubuntu 使用 web 版 OneNote 不方便，那就把他们记到 Blog 里吧，需要的时候翻看一下。</p><p>git remote</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v                 <span class="comment"># 查看当前位置的远程代码库</span></span><br><span class="line">git remote remove origin      <span class="comment"># 取消远程仓库</span></span><br><span class="line">git remote add orgin git@github.com:shenxianpeng/nightwatch.git       <span class="comment"># 关联新的仓库</span></span><br></pre></td></tr></table></figure><p>git log</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 得到某一时段提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --after=<span class="string">&#x27;2017-12-04&#x27;</span> --before=<span class="string">&#x27;2017-12-08&#x27;</span> --author=xshen --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p>git tag</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a v1.6.700 -m <span class="string">&#x27;Release v1.6.700&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给前面的提交补上 tag</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git tag -a v1.6.700 -m <span class="string">&#x27;Release v1.6.700&#x27;</span> e454ad98862</span><br><span class="line"></span><br><span class="line">git push tag</span><br><span class="line">git push origin --tag</span><br></pre></td></tr></table></figure><p>设置 npm install 代理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy=http://10.17.201.60:8080       <span class="comment"># 设置代理</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy null                           <span class="comment"># 取消代理</span></span><br></pre></td></tr></table></figure><p>设置 cnpm</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install [name]</span><br><span class="line">cnpm <span class="built_in">sync</span> connect</span><br><span class="line">cnpm info connect</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git remove and add remote repository</title>
      <link href="/2018/02/remove-and-add-remote-repository/"/>
      <url>/2018/02/remove-and-add-remote-repository/</url>
      
        <content type="html"><![CDATA[<p>如果是通过 https 方式来 pull 和 push 代码，每次都要输入烦人的账号和密码<br>可以通过切成成 ssh 方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消远程仓库</span></span><br><span class="line">git remote remove origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程仓库</span></span><br><span class="line">git remote add origin git@github.com:shenxianpeng/blog.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 使用 VS code 进行调试</title>
      <link href="/2018/02/debug-nightwatch-in-vs/"/>
      <url>/2018/02/debug-nightwatch-in-vs/</url>
      
        <content type="html"><![CDATA[<p>除了通过增加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;===========&#x27;</span>)</span><br></pre></td></tr></table></figure><p>来调试 Nightwatch 代码，如何通过配置 VS code 来 Debug Nightwatch 代码？</p><p>Ctrl+Shift+D 打开 Debug 界面，配置如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible Node.js debug attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;npm test&quot;</span>,</span><br><span class="line">            <span class="string">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/node_modules/nightwatch/bin/runner.js&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;tests/DQA/DQA-221/login.js&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 持续集成问题</title>
      <link href="/2018/01/nightwatch-CI-problem/"/>
      <url>/2018/01/nightwatch-CI-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="在持续集成执行自动化测试用例时候会遇到那些问题呢"><a href="#在持续集成执行自动化测试用例时候会遇到那些问题呢" class="headerlink" title="在持续集成执行自动化测试用例时候会遇到那些问题呢"></a>在持续集成执行自动化测试用例时候会遇到那些问题呢</h2><ol><li>运行时间过长</li><li>因为某些错误程序卡住</li><li>异常处理</li></ol><h2 id="针对以上三种情况，通过下面的三种方式进行解决"><a href="#针对以上三种情况，通过下面的三种方式进行解决" class="headerlink" title="针对以上三种情况，通过下面的三种方式进行解决"></a>针对以上三种情况，通过下面的三种方式进行解决</h2><h3 id="运行时间过长-E2E-测试脚本中难免需要时间等待，例如"><a href="#运行时间过长-E2E-测试脚本中难免需要时间等待，例如" class="headerlink" title="运行时间过长, E2E 测试脚本中难免需要时间等待，例如"></a>运行时间过长, E2E 测试脚本中难免需要时间等待，例如</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">pause</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 尽可能将说有的 pause 换成 wait，例如：</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">element</span>(<span class="string">&#x27;@columns&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">visible</span>.<span class="title function_">before</span>(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;@columns&#x27;</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h3 id="因为某些错误程序卡住-在-TestCase-中进行验证时，例如"><a href="#因为某些错误程序卡住-在-TestCase-中进行验证时，例如" class="headerlink" title="因为某些错误程序卡住, 在 TestCase 中进行验证时，例如"></a>因为某些错误程序卡住, 在 TestCase 中进行验证时，例如</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>.<span class="property">length</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 如果只想标注失败，继续执行后面的代码，则需将 assert 换成 verify</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">veriry</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>.<span class="property">length</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 waitForElementVisible 中加 abortOnFailure 参数，当设置为 false，在 wait 超时时，就会标志为 false 继续继续执行</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;@columns&#x27;</span>, <span class="number">5000</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以通过在 nightwatch.conf.js 设置全局变量</span></span><br><span class="line"><span class="attr">abortOnAssertionFailure</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>当程序执行运行一次时，程序运行正常，一旦遇到异常时，下次执行就回出错。<br>例如：比如邀请账号登录系统的操作。管理员添加一个新用户，然后用这个新用户登录，之后管理员删除这个账户。但如果删除这个账号失败时，下次执行这个程序再邀请这个账号时就会提示这个账号存在的，可能这个时候这个程序就执行不下去了。这个时候就需要考虑这些异常情况处理，保证程序能够良好的执行下去。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 打开多个窗口</title>
      <link href="/2018/01/open-multiple-windows/"/>
      <url>/2018/01/open-multiple-windows/</url>
      
        <content type="html"><![CDATA[<p>如果想打开两个窗口并控制那个窗口怎么办？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = process.<span class="property">env</span>.<span class="property">BASE_URL</span>, newWindow;</span><br><span class="line"></span><br><span class="line">client.<span class="title function_">execute</span>(<span class="keyword">function</span> (<span class="params">url, newWindow</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(url, newWindow, <span class="string">&#x27;height=768,width=1024&#x27;</span>);</span><br><span class="line">&#125;, [url, newWindow]);</span><br><span class="line"></span><br><span class="line">client.<span class="title function_">window_handles</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">verify</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>.<span class="property">length</span>, <span class="number">2</span>, <span class="string">&#x27;There should be 2 windows open&#x27;</span>);</span><br><span class="line">    newWindow = result.<span class="property">value</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">switchWindow</span>(newWindow);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 上使用 VPN</title>
      <link href="/2017/12/use-vpn-on-ubuntu/"/>
      <url>/2017/12/use-vpn-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>如何在 Ubuntu 上连接 Cisco AnyConnect VPN</p><p>打开Terminal，执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /sbin/modprobe tun</span><br></pre></td></tr></table></figure><p>安装OpenConnect，执行:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openconnect</span><br></pre></td></tr></table></figure><p>连接VPN，执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo openconnect yourvpn.example.com</span><br></pre></td></tr></table></figure><p>将提示你输入用户名和密码，输入争取后，VPN连接成功。</p><p>原文 <a href="http://ubuntuhandbook.org/index.php/2014/11/connect-cisco-anyconnect-vpn-ubuntu/">请点击</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 上安装 VS Code</title>
      <link href="/2017/12/install-VS-Code-on-ubuntu/"/>
      <url>/2017/12/install-VS-Code-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>在 Ubuntu 下面安装 Visual Studio Code</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-make</span><br><span class="line">umake web visual-studio-code</span><br></pre></td></tr></table></figure><p>亲测，好用。</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch wait For Text</title>
      <link href="/2017/12/nightwatch-wait-for-text/"/>
      <url>/2017/12/nightwatch-wait-for-text/</url>
      
        <content type="html"><![CDATA[<p>在使用 Nightwatch 做自动化测试的时候，会遇到这样一种情况：<br>创建一个 query, 等待这个query的状态从 Wait 变成 Running 最后到 Available 时再执行操作。<br>Nightwatch 并没有提供这样的方法，可以通过下面的方式解决。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Wait for text&#x27;</span>: <span class="keyword">function</span> <span class="title function_">waitForText</span>(<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> query = client.<span class="property">page</span>.<span class="title function_">query</span>();</span><br><span class="line">    query.<span class="title function_">navigate</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        client.<span class="title function_">getText</span>(<span class="string">&#x27;status&#x27;</span>, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result.<span class="property">value</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;Available&#x27;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                client.<span class="title function_">pause</span>(<span class="number">1000</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 元素判断</title>
      <link href="/2017/12/nightwatch-element-check/"/>
      <url>/2017/12/nightwatch-element-check/</url>
      
        <content type="html"><![CDATA[<h3 id="Nightwatch-元素常用验证方法"><a href="#Nightwatch-元素常用验证方法" class="headerlink" title="Nightwatch 元素常用验证方法"></a>Nightwatch 元素常用验证方法</h3><p>验证元素的值信息</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .<span class="property">assert</span>.<span class="title function_">containsText</span>(<span class="string">&#x27;@errorMessage&#x27;</span>, <span class="string">&#x27;The email address is invalid.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>验证元素是否可用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .<span class="property">assert</span>.<span class="title function_">attributeEquals</span>(<span class="string">&#x27;@continueBtn&#x27;</span>, <span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br></pre></td></tr></table></figure><p>等待元素可用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .<span class="property">expect</span>.<span class="title function_">element</span>(<span class="string">&#x27;@signInBtn&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">visible</span>.<span class="title function_">before</span>(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">andesFormSection</span><br><span class="line">    <span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;signInBtn&#x27;</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>等待元素呈现</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .<span class="property">expect</span>.<span class="title function_">element</span>(<span class="string">&#x27;@signInBtn&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">present</span>.<span class="title function_">before</span>(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">andesFormSection</span><br><span class="line">    <span class="title function_">waitForElementPresent</span>(<span class="string">&#x27;signInBtn&#x27;</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 得到和验证 cookies</title>
      <link href="/2017/12/nightwatch-handle-cookies/"/>
      <url>/2017/12/nightwatch-handle-cookies/</url>
      
        <content type="html"><![CDATA[<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>验证登录 cookies 和清除 access_token。测试用例设计如下</p><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><p>登录系统时，不选择记住我按钮，验证 cookies</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">client.<span class="title function_">getCookies</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>.<span class="property">length</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">0</span>].<span class="property">name</span>, <span class="string">&#x27;domain&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">1</span>].<span class="property">name</span>, <span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">2</span>].<span class="property">name</span>, <span class="string">&#x27;access_token&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录系统时，选择记住我按钮，验证 cookies</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">client.<span class="title function_">getCookies</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>.<span class="property">length</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">0</span>].<span class="property">name</span>, <span class="string">&#x27;domain&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">1</span>].<span class="property">name</span>, <span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">2</span>].<span class="property">name</span>, <span class="string">&#x27;identifier&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">3</span>].<span class="property">name</span>, <span class="string">&#x27;access_token&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>[<span class="number">4</span>].<span class="property">name</span>, <span class="string">&#x27;persistent_token&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录系统时，不选择记住我按钮，删除 cookies</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> accesstoken;</span><br><span class="line">client.<span class="title function_">getCookies</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    accesstoken = result.<span class="property">value</span>[<span class="number">2</span>].<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">deleteCookie</span>(accesstoken, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// refresh current page, logout</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">refresh</span>().<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;div.login-form&#x27;</span>, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录系统时，选择记住我按钮，删除 cookies</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> accesstoken;</span><br><span class="line">client.<span class="title function_">getCookies</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    accesstoken = result.<span class="property">value</span>[<span class="number">3</span>].<span class="property">name</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">deleteCookie</span>(accesstoken, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// refresh current page, still login</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">refresh</span>().<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;.andes-header&#x27;</span>, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="如何知道登录都有哪些参数"><a href="#如何知道登录都有哪些参数" class="headerlink" title="如何知道登录都有哪些参数"></a>如何知道登录都有哪些参数</h2><p>事先在手动测试的时候打开 chrome 浏览器，然后按 F12，登录时查看 Network。</p><p>以成功百度登录时为例，可以看到 Headers 里的参数，我们可以通过验证这些参数来确定登录成功了。</p><p>这样我们就可以这些参数来实现对 cookie，token 等等参数进行自动化测试的验证。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>度过工作中挫折心结</title>
      <link href="/2017/11/weather-setbacks-at-work/"/>
      <url>/2017/11/weather-setbacks-at-work/</url>
      
        <content type="html"><![CDATA[<h3 id="对于一个不善于言表的我工作中遇到过"><a href="#对于一个不善于言表的我工作中遇到过" class="headerlink" title="对于一个不善于言表的我工作中遇到过"></a>对于一个不善于言表的我工作中遇到过</h3><ul><li>过度理解在与同事之间的Email和Chat中的意思；</li><li>同事之间的沟通中出现的分歧事后还会继续琢磨；</li><li>十分关注自己的工作失与得在上级领导中的看法。</li></ul><h3 id="以下方式对我来说还比较有效的"><a href="#以下方式对我来说还比较有效的" class="headerlink" title="以下方式对我来说还比较有效的"></a>以下方式对我来说还比较有效的</h3><ul><li>让自己的精力更多的聚焦在工作上；</li><li>工作中对事不对人，做对的事情；</li><li>眼光放长远，不忘初心，专注应该做的事情上；</li><li>领导说的一句“向前看”我印象深刻，过去的就过去了，别再纠结，向前看。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Change Hexo code highlight</title>
      <link href="/2017/11/change-hexo-code-highlight/"/>
      <url>/2017/11/change-hexo-code-highlight/</url>
      
        <content type="html"><![CDATA[<p>Hexo 默认主题代码高亮是黑色的，如果想换个风格？具体操作如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 highlight.styl 文件，路径</span></span><br><span class="line">themes/landscape/source/css/_partial/highlight.styl</span><br></pre></td></tr></table></figure><p>修改默认代码主题 Tomorrow Night Eighties</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">highlight-background = #2d2d2d</span><br><span class="line">highlight-current-line = #<span class="number">393939</span></span><br><span class="line">highlight-selection = #<span class="number">515151</span></span><br><span class="line">highlight-foreground = #cccccc</span><br><span class="line">highlight-comment = #<span class="number">999999</span></span><br><span class="line">highlight-red = #f2777a</span><br><span class="line">highlight-orange = #f99157</span><br><span class="line">highlight-yellow = #ffcc66</span><br><span class="line">highlight-green = #99cc99</span><br><span class="line">highlight-aqua = #66cccc</span><br><span class="line">highlight-blue = #6699cc</span><br><span class="line">highlight-purple = #cc99cc</span><br></pre></td></tr></table></figure><p>为主题 Tomorrow</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">highlight-background = #ffffff</span><br><span class="line">highlight-current-line = #efefef</span><br><span class="line">highlight-selection = #d6d6d6</span><br><span class="line">highlight-foreground = #4d4d4c</span><br><span class="line">highlight-comment = #8e908c</span><br><span class="line">highlight-red = #c82829</span><br><span class="line">highlight-orange = #f5871f</span><br><span class="line">highlight-yellow = #eab700</span><br><span class="line">highlight-green = #718c00</span><br><span class="line">highlight-aqua = #3e999f</span><br><span class="line">highlight-blue = #4271ae</span><br><span class="line">highlight-purple = #8959a8</span><br></pre></td></tr></table></figure><p>更多详情请参考 <a href="https://github.com/chriskempson/tomorrow-theme">tomorrow-theme</a> 修改。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 测试用例失败继续执行</title>
      <link href="/2017/10/test-case-fails-to-continue-execution/"/>
      <url>/2017/10/test-case-fails-to-continue-execution/</url>
      
        <content type="html"><![CDATA[<p>自动化测试中，有一个验证点，当测试通过时，后面的测试脚本继续执行；<br>当出现异常时，你希望标记出来这个错误，但不影响后面的测试脚本执行，在 Nightwatch 中如何做？</p><p>下面的一段代码验证 home 页面的 body 是否显示。这里如果显示则将验证点置为 false，如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">home.<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;@body&#x27;</span>, <span class="number">3000</span>, <span class="literal">true</span>, <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">value</span>) &#123;</span><br><span class="line">        <span class="comment">// 测试报告中会显示失败，但是会继续执行后面的测试脚本</span></span><br><span class="line">        client.<span class="property">verify</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证点通过</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Pass&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：这里如果用 assert，程序就会中断执行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中断执行</span></span><br><span class="line">client.<span class="property">assert</span>.<span class="title function_">equal</span>(result.<span class="property">value</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 验证元素是否存在</title>
      <link href="/2017/10/nightwatch-cdetermine-if-element-exists/"/>
      <url>/2017/10/nightwatch-cdetermine-if-element-exists/</url>
      
        <content type="html"><![CDATA[<h2 id="元素常用验证方法"><a href="#元素常用验证方法" class="headerlink" title="元素常用验证方法"></a>元素常用验证方法</h2><p>验证元素的值信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .assert.containsText(<span class="string">&#x27;@errorMessage&#x27;</span>, <span class="string">&#x27;The email address is invalid.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>验证元素是否可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .assert.attributeEquals(<span class="string">&#x27;@continueBtn&#x27;</span>, <span class="string">&#x27;disabled&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br></pre></td></tr></table></figure><p>等待元素可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .expect.element(<span class="string">&#x27;@signInBtn&#x27;</span>).to.be.visible.before(5000);</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">andesFormSection</span><br><span class="line">    waitForElementVisible(<span class="string">&#x27;signInBtn&#x27;</span>, 5000);</span><br></pre></td></tr></table></figure><p>等待元素呈现</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .expect.element(<span class="string">&#x27;@signInBtn&#x27;</span>).to.be.present.before(5000);</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">andesFormSection</span><br><span class="line">    waitForElementPresent(<span class="string">&#x27;signInBtn&#x27;</span>, 5000);</span><br></pre></td></tr></table></figure><h2 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h2><p>用 Nightwatch 去判断一个 element 是否存在，如果存在执行如下操作，如果不存在做另外的操作。<br>这个在 Java 编写的自动化测试用例中可以用 try catch 可以解决，Nightwatch 试过不行。<br>另外看到 stackoverflow 上有通过判断 (result.status !&#x3D; -1)，没有解决我的问题。</p><p>最后这样解决的，请看下面 tutorial.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tutorialCommands = &#123;</span><br><span class="line">  <span class="attr">notShowTutorial</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tutorialSection = <span class="variable language_">this</span>.<span class="property">section</span>.<span class="property">tutorial</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">api</span>.<span class="title function_">element</span>(<span class="string">&#x27;css selector&#x27;</span>, <span class="string">&#x27;.andes-dialog md-icon&#x27;</span>, <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (result.<span class="property">value</span> &amp;&amp; result.<span class="property">value</span>.<span class="property">ELEMENT</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pause</span>(<span class="number">2000</span>);</span><br><span class="line">        tutorialSection.<span class="title function_">click</span>(<span class="string">&#x27;@doNotShowBtn&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pause</span>(<span class="number">2000</span>);</span><br><span class="line">        tutorialSection.<span class="title function_">click</span>(<span class="string">&#x27;@closeBtn&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;no tutorial exists&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">commands</span>: [tutorialCommands],</span><br><span class="line">  <span class="attr">url</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`https://shenxianpeng.github.io/`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">sections</span>: &#123;</span><br><span class="line">    <span class="attr">tutorial</span>: &#123;</span><br><span class="line">      <span class="attr">selector</span>: <span class="string">&#x27;.andes-dialog&#x27;</span>,</span><br><span class="line">      <span class="attr">elements</span>: &#123;</span><br><span class="line">        <span class="attr">closeBtn</span>: <span class="string">&#x27;md-icon&#x27;</span>,</span><br><span class="line">        <span class="attr">doNotShowBtn</span>: <span class="string">&#x27;md-checkbox .md-container&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：这里的元素不能通过 section 的方式引用，例如这样，怀疑这是 Nightwatch 的 bug。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tutorialSection.<span class="property">api</span>.<span class="title function_">element</span>(<span class="string">&#x27;css selector&#x27;</span>, <span class="string">&#x27;@closeBtn&#x27;</span>, <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 配置 rss 订阅功能</title>
      <link href="/2017/10/configure-rss-subscription-for-hexo/"/>
      <url>/2017/10/configure-rss-subscription-for-hexo/</url>
      
        <content type="html"><![CDATA[<p>安装 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>如果国内 npm 安装不成功，可以先安装 <a href="https://npm.taobao.org/">cnpm</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 _config.yml 中配置这个插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客文章中插入图片</title>
      <link href="/2017/10/insert-img-in-hexo-article/"/>
      <url>/2017/10/insert-img-in-hexo-article/</url>
      
        <content type="html"><![CDATA[<p>如果想在 Hexo 文章中插入图片怎么做？</p><p>网络上很容易搜到 Markdown 的语法是 <code>![Alt text](/path/to/img.jpg)</code><br>前面 Alt text 是指在图片下面命名，后面是图片的地址。那么如何配置？</p><p>经过几番尝试得知：在你的 hexo 项目根目录下面 source 创建一个 images 文件夹，<br>把你以后用的到图片都放在这个目录下面就 OK 了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![示例图1](../images/color.png)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 自动化测试中比较颜色</title>
      <link href="/2017/10/nightwatch-auto-compare-colors/"/>
      <url>/2017/10/nightwatch-auto-compare-colors/</url>
      
        <content type="html"><![CDATA[<p>在做 Nightwatch 自动化测试中，出现需要比较颜色的时候如何来做？<br>基本的思路是首先需要取到这个 element 的颜色值，然后跟预期的颜色进行对比。<br>比如我要取下面这个会话窗口的颜色，选中这个图标，按 F12，查看这个图标的属性。发现Angular中的颜色属性不是 Elements 下，是在 Styles 下面，如何取到这个颜色值？</p><p><img src="/2017/10/nightwatch-auto-compare-colors/color.png" alt="element"></p><p>这里会用到 getCssProperty 这个方法，具体如何使用，请看如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">getChatColor</span>: <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> chat = <span class="string">&#x27;[ng-click=&quot;show()&quot;]&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getCssProperty</span>(<span class="string">&#x27;@chat&#x27;</span>, <span class="string">&#x27;background-color&#x27;</span>, <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">      <span class="title function_">cb</span>(result.<span class="property">value</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>将上面的 getChatColor command 代码放到一个叫 chat.js 的 page 下面，然后在测试用例中这样调用这个 command</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;Test get color&#x27;</span>: <span class="keyword">function</span> (<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> chat = client.<span class="property">page</span>.<span class="title function_">chat</span>();</span><br><span class="line">    <span class="keyword">let</span> chatColor;</span><br><span class="line">    chat.<span class="title function_">navigate</span>();</span><br><span class="line"></span><br><span class="line">    chat.<span class="title function_">getChatColor</span>(<span class="keyword">function</span>(<span class="params">color</span>) &#123;</span><br><span class="line">        chatColor = color;</span><br><span class="line">    &#125;);</span><br><span class="line">    client.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        client.<span class="property">assert</span>.<span class="title function_">equal</span>(chatColor, <span class="string">&#x27;rgba(50, 104, 152, 1)&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截图中看到的 background color 是 rgb(50, 104, 152), 但是 getChatColor 返回指是rgba，rgb 和 rgba 之间需要转化一下，a 表示透明度，取值0~1之间。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 获取接口返回数据</title>
      <link href="/2017/10/nightwatch-get-interface-return-data/"/>
      <url>/2017/10/nightwatch-get-interface-return-data/</url>
      
        <content type="html"><![CDATA[<p>如何在 JavaScript 通过接口自动生成和返回接口数据呢？</p><p>在自动化测试中常常遇到接口测试，或是使用的数据需要从接口返回，那么如何来实现这种情况？<br>例如我想通过 generateLicense 方法生成一个 license，然后在之后的自动化测试用例中使用这个生成的 license 继续做下一步的操作，例如注册 license 等。</p><p>在 license.js 文件中创建一个 generateLicense 方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">generateLicense</span>: <span class="keyword">function</span>(<span class="params">success, day, capacity, code</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> options = &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://generate-license/api/licenses&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>:</span><br><span class="line">        &#123; <span class="string">&#x27;postman-token&#x27;</span>: <span class="string">&#x27;d849e636-58c9-2705&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cache-control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">        <span class="attr">authorization</span>: <span class="string">&#x27;Basic YWRtaW46U&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">body</span>: &#123; <span class="attr">company</span>: <span class="string">&#x27;Google&#x27;</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&#x27;5012962@qq.com&#x27;</span>,</span><br><span class="line">        <span class="attr">expiration</span>: day,</span><br><span class="line">        <span class="attr">capacity</span>: capacity,</span><br><span class="line">        <span class="attr">phone</span>: <span class="string">&#x27;89262518&#x27;</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;Dalian&#x27;</span>,</span><br><span class="line">        <span class="attr">code</span>: code &#125;,</span><br><span class="line">    <span class="attr">json</span>: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(options, <span class="keyword">function</span> (<span class="params">error, response</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="title function_">success</span>(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>对上面生成的 license 进行赋值，之后的测试用例中就可以使用 MVlicense 了。<br>使用中会涉及到异步操作，异步如何操作请看之前的文章。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> license = client.<span class="property">page</span>.<span class="title function_">license</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">MVlicense</span>;</span><br><span class="line">license.<span class="title function_">generateLicense</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="title class_">MVlicense</span> = response.<span class="property">body</span>.<span class="property">data</span>.<span class="property">license</span>.<span class="property">license</span>;</span><br><span class="line">&#125;, <span class="number">365</span>, <span class="number">10</span>, <span class="string">&#x27;MV&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 异步操作</title>
      <link href="/2017/10/nightwatch-async-operation/"/>
      <url>/2017/10/nightwatch-async-operation/</url>
      
        <content type="html"><![CDATA[<p>在自动化测试中常常需要通过一个 command（或 function ）中返回的值来进行下一步的操作，JavaScript 与 JAVA 在调用返回值时有所不同，JS 中需要特定的写法来进行这种异步操作。</p><p>以下面的 get License 数量为例，首先需要 get 一次 License 数量，然后进行一些列操作之后，再一次 get License 数量，比较这两次 License 数量值。</p><p>getLicenseNum 方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">getLicenseNum</span>: <span class="keyword">function</span> (<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> license = <span class="string">&#x27;ul &gt; li.license-id.ng-binding&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">waitForElementVisible</span>(license, <span class="number">5000</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">api</span>.<span class="title function_">elements</span>(<span class="string">&#x27;css selector&#x27;</span>, license, <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="title function_">cb</span>(result.<span class="property">value</span>.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对两次得到的 License num 进行比较：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;JavaScrpit asynchronous operation&#x27;</span>: <span class="keyword">function</span>(<span class="params">client</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> license = client.<span class="property">page</span>.<span class="title function_">license</span>();</span><br><span class="line">    <span class="keyword">let</span> num1, num2;</span><br><span class="line">    license.<span class="title function_">getLicenseNum</span>(<span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        num1 = num;</span><br><span class="line">    &#125;);</span><br><span class="line">    license.<span class="title function_">getLicenseNum</span>(<span class="keyword">function</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        num2 = num;</span><br><span class="line">    &#125;);</span><br><span class="line">    client.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        client.<span class="property">assert</span>.<span class="title function_">equal</span>(num2 - num1, <span class="number">1</span>, <span class="string">&#x27;license number increase 1&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 模拟键盘操作</title>
      <link href="/2017/10/nightwatch-keyboard/"/>
      <url>/2017/10/nightwatch-keyboard/</url>
      
        <content type="html"><![CDATA[<p>在自动化测试中有这样一个场景，在一个输入框中输入一串字符，然后执行敲回车键，验证搜索结果，以 Google 搜索为例，代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;search nightwatch and click ENTER key&#x27;</span>: <span class="keyword">function</span>(<span class="params">client</span>) &#123;</span><br><span class="line"> client</span><br><span class="line">    .<span class="title function_">url</span>(<span class="string">&#x27;http://google.com&#x27;</span>)</span><br><span class="line">    .<span class="property">expect</span>.<span class="title function_">element</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">to</span>.<span class="property">be</span>.<span class="property">present</span>.<span class="title function_">before</span>(<span class="number">1000</span>);</span><br><span class="line"> client.<span class="title function_">setValue</span>(<span class="string">&#x27;input[type=text]&#x27;</span>, [<span class="string">&#x27;nightwatch&#x27;</span>, client.<span class="property">Keys</span>.<span class="property">ENTER</span>])</span><br><span class="line">    .<span class="title function_">pause</span>(<span class="number">1000</span>)</span><br><span class="line">    .<span class="property">assert</span>.<span class="title function_">containsText</span>(<span class="string">&#x27;#main&#x27;</span>, <span class="string">&#x27;Night Watch&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>不能翻墙的可换成 baidu，相应的 element 需要改一下否则以上代码会报错。<br>上面的代码是执行一个按键操作，如果想做组合键操作怎么办呢？比如在 Google 搜索框中输入 nightwatch，然后按 ctrl+a 组合键来进行全选操作。还是以 Google 搜索为例，代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">client.<span class="title function_">setValue</span>(<span class="string">&#x27;input[type=text]&#x27;</span>,[<span class="string">&#x27;nightwatch&#x27;</span>, [client.<span class="property">Keys</span>.<span class="property">CONTROL</span>, <span class="string">&#x27;a&#x27;</span>]])</span><br></pre></td></tr></table></figure><p>其他的组合键操作以此类推。</p><p>其他按键 Keys 如下：<br>Keys:<br>{ NULL,<br>  CANCEL,<br>  HELP,<br>  BACK_SPACE,<br>  TAB,<br>  CLEAR,<br>  RETURN,<br>  ENTER,<br>  SHIFT,<br>  CONTROL,<br>  ALT,<br>  PAUSE,<br>  ESCAPE,<br>  SPACE,<br>  PAGEUP,<br>  PAGEDOWN,<br>  END,<br>  HOME,<br>  LEFT_ARROW,<br>  UP_ARROW,<br>  RIGHT_ARROW,<br>  DOWN_ARROW,<br>  ARROW_LEFT,<br>  ARROW_UP,<br>  ARROW_RIGHT,<br>  ARROW_DOWN,<br>  INSERT,<br>  DELETE,<br>  SEMICOLON,<br>  EQUALS,<br>  NUMPAD0,<br>  NUMPAD1,<br>  NUMPAD2,<br>  NUMPAD3,<br>  NUMPAD4,<br>  NUMPAD5,<br>  NUMPAD6,<br>  NUMPAD7,<br>  NUMPAD8,<br>  NUMPAD9,<br>  MULTIPLY,<br>  ADD,<br>  SEPARATOR,<br>  SUBTRACT,<br>  DECIMAL,<br>  DIVIDE,<br>  F1,<br>  F2,<br>  F3,<br>  F4,<br>  F5,<br>  F6,<br>  F7,<br>  F8,<br>  F9,<br>  F10,<br>  F11,<br>  F12,<br>  COMMAND,<br>  META<br>},</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatchjs 中文参考手册</title>
      <link href="/2017/10/nightwatchjs-guilde/"/>
      <url>/2017/10/nightwatchjs-guilde/</url>
      
        <content type="html"><![CDATA[<p><a href="https://shenxianpeng.gitbooks.io/nightwatch-js-cn/content/">Nightwatch中文参考手册</a></p><h2 id="为何放弃-JAVA-改用-Nightwatch"><a href="#为何放弃-JAVA-改用-Nightwatch" class="headerlink" title="为何放弃 JAVA 改用 Nightwatch"></a>为何放弃 JAVA 改用 Nightwatch</h2><ul><li>项目初期用的是 Java + Selenium + TestNG 自动化框架，由于之前推行的力度不够，加上繁重的功能测试和频繁的项目变更导致自动化测试代码跟不上开发的进度，大量的测试代码无法正在运行。</li><li>我们的产品采用的 AngularJS 开发，前端开发人员对js对Java更精通，以后的自动化脚本开发也可以一起编写。</li><li>Nightwatch 的环境配置和执行简单，只要 npm install、npm test 就可以运行起来，方便配置，运行和继续集成。</li></ul><p>因此，与其维护不可用的代码不如好好整理，不如在项目领导和开发的强力支持下重新开始做一套可用的 E2E 测试。</p><h2 id="关于-Nightwatch-翻译"><a href="#关于-Nightwatch-翻译" class="headerlink" title="关于 Nightwatch 翻译"></a>关于 Nightwatch 翻译</h2><p>学习中发现 Nightwatch 没有比较完整的中文参考手册，因此决定学习之余翻译下官方文档，如有问题，欢迎纠正。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JST automation framework</title>
      <link href="/2017/07/JST-automation/"/>
      <url>/2017/07/JST-automation/</url>
      
        <content type="html"><![CDATA[<p>This automation framework was design by Java+Selenium+TestNG when I did automation test work, so I called it JST-automation.</p><h2 id="Directory-Structure"><a href="#Directory-Structure" class="headerlink" title="Directory Structure"></a>Directory Structure</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├──JST-automation</span><br><span class="line">|   ├── src</span><br><span class="line">|   |   └── main</span><br><span class="line">|   |   |   └── java</span><br><span class="line">|   |   |   |   └── com</span><br><span class="line">|   |   |   |   |   └── action</span><br><span class="line">|   |   |   |   |   |   └── case01</span><br><span class="line">|   |   |   |   |   |   └── case02</span><br><span class="line">|   |   |   |   |   |   └── common</span><br><span class="line">|   |   |   |   |   |   └── .....</span><br><span class="line">|   |   |   |   |   └── config</span><br><span class="line">|   |   |   |   |   |   └── UserConfig</span><br><span class="line">|   |   |   |   |   |   └── DriverConfig</span><br><span class="line">|   |   |   |   |   |   └── UrlConfig</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   |   |   |   |   └── page</span><br><span class="line">|   |   |   |   |   |   └── LoginPage</span><br><span class="line">|   |   |   |   |   |   └── HomePage</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   |   |   |   |   └── verify</span><br><span class="line">|   |   |   |   |   |   └── case01</span><br><span class="line">|   |   |   |   |   |   └── case02</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   └── testng.xml</span><br><span class="line">|   └── pom.xml</span><br></pre></td></tr></table></figure><ol><li>action: all test function write in this folder</li><li>config: all config file put in this folder</li><li>page: all page element write in this folder</li><li>verify: all verify test case write in this folder</li><li>testng.xml: test suit file, config all verify test case in this file</li><li>pom.xml: configuration need package files</li></ol><h2 id="Download-Code"><a href="#Download-Code" class="headerlink" title="Download Code"></a>Download Code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shenxianpeng/JST-automation.git</span><br></pre></td></tr></table></figure><p>Any suggestion and questions please feel free to create issue <a href="https://github.com/shenxianpeng/JST-automation/issues">here</a></p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> TestNG </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JST automation framework</title>
      <link href="/2017/07/jst-automation/"/>
      <url>/2017/07/jst-automation/</url>
      
        <content type="html"><![CDATA[<p>This automation framework was design by Java+Selenium+TestNG when I did automation test work, so I called it JST-automation.</p><h2 id="Directory-Structure"><a href="#Directory-Structure" class="headerlink" title="Directory Structure"></a>Directory Structure</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├──JST-automation</span><br><span class="line">|   ├── src</span><br><span class="line">|   |   └── main</span><br><span class="line">|   |   |   └── java</span><br><span class="line">|   |   |   |   └── com</span><br><span class="line">|   |   |   |   |   └── action</span><br><span class="line">|   |   |   |   |   |   └── case01</span><br><span class="line">|   |   |   |   |   |   └── case02</span><br><span class="line">|   |   |   |   |   |   └── common</span><br><span class="line">|   |   |   |   |   |   └── .....</span><br><span class="line">|   |   |   |   |   └── config</span><br><span class="line">|   |   |   |   |   |   └── UserConfig</span><br><span class="line">|   |   |   |   |   |   └── DriverConfig</span><br><span class="line">|   |   |   |   |   |   └── UrlConfig</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   |   |   |   |   └── page</span><br><span class="line">|   |   |   |   |   |   └── LoginPage</span><br><span class="line">|   |   |   |   |   |   └── HomePage</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   |   |   |   |   └── verify</span><br><span class="line">|   |   |   |   |   |   └── case01</span><br><span class="line">|   |   |   |   |   |   └── case02</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   └── testng.xml</span><br><span class="line">|   └── pom.xml</span><br></pre></td></tr></table></figure><ol><li>action: all test function write in this folder</li><li>config: all config file put in this folder</li><li>page: all page element write in this folder</li><li>verify: all verify test case write in this folder</li><li>testng.xml: test suit file, config all verify test case in this file</li><li>pom.xml: configuration need package files</li></ol><h2 id="Download-Code"><a href="#Download-Code" class="headerlink" title="Download Code"></a>Download Code</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shenxianpeng/JST-automation.git</span><br></pre></td></tr></table></figure><p>Any suggestion and questions please feel free to create issue <a href="https://github.com/shenxianpeng/JST-automation/issues">here</a></p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> TestNG </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2017/07/hello-hexo/"/>
      <url>/2017/07/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-4-Steps"><a href="#Quick-Start-4-Steps" class="headerlink" title="Quick Start(4 Steps)"></a>Quick Start(4 Steps)</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span>    <span class="comment">#Create a new post</span></span><br><span class="line">hexo server               <span class="comment">#Run server</span></span><br><span class="line">hexo generate             <span class="comment">#Generate static files</span></span><br><span class="line">hexo deploy               <span class="comment">#Deploy to remote sites</span></span><br></pre></td></tr></table></figure><h2 id="Also"><a href="#Also" class="headerlink" title="Also"></a>Also</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span>    <span class="comment">#Create a new post</span></span><br><span class="line">hexo server               <span class="comment">#Run server</span></span><br><span class="line">hexo generate -deplogy    <span class="comment">#Generate then deploy</span></span><br><span class="line">or</span><br><span class="line">hexo g -d                 <span class="comment">#Simple write this</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
