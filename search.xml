<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通过 generic 插件来实时获取 Bitbucket Repository Events</title>
      <link href="/2020/08/bitbucket-pull-request-event/"/>
      <url>/2020/08/bitbucket-pull-request-event/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Event）。比如获取仓库的 Pull Request ID 等。</p><p>使用过 Jenkins Multi-branch pipeline Job 的用户知道，这个 Job 类型的环境变量中可以得到 Pull Request 的相关信息如下</p><p><img src="/2020/08/bitbucket-pull-request-event/pull-request-env.png" alt="Multi-branch pipeline Job 环境变量"></p><p>为了获取这个变量需要创建这种类型的 Job，并且可能需要 clone 该仓库的代码，有点杀鸡宰牛的意思，看起来并不是一个特别恰当的办法。</p><p>如何通过创建一个普通的 Jenkins Job 就能实时获取 Bitbucket 仓库以及 Pull Request 事件呢？通过以下功能和插件可以实现。</p><ol><li>配置 Bitucket 的 Webhook</li><li>通过 Jenkins generic-webhook-trigger 插件接收 Webhook 的 Event 事件</li></ol><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><h3 id="设置-Bitbucket-Webhook"><a href="#设置-Bitbucket-Webhook" class="headerlink" title="设置 Bitbucket Webhook"></a>设置 Bitbucket Webhook</h3><p>在需要监听的 Bitbucket 仓库中创建一个 webhook，如下：</p><ul><li>Name: <code>test-demo</code></li><li>URL: <code>http://JENKINS_URL/generic-webhook-trigger/invoke?token=test-demo</code></li></ul><p><img src="/2020/08/bitbucket-pull-request-event/webhook.png" alt="创建一个 webhook"></p><p>备注：Bitbucket 中还有一个另外一个设置项，根据我的测试，该设置项 <strong>Post Webhooks</strong> 与上面的 <strong>Webhooks</strong> 都能实现本文要实现的功能。</p><h3 id="2-配置-Jenkins-Job"><a href="#2-配置-Jenkins-Job" class="headerlink" title="2. 配置 Jenkins Job"></a>2. 配置 Jenkins Job</h3><p><img src="/2020/08/bitbucket-pull-request-event/generic-config.png" alt="配置 Jenkins: 获取 Pull Request ID"></p><p>想获取其他 Event 信息，比如 PR title, commit 等，请参考这个链接 <a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin/blob/master/src/test/resources/org/jenkinsci/plugins/gwt/bdd/bitbucket-server/bitbucket-server-pull-request.feature" target="_blank" rel="noopener">bitbucket-server-pull-request.feature</a>，按照上面的设置即可。</p><p><img src="/2020/08/bitbucket-pull-request-event/generic-config-token.png" alt="配置 Jenkins: token"></p><p>这里的 token 值 <code>test-demo</code> 可以任意起名，但要与 Bitbucket event URL 中的 token 保持一致。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li><p>在 Jenkins Job pipeline 里添加了这个代码片段 <code>echo pr_id is ${pr_id}</code> 用来检查输出 Pull Request ID 是否如预期。</p></li><li><p>然后在配置好的 Bitbucket 仓库下面创建一个 Pull Request</p></li><li><p>Jenkins Job 被 Pull Request Open 事件自动触发并执行了</p><p> <img src="/2020/08/bitbucket-pull-request-event/auto-trigger-jenkins.png" alt="Jenkins 通过事件别自动执行"></p></li><li><p>通过 Jenkins 的输出日志看到成功获取到了这个 Pull Request ID 值</p><p> <img src="/2020/08/bitbucket-pull-request-event/pull-request-id.png" alt="获取到了 Pull Request ID"></p></li></ol><h2 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用"></a>有什么用</h2><p>假如你有个程序，可以通过传入的 Pull Request ID 通过 Bitbucket REST API 来获取并分析指定 Pull Request 的内容的。比如获取相关文件的历史记录，从而知道这些文件谁修改的最多以及这次修改涉及到了哪些 Jira 单号，从而做一些 Review 或是执行回归测试的推荐等等。</p><p>有了这个 PR ID 就可以通过 Jenkins 来自动触发去执行你程序了。</p><p>以上的这种方法适合不想或是不知道如何监听 Git 服务器（Bitbucket、GitHub 或是 GitLab 等）事件而需要要单独创建一个服务而准备的。如果你有什么很好的实践，期待你的留言分享。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Bitbucket </tag>
            
            <tag> webhook </tag>
            
            <tag> generic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何把自己的 Python 代码打包发布到 PyPI</title>
      <link href="/2020/08/release-to-pypi/"/>
      <url>/2020/08/release-to-pypi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用 Python 编程的人都知道，Python 的优势之一就是有大量的第三方库，通常使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install xxxx</span><br></pre></td></tr></table></figure><p>就可以轻松下载，真是即酷炫又方便，你有没有想过这个是怎么实现的？最近正好赶上又开始写 Python 借此机会分享一下。</p><a id="more"></a><h2 id="什么是-PyPI"><a href="#什么是-PyPI" class="headerlink" title="什么是 PyPI"></a>什么是 PyPI</h2><p>PyPI 是 The Python Package Index 的缩写，意思是 Python 包索引仓库，用来查找、安装和发布 Python 包。</p><p>PyPI 又两个环境，一个是测试环境 <a href="https://test.pypi.org/" target="_blank" rel="noopener">TestPyPI</a> 和 正式环境 <a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>如果想熟悉 PyPI 发布工具和发布流程可以使用测试环境 <a href="https://test.pypi.org/" target="_blank" rel="noopener">TestPyPI</a> </li><li>如果已经熟悉了 PyPI 的发布工具和流程可以直接使用正式环境 <a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a></li><li>TestPyPI 和 PyPI 需要单独注册，即在正式环境注册了，如果去使用测试环境也同样需要注册。</li><li>已经写好并且可以正常使用的项目/库/方法。</li></ol><h2 id="如何发布"><a href="#如何发布" class="headerlink" title="如何发布"></a>如何发布</h2><p>官方有详细的示例和文档，这里就不多做演示和翻译了，攒点耐心看完 <a href="https://packaging.python.org/tutorials/packaging-projects/" target="_blank" rel="noopener">https://packaging.python.org/tutorials/packaging-projects/</a></p><p>全当（一定要）锻炼自己的阅读官方有英文文档的能力，你就完全了解如何发布项目到 PyPI 上面了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发布一个 Python 项目到 PyPI 还是非常简单的，遵照上述的步骤，每个人都可以将上面的项目发布到自己账户下。</p><p>只是有一个问题需要注意一下，作为公司一般情况下开发者无需担心 License 的选择，一般公司是由法务部门完成版权相关问题。如果是个人开发者，就需要了解一下 License，推荐一篇<a href="https://mp.weixin.qq.com/s?src=11&timestamp=1595346878&ver=2474&signature=Ct0nRc7fLMxhZV2OPjsc2bDnBkBZIclPMI1qRGdFf3hbWM3Q-*jPYwVknsa9laPvvgyRgXTXUHGZcigY0HLZNtUHMkYbDjCQp6LYMNT5zN9s5zNM44BxismGcfbxNA7D&new=1" target="_blank" rel="noopener">文章</a>供参考。</p><p>另外如果是正式版本，在发布还需要注意版本号的选择。如果是功能很简答，完成度也不高，建议从 0.0.1 版本开始。如果是一个完成度很高的产品了，那么可以从 1.0.0 版本开始。</p><p>至此，一个 Python 代码就可以正式发布了，你可以使用 <code>pip install xxx</code> 来安装了，想想就觉得自己特别酷。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Release </tag>
            
            <tag> PyPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Annual work summary from 2019.03 - 2020.07</title>
      <link href="/2020/07/annual-work-summary/"/>
      <url>/2020/07/annual-work-summary/</url>
      
        <content type="html"><![CDATA[<p>Summarize what did I do from 2019.03 to 2020.07 when I became a Build Release/DevOps engineer.</p><h2 id="Build-automation"><a href="#Build-automation" class="headerlink" title="Build automation"></a>Build automation</h2><ul><li>Support all server windows platform build manual to auto.</li><li>Support clents build from manual to auto.</li><li>Switch linux/unix build from Bamboo to Jenkins.</li><li>Support all platforms branches/Pull Request build.</li><li>Provide auto builld as self-service for developer, no need to involve build engineer, they could build themselves.</li></ul><h2 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a>Integration</h2><ul><li><p>Integration with Jenkins</p><ul><li>Self-service installation.</li><li>Blackduck, polaris integaration.</li><li>Git stats, analyze Bitbucket data with Elastic stack.</li><li>Monitor legacy build machines status.</li><li>Product escrow, sync xdemo, provide NFS and SYNC mvopensrc, update Bitbucket Jenkins build status, etc.</li></ul></li><li><p>Integration with JFrog Ariifactory</p><ul><li>Establish deploy strategy and directory structure organization.</li><li>Handle artifacts(build, etc) with different maturity.</li></ul></li></ul><h2 id="Infrastructure-management"><a href="#Infrastructure-management" class="headerlink" title="Infrastructure management"></a>Infrastructure management</h2><ul><li>Manage Jenkins for setting, update and backup.</li><li>Ariifactory artifacts cleanup, retention, backup.</li><li>Git branches/hooks management.</li><li>VMs tracking, management build machines.</li></ul>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员的自我修养 —— Git 提交信息规范</title>
      <link href="/2020/07/commit-messages-specification/"/>
      <url>/2020/07/commit-messages-specification/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用 Git 提交代码的时候，在与他人合作同时开发的项目，一个良好的提交信息规范我总结有三个好处：</p><ol><li>有助于其他人接手，进行 Bug 修复或是新功能的添加都是很好的参考</li><li>并且良好的规范有助于自动化脚本的识别</li><li>最后这也是体现了一个程序员的自我修养</li></ol><p>因此对于一个长期发展的项目必须要有良好的信息信息规范的约定。先看两个例子：</p><a id="more"></a><p>随便找的一个没有任何规范的提交信息</p><p><img src="/2020/07/commit-messages-specification/bad-commit-message.png" alt="没有规范的 Git 提交信息"></p><p>这是 Angular 有规范的提交信息，并且遵循了常规提交 <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">Conventional Commits</a></p><p><img src="/2020/07/commit-messages-specification/angular-commit-message.png" alt="有规范的 Git 提交信息"></p><h2 id="如何治理提交信息规范"><a href="#如何治理提交信息规范" class="headerlink" title="如何治理提交信息规范"></a>如何治理提交信息规范</h2><p>在治理提交信息规范问题上，有两个解决办法。</p><ol><li>为团队制定出提交信息的规范，让团队了解和遵守。</li><li>在提交代码时，设置 Git Hook 把不规范的提交排除在外，比如提示用户当前提交的信息不符合规范。</li></ol><h2 id="制定规范"><a href="#制定规范" class="headerlink" title="制定规范"></a>制定规范</h2><p>制定合理的规范，最便捷的方法是参考软件行业里是否有大家通用的规范。经过一番搜索，虽然行业里并没有绝对的提交信息规范，但我看到有很多项目已经在采用这个 <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">Conventional Commits</a> 的提交信息规范，比较有代表性的是 Auglar 及很多项目也在使用。</p><p>在此基础上，总结了适合自己团队的规范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">JIRA-1234 feat: support for async execution</span><br><span class="line"></span><br><span class="line">^-------^ ^--^: ^-------------------------^</span><br><span class="line">|         |     |</span><br><span class="line">|         |     +--&gt; Summary in present tense.</span><br><span class="line">|         |</span><br><span class="line">|         +--&gt; Type: feat, fix, docs, style, refactor, perf, test or chore.</span><br><span class="line">|</span><br><span class="line">+--&gt; Jira ticket number</span><br><span class="line"></span><br><span class="line">Type</span><br><span class="line"></span><br><span class="line">Must be one of the following:</span><br><span class="line"></span><br><span class="line">    feat: A new feature</span><br><span class="line">    fix: A bug fix</span><br><span class="line">    docs: Documentation only changes</span><br><span class="line">    style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</span><br><span class="line">    refactor: A code change that neither fixes a bug nor adds a feature</span><br><span class="line">    perf: A code change that improves performance</span><br><span class="line">    test: Adding missing or correcting existing tests</span><br><span class="line">    chore: Changes to the build process, .gitignore or auxiliary tools and libraries such as documentation generation, etc.</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p>Conventional Commits <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noopener">https://www.conventionalcommits.org/en/v1.0.0/</a></p></blockquote><blockquote><p>Angular Commit Guidelines: <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits" target="_blank" rel="noopener">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits</a></p></blockquote><blockquote><p>Projects Using Conventional Commits: <a href="https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits" target="_blank" rel="noopener">https://www.conventionalcommits.org/en/v1.0.0/#projects-using-conventional-commits</a></p></blockquote><h2 id="设置-Git-Hooks"><a href="#设置-Git-Hooks" class="headerlink" title="设置 Git Hooks"></a>设置 Git Hooks</h2><p>以 Bitbuket 为例，开启 <a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket" target="_blank" rel="noopener">Yet Another Commit Checker</a> 这个免费插件。</p><p><img src="/2020/07/commit-messages-specification/git-hook.png" alt></p><p>这里的设置很多，我举两个不那么严格的常见设置。</p><p><img src="/2020/07/commit-messages-specification/commit-checker-setting.png" alt="Commit Checker 设置"></p><ol><li>开启 Require Valid JIRA Issue(s)</li></ol><p>这个功能的开启，在开发者提交信息的时候如果不含有相关联的 Jira 单号，或是这个单号不存在，那么都会提交失败。这样就强制将代码与 Jira 单号进行关联。</p><ol start="2"><li>设置 Commit Message Regex（提交信息正则表达式）</li></ol><p>我设置了 <code>[A-Z\-0-9]+ .*</code> 这样的正则表达式，这就要求比如有以这样的 Jira 单号</p><p>ABCD-1234，并且在写描述之前必须与 Jira 单号之前有一个空格。</p><p>通过以上两个功能的设置，就将提交信息限定为如下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCD-1234 Balabala......</span><br></pre></td></tr></table></figure><p>当然还有更复杂的正则表达式，比如如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^[A-Z-0-9]+ .*(?&lt;type&gt;chore|ci|docs|feat|fix|perf|refactor|revert|style|test|Bld|¯\\_\(ツ\)_\&#x2F;¯)(?&lt;scope&gt;\(\w+\)?((?&#x3D;:\s)|(?&#x3D;!:\s)))?(?&lt;breaking&gt;!)?(?&lt;subject&gt;:\s.*)?|^(?&lt;merge&gt;Merge.* \w+)|^(?&lt;revert&gt;Revert.* \w+)</span><br></pre></td></tr></table></figure><p>看起来是不是很头晕，这个正则表达式限制了开头必须以 JIRA 单号开始，中间有一个空格，然后是 type 类型，之后是描述。</p><p>这里一并考虑了如果是 Merge 或是 Revert 会产生其他的描述信息。如果你要在你的 Git 仓库里也要设置这样严格并且复杂的正则表达式，建议一定要经过充分的考虑和测试才把它正式放入你的 Git 仓库的 Hooks 设置中。</p><p>以上正则的测试结果供你参考 <a href="https://regex101.com/r/5m0SIJ/3" target="_blank" rel="noopener">https://regex101.com/r/5m0SIJ/3</a> （这正则表达式还有一个 Bug 你注意到了吗）</p><h3 id="分支正则表达式"><a href="#分支正则表达式" class="headerlink" title="分支正则表达式"></a>分支正则表达式</h3><p>这里顺便提一下，Bitbucket Hooks 还是支持分支正则表达式。如果设置了相应的正则表达后，开发在创建分支时，只有符合正则表达式的条件才能创建分支。</p><p><img src="/2020/07/commit-messages-specification/branch-regex.png" alt></p><p>分享一个我写的分支正则表达式 <code>^(bugfix|feature|release|diag|hotfix).*|(master)|(.*-dev)</code></p><p>这里限制了所有的分支必须以 bugfix, feature, release, diag, hotfix 开头或是也可以这样的 v1.0-dev 这种类型，提供一个编写和测试正则表达式的网址：<a href="https://regex101.com" target="_blank" rel="noopener">https://regex101.com</a> 。</p><p>你可根据的项目不同来创建属于自己项目的分支正则表达式。</p><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><p><img src="/2020/07/commit-messages-specification/commit-checker.png" alt="Yet Another Commit Checker 插件的其他设置选项"></p><p>另外还有一些其他的设置，比如关联的 Jira 单子必须处于什么样的状态，这个可以防止已经关闭的 Jira 单子，开发还往上面偷偷的修改代码，这时候测试也发现不了。</p><p>还有 Require Matching Committer Email 和 Require Matching Committer Name 来限定开发者必须配置好与登录用户名和邮箱相匹配的用户名和邮箱，来规范提交信息里显示的用户名和邮箱，也方便进行 Git 信息的统计等后续数据的收集。</p><p>更多请参考 <a href="https://mohamicorp.atlassian.net/wiki/spaces/DOC/pages/1442119700/Yet+Another+Commit+Checker+YACC+for+Bitbucket" target="_blank" rel="noopener">Yet Another Commit Checker 插件文档</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Specification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 执行 Shell 如果返回值不为0，作业(Job)停止并失败怎么办？</title>
      <link href="/2020/07/jenkins-tips-3/"/>
      <url>/2020/07/jenkins-tips-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 3》—— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用 Jenkins pipeline 时，如果 Shell 的返回值不为零（也就是 Shell 命令执行时有错误），Jenkins Job 默认会标记当前的 stage 为失败。因此整个 Job 也会失败。</p><p>在有些时候我们希望 Shell 虽然执行失败返回的不为零，但希望Jenkins Job 在执行成功后，要显示成功状态。</p><a id="more"></a><p>例如：通过 Shell 命令列出以 <code>fail-list-</code> 开头的文件，如果存在则通知用户，如果不存在则不通知用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a fail-list-*</span><br></pre></td></tr></table></figure><p>默认情况是执行如上命令导致了整个 Job 失败。</p><p><img src="/2020/07/jenkins-tips-3/error.png" alt="失败 log"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>经过一番调查，使用以下代码片段解决了如上问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">"Send notification"</span>) &#123;</span><br><span class="line">  steps &#123;</span><br><span class="line">    script &#123;</span><br><span class="line">      def fileExist = sh script: <span class="string">"ls -a fail-list-* &gt; /dev/null 2&gt;&amp;1"</span>, returnStatus: <span class="keyword">true</span></span><br><span class="line">      <span class="keyword">if</span> ( fileExist == <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// send email to user</span></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// if not found fail-list-* file, make build status success.</span></span><br><span class="line">        currentBuild.result = <span class="string">'SUCCESS'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在执行 Shell 时，添加了 <code>returnStatus: true</code>。这是将状态码返回并保存起来，然后与 0 进行比较。</p><p>如果不等于 0，如果不添加 <code>currentBuild.result = &#39;SUCCESS&#39;</code>，Jenkins 的整个 Job 还是会标记为失败状态。添加后，人为的忽略错误，将 Job 状态置为成功。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to fix &quot;.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service&quot;</title>
      <link href="/2020/07/jenkins-windows-agent-connect-problem/"/>
      <url>/2020/07/jenkins-windows-agent-connect-problem/</url>
      
        <content type="html"><![CDATA[<p>When I upgrade Jenkins 2.176.3 to Jenkins 2.235.1, my Windows agnent can not connect with master successfully. and out come this warining message “.NET Framework 2.0 or later is required on this computer to run a Jenkins agent as a Windows service”.</p><a id="more"></a><p>This means I need to upgrade my Windows agnet .NET Framework. Here are steps about how to upgade .NET Framework to version 3.5.</p><h2 id="Install-NET-Framework-3-5"><a href="#Install-NET-Framework-3-5" class="headerlink" title="Install .NET Framework 3.5"></a>Install .NET Framework 3.5</h2><ol><li><p>Open Programs and Features </p><p><img src="/2020/07/jenkins-windows-agent-connect-problem/1.png" alt="Programs and Features"></p></li><li><p>Select .NET Framework 3.5 Features (In my screenshot, it had already installed) </p><p> <img src="/2020/07/jenkins-windows-agent-connect-problem/2.png" alt="Features"></p></li></ol><p>Then try to reconnect Jenkins agnet it shoule back to work.</p><h2 id="Install-Jenkins-agent-service"><a href="#Install-Jenkins-agent-service" class="headerlink" title="Install Jenkins agent service"></a>Install Jenkins agent service</h2><p>If you can not found <code>Jenkins agent</code> like me. </p><p><img src="/2020/07/jenkins-windows-agent-connect-problem/4.png" alt="Jenkins agent service"></p><p>you can try these steps to install <code>Jenkins agent</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install Jenkins agent service</span></span><br><span class="line"><span class="built_in">cd</span> c:\\jenkins</span><br><span class="line">.\jenkins-agent.exe install</span><br><span class="line">net start jenkinsslave-C__agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># unstall Jenkins agent service</span></span><br><span class="line">sc delete jenkinsslave-C__agent</span><br></pre></td></tr></table></figure><h2 id="Manual-install-NET-Framework-3-5"><a href="#Manual-install-NET-Framework-3-5" class="headerlink" title="Manual install .NET Framework 3.5"></a>Manual install .NET Framework 3.5</h2><p>Btw, if you could not installed .NET Framework 3.5 successful. you can try to install manully by this step</p><ol><li><p>Manually download <a href="https://androidfilehost.com/?w=file-thanks&fid=745425885120760819&mid=281&download_id=ae5a0bbf16ac7040fc659c1ab314a4d1&tid=1596439593&hc=5d26b6c7dad0b741ec6767407c715296cd418b810a28d46cf136fa579b0e008d" target="_blank" rel="noopener">microsoft-windows-netfx3-ondemand-package.cab</a></p></li><li><p>Specify the file path like below to install</p><p> <img src="/2020/07/jenkins-windows-agent-connect-problem/3.png" alt="microsoft-windows-netfx3-ondemand-package.cab file path"></p></li></ol><p>Hope this would also works for you. Pls let me know in case of you have any commnets.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每个 Jenkins 用户都应该知道这三个最佳实践</title>
      <link href="/2020/07/jenkins-best-practice-cn/"/>
      <url>/2020/07/jenkins-best-practice-cn/</url>
      
        <content type="html"><![CDATA[<p>​在使用 Jenkins 实施了企业级的 CI/CD 工作，有如下三个最重要的实践和总结。</p><p>第一，Configuration as Code（配置即代码）<br>其次，Jenkins shared libraries（Jenkins 共享库）<br>最后，Multi-Branch Pipeline（多分支流水线）</p><h2 id="配置即代码"><a href="#配置即代码" class="headerlink" title="配置即代码"></a>配置即代码</h2><p>配置即代码(Configuration as Code)是一种在代码仓库里管理配置的方法。</p><h3 id="它有什么好处"><a href="#它有什么好处" class="headerlink" title="它有什么好处"></a>它有什么好处</h3><h4 id="作业透明化"><a href="#作业透明化" class="headerlink" title="作业透明化"></a>作业透明化</h4><a id="more"></a><p>如果你使用过 Bamboo 或 Jenkins 1.x 版本，你知道想要从配置页面(GUI)来快速了解一个作业的逻辑是多么的困难，尤其是对于那些不太了解 CI 工具的人更是难上加难。</p><p>因此如果你准备使用 Jenkins 来作为团队的 CI 工具，一定要使用配置即代码，因为代码对于工程师来说更易读和了解背后的逻辑。</p><h4 id="可追溯性"><a href="#可追溯性" class="headerlink" title="可追溯性"></a>可追溯性</h4><p>对于 GUI 页面配置带来的另外一个重要问题就是无法追溯修改历史，来看别人做了什么修改。能查看其他人的修改对于一些很重要的 Job 是非常重要的，比如像是 Build Jobs 等。把 Jenkins 的配置当作项目代码来管理，这样做的好处不仅在于可跟踪性，还在于在需要时可以回滚到指定版本。</p><h4 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h4><p>配置即代码的使用还有另一个好处：够在硬件或是系统出了问题后快速恢复 Jenkins。但是，如果 Jenkins 作业是通过 GUI 配置的，当托管 Jenkins 的服务器损坏时，你的业务可能面临丢失的风险。因此，从业务连续性角度来看，它也暗示我们要使用配置即代码。</p><h2 id="Jenkins-共享库"><a href="#Jenkins-共享库" class="headerlink" title="Jenkins 共享库"></a>Jenkins 共享库</h2><p>就像编写任何应用程序代码一样，我们需要创建函数、子例程以实现重用和共享。同样的逻辑也适用于 Jenkins Pipeline 配置。比如发送电子邮件、打印日志、将 build 放到 FTP 或Artifactory 等功能都可以放到 Jenkins 共享库中。</p><p>如你所见，以下这些 groovy 文件就是 Jenkins 共享库的一部分，它们用来完成发送电子邮件、git 等操作、更新开源、代码扫描（Polaris）及触发其他任务等工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xshen@localhost MINGW64 /c/workspace/cicd/src/org/devops (develop)</span><br><span class="line">$ ls -l</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 5658 Jun 18 09:23 email.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  898 Jun 13 20:05 git.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1184 Jun  8 12:10 opensrc.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1430 Jul  3 10:33 polaris.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 2936 Jul  3 10:32 trigger.groovy</span><br><span class="line">drwxr-xr-x 1 xshen 1049089    0 Jun  8 12:10 utils/</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  787 May 12 13:24 utils.groovy</span><br></pre></td></tr></table></figure><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>这就是为什么要使用共享库，它不但可以减少重复代码，也更容易维护。比如当你需要管理很多个仓库里的自动化流水线的时候，使用 Jenkins 共享库不需要更新每个代码仓库里的 Jenkinsfile，只更改共享库里的代码即可。</p><p>这样的方式也鼓励重用和跨团队共享。例如，我创建的共享库也被公司其他团队在使用。</p><h2 id="分支流水线"><a href="#分支流水线" class="headerlink" title="分支流水线"></a>分支流水线</h2><p>在下面这张图中，开发的每个 Pull Request 通过 Webhook 触发自动构建和冒烟测试，只有通过<strong>构建测试</strong>和<strong>冒烟测试</strong>的修改才允许被合并到主干分支上。</p><p><img src="/2020/07/jenkins-best-practice-cn/pull-request.png" alt="Pull Request 流程图"></p><p>以上的工作流程是利用 Jenkins 多分支流水线来实现的。在进入细节之前，让我们先看看它是什么样子的。</p><p><img src="/2020/07/jenkins-best-practice-cn/multi-branches.png" alt="Multi-Branch Pepeline Branches"></p><p>在这个页面看到的所有分支都是在代码仓库里创建后就自动生成的，这样开发者都通过这个 Jenkins Job 可以在自己的分支进行自动化构建和测试。</p><blockquote><p>注：如果分支已经从代码仓库删掉了，这些分支则也会相应从这个 Jenkins Job 里删除掉或是像上面那样显示划掉状态（这里取决你 Jenkins 的设置）。Pull Request 也是同理。</p></blockquote><p><img src="/2020/07/jenkins-best-practice-cn/multi-pull-request.png" alt="Multi-Branch Pepeline Pull Requests"></p><p>这样，当开发人员完成他们的工作时，他们可以使用这些 Jenkins Job 来自己创建正式的 Build，而不再需要 Build 工程师的参与。这在引入多分支流水线之前所达不到的，以前开发总是需要 Build 工程师为他们创建 Build 用来测试，对于一个 20 多人的开发团队，可以想象满足这些需求所要花费多少努力。</p><h3 id="好处-1"><a href="#好处-1" class="headerlink" title="好处"></a>好处</h3><p>以上介绍了这个多分支流水线的第一个好处：为团队创建了一个自助服务，节省了开发的时间，也节省了 Build 工程师的时间。</p><p>另一个好处是：使主分支将更加稳定，再也不用花大量时间去查找是谁的提交破坏了主干分支的构建或是功能。因为只有通过构建、安装以及冒烟测试的代码才会被合并到主干分支上。</p><h3 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h3><p>从人力成本：这样的自助服务，节省了至少 0.5 人以上的人力成本。让过去的重复劳动者，变成现在基础设施的维护者和开发者。</p><p>从质量成本：以我的项目最近一个月大约 30 个 Pull Request 为例，发现其中 6 个在某些平台上存在 Build 问题。你知道如果能在开发阶段就发现问题，而不是被测试、Support 人员甚至是客户发现问题，那么这种发现缺陷的成本就会非常低。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Top 3 best practice</title>
      <link href="/2020/07/jenkins-best-practice/"/>
      <url>/2020/07/jenkins-best-practice/</url>
      
        <content type="html"><![CDATA[<p>I am Xianpeng, a build engineer. Today, I am going to share with you three Jenkins Practice.</p><p>I will talk about Configuration as code, followed up with shared libraries, and then Multi-Branch Pipeline in the end.</p><h2 id="Configuration-as-Code"><a href="#Configuration-as-Code" class="headerlink" title="Configuration as Code"></a>Configuration as Code</h2><p>What is Configuration as Code?</p><p>Configuration as code (CAC) is an approach that managing configuration resources in a bitbucket repository</p><h3 id="What-are-the-benefits"><a href="#What-are-the-benefits" class="headerlink" title="What are the benefits?"></a>What are the benefits?</h3><h4 id="First-Jenkins-Job-Transparency"><a href="#First-Jenkins-Job-Transparency" class="headerlink" title="First, Jenkins Job Transparency"></a>First, Jenkins Job Transparency</h4><a id="more"></a><p>To those who have experience with Bamboo jobs, you know how hard it is to grasp the logic from the GUI, this is especially true to people who don’t know the tools very well. So, when we migrated Bamboo jobs to Jenkins, we decided to use Configuration as code, because the code is more readable and very easy for engineers to understand the logic and flow.</p><h4 id="Secondly-Traceability"><a href="#Secondly-Traceability" class="headerlink" title="Secondly, Traceability"></a>Secondly, Traceability</h4><p>Another drawback of configuring Jenkins Jobs through GUI is that it cannot trace history and see who did what. The ability to see who made changes is very very important for some critical Jenkins jobs, such as build jobs. With Configuration as code, we treat the Jenkins job code the same way as other application code, the benefits are not only on traceability-wise, but also the ability to roll-back to specific version if needed. </p><h4 id="Thirdly-Quick-Recovery"><a href="#Thirdly-Quick-Recovery" class="headerlink" title="Thirdly, Quick Recovery"></a>Thirdly, Quick Recovery</h4><p>Using Configuration as code has another benefit, which is the ability to quickly recover Jenkins job upon hardware issues. However, if Jenkins Job is configured through GUI, when the server that host the Jenkins corrupted, you might at risk of losing everything relates to Jenkins. So, from the business continuity  perspective, it is also suggesting us to use configuration as code.</p><h2 id="Jenkins-Shared-Libraries"><a href="#Jenkins-Shared-Libraries" class="headerlink" title="Jenkins Shared Libraries"></a>Jenkins Shared Libraries</h2><p>Just like writing any application code, that we need to create functions, subroutines for reuse and sharing purpose. The same logic applies to Jenkins configuration code. Functionalities such as sending emails, printing logs, deploying build to FTP/Artifactory can be put into Jenkins Shared Libraries. Jenkins Shared Libraries is managed in Bitbucket. </p><p>So, let’s take a look, …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xshen@localhost MINGW64 /c/workspace/cicd/src/org/devops (develop)</span><br><span class="line">$ ls -l</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 5658 Jun 18 09:23 email.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  898 Jun 13 20:05 git.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1184 Jun  8 12:10 opensrc.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 1430 Jul  3 10:33 polaris.groovy</span><br><span class="line">-rw-r--r-- 1 xshen 1049089 2936 Jul  3 10:32 trigger.groovy</span><br><span class="line">drwxr-xr-x 1 xshen 1049089    0 Jun  8 12:10 utils/</span><br><span class="line">-rw-r--r-- 1 xshen 1049089  787 May 12 13:24 utils.groovy</span><br></pre></td></tr></table></figure><p>As you can see, these groovy files are so-called shared libraries that complete works such as sending emails, git operations, updating opensource and so on.<br>So, it is becoming very clear why we want to use shared libraries, because it can reduce duplicate code. </p><p>It is also easier to maintain because instead of updating several places, we just need to update the shared libraries if any changes required. The last but not least, it encourages reuse and sharing cross teams. For example, the shared libraries I created are also used other team. </p><h2 id="Multi-branch-pipeline"><a href="#Multi-branch-pipeline" class="headerlink" title="Multi-branch pipeline"></a>Multi-branch pipeline</h2><p>Next, Multi-branch pipeline. Some of you may have seen same diagram like this. </p><p><img src="/2020/07/jenkins-best-practice/pull-request.png" alt="Pull Request diagram"></p><p>In this picture, pull request will trigger automatic build, which is very helpful to engineers because their changes will not be merged to main branch unless it passes build test and smoke test.</p><p>So, I will share more detailed information here with you. </p><p>The thing works behind the scene is called Jenkins Mutli-branch Pipeline. Before getting into the details, let’s first see what it looks like. </p><p><img src="/2020/07/jenkins-best-practice/multi-branches.png" alt="Multi-Branch Pipeline Branches"></p><blockquote><p>Note: If your branch or Pull Request has been deleted, the branch or Pull Request will either be removed from the multi-branch Job or show a crossed out status as shown above, this depending on your Jenkins setting.</p></blockquote><p><img src="/2020/07/jenkins-best-practice/multi-pull-request.png" alt="Multi-Branch Pipeline Pull Requests"></p><p>So, as you can see from this page, there are multi Jenkins jobs. That is because for each bugfix or feature branch in Bitbucket, this multi-branch pipeline will automatically create a Jenkins job for them. </p><p>So, when developers complete their works, they can use these Jenkins jobs to create official build by themselves without the need of involving build engineer. However, this was not the case in the past. At the time that we did not have these self-service jobs, developers always ask help from me, the build engineer to create build for them. We have around twenty U2 developers in the team, you can image the efforts needed to satisfy these requirements. </p><p>So, I just covered the first benefit of this multi-branch pipeline, which creates a self-service for the team, save their times, save my time. </p><p>Another benefits of this self-service build and install is that our main branch will be more stable and save us from the time spent on investigating whose commit was problematic, because only changes passed build, install and smoke test will be merged into main branch.</p><p>Now, you may wonder the value of this work, like how many issues have been discovered by this auto build and install test. </p><p>Taking our current development as an example, there were about 30 pull requests merged last month, and six of them were found has built problems on some platforms.</p><p>As you all know, the cost of quality will be very low if we can find issues during development phase, rather than being found by QA, Support or even customer.</p><p>Please comments in case you have any questions.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一名软件测试工程师的成长之路</title>
      <link href="/2020/06/about-my-wechat-official-account/"/>
      <url>/2020/06/about-my-wechat-official-account/</url>
      
        <content type="html"><![CDATA[<p>关注本公众号的读者们可能会感到困惑，我最开始分享是软件功能测试、自动化测试；之后短暂的分享过一点开发；再之后主要在分享 CI/CD 及 DevOps 相关的内容。</p><p>因此，我想通过本篇简单介绍下自己的公众号以及写公众号带来了哪些收获，通过这个过程展示了作为<strong>一名软件测试工程师的成长之路。</strong></p><a id="more"></a><p>细心的读者可能通过我的公众号的更名记录也能看出个一二来：</p><p>关注本公众号的读者们可能会感到困惑，从最开始分享是功能测试、自动化测试，之后短暂的写过一点开发，之后主要在分享CI/CD（持续集成、持续交付）及 DevOps 相关的内容。</p><p>可能细心的读者通过我的公众号的更名记录觉察到其实是我的岗位职责发生变化：</p><ul><li>2017年08月01日 注册“软件测试QA”</li><li>2018年12月26日 “软件测试QA”改名“DevQA”</li><li>2018年12月29日 “DevQA”改名“软件测试与开发”</li><li>2019年07月28日 “软件测试与开发”改名“DevOps攻城狮”</li></ul><p>我原本是一名测试工程师，曾先后在 SIMcom、东软、京东、以及外企从事软件测试工作，从做手工测试到自动化测试和持续集成，一晃就是九年时间。</p><p>在做测试的过程中，我看到了软件技术不但是软件开发工程师的立命之本也是测试工程师的职业前进的必备技能，我心中期盼有朝一日自己不再是那个你不懂技术的测试。一直坚持拓展自己的视野、学习开发技术，期盼有机会去做一回开发，这对于我职业发展将会是一次非常好的经历，不但可以加快提高开发技能，也能通过角色的变化从而站在开发的角度看问题，为今后的职业发现提供更多可能。</p><p>时间终于给了一直在准备的人机会。</p><p>2018 年我有机会去做开发，这起初的艰难和压力都是我工作近十年来前所未有的，在经历了半年多的努力，才算可以干活了。</p><p>也正是因为有这一次的开发经验，当团队里需要一名 Build/Release 工程师的时候，结合自己过去多年做自动化、持续集成的经验，我就成为了团队的 Build 兼 DevOps 工程师，负责产品的自动化构建、发布、基础设施建设、CI/CD 等提高研发效能的相关工作。</p><p>就这样我从最开始的软件测试工程师，到开发工程师，再到现在从事 CI/CD 及 DevOps，因此我的文章内容也就是相关实际工作中踩坑分享。</p><p>由于我工作的产品特性，对当前流行的云原生技术这块应用很少，加上大部分时间都是工作，业余时间再去学习一项暂时用得上的技术去分享，学习和分享效果都不会太好，不如把这些时间花在对于工作有帮助的技术书籍上。</p><p>因此比较惭愧这个公众号显得不那么的 “DevOps”，希望之后有机会补上这一块内容。如果将来所从事的主要方向又变了，公众号也随之更名，那就不用补了 : )</p><h2 id="写公众号有哪些收获"><a href="#写公众号有哪些收获" class="headerlink" title="写公众号有哪些收获"></a>写公众号有哪些收获</h2><p>其实维护公众号是一个即花时间又不赚钱的活，那为什么还坚持了快三年呢，并且看起来还会继续写下去，其实这纯属自然而然发生的事。</p><p>随着自己工作十多年了，对于一些疑难杂症的处理办法也是经常记录和总结，后来想到通过分享这种方式来检查自己是否正在掌握一些以为会的知识，还能提高自己的写作，一举多得。</p><p>相信很多程序员都有自己的笔记，比如印象笔记、有道云笔记、OneNote 等等。我的笔记是一个通过 Markdown 来记录的在线博客，记录当前工作学习中最值得记录的内容。</p><p>2017 年 7 月 6 日，通过 GitHub Page 搭建的一个基于 Hexo 的<a href="https://shenxianpeng.github.io">个人博客</a></p><p><img src="/2020/06/about-my-wechat-official-account/blog-first-commit.png" alt="第一次提交"></p><p>内容已经有了，复制过来又不费电（但在排版方面很花时间），当时也想看看公众号怎么玩，就在同年 8 月开通了微信公众号。</p><p>2020 年五一假期为博客创建了微信小程序(HelloWorldPro)</p><p>花了这么多业余时间收获了什么？我想大概有这些吧。</p><ul><li>知道如何在 GitHub 上建站、发布博客，把 GitHub 变成最常用的网站之一</li><li>知道 Hexo 博客如何集成 Disqus, Google Analytics, Google Adsense, etc。对 Hexo 有了十多个改进</li><li>知道 GitHub 代码仓库如何与 Github Actions、Travis、SonarQube 等工具集成</li><li>知道如何运营一个公众号；知道如何创建、发布一个微信小程序</li><li>最意外的是收到了出版社编辑老师的邀请，写一本相关的书。但由于工作很忙以及感觉自己目前还有很大的提升空间，因此在收到合同之后最终没有签</li><li>… …</li></ul><p>除此之外，我觉得最大的收获是<strong>码字已经变成了一种习惯</strong>。不期未来，坚持做好一件事，其他的都交给时间。</p><p>有句话说的好，最好的时间是十年前，其次就是现在。</p><p><strong>日拱一卒，功不唐捐。</strong></p><p>如果你有想做而没做的事，现在开始做一点都不晚，还能再做几十年呢，到时候你一定会是真正的专家。</p><p align="right">—— 2020 年 6 月 30 日，凌晨。</p><h2 id="相关推荐阅读"><a href="#相关推荐阅读" class="headerlink" title="相关推荐阅读"></a>相关推荐阅读</h2><blockquote><ul><li><a href="https://shenxianpeng.github.io/2018/07/why-I-move-to-development/">做了9年测试，我为何转开发？</a></li><li><a href="https://shenxianpeng.github.io/2018/12/from-qa-to-dev/">从测试到开发的五个月</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将 Jenkins Shell 返回的字符串处理为字符数组</title>
      <link href="/2020/06/Jenkins-tips-2/"/>
      <url>/2020/06/Jenkins-tips-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>想通过 Shell 先对数据进行处理，然后返回到 Jenkins pipeline 里，但只能得到 Shell 返回的字符串，因此需要在 Jenkinsfile 里把字符串处理成数组，然后通过一个 for 循环对数组中的值进行处理。</p><p>以下是要处理的文本数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example</span></span><br><span class="line">$ ls</span><br><span class="line">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br></pre></td></tr></table></figure><p>要将以上文件通过 Jenkins 分别进行处理，得到用户 user1，user2，user3 然后发送邮件。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><p>通过 Shell 表达式只过滤出 user1 user2 user3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list 所有以 fail-list 开头的文件，并赋给一个数组 l</span></span><br><span class="line">l=$(ls -a fail-list-*)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$l</span>; </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">  f=<span class="variable">$&#123;f#fail-list-&#125;</span> <span class="comment"># 使用#号截取左边字符</span></span><br><span class="line">  f=<span class="variable">$&#123;f%.txt&#125;</span>       <span class="comment"># 使用%号截取右边字符</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$f</span>           <span class="comment"># 最终输出仅包含 user 的字符串</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">fail-list-user1.txt  fail-list-user2.txt  fail-list-user3.txt</span><br><span class="line">$ l=$(ls -a fail-list-*) &amp;&amp; <span class="keyword">for</span> f <span class="keyword">in</span> <span class="variable">$l</span>; <span class="keyword">do</span> f=<span class="variable">$&#123;f#fail-list-&#125;</span>; f=<span class="variable">$&#123;f%.txt&#125;</span>; <span class="built_in">echo</span> <span class="variable">$f</span> ; <span class="keyword">done</span>;</span><br><span class="line">user1</span><br><span class="line">user2</span><br><span class="line">user3</span><br></pre></td></tr></table></figure><h3 id="处理字符串为数组"><a href="#处理字符串为数组" class="headerlink" title="处理字符串为数组"></a>处理字符串为数组</h3><p>以下在 Jenkinsfile 使用 groovy 将 Shell 返回的字符串处理成字符数组。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Jenkinsfile </span></span><br><span class="line"><span class="comment">// 忽略 stage, steps 等其他无关步骤</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">scripts &#123;</span><br><span class="line">  <span class="comment">// 将 Shell 返回字符串赋给 owners 这个变量。注意在 $ 前面需要加上 \ 进行转义。</span></span><br><span class="line">  <span class="keyword">def</span> owners = sh(<span class="string">script:</span> <span class="string">"l=\$(ls -a fail-list-*) &amp;&amp; for f in \$l; do f=\$&#123;f#fail-list-&#125;; f=\$&#123;f%.txt&#125;; echo \$f ; done;"</span>, <span class="string">returnStdout:</span><span class="literal">true</span>).trim()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查看 owners 数组是否为空，isEmpty() 是 groovy 内置方法。</span></span><br><span class="line">  <span class="keyword">if</span> ( ! owners.isEmpty() ) &#123;</span><br><span class="line">    <span class="comment">// 通过 .split() 对 owners string 进行分解，返回字符串数组。然后通过 .each() 对返回的字符串数组进行循环。</span></span><br><span class="line">    owners.split().each &#123; owner -&gt;</span><br><span class="line">      <span class="comment">// 打印最终的用户返回</span></span><br><span class="line">      println <span class="string">"owner is $&#123;owner&#125;"</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 发送邮件，例子</span></span><br><span class="line">      email.SendEx([</span><br><span class="line">          <span class="string">'buildStatus'</span>  : currentBuild.currentResult,</span><br><span class="line">          <span class="string">'buildExecutor'</span>: <span class="string">"$&#123;owner&#125;"</span>,</span><br><span class="line">          <span class="string">'attachment'</span>   : <span class="string">"fail-list-$&#123;owner&#125;.txt"</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终完成了通过 Groovy 将 Shell 返回的字符串处理成字符数组，实现上述例子中对不同人进行邮件通知的需求。</p><p>希望以上例子对你做其他类似需求的时候有所启示和帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忽略 Jenkins Shell 步骤中的故障</title>
      <link href="/2020/06/Jenkins-tips-1/"/>
      <url>/2020/06/Jenkins-tips-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>不希望 Shell 脚本因失败而中止</li><li>想一直运行 Shell 脚本并报告失败</li></ul><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>运行 Shell 时，你可以通过使用内置的 <code>+e</code> 选项来控制执行你的脚本错误。这可以禁用“非 0 退出”的默认行为。</p><p>请参考如下四个示例中的测试 Shell 和测试结果 Console Output。</p><p><strong>示例一</strong></p><p>执行的时候如果出现了返回值为非零（即命令执行失败）将会忽略错误，继续执行下面的脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> +e</span><br><span class="line">$ ls no-exit-file</span><br><span class="line">$ whoami</span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/1.png" alt="示例一：测试结果"></p><p><strong>示例二</strong></p><p>执行的时候如果出现了返回值为非零，整个脚本就会立即退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> -e</span><br><span class="line">$ ls no-exit-file</span><br><span class="line">$ whoami</span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/2.png" alt="示例二：测试结果"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>示例三</strong></p><p>还有一种方式，如果不想停止失败的另一种方法是添加 <code>|| true</code> 到你的命令结尾。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 做可能会失败，但并不关注失败的命令时</span></span><br><span class="line">$ ls no-exit-file || <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/3.png" alt="示例三：测试结果"></p><p><strong>示例四</strong></p><p>如果要在失败时执行某些操作则添加 <code>|| &lt;doSomethingOnFailure&gt;</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 做可能会失败的事情，并关注失败的命令</span></span><br><span class="line"><span class="comment"># 如果存在错误，则会创建变量 error 并将其设置为 true</span></span><br><span class="line">$ ls no-exit-file || error=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后去判断 error 变量的值。如果为真，则退出 Shell</span></span><br><span class="line">$ <span class="keyword">if</span> [ <span class="variable">$error</span> ]</span><br><span class="line">$ <span class="keyword">then</span> </span><br><span class="line">$    <span class="built_in">exit</span> -1</span><br><span class="line">$ <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><img src="/2020/06/Jenkins-tips-1/4.png" alt="示例四：测试结果"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job</title>
      <link href="/2020/06/vm-status-check-via-jenkins/"/>
      <url>/2020/06/vm-status-check-via-jenkins/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。</p><a id="more"></a><h2 id="需求分解"><a href="#需求分解" class="headerlink" title="需求分解"></a>需求分解</h2><p>通过一个简单的 shell 脚本可实现定期进行 ssh 登录操作，但如何实现的更优雅一些就需要花点时间了，比如：</p><ol><li>定期自动执行</li><li>输出比较直观的登录测试结果</li><li>支持用户添加新的虚拟机 hostname 到检查列表中</li><li>执行完成后，通知用户等等</li></ol><p>希望在不引入其他 Web 页面的情况下通过现有的工具 Jenkins 使用 Shell 脚本如何实现呢？</p><ol><li>写一个脚本去循环一个 list 里所有的 hostname，经考虑这个 list 最好是一个 file，这样方便后续处理。</li><li>这样当用户通过执行 Jenkins job 传入新的 hostname 时，使用新的 hostname 到 file 里进行 grep，查看是否已存在。</li><li>如果 grep 到，不添加；如果没有 grep 到，将这个 hostname 添加到 file 里。</li><li>将修改后的 file 添加到 git 仓库里，这样下次 Jenkins 的定时任务就会执行最近添加的 hostname 了。</li></ol><h2 id="实现重点"><a href="#实现重点" class="headerlink" title="实现重点"></a>实现重点</h2><ol><li><p>使用 <code>expect</code>。在使用 ssh 连接远程虚拟机的时候需要实现与远程连接时实现交互，例如：可以期待屏幕上的输出，然后进而进行相应的输入。在使用 <code>expect</code> 之前需要先安装，以 Redhat 的安装命令为例： <code>sudo yum install expect</code> 来进行安装。</p><blockquote><p>更多有关 <code>expect</code> 使用的可以参看这个连接：<a href="http://xstarcd.github.io/wiki/shell/expect.html" target="_blank" rel="noopener">http://xstarcd.github.io/wiki/shell/expect.html</a></p></blockquote></li><li><p>使用了 Shell 数组。使用 Shell 读取文件数据，进行登录操作，将操作失败的记录到一个数组里，然后打印出来。</p></li><li><p>在通过 Jenkins 提交新的 hostname 到 Git 仓库时，origin 的 URL 需要是 <code>https://${USERNAME}:${PASSWORD}@git.company.com/scm/vmm.git</code> 或 <code>git@company.com:scm/vmm.git</code>（需要提前在执行机器上生成了 id_rsa.pub）</p></li></ol><blockquote><p>代码已经上传 GitHub 请参看 <a href="https://github.com/shenxianpeng/vmm.git" target="_blank" rel="noopener">https://github.com/shenxianpeng/vmm.git</a></p></blockquote><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><h3 id="开始执行，提供输入新的-hostname"><a href="#开始执行，提供输入新的-hostname" class="headerlink" title="开始执行，提供输入新的 hostname"></a>开始执行，提供输入新的 hostname</h3><p><img src="/2020/06/vm-status-check-via-jenkins/pipeline-start.png" alt></p><h3 id="执行完成，将执行结果归档以便查看"><a href="#执行完成，将执行结果归档以便查看" class="headerlink" title="执行完成，将执行结果归档以便查看"></a>执行完成，将执行结果归档以便查看</h3><p><img src="/2020/06/vm-status-check-via-jenkins/pipeline-result.png" alt></p><h3 id="打开归档结果如下"><a href="#打开归档结果如下" class="headerlink" title="打开归档结果如下"></a>打开归档结果如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#####################################################</span><br><span class="line">######### VM login check via SSH results ############</span><br><span class="line">#####################################################</span><br><span class="line">#                                                   #</span><br><span class="line"># Compelted (success) 14&#x2F;16 (total) login vm check. #</span><br><span class="line">#                                                   #</span><br><span class="line"># Below 2 host(s) login faied, need to check.       #</span><br><span class="line">#                                                   #</span><br><span class="line">      abc.company.com </span><br><span class="line">      xyz.company.com </span><br><span class="line">#                                                   #</span><br><span class="line">#####################################################</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在技术的更新非常快，尤其作为 DevOps 工程师，各种工具层出不穷，想要每一样工具都掌握几乎是不可能的。</p><p>只会工具不了解其背后的原理，等到新工具出现替换掉旧的工具，其实这些年是没有进步的。</p><p>只有认真的把在工作中遇到的每个问题背后来龙去脉去搞懂，才能地基打的稳，这样不论工具怎么变，学习起来都会很快。</p><p>掌握操作系统，Shell，以及一门擅长的编程语言之后再去学习那些工具，要不永远都是漂浮在空中。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Jenkins Artifactory Plugin 仅在 AIX 上传制品到 https 协议的 Artifactory 失败的问题</title>
      <link href="/2020/06/Java-net-SocketException-on-AIX/"/>
      <url>/2020/06/Java-net-SocketException-on-AIX/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文对于同样在 AIX 遇到这个问题的人会非常有帮助。另外，不要被标题无聊到，解决问题的过程值得参考。</p></blockquote><p>分享一个花了两天时间才解决的一个问题：使用 Jenkins Artifactory 插件上传制品到 https 协议的企业级的 Artifactory 失败。该问题只在 AIX 平台上出现的，其他 Windows，Linux, Unix 均正常。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近计划将之前使用的 Artifactory OSS（开源版）迁移到 Aritifactory Enterprise（企业版）上。为什么要做迁移？这里有一个 Artifactory 对比的矩阵图 <a href="https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix" target="_blank" rel="noopener">https://www.jfrog.com/confluence/display/JFROG/Artifactory+Comparison+Matrix</a></p><p>简单来说，开源版缺少与 CI 工具集成时常用的 REST API 功能，比如以下常用功能</p><ul><li>设置保留策略(Retention)。设置上传的制品保留几天等，达到定期清理的目的。</li><li>提升(Promote)。通过自动化测试的制品会被提升到 stage（待测试）仓库，通过手工测试的提升到 release（发布）仓库。</li><li>设置属性(set properties)。对于通过不同阶段的制品通过 CI 集成进行属性的设置。</li></ul><p>正好公司已经有企业版了，那就开始迁移吧。本以为会很顺利的完成，没想到唯独在 IBM 的 AIX 出现上传制品失败的问题。</p><blockquote><p>环境信息</p><ul><li>Jenkins ver. 2.176.3</li><li>Artifactory Plugin 3.6.2</li><li>Enterprise Artifactory 6.9.060900900</li><li>AIX 7.1 &amp;&amp; java version 1.8.0</li></ul></blockquote><p>以下是去掉了无相关的信息的错误日志。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[consumer_0] Deploying artifact: https:<span class="comment">//artifactory.company.com/artifactory/generic-int-den/database/develop/10/database2_cdrom_opt_AIX_24ec6f9.tar.Z</span></span><br><span class="line">Error occurred <span class="keyword">for</span> request GET /artifactory/api/system/version HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">Error occurred <span class="keyword">for</span> request PUT /artifactory/generic-<span class="keyword">int</span>-den/database/develop/<span class="number">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class="number">1591170116591</span>;build.name=develop;build.number=<span class="number">10</span> HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">Error occurred <span class="keyword">for</span> request PUT /artifactory/generic-<span class="keyword">int</span>-den/database/develop/<span class="number">10</span>/database2_cdrom_opt_AIX_24ec6f9.tar.Z;build.timestamp=<span class="number">1591170116591</span>;build.name=develop;build.number=<span class="number">10</span> HTTP/<span class="number">1.1</span>: A system call received a parameter that is not valid. (Read failed).</span><br><span class="line">[consumer_0] An exception occurred during execution:</span><br><span class="line"> java.lang.RuntimeException: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class="number">44</span>)</span><br><span class="line"> at org.jfrog.build.extractor.producerConsumer.ConsumerRunnableBase.run(ConsumerRunnableBase.java:<span class="number">11</span>)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:<span class="number">785</span>)</span><br><span class="line"> Caused by: java.net.SocketException: A system call received a parameter that is not valid. (Read failed)</span><br><span class="line"> at java.net.SocketInputStream.socketRead(SocketInputStream.java:<span class="number">127</span>)</span><br><span class="line"> at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">182</span>)</span><br><span class="line"> at java.net.SocketInputStream.read(SocketInputStream.java:<span class="number">152</span>)</span><br><span class="line"> at com.ibm.jsse2.a.a(a.java:<span class="number">227</span>)</span><br><span class="line"> at com.ibm.jsse2.a.a(a.java:<span class="number">168</span>)</span><br><span class="line"> at com.ibm.jsse2.as.a(as.java:<span class="number">702</span>)</span><br><span class="line"> at com.ibm.jsse2.as.i(as.java:<span class="number">338</span>)</span><br><span class="line"> at com.ibm.jsse2.as.a(as.java:<span class="number">711</span>)</span><br><span class="line"> at com.ibm.jsse2.as.startHandshake(as.java:<span class="number">454</span>)</span><br><span class="line"> at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:<span class="number">436</span>)</span><br><span class="line"> at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:<span class="number">384</span>)</span><br><span class="line"> at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:<span class="number">142</span>)</span><br><span class="line"> at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:<span class="number">374</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:<span class="number">393</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:<span class="number">236</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:<span class="number">186</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:<span class="number">89</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.ServiceUnavailableRetryExec.execute(ServiceUnavailableRetryExec.java:<span class="number">85</span>)</span><br><span class="line"> at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:<span class="number">110</span>)</span><br><span class="line"> at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:<span class="number">185</span>)</span><br><span class="line"> at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:<span class="number">83</span>)</span><br><span class="line"> at org.jfrog.build.client.PreemptiveHttpClient.execute(PreemptiveHttpClient.java:<span class="number">89</span>)</span><br><span class="line"> at org.jfrog.build.client.ArtifactoryHttpClient.execute(ArtifactoryHttpClient.java:<span class="number">253</span>)</span><br><span class="line"> at org.jfrog.build.client.ArtifactoryHttpClient.upload(ArtifactoryHttpClient.java:<span class="number">249</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.uploadFile(ArtifactoryBuildInfoClient.java:<span class="number">692</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.doDeployArtifact(ArtifactoryBuildInfoClient.java:<span class="number">379</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.client.ArtifactoryBuildInfoClient.deployArtifact(ArtifactoryBuildInfoClient.java:<span class="number">367</span>)</span><br><span class="line"> at org.jfrog.build.extractor.clientConfiguration.util.spec.SpecDeploymentConsumer.consumerRun(SpecDeploymentConsumer.java:<span class="number">39</span>)</span><br><span class="line"> ... <span class="number">2</span> more </span><br><span class="line">Failed uploading artifacts by spec</span><br></pre></td></tr></table></figure><p>很奇怪会出现上述问题，从开源版的 Artifactory 迁移到企业版的 Artifactory，它们之间最直接的区别是使用了不同的传输协议，前者是 http 后者是 https。</p><blockquote><p>HTTPS 其实是有两部分组成：HTTP + SSL/TLS，也就是在 HTTP 上又加了一层处理加密信息的模块，因此更安全。</p></blockquote><p>本以为 Google 一下就能找到此类问题的解决办法，可惜这个问题在其他平台都没有，只有 AIX 上才有，肯定这个 AIX 有什么“过人之处”和其他 Linux/Unix 不一样。</p><h2 id="使用-curl-来替代"><a href="#使用-curl-来替代" class="headerlink" title="使用 curl 来替代"></a>使用 <code>curl</code> 来替代</h2><p>由于上述问题重现在需要重新构建，比较花时间，就先试试直接用 <code>curl</code> 命令来调用 Artifactory REST API 看看结果。</p><p>做了以下测试，查看 Artifactory 的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">curl  https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">curl: (35) Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 -v 模式，输出更多信息</span></span><br><span class="line">bash-4.3$ curl -v  https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">*   Trying 10.18.12.95...</span><br><span class="line">* Connected to artifactory.company.com (10.18.12.95) port 443 (<span class="comment">#0)</span></span><br><span class="line">* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH</span><br><span class="line">* TLSv1.2 (OUT), TLS handshake, Client hello (1):</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Server hello (2):</span><br><span class="line">* NPN, negotiated HTTP1.1</span><br><span class="line">* TLSv1.2 (IN), TLS handshake, Certificate (11):</span><br><span class="line">* TLSv1.2 (OUT), TLS alert, Server hello (2):</span><br><span class="line">* Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br><span class="line">* Closing connection 0</span><br><span class="line">curl: (35) Unknown SSL protocol error <span class="keyword">in</span> connection to artifactory.company.com:443</span><br></pre></td></tr></table></figure><p>果然也出错了，<code>curl</code> 也不行，可能就是执行 <code>curl</code> 命令的时候没有找到指定证书，查了 <code>curl</code> 的 help，有 <code>--cacert</code> 参数可以指定 cacert.pem 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash-4.3$ curl --cacert /var/ssl/cacert.pem https://artifactory.company.com/artifactory/api/system/version</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span> : <span class="string">"6.9.0"</span>,</span><br><span class="line">  <span class="string">"revision"</span> : <span class="string">"60900900"</span>,</span><br><span class="line">  <span class="string">"addons"</span> : [ <span class="string">"build"</span>, <span class="string">"docker"</span>, <span class="string">"vagrant"</span>, <span class="string">"replication"</span>, <span class="string">"filestore"</span>, <span class="string">"plugins"</span>, <span class="string">"gems"</span>, <span class="string">"composer"</span>, <span class="string">"npm"</span>, <span class="string">"bower"</span>, <span class="string">"git-lfs"</span>, <span class="string">"nuget"</span>, <span class="string">"debian"</span>, <span class="string">"opkg"</span>, <span class="string">"rpm"</span>, <span class="string">"cocoapods"</span>, <span class="string">"conan"</span>, <span class="string">"vcs"</span>, <span class="string">"pypi"</span>, <span class="string">"release-bundle"</span>, <span class="string">"replicator"</span>, <span class="string">"keys"</span>, <span class="string">"chef"</span>, <span class="string">"cran"</span>, <span class="string">"go"</span>, <span class="string">"helm"</span>, <span class="string">"rest"</span>, <span class="string">"conda"</span>, <span class="string">"license"</span>, <span class="string">"puppet"</span>, <span class="string">"ldap"</span>, <span class="string">"sso"</span>, <span class="string">"layouts"</span>, <span class="string">"properties"</span>, <span class="string">"search"</span>, <span class="string">"filtered-resources"</span>, <span class="string">"p2"</span>, <span class="string">"watch"</span>, <span class="string">"webstart"</span>, <span class="string">"support"</span>, <span class="string">"xray"</span> ],</span><br><span class="line">  <span class="string">"license"</span> : <span class="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试了下成功了。</p><p>到这里问题已经解决了，只要使用 <code>curl</code> 调用 Artifactory REST API 就能完成上传操作了。但我用的 Jenkins Artifactory Plugin，如果使用 <code>curl</code> 我需要把之前的代码重新再实现一遍，然后再测试，就为了 AIX 一个平台的问题，实在是“懒”的重新开始。本着这样懒惰的性格，还得继续解决 Jenkins 调用 agent 去执行上传失败的问题。</p><h2 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h2><h3 id="尝试设置-SSL-CERT-FILE-环境变量"><a href="#尝试设置-SSL-CERT-FILE-环境变量" class="headerlink" title="尝试设置 SSL_CERT_FILE 环境变量"></a>尝试设置 <code>SSL_CERT_FILE</code> 环境变量</h3><p>想试试用上述的办法来解决 Jenkins 的问题。如果能有一个环境变量能设置指定 cacert.pem 文件的路径，那样在 Jenkins 调用 agent 执行上传时候就能找到证书，可能就能解决这个问题了。果然是有这样的环境变量的 <code>SSL_CERT_FILE</code>，设置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> SSL_CERT_FILE=/var/ssl/cacert.pem</span><br></pre></td></tr></table></figure><p>设置好环境变量之后，通过 <code>curl</code> 调用，再不需要使用 <code>--cacert</code> 参数了。这下看起来有戏了，带着喜悦的心情把这个环境变量加到 agent 机器上，设置如下：</p><p><img src="/2020/06/Java-net-SocketException-on-AIX/configure-agent-environment-variable.png" alt></p><p>或者可以修改 agent 机器上的 <code>/etc/environment</code> 文件。</p><p>结果经测试错误信息依旧，看来 Jenkins 执行的 remote.jar 进行上传时跟本地配置环境没有关联，看来需要从执行 remote.jar 着手，把相应的设置或是环境变量在启动 remote.jar 时传进去。</p><blockquote><p>Jenkins 管理 agent 的原理是通过在 agent 上启动一个 remote.jar 实现的</p></blockquote><h3 id="在启动-remote-jar-时设置环境变量"><a href="#在启动-remote-jar-时设置环境变量" class="headerlink" title="在启动 remote.jar 时设置环境变量"></a>在启动 remote.jar 时设置环境变量</h3><p><code>java</code> 的 <code>-D</code> 参数可以完成这一点。</p><p>进行了大量的搜索和尝试，最终在 IBM 的官方找到了这篇文档 <a href="https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.security.component.80.doc/security-component/jsse2Docs/matchsslcontext_tls.html</a></p><p>文档大意是，IBM SDK 系统属性 <code>com.ibm.jsse2.overrideDefaultTLS=[true|false]</code> 有 <code>true</code> 和 <code>false</code> 两个值，如果想要与 Oracle <code>SSLContext.getInstance(&quot;TLS&quot;)</code> 的行为相匹配，请将此属性设置为 <code>true</code>，默认值为 <code>false</code>。</p><p>下表显示了系统属性对 SSLContext.getInstance(“TLS”) 的影响</p><table><thead><tr><th>Property value setting</th><th>Protocol enabled</th></tr></thead><tbody><tr><td>false</td><td>TLS V1.0</td></tr><tr><td>true</td><td>TLS V1.0, V1.1, and V1.2</td></tr></tbody></table><p>绝大多数的 Java 应用都是使用 Oracle 的 JDK 来开发的，这里要与 Oracle 的行为保持一致；另外 IBM 的 SDK 默认协议只有 TLS V1.0，而上面的 log 可以看到使用的 TLSv1.2 协议，因此需要将属性设置为 <code>true</code>。</p><p>最终在 Jenkins 的 agent 配置里将 JVM Options 区域加上这句 <code>-Dcom.ibm.jsse2.overrideDefaultTLS=true</code>，断开连接，重新启动 agent，再次执行 Pipeline，成功的把 AIX 上的制品上传到 Artifactory 上了，问题解决了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到问题并解决问题是一件非常爽的事，从中也学到了很多之前不曾了解过的知识，解决问题的过程比 Google 随便查查更让人印象深刻，再遇到此类问题可能就会举一反三了。</p><p>另外，凡事如果觉得自己在短时间内没有头绪、自己搞不定的时候尽快寻求有经验的同事的帮助。感谢帮助我的同事们，没有他们的帮助和指导就不能这么快的解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 “会写程序的干不过会写PPT的” —— 聊程序员写作</title>
      <link href="/2020/05/programmers-read-and-write/"/>
      <url>/2020/05/programmers-read-and-write/</url>
      
        <content type="html"><![CDATA[<p>在程序员圈子里比较流行这样一句话“会写程序的干不过会写 PPT 的”，还记得 2019 年新东方年会的一首《放飞自我》里有这样一句歌词戳中了绝大大多数程序员的内心</p><p>“干的累死累活，有成果那又如何，到头来干不过写PPT的”。</p><p>一时间大家好像都认同了这个说法，表达着自己的不满和无奈。</p><a id="more"></a><h2 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h2><p>随着自己从业超过 10 年有余，不管是从网络上还是工作中见识了各种各样的能人之后，对于真正的“能力”也有了新的认识。</p><p>在一开始我会觉得那些沉默寡言并且技术还好的才是真正的大神，那些会点技术就开始给人讲的是在班门弄斧。然而，当给团队分享一些技术分享的时候，发现想把一件事给绝大多数不了解的人说明白其实也同样是一种能力。</p><ul><li>首先，在给人讲之前首先得自己完全弄明白</li><li>其次，还要想别人可能会问的问题自己否能答出来</li><li>最后，故事线是什么，怎样逻辑清晰的讲出来</li></ul><h2 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h2><p>最近吴军老师在得到上开设了一门《阅读和写作》里他举了一个例子</p><p>一个项目组中有三个人，第一个人擅长于做专业工作，组里最重要的工作都是他做的，其他人也经常要靠他来指导；第二个人擅长把大家组织到一起，当大家遇到困难时，他能够鼓舞大家的士气，带领大家克服困难取得胜利；第三个人能把他们组的工作讲清楚。</p><p>如果老板要从这几个人中提拔一个人，谁的机会最大呢？我相信很多人会觉得是那个专业能力特别强的。但是，在现实生活中往往是第三个人最大。为什么呢？</p><p>我们假想一下三个人去做汇报的场景</p><ul><li><p>第一个人去做汇报，他讲了一堆专业细节，领导听得无趣，最后他既没有让全组的工作被上级认可，也没有争取到什么资源。也许第二次大家就不推举他做代表了，或者这个项目受不到重视解散了。</p></li><li><p>如果是那个善于组织的人去作报告呢？他给人的印象就是一个行政管理人员，在具体的项目上一直在外围转悠，指手画脚，细节根本讲不清楚，当然汇报的效果也好不了。</p></li><li><p>如果是大家找那个会讲的人去汇报，那么全组的工作最有可能得到认可，而且还争取来很多资源。于是大家都有好处，接下来还会让他代表大家去汇报。久而久之，在外人的印象里，他的功劳第一。</p></li></ul><p>这不是编的故事，大家在单位里看看周围，就会发现情况和这里说的大同小异，这是在一个单位里自然选择的结果。通常由表达能力好的人去汇报工作和作报告，这样的人也因此更容易被看见，被提拔。</p><h2 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h2><p>很多在外企工作的小伙伴会注意到，很多公司的高管都是印度人，我自己也听过印度人在跟领导汇报工作，发现他们讲的确实比我讲的好太多，抛开英语层面不说，在内容和准备方面，确实有这么几点需要像他们学习的。</p><ul><li>PPT 做的很好，用结构化的图表达</li><li>有核心，有重点</li><li>能串起一个故事来，把事情说清楚</li></ul><p>最后你发现印度人做的你都有，比他做的还好，他没有的你也有。但是，他讲的比你好，另在场的所有人都印象深刻，都觉得很牛逼，只有你呵呵一笑。</p><p>作为程序员，吃技术这碗饭，提高技术固然不可缺少，但同时锻炼自己的写作和表达的能力才会更有机会打造自己的品牌，让自己走的更高更远。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最近自己要准备一个英文的 PPT 给国外的老大做分享，我的领导的审核给了我极大的帮助，并深刻的发现，同样想表达一个意思，自己的表达和领导的表达存在相当大的差异。</p><p>举一个例子，为什么用 Jenkins 共享库？来对比修改前后的差别</p><p>修改前：In the early stage of doing this work one year ago, I wrote many duplicate code such as sending emails, printing logs. Shared Libraries could help to solve this problem …</p><p>修改后：Just like writing any application code, that we need to create functions, subroutines for reuse and sharing purpose. The same logic applies to Jenkins configuration code …</p><p>其实没有必要说自己一开始走的一些弯路和错误，虽然很诚实，但这种表达对自己并没有什么好处。另外，从开场白，每页 PPT 之间的衔接，结束语都给出了修改意见。</p><p>到这里，我彻底抛开了对写 PPT 曾经有过的偏见，并<strong>认为写好 PPT 是一种能力</strong>。</p><p>不说了，继续改我的 PPT、背稿去了 …</p>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
            <tag> write </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何确保提交 Jenkins Pipeline 前没有语法错误</title>
      <link href="/2020/05/jenkins-pipeline-linter-connector/"/>
      <url>/2020/05/jenkins-pipeline-linter-connector/</url>
      
        <content type="html"><![CDATA[<p>我在做 Jenkins 声明式流水线开发时常会遇到的问题是：Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。</p><p>为了减少这种因为语法错误而需要频繁像代码库去提交的情况，最好还是在提交之前进行“编译”检查，来查看当前的 Pipeline 是否存在语法错误。</p><p>经过调查发现 Jenkins 本身提供了这样的 REST API，可以直接使用这个 API 来对 Pipeline 声明式进行语法校验，这个方式需要执行一长串的 <code>curl</code> 命令，看起来似乎很麻烦，如果能在 IDE 里直接运行就好了。VS Code 作为当前当前最流行 IDE 工具，不负期望，果然是有插件的。</p><p>本文介绍了两种方式来实现如何对 Jenkins 声明式流水线在 Jenkins 构建执行前进行语法错误检查，这两种方式的原理都是通过调用 Jenkins REST API 来实现的。</p><a id="more"></a><blockquote><p>注意：</p><p>当前只有声明式流水线支持语法校验，脚本式流水线不支持。</p><p>如果使用 Jenkins 回放功能或是使用 Jenkins Web 页面开发 Pipeline 不存在上述问题。</p></blockquote><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p>如果你跟我一样为你的项目开发了 Jenkins Shared Libraries，为了方便使用 REST API，不妨可以在该仓库下面创建一个 linter.sh 文件，并将这个文件加到你的 .gitignore 里，这样你可以在这个文件里配置你的用户名和密码就不会意外的被提交到 Git 仓库中。linter.sh 脚本内容如下，供参考。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何使用</span></span><br><span class="line"><span class="comment"># sh linter.sh your-jenkinsfile-path</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为你的 Jenkins 用户名</span></span><br><span class="line">username=admin</span><br><span class="line"><span class="comment"># 替换为你的 Jenkins 密码</span></span><br><span class="line">password=admin</span><br><span class="line"><span class="comment"># 替换为你的 Jenkins URL</span></span><br><span class="line">JENKINS_URL=http://localhost:8080/</span><br><span class="line"></span><br><span class="line">PWD=`<span class="built_in">pwd</span>`</span><br><span class="line">JENKINS_FILE=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">curl --user <span class="variable">$username</span>:<span class="variable">$password</span> -X POST -F <span class="string">"jenkinsfile=&lt;<span class="variable">$PWD</span>/<span class="variable">$JENKINS_FILE</span>"</span> <span class="variable">$JENKINS_URL</span>/pipeline-model-converter/validate</span><br></pre></td></tr></table></figure><p>让我们来测试一下效果 <code>sh linter.sh your-jenkinsfile-path</code></p><p>实例 1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sh linter.sh Jenkinsfile</span><br><span class="line">Errors encountered validating Jenkinsfile:</span><br><span class="line">WorkflowScript: 161: Expected a stage @ line 161, column 9.</span><br><span class="line">           stages &#123;</span><br><span class="line">           ^</span><br></pre></td></tr></table></figure><p>实例 2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sh linter.sh Jenkinsfile </span><br><span class="line">Errors encountered validating Jenkinsfile:</span><br><span class="line">WorkflowScript: 60: Invalid condition <span class="string">"failed"</span> - valid conditions are [always, changed, fixed, regression, aborted, success, unsuccessful, unstable, failure, notBuilt, cleanup] @ line 60, column 9.</span><br><span class="line">           failed&#123;</span><br><span class="line">           ^</span><br><span class="line"><span class="comment"># 将 failed 改为 failure，再次执行，成功。</span></span><br><span class="line">sh linter.sh Jenkinsfile </span><br><span class="line">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure><p>果然当 Pipeline 写的很长的时候，总是很难发现有什么地方写的不对。继续修改，直到再次执行没有错误为止。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jenkinsfile successfully validated.</span><br></pre></td></tr></table></figure><h2 id="Jenkins-Pipeline-Linter-Connector-插件"><a href="#Jenkins-Pipeline-Linter-Connector-插件" class="headerlink" title="Jenkins Pipeline Linter Connector 插件"></a><code>Jenkins Pipeline Linter Connector</code> 插件</h2><p>第二种方式就是通用了，只要代码仓库里存在声明式流水线，就可以使用这个插件去验证是否存在语法错误问题。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>在 VSCode 插件里搜索 <code>Jenkins Pipeline Linter Connector</code></p><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>打开 File -&gt; Preferences -&gt; Settings -&gt; Extensions， 找到 <code>Jenkins Pipeline Linter Connector</code>，参考如下配置。</p><p><img src="/2020/05/jenkins-pipeline-linter-connector/settings.png" alt></p><h3 id="运行插件"><a href="#运行插件" class="headerlink" title="运行插件"></a>运行插件</h3><p>右键 -&gt; Command Palette -&gt; Validate Jenkinsfile</p><p>或</p><p>执行快捷键 Shift + Alt + V</p><h3 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h3><p><img src="/2020/05/jenkins-pipeline-linter-connector/example1.gif" alt="Example 1"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果使用 VSCode 作为开发工具，推荐使用 <code>Jenkins Pipeline Linter Connector</code> 插件；如果是 Jenkins Shared Libraries 仓库不妨可以创建一个 shell 脚本，通过执行脚本来进行校验。当然，如果只是简单的使用 Jenkinfile 也可以在 Jenkins Web Pipeline 页面里编写，那里自带语法检查。</p><p>如果您还有别的方式，欢迎留言分享。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwarch v1.3 介绍</title>
      <link href="/2020/05/nightwatch-v1-3/"/>
      <url>/2020/05/nightwatch-v1-3/</url>
      
        <content type="html"><![CDATA[<p>Nightwatch js 是我之前写自动化测试用例使用了很长一段时间的测试框架，我当时的使用 v0.9 版本并且对使用和 API 进行了翻译。作为一名前测试工程师，对于自动化的知识不能不更新下自己的知识库，一转眼 Nightwatch 1.3 版本已经发布了，可以看到它在 GitHub 上的使用和关注度还是很高的。</p><p><img src="/2020/05/nightwatch-v1-3/nightwatch-star.png" alt></p><p>Nightwarch.js 是一个端到端的基于 Node.js 使用 W3C Webdriver （以前是 Selenium ）的自动化测试框架。它是一个完整的集成解决方案，用于 web 应用程序和网站的端到端测试，以及 Node.js 单元测试和集成测试。</p><a id="more"></a><p>查看了一下 Nightwatch 的发布历史（<a href="https://github.com/nightwatchjs/nightwatch/releases），可以看到这期间修复了不少" target="_blank" rel="noopener">https://github.com/nightwatchjs/nightwatch/releases），可以看到这期间修复了不少</a> Bug，而且在 v1.3 ​版本还新增一些新的功能。</p><ul><li><p>新增 BDD describe Interface - 可以同时运行以 BDD 描述和导出接口编写的测试，无需其他配置。</p></li><li><p>新增 <code>assert.not</code> 断言</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来这么写</span></span><br><span class="line">browser.assert.elementNotPresent()</span><br><span class="line"><span class="comment">// 现在可以这么写</span></span><br><span class="line">browser.assert.not.elementPresent(<span class="string">'.not_present'</span>)</span><br></pre></td></tr></table></figure></li><li><p>新增一些 APIs - 比如 <code>getElementProperty</code>, <code>domPropertyContains</code>, <code>domPropertyEquals</code>, <code>.property</code></p></li><li><p>新增了 CLI 选项 </p><ul><li><code>--headless</code> - 以无头模式启动浏览器（Chrome或Firefox）</li><li><code>--timeout</code> - 设置断言失败之前重试断言的全局超时</li></ul></li></ul><p>如果要从 v1.0 之前的版本升级，参阅如下升级指南。</p><h2 id="升级和启动"><a href="#升级和启动" class="headerlink" title="升级和启动"></a>升级和启动</h2><p>从 NPM 安装 Nightwatch</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install nightwatch --save-dev</span><br></pre></td></tr></table></figure><h3 id="安装浏览器驱动程序"><a href="#安装浏览器驱动程序" class="headerlink" title="安装浏览器驱动程序"></a>安装浏览器驱动程序</h3><h4 id="Geckodriver（Firefox）"><a href="#Geckodriver（Firefox）" class="headerlink" title="Geckodriver（Firefox）"></a>Geckodriver（Firefox）</h4><p>Geckodriver 是用于驱动 Mozilla Firefox 浏览器的 WebDriver 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install geckodriver --save-dev</span><br></pre></td></tr></table></figure><h4 id="Chromedriver"><a href="#Chromedriver" class="headerlink" title="Chromedriver"></a>Chromedriver</h4><p>Chromedriver 是用于驱动 Google Chrome 浏览器的 WebDriver 服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install chromedriver --save-dev</span><br></pre></td></tr></table></figure><p>或用一行安装所有内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nightwatch geckodriver chromedriver --save-dev</span><br></pre></td></tr></table></figure><h2 id="运行演示测试"><a href="#运行演示测试" class="headerlink" title="运行演示测试"></a>运行演示测试</h2><p>Nightwatch 带有一个 example 文件夹，其中包含一些示例测试。</p><p>下面将运行一个基本测试，该测试打开搜索引擎 Ecosia.org，搜索 “nightwatch” 一词，并验证术语 “第一个结果” 是否是 Nightwatch.js 网站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/nightwatch node_modules/nightwatch/examples/tests/ecosia.js</span><br></pre></td></tr></table></figure><p>Windows 用户可能需要运行节点 node node_modules/.bin/nightwatch</p><h2 id="手动下载浏览器驱动程序"><a href="#手动下载浏览器驱动程序" class="headerlink" title="手动下载浏览器驱动程序"></a>手动下载浏览器驱动程序</h2><p>Nightwatch 使用兼容 WebDriver 的服务器来控制浏览器。 WebDriver 是 W3C 规范和行业标准，提供了与浏览器进行交互的平台和 HTTP 协议。</p><p>Nightwatch 包括对自动管理以下服务的支持：</p><h3 id="ChromeDriver"><a href="#ChromeDriver" class="headerlink" title="ChromeDriver"></a>ChromeDriver</h3><ul><li>针对 Chrome 浏览器运行测试</li><li>下载网址 <a href="https://sites.google.com/a/chromium.org/chromedriver/downloads。" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/downloads。</a></li></ul><p>从版本 75 开始，Chromedriver 默认启用 W3C Webdriver 协议。如果你现在想坚持使用 JSONWire，请调整 chromeOptions：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">desiredCapabilities : &#123;</span><br><span class="line">  browserName : <span class="string">'chrome'</span>,</span><br><span class="line">  chromeOptions: &#123;</span><br><span class="line">    w3c: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GeckoDriver"><a href="#GeckoDriver" class="headerlink" title="GeckoDriver"></a>GeckoDriver</h3><p>针对 Mozilla Firefox 浏览器运行测试。下载网址：<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases</a>.</p><h3 id="Selenium-Standalone-Server"><a href="#Selenium-Standalone-Server" class="headerlink" title="Selenium Standalone Server"></a>Selenium Standalone Server</h3><ul><li>在一个地方管理多个浏览器配置，还可以利用 Selenium Grid 服务</li><li>可以从 Selenium 发布页面下载 selenium 服务器 jar 文件 selenium-server-standalone-3.x.x.jar：<a href="https://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">https://selenium-release.storage.googleapis.com/index.html</a></li></ul><p>重要的是要注意，尽管较早的 Nightwatch 版本（v0.9 及更低版本）需要 Selenium Server，但从 1.0 版本开始不再需要 Selenium。</p><p>特定的 WebDriver 设置指南可在 Docs 网站上找到。旧版 Selenium 驱动程序安装指南以及调试说明可以在 Wiki 上找到。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>示例文件夹中包含示例测试，这些示例演示了多个 Nightwatch 功能的用法。</p><p>你还可以查看 nightwatch-website-tests (<a href="https://github.com/nightwatchjs/nightwatch-website-tests" target="_blank" rel="noopener">https://github.com/nightwatchjs/nightwatch-website-tests</a>) 存储库，例如针对 nightwatchjs.org (<a href="https://nightwatchjs.org/" target="_blank" rel="noopener">https://nightwatchjs.org/</a>) 网站的测试。</p><h2 id="Nightwatch-单元测试"><a href="#Nightwatch-单元测试" class="headerlink" title="Nightwatch 单元测试"></a>Nightwatch 单元测试</h2><p>Nightwatch 的测试是使用 Mocha 编写的。</p><p>1.克隆项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nightwatchjs/nightwatch.git</span><br><span class="line"><span class="built_in">cd</span> nightwatch</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>2.运行测试</p><p>要运行完整的测试套件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>要检查测试范围，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run mocha-coverage</span><br></pre></td></tr></table></figure><p>然后在浏览器中打开生成的 coverage/index.html 文件。</p><h2 id="Nightwatch-使用示例"><a href="#Nightwatch-使用示例" class="headerlink" title="Nightwatch 使用示例"></a>Nightwatch 使用示例</h2><p>以下是我写的一个使用 NightwatchJS 对 Nightwatch 官网 <a href="https://nightwatchjs.org" target="_blank" rel="noopener">https://nightwatchjs.org</a> 进行测试的一个测试示例（已经升级到 v1.3 版本）以展示在实际项目中使用 Nightwatchjs 如何组织目录结构，区别配置全局和本地环境。</p><p>示例仓库的 GitHub 地址是 <a href="https://github.com/nightwatchjs-cn/nightwatch-e2e，欢迎" target="_blank" rel="noopener">https://github.com/nightwatchjs-cn/nightwatch-e2e，欢迎</a> Star 和 Fork。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use JMeter to do Performance Testing</title>
      <link href="/2020/05/jmeter-performance-testing/"/>
      <url>/2020/05/jmeter-performance-testing/</url>
      
        <content type="html"><![CDATA[<h2 id="Record-JMeter-Scripts"><a href="#Record-JMeter-Scripts" class="headerlink" title="Record JMeter Scripts"></a>Record JMeter Scripts</h2><p>use JMeter’s HTTP(S) Test Script Recorder, please refer to this official document <a href="https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html" target="_blank" rel="noopener">https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html</a></p><h2 id="Running-JMeter-Scripts"><a href="#Running-JMeter-Scripts" class="headerlink" title="Running JMeter Scripts"></a>Running JMeter Scripts</h2><ul><li><p>Debug scripts on JMeter in GUI Mode</p><p>You can debug your record scripts in GUI Mode until there are no errors</p></li><li><p>run test scripts in Non-GUI Mode(Command Line mode) recommend</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t ..\extras\Test.jmx -l Test.jtl</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h2 id="Running-JMeter-Scripts-on-Jenkins"><a href="#Running-JMeter-Scripts-on-Jenkins" class="headerlink" title="Running JMeter Scripts on Jenkins"></a>Running JMeter Scripts on Jenkins</h2><h3 id="Need-Tools"><a href="#Need-Tools" class="headerlink" title="Need Tools"></a>Need Tools</h3><ol><li>Jmeter - Web Request Load Testing</li><li>Jmeter-plugins<ul><li>ServerAgent-2.2.1 - PerfMon Agent to use with Standard Set</li></ul></li></ol><h3 id="Test-server"><a href="#Test-server" class="headerlink" title="Test server"></a>Test server</h3><p>Two virtual machines</p><ul><li>System under test</li><li>Jmeter execution machine, this server is also Jenkins server</li></ul><h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><h3 id="Develop-test-script"><a href="#Develop-test-script" class="headerlink" title="Develop test script"></a>Develop test script</h3><p>Record Scripts - use JMeter’s HTTP(S) Test Script Recorder, please refer to this official document <a href="https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html" target="_blank" rel="noopener">https://jmeter.apache.org/usermanual/jmeter_proxy_step_by_step.html</a></p><h3 id="Create-Jenkins-job-for-running-JMeter-scripts"><a href="#Create-Jenkins-job-for-running-JMeter-scripts" class="headerlink" title="Create Jenkins job for running JMeter scripts"></a>Create Jenkins job for running JMeter scripts</h3><ol><li><p>Create a new item-&gt;select Freestyle project</p></li><li><p>Add build step-&gt;Execute Windows batch command</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//access to jenkins <span class="built_in">jobs</span> workspace, empty the last <span class="built_in">test</span> results</span><br><span class="line">cmd</span><br><span class="line"><span class="built_in">cd</span> C:\Users\peter\.jenkins\<span class="built_in">jobs</span>\TEST-122 Upload large data\workspace</span><br><span class="line">del /Q <span class="string">"jtl"</span>\*</span><br><span class="line">del /Q <span class="string">"PerfMon Metrics Collector"</span>\*</span><br></pre></td></tr></table></figure></li><li><p>Add build step-&gt;Execute Windows batch command</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//add first run jmeter script <span class="built_in">command</span>, <span class="keyword">if</span> you want run others script you can <span class="built_in">continue</span> to add <span class="string">"Execute Windows batch command"</span></span><br><span class="line">jmeter -n -t script/UploadLargeData-1.jmx -l jtl/UploadLargeData-1.jtl</span><br></pre></td></tr></table></figure></li><li><p>Configure build email - Configure System</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//Configure System, Extended E-mail Notification</span><br><span class="line">SMTP server: smtp.gmail.com</span><br><span class="line"></span><br><span class="line">//Job Configure, Enable <span class="string">"Editable Email Notification"</span></span><br><span class="line">Project Recipient List: xianpeng.shen@gmail.com</span><br><span class="line">Project Reply-To List: <span class="variable">$DEFAULT_REPLYTO</span></span><br><span class="line">Content Type: HTML (text/html)</span><br><span class="line">Default Subject:<span class="variable">$DEFAULT_SUBJECT</span></span><br><span class="line">Default Content: <span class="variable">$&#123;SCRIPT, template="groovy-html.template"&#125;</span></span><br><span class="line"></span><br><span class="line">//Advance setting</span><br><span class="line">Triggers: Always</span><br><span class="line">          Send to Recipient List</span><br></pre></td></tr></table></figure></li></ol><h3 id="Generate-test-report"><a href="#Generate-test-report" class="headerlink" title="Generate test report"></a>Generate test report</h3><p>JMeter-&gt;Add listener-&gt;add jp@gc - PerfMon Metrics Collector, browse Test.jtl, click right key on graph Export to CSV</p><h3 id="Analyze-test-results"><a href="#Analyze-test-results" class="headerlink" title="Analyze test results"></a>Analyze test results</h3><p>Introduction test scenarios</p><p>Using 1, 5, 10, 20, 30, (50) users loading test, record every group user test results</p><blockquote><p>Glossary</p><ul><li>Sample(label) - This indicates the number of virtual users per request.</li><li>Average - It is the average time taken by all the samples to execute specific label</li><li>Median - is a number which divides the samples into two equal halves.</li><li>%_line - is the value below which 90, 95, 99% of the samples fall.</li><li>Min - The shortest time taken by a sample for specific label.</li><li>Max - The longest time taken by a sample for specific label.</li><li>Error% - percentage of failed tests.</li><li>Throughput - how many requests per second does your server handle. Larger is better.</li><li>KB/Sec - it is the Throughput measured in Kilobytes per second.</li></ul></blockquote><p>Example: Test results of each scenario shown in the following table</p><table><thead><tr><th>User</th><th># Samples</th><th>Average</th><th>Median</th><th>90% Line</th><th>95% LIne</th><th>Min</th><th>Max</th><th>Error %</th><th>Throughput</th><th>Received</th><th>Send KB/sec</th></tr></thead><tbody><tr><td>1</td><td>31</td><td>348</td><td>345</td><td>452</td><td>517</td><td>773</td><td>5</td><td>773</td><td>0.00%</td><td>2.85215</td><td>2.5</td></tr><tr><td>5</td><td>155</td><td>1166</td><td>1164</td><td>1414</td><td>1602</td><td>1639</td><td>9</td><td>1821</td><td>0.00%</td><td>4.26445</td><td>3.73</td></tr><tr><td>10</td><td>310</td><td>2275</td><td>2299</td><td>2687</td><td>2954</td><td>3671</td><td>20</td><td>4104</td><td>0.00%</td><td>4.38547</td><td>3.84</td></tr><tr><td>20</td><td>620</td><td>4479</td><td>4620</td><td>5113</td><td>6152</td><td>6435</td><td>39</td><td>6571</td><td>0.00%</td><td>4.42826</td><td>3.88</td></tr><tr><td>30</td><td>930</td><td>6652</td><td>6899</td><td>7488</td><td>9552</td><td>10051</td><td>4</td><td>10060</td><td>0.00%</td><td>4.46776</td><td>3.91</td></tr></tbody></table><p>Test results analysis chart</p><p><img src="/2020/05/jmeter-performance-testing/response-chart.png" alt="Response Chart"> <img src="/2020/05/jmeter-performance-testing/PerMon-Metrics.png" alt="PerMon Metrics"></p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Synchronize from Bitbucket to GitHub via Jenkins</title>
      <link href="/2020/05/sync-from-bitbucket-to-github/"/>
      <url>/2020/05/sync-from-bitbucket-to-github/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近我们团队需要将一些示例和例子从内部的 Bitbucket 同步到 GitHub。我了解 GitHub 可以创建公共的或是私人的仓库，但我们需要保持以下两点</p><ul><li>只分享我们想给客户分享的内容</li><li>不改变当前的工作流程，即继续使用 Bitbucket</li></ul><a id="more"></a><p>因此我们需要在 GitHub 上创建相应的仓库，然后将内部 Bitbucket 仓库中对应的 master 分支定期的通过 CI job 同步到 BitHub 上去。</p><p><img src="/2020/05/sync-from-bitbucket-to-github/sync-diagrom.png" alt></p><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>首先，需要对 Bitbucket 进行分支权限设置</p><ul><li>master 分支只允许通过 Pull Request 来进行修改</li><li>Pull Request 默认的 reviewer 至少需要一人，并且只有同意状态才允许合并</li></ul><p>其次，为了方便产品、售后等人员使用，简化分支策略如下</p><ol><li>从 master 分支上创建 feature 或是 bugfix 分支（取决于你的修改目的）</li><li>然后将你的更改提交到自己的 feature 或 bugfix 分支</li><li>在你自己的分支通过测试后，提交 Pull Request 到 master 分支</li><li>当 reviewer 同意状态，才能进行合并进入到 master 分支</li></ol><p><img src="/2020/05/sync-from-bitbucket-to-github/branch-strategy.png" alt="分支策略"></p><h3 id="Jenkins-Pipeline"><a href="#Jenkins-Pipeline" class="headerlink" title="Jenkins Pipeline"></a>Jenkins Pipeline</h3><p>基于这样的工作不是特别的频繁，也为了方便维护 Jenkins Pipeline 的简单和易于维护，我没有在需要同步的每个仓库里添加 <code>Jenkinsfile</code> 或在 Bitbucket 里添加 <code>webhooks</code>。有以下几点好处：</p><ul><li>只创建一个 Jenkins Job，用一个 <code>Jenkinsfile</code> 满足所有仓库的同步</li><li>减少了冗余的 <code>Jenkinsfile</code> 的代码，修改时只需更维护一个文件</li><li>不需要在每个仓库里添加一个 <code>Jenkinsfile</code>，更纯粹的展示示例，避免给非 IT 人员造成困扰</li></ul><p>不足之处，不能通过 SCM 来触发构建，如果想通过 <code>webhooks</code> 来触发，有的公司需要申请权限来添加 <code>webhooks</code> 比较麻烦；另外可能无法区分从哪个仓库发来的请求，实现指定仓库的同步。</p><p>因此如果不是特别频繁的需要同步，提供手动或是定时同步即可。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个 Jenkinsfile 是用来将 Bitbucket 仓库的 master 分支同步到 GitHub 仓库的 master 分支</span></span><br><span class="line"><span class="comment">// This Jenkinsfile is used to synchronize Bitbucket repositories master branches to GitHub repositories master branches.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Library</span>(<span class="string">'jenkins-shared-library@develop'</span>) _</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> email = <span class="keyword">new</span> org.cicd.email()</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line"></span><br><span class="line">  agent &#123;</span><br><span class="line">    label <span class="string">"main-slave"</span></span><br><span class="line">  &#125;</span><br><span class="line">  parameters &#123;</span><br><span class="line">    booleanParam(<span class="string">defaultValue:</span> <span class="literal">false</span>, <span class="string">name:</span> <span class="string">'git-repo-win'</span>, <span class="string">description:</span> <span class="string">'Sync internal git-repo-win master branch with external git-repo-win on GitHub'</span>)</span><br><span class="line">    booleanParam(<span class="string">defaultValue:</span> <span class="literal">true</span>,  <span class="string">name:</span> <span class="string">'git-repo-lin'</span>, <span class="string">description:</span> <span class="string">'Sync internal git-repo-lin master branch with external git-repo-lin on GitHub'</span>)</span><br><span class="line">    booleanParam(<span class="string">defaultValue:</span> <span class="literal">false</span>, <span class="string">name:</span> <span class="string">'git-repo-aix'</span>, <span class="string">description:</span> <span class="string">'Sync internal git-repo-aix master branch with external git-repo-aix on GitHub'</span>)</span><br><span class="line">    booleanParam(<span class="string">defaultValue:</span> <span class="literal">false</span>, <span class="string">name:</span> <span class="string">'git-repo-sol'</span>, <span class="string">description:</span> <span class="string">'Sync internal git-repo-sol master branch with external git-repo-sol on GitHub'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  options &#123;</span><br><span class="line">    timestamps()</span><br><span class="line">    buildDiscarder(logRotator(<span class="string">numToKeepStr:</span><span class="string">'50'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">"Synchronous master branch"</span>)&#123;</span><br><span class="line">      steps&#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            params.each &#123; key, value -&gt;</span><br><span class="line">              <span class="keyword">def</span> repoName = <span class="string">"$key"</span></span><br><span class="line">              <span class="keyword">if</span> ( value == <span class="literal">true</span>) &#123;</span><br><span class="line">                echo <span class="string">"Start synchronizing $key Bitbucket repository."</span></span><br><span class="line">                sh <span class="string">"""</span></span><br><span class="line"><span class="string">                rm -rf $&#123;repoName&#125;</span></span><br><span class="line"><span class="string">                return_status=0</span></span><br><span class="line"><span class="string">                git clone -b master ssh://git@git.your-company.com:7999/~xshen/$&#123;repoName&#125;.git</span></span><br><span class="line"><span class="string">                cd $&#123;repoName&#125;</span></span><br><span class="line"><span class="string">                git config user.name "Sync Bot"</span></span><br><span class="line"><span class="string">                git config user.email "bot@your-company.com"</span></span><br><span class="line"><span class="string">                git remote add github git@github.com:shenxianpeng/$&#123;repoName&#125;.git</span></span><br><span class="line"><span class="string">                git push -u github master</span></span><br><span class="line"><span class="string">                return_status="\$?"</span></span><br><span class="line"><span class="string">                if [ \$return_status -eq 0 ] ; then</span></span><br><span class="line"><span class="string">                  echo "Synchronize $&#123;repoName&#125; from Bitbucket to GitHub success."</span></span><br><span class="line"><span class="string">                  cd ..</span></span><br><span class="line"><span class="string">                  rm -rf $&#123;repoName&#125;</span></span><br><span class="line"><span class="string">                  exit 0</span></span><br><span class="line"><span class="string">                else</span></span><br><span class="line"><span class="string">                  echo "Synchronize $&#123;repoName&#125; from Bitbucket to GitHub failed."</span></span><br><span class="line"><span class="string">                  exit 1</span></span><br><span class="line"><span class="string">                fi"""</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                echo <span class="string">"$&#123;repoName&#125; parameter value is $value, skip it."</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cleanWs()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            echo <span class="string">"Some error occurs during synchronizing $key process."</span></span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            email.Send(currentBuild.currentResult, env.CHANGE_AUTHOR_EMAIL)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的 <code>Jenkinsfile</code> 的主要关键点是这句 <code>params.each { key, value -&gt;  }</code>，可以通过对构建时选择参数的进行判断，如果构建时参数已勾选，则会执行同步脚本；否则跳过同步脚本，循环到下一个参数进行判断，这样就实现了可以对指定仓库进行同步。</p><hr><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>Recently our team need to share code from internal Bitbucket to external GitHub. I know GitHub can create private and public repository, but we have these points want to keep.</p><ul><li>only share the code what we want to share</li><li>not change current work process, continue use Bitbucket.</li></ul><p>So we have created corresponding repositories in the internal Bitbucket, and the master branches of these repositories will periodically synchronize with the master branches of corresponding repositories on GitHub via Jenkins job.</p><h2 id="Branch-Strategy"><a href="#Branch-Strategy" class="headerlink" title="Branch Strategy"></a>Branch Strategy</h2><p>Then the work process will be like</p><ol><li><p>Create a feature or bugfix branch (it depends on the purpose of your modification).</p></li><li><p>Commit changes to your feature/bugfix branch.</p></li><li><p>Please pass your feature/bugfix branch test first then create a Pull Request from your branch to master branch, at least one reviewer is required by default.</p></li><li><p>After the reviewer approved, you or reviewer could merge the Pull Request, then the changes will be added to the master branch.</p></li></ol><p>Timing trigger CI job will sync code from internal repositories master branch to GitHub master branch by default. also support manual trigger.</p><p><img src="/2020/05/sync-from-bitbucket-to-github/branch-strategy.png" alt="Branch Strategy"></p><h2 id="Jenkins-Job"><a href="#Jenkins-Job" class="headerlink" title="Jenkins Job"></a>Jenkins Job</h2><p>Base on this work is not very frequency, so I want make the Jenkins job simple and easy to maintain, so I don’t create every <code>Jenkinsfile</code> for every Bitbucket repositories.</p><p>Pros</p><ul><li>Only one <code>Jenkinsfile</code> for all Bitbucket repositories.</li><li>Less duplicate code, less need to change when maintenance.</li><li>Don’t need to add <code>Jenkinsfile</code> into very Bitbucket repositories.</li></ul><p>Cons</p><ul><li>Can not support SCM trigger, in my view this need add <code>Jenkinsfile</code> into repository.</li></ul><p>The main part for this <code>Jenkinsfile</code> is below, use this function <code>params.each { key, value -&gt; }</code> can by passing in parameters when start Jenkins build.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitbucket </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 与 Bitbucket Webhooks 的配置和使用</title>
      <link href="/2020/04/Bitbucket-webhooks-cn/"/>
      <url>/2020/04/Bitbucket-webhooks-cn/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Jenkins 的 multi-branch pipeline 想必很多人已经在用了，使用这种类型的 Jenkins Job 最显著的作用就是可以对 Git 仓库里的任何分支和任何 Pull Request（以下简写为 PR）进行构建。</p><p>在做 Jenkins 与 Bitbucket 的集成时，需要安装插件：Bitbucket Branch Source，可以通过该插件在 Jenkins 里进行 webhook 的配置。这种方式对于没有 Bitbucket 仓库的管理权限，CI/CD 暂且处于变更比较频繁的阶段，不想麻烦的去申请添加 webhook 的同学来说是非常友好的，就是可以不用通过管理员在 Bitbucket 设置里添加 webhook 也可以实现创建 PR 后触发 Jenkins 构建。</p><p>但我最近遭遇了两次：在创建 PR 后没有触发 Jenkins 自动构建，查了 Jenkins 和 Bitbucket Branch Source 插件的配置，并没有任何改动，也各种 Google 之后也没有找到相应的解决办法（如果有遇到此情况的小伙伴欢迎一起交流）。</p><p>那既然这条路不稳定，不好走，那就走一条可以走通的路、直接的硬路，即在 Bitbucket 对应的仓库中添加 webhooks。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在申请添加 webhooks 之前，我先在个人的私人仓库下，创建了测试仓库对 webhook 进行了测试，在经过反复的测试，觉得没有问题后，将相应的配置通过管理员添加到对应的 Repository 中。如下示例：</p><ul><li>Webhook name: test-multibranch</li><li>Webhook URL: <a href="http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch" target="_blank" rel="noopener">http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch</a></li><li>Test connection: 返回 200, 连接测试通过。</li><li>Events:<ul><li>Repository: N/A</li><li>Pull Request: Opened, Merged, Declined, Deleted.</li></ul></li><li>Active: enable</li></ul><p>放两张截图方便参考</p><p>Bitbucket webhooks 设置</p><p><img src="/2020/04/Bitbucket-webhooks-cn/webhook-setting.png" alt="Bitbucket webhooks 设置"></p><p>Jenkins multi-branch pipeline 设置</p><p><img src="/2020/04/Bitbucket-webhooks-cn/jenkins-setting.png" alt="Jenkins multi-branch pipeline 设置"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>通过以上的设置，开发人员在每次创建 PR 都会立即触发 Jenkins 构建，显著的变化有两个：</p><ul><li>比以前依赖插件响应速度要快很多，之前的响应速度一般在 1~2 分支才能触发构建</li><li>稳定程度大大提高，目前为止没有再出现创建 PR 之后没有触发 Jenkins 构建的情况</li></ul><p>最终的与 Jenkins 的集成效果是这样的：</p><ul><li>当创建 (Opened) 一个 Pull Request 时，会自动在 Jenkins 上创建相应的 Pull Request 任务（比如 PR-123）并开始构建。</li><li>当合并 (Merged) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li><li>当拒绝 (Declined) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li><li>当删除 (Deleted) 这个 Pull Request 时，会自动删除 Jenkins 中的 PR-123 任务。</li></ul><p>已经 Merge 的分支，会显示已经划掉了，灰色的，这种分支不可以再进行执行构建；而 <code>develop</code> 和 <code>master</code> 分支则可以继续手动或自动构建。</p><p><img src="/2020/04/Bitbucket-webhooks-cn/multi-branch.png" alt="Jenkins multi-branch pipeline 设置"></p><p>已经 Merge 了的 Pull Request 同样显示为已经划掉了，灰色的。<code>PR-12</code>, <code>PR-13</code>, <code>PR-14</code> 可以继续手动或自动构建。</p><p><img src="/2020/04/Bitbucket-webhooks-cn/multi-pr.png" alt="Jenkins multi-branch pipeline 设置"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>这里说一下我为什么没有添加 Modified 事件。此前我是添加了 Modified 事件，我发现一些处于待合并的分支不知不觉被 webhook 触发了很多次，由于我们的全平台构建、扫描、以及测试需要至少 2~3 小时的时间，当处于待合并的 Pull Request 过多时，对构建资源的占用可能会是全天的。</p><p>我想应该是其中的哪个事件的特性所导致引起的，果不其然，这时候才注意到 Modified 事件的这段解释：A pull request’s description, title, or target branch is changed. 从解释里可以看到 Modified 事件包含修改 PR 描述、标题、还包括了目标分支的变更都会触发构建。</p><p>其实这个 Modified 事件的这个特性本身是特别好的，可以不断的将已经合并到目标分支的代码拉取到源分支进行构建，保证源分支的代码一直是与最新的代码进行集成、构建和测试，这样集成的结果才是最准确可靠的。但只是不适合目前的我们，因此暂且没有开启 Modified 事件。</p><p>这里没有添加其他 webhook 事件，比如对于主分支的触发事件，这个可以根据具体需要进行添加。如果不是那么频繁，每日构建满足需求，那么在 <code>Pipeline</code> 里添加一个 <code>trigger</code> 就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bitbucket Webhooks Configuration</title>
      <link href="/2020/04/Bitbucket-webhooks/"/>
      <url>/2020/04/Bitbucket-webhooks/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>I have set several multi-branch pipeline and it can support Bitbucket Pull Request build. So, when developer create a Pull Request on Bitbucket, Jenkins can auto-trigger PR build. but this jenkins-plugin may not very stable, it had not work two times and I actually don’t know why it does that. But I know the use Git webhook is a direct and hard approach could solve this problem. After my test, the answer is yes. it works as expect.</p><a id="more"></a><p>Here is my setting.</p><ul><li>Webhook name: test-multibranch</li><li>Webhook URL: <a href="http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch" target="_blank" rel="noopener">http://localhost:8080/multibranch-webhook-trigger/invoke?token=test-multibranch</a></li><li>Test connection: 200(green), it passed.</li><li>Events:<ul><li>Repository: N/A</li><li>Pull Request: Opened, Merged, Declined, Deleted.</li></ul></li><li>Active: enable</li></ul><p>Here is setting screenshots.</p><p><img src="/2020/04/Bitbucket-webhooks/webhook-setting.png" alt="Bitbucket webhooks setting"></p><p><img src="/2020/04/Bitbucket-webhooks/jenkins-setting.png" alt="Jenkins multi-branch pipeline setting"></p><p>At first, I also enable Modified event, but I found when there is new merged commits into our develop branch(this is our PR target branch), the holding Pull Request will be triggered and merge develop branch back to source branch then re-build.</p><p>Then I notice the Modified description: A pull request’s description, title, or target branch is changed.</p><p>This is a nice feature to make sure the source code integrate with target branch and build passed, but  this is too frequent for our product builds, because our product pull request build on some Unix platform need almost 3 hours, if has 5 Pull Requests waiting to review, when new commits into develop branch, these 5 PR need to rebuild again, this takes up all the build machines, resulting in those that need to be built not getting the resources.</p><p>After enable above Pull Request event and have these functions.</p><ul><li>when open a new Pull Request on Bitbucket, auto create Pull Request branch and build in Jenkins.</li><li>when merge the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li><li>when decline the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li><li>when delete the Pull Request Bitbucket, auto delete Pull Request branch in Jenkins.</li></ul><p>For other specific branches build my Jenkins job support manually build and timing trigger, so this event settings currently good to me.</p><p>If there is new settings need to add, I will keep update this article in the future.</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitbucket </tag>
            
            <tag> Webhooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三种方法解决 Jenkins 声明式流水线 Exception Method code too large !</title>
      <link href="/2020/04/Jenkins-troubleshooting-1/"/>
      <url>/2020/04/Jenkins-troubleshooting-1/</url>
      
        <content type="html"><![CDATA[<p>这是我第二次在使用 Jenkins 声明式流水线的时候遇到了这个问题，第一次遇到这个问题的时候是在一个 Pipeline 里大概写到 600 多行时候遇到如下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:</span><br><span class="line">General error during class generation: Method code too large!</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: Method code too large!</span><br><span class="line">at groovyjarjarasm.asm.MethodWriter.a(Unknown Source)</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><a id="more"></a><p>当时我也使用了 Jenkins Shared Libraries，但那时候的代码组织的并不是很好，有不少步骤还没来得及单独抽离出来作为单独的方法。为了解决这个问题，经过一番重构，我将原来的 600 多行的 Pipeline 变成了现在的 300 多行，很不巧，随着继续添加功能，最近又遇到了这个问题。</p><p>出现这个问题的原因是 Jenkins 将整个声明性管道放入单个方法中，并且在一定大小下，JVM 因 java.lang .RuntimeException 失败：方法代码太大！看来我还是有什么方法超过了 64k。</p><p>Jenkins JIRA 上已经有了该问题的单子，但目前为止还是尚未解决。针对这个问题目前有三种方案，但他们都有各自的利弊。</p><h2 id="方法1：将步骤放到管道外的方法中"><a href="#方法1：将步骤放到管道外的方法中" class="headerlink" title="方法1：将步骤放到管道外的方法中"></a>方法1：将步骤放到管道外的方法中</h2><p>自2017年中以来，你可以在管道的末尾声明一个方法，然后在声明性管道中调用它即可。 这样，我们可以达到与共享库相同的效果，但是避免了维护开销。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#39;Test&#39;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                whateverFunction()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void whateverFunction() &#123;</span><br><span class="line">    sh &#39;ls &#x2F;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>没有额外的维护费用</td><td>这个解决方案不知道会不会一直有效</td></tr><tr><td>所有的功能都反映在Jenkinsfile中</td><td>有的方法在多个Jenkinsfile里用到时，这种方法还是会写很多重复的代码</td></tr></tbody></table><h2 id="方法2：从声明式迁移到脚本式管道"><a href="#方法2：从声明式迁移到脚本式管道" class="headerlink" title="方法2：从声明式迁移到脚本式管道"></a>方法2：从声明式迁移到脚本式管道</h2><p>最后，我们可以迁移到脚本化的管道。有了它，我们就有了所有的自由。但是也就会失去我们最初决定使用声明式管道的原因。有了专用的DSL，就很容易理解管道是如何工作的</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>完全没有限制</td><td>需要比较大的重构</td></tr><tr><td></td><td>更容易出错</td></tr><tr><td></td><td>可能需要更多的代码来实现相同的功能</td></tr></tbody></table><h2 id="方法3：使用-Shared-Libraries"><a href="#方法3：使用-Shared-Libraries" class="headerlink" title="方法3：使用 Shared Libraries"></a>方法3：使用 Shared Libraries</h2><p>我当前使用的就是 Jenkins Shared Libraries，有一个共享库来执行一些复杂的步骤。共享库目前看来使用的非常广泛，尤其是在维护一些比较大型的、复杂的项目里用的很多。</p><p>最终我的解决办法是进一步缩减 Pipeline 里的代码，这里我也用到 方法1 的解决方案，将一些步骤提到 Pipeline {} 括号的外面，尤其是那些重复调用的​步骤。​</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>减少了大量重复的代码</td><td>任何一个修改都会影响到所有的引用，要测试好了再将变更放到引用分支里</td></tr><tr><td>可以分块使用</td><td>不熟悉的话很难理解一个步骤到底是做什么的</td></tr><tr><td>生成的Jenkinsfile将易于阅读</td><td></td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>方法1：对于单一的 Repository 的集成，可以快速实现，大多数人上手会很快。<br>方法2：脚本化提供了很少的限制，适合熟悉 Java，Groovy 的高级用户和有更复杂需求的人使用。<br>方法3：对于企业级项目，拥有很多 Repositories，需要进行大量集成，并且想了解共享库，推荐使用此方法。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pipeline </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps Top 30+ 面试问题</title>
      <link href="/2020/04/Top-30-DevOps-Interview-Questions/"/>
      <url>/2020/04/Top-30-DevOps-Interview-Questions/</url>
      
        <content type="html"><![CDATA[<h2 id="DevOps术语和定义"><a href="#DevOps术语和定义" class="headerlink" title="DevOps术语和定义"></a>DevOps术语和定义</h2><ol><li><p>什么是DevOps</p><p> 用最简单的术语来说，DevOps是产品开发过程中开发（Dev）和运营（Ops）团队之间的灰色区域。 DevOps是一种在产品开发周期中强调沟通，集成和协作的文化。因此，它消除了软件开发团队和运营团队之间的孤岛，使他们能够快速，连续地集成和部署产品。</p></li><li><p>什么是持续集成</p><p> 持续集成（Continuous integration，缩写为 CI）是一种软件开发实践，团队开发成员经常集成他们的工作。利用自动测试来验证并断言其代码不会与现有代码库产生冲突。理想情况下，代码更改应该每天在CI工具的帮助下，在每次提交时进行自动化构建（包括编译，发布，自动化测试），从而尽早地发现集成错误，以确保合并的代码没有破坏主分支。</p></li><li><p>什么是持续交付</p></li></ol><a id="more"></a><pre><code>持续交付（Continuous delivery，缩写为 CD）以及持续集成为交付代码包提供了完整的流程。在此阶段，将使用自动构建工具来编译工件，并使其准备好交付给最终用户。它的目标在于让软件的构建、测试与发布变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。</code></pre><ol start="4"><li><p>什么是持续部署</p><p> 持续部署（Continuous deployment）通过集成新的代码更改并将其自动交付到发布分支，从而将持续交付提升到一个新的水平。 更具体地说，一旦更新通过了生产流程的所有阶段，便将它们直接部署到最终用户，而无需人工干预。因此，要成功利用连续部署，软件工件必须先经过严格建立的自动化测试和工具，然后才能部署到生产环境中。</p></li><li><p>什么是持续测试及其好处</p><p> 连续测试是一种在软件交付管道中尽早、逐步和适当地应用自动化测试的实践。在典型的CI/CD工作流程中，将小批量发布构建。因此，为每个交付手动执行测试用例是不切实际的。自动化的连续测试消除了手动步骤，并将其转变为自动化例程，从而减少了人工。因此，对于DevOps文化而言，自动连续测试至关重要。</p><p> 持续测试的好处</p><ul><li>确保构建的质量和速度。</li><li>支持更快的软件交付和持续的反馈机制。</li><li>一旦系统中出现错误，请立即检测。</li><li>降低业务风险。 在潜在问题变成实际问题之前进行评估。</li></ul></li><li><p>什么是版本控制及其用途？</p><p> 版本控制（或源代码控制）是一个存储库，源代码中的所有更改都始终存储在这个代码仓库中。版本控件提供了代码开发的操作历史记录，追踪文件的变更内容、时间、人等信息忠实地了记录下来。版本控制是持续集成和持续构建的源头。</p></li><li><p>什么是Git？</p><p> Git是一个分布式版本控制系统，可跟踪代码存储库中的更改。利用GitHub流，Git围绕着一个基于分支的工作流，该工作流随着团队项目的不断发展而简化了团队协作。</p></li></ol><h2 id="实施DevOps的原因"><a href="#实施DevOps的原因" class="headerlink" title="实施DevOps的原因"></a>实施DevOps的原因</h2><ol start="8"><li><p>DevOps为什么重要？DevOps如何使团队在软件交付方面受益？</p><p> 在当今的数字化世界中，组织必须重塑其产品部署系统，使其更强大，更灵活，以跟上竞争的步伐。</p><p> 这就是DevOps概念出现的地方。DevOps在为整个软件开发管道（从构思到部署，再到最终用户）产生移动性和敏捷性方面发挥着至关重要的作用。DevOps是将不断更新和改进产品的更简化，更高效的流程整合在一起的解决方案。</p></li><li><p>解释DevOps对开发人员有何帮助</p><p> 在没有DevOps的世界中，开发人员的工作流程将首先建立新代码，交付并集成它们，然后，操作团队有责任打包和部署代码。之后，他们将不得不等待反馈。而且如果出现问题，由于错误，他们将不得不重新执行一次。沿线是项目中涉及的不同团队之间的无数手动沟通。</p><p> 由于CI/CD实践已经合并并自动化了其余任务，因此应用DevOps可以将开发人员的任务简化为仅构建代码。随着流程变得更加透明并且所有团队成员都可以访问，将工程团队和运营团队相结合有助于建立更好的沟通和协作。</p></li><li><p>为什么DevOps最近在软件交付方面变得越来越流行？</p><p>DevOps在过去几年中受到关注，主要是因为它能够简化组织运营的开发，测试和部署流程，并将其转化为业务价值。</p><p>技术发展迅速。因此，组织必须采用一种新的工作流程-DevOps和Agile方法-来简化和刺激其运营，而不能落后于其他公司。DevOps的功能通过Facebook和Netflix的持续部署方法所取得的成功得到了清晰体现，该方法成功地促进了其增长，而没有中断正在进行的运营。</p></li><li><p>CI/CD有什么好处？</p><p>CI和CD的结合将所有代码更改统一到一个单一的存储库中，并通过自动化测试运行它们，从而在所有阶段全面开发产品，并随时准备部署。</p><p>CI/CD使组织能够按照客户期望的那样快速，高效和自动地推出产品更新。</p><p>简而言之，精心规划和执行良好的CI/CD管道可加快发布速度和可靠性，同时减轻产品的代码更改和缺陷。这最终将导致更高的客户满意度。</p></li><li><p>持续交付有什么好处？</p><p>通过手动发布代码更改，团队可以完全控制产品。 在某些情况下，该产品的新版本将更有希望：具有明确业务目的的促销策略。</p><p>通过自动执行重复性和平凡的任务，IT专业人员可以拥有更多的思考能力来专注于改进产品，而不必担心集成进度。</p></li><li><p>持续部署有哪些好处？</p><p>通过持续部署，开发人员可以完全专注于产品，因为他们在管道中的最后任务是审查拉取请求并将其合并到分支。通过在自动测试后立即发布新功能和修复，此方法可实现快速部署并缩短部署持续时间。</p><p>客户将是评估每个版本质量的人。新版本的错误修复更易于处理，因为现在每个版本都以小批量交付。</p></li></ol><h2 id="如何有效实施DevOps"><a href="#如何有效实施DevOps" class="headerlink" title="如何有效实施DevOps"></a>如何有效实施DevOps</h2><ol start="14"><li><p>定义典型的DevOps工作流程</p><p>典型的DevOps工作流程可以简化为4个阶段：</p><ul><li>版本控制：这是存储和管理源代码的阶段。 版本控件包含代码的不同版本。</li><li>持续集成：在这一步中，开发人员开始构建组件，并对其进行编译，验证，然后通过代码审查，单元测试和集成测试进行测试。</li><li>持续交付：这是持续集成的下一个层次，其中发布和测试过程是完全自动化的。 CD确保将新版本快速，可持续地交付给最终用户。</li><li>持续部署：应用程序成功通过所有测试要求后，将自动部署到生产服务器上以进行发布，而无需任何人工干预。</li></ul></li><li><p>DevOps的核心操作是什么？</p><p>DevOps在开发和基础架构方面的核心运营是：</p><p>Software development:</p><ul><li>Code building</li><li>Code coverage</li><li>Unit testing</li><li>Packaging</li><li>Deployment</li></ul><p>Infrastructure:</p><ul><li>Provisioning</li><li>Configuration</li><li>Orchestration</li><li>Deployment</li></ul></li><li><p>在实施DevOps之前，团队需要考虑哪些预防措施？</p><p>当组织尝试应用这种新方法时，对DevOps做法存在一些误解，有可能导致悲惨的失败：</p><ul><li>DevOps不仅仅是简单地应用新工具和/或组建新的“部门”并期望它能正常工作。实际上，DevOps被认为是一种文化，开发团队和运营团队遵循共同的框架。</li><li>企业没有为其DevOps实践定义清晰的愿景。对开发团队和运营团队而言，应用DevOps计划是一项显着的变化。因此，拥有明确的路线图，将DevOps集成到您的组织中的目标和期望将消除任何混乱，并从早期就提供清晰的指导方针。</li><li>在整个组织中应用DevOps做法之后，管理团队需要建立持续的学习和改进文化。系统中的故障和问题应被视为团队从错误中学习并防止这些错误再次发生的宝贵媒介。</li></ul></li><li><p>SCM团队在DevOps中扮演什么角色？</p><p>软件配置管理（SCM）是跟踪和保留开发环境记录的实践，包括在操作系统中进行的所有更改和调整。</p><p>在DevOps中，将SCM作为代码构建在基础架构即代码实践的保护下。</p><p>SCM为开发人员简化了任务，因为他们不再需要手动管理配置过程。 现在，此过程以机器可读的形式构建，并且会自动复制和标准化。</p></li><li><p>质量保证（QA）团队在DevOps中扮演什么角色？</p><p>随着DevOps实践在创新组织中变得越来越受欢迎，QA团队的职责和相关性在当今的自动化世界中已显示出下降的迹象。</p><p>但是，这可以被认为是神话。 DevOps的增加并不等于QA角色的结束。 这仅意味着他们的工作环境和所需的专业知识正在发生变化。 因此，他们的主要重点是专业发展以跟上这种不断变化的趋势。</p><p>在DevOps中，质量保证团队在确保连续交付实践的稳定性以及执行自动重复性测试无法完成的探索性测试任务方面发挥战略作用。 他们在评估测试和检测最有价值的测试方面的见识仍然在缓解发布的最后步骤中的错误方面起着至关重要的作用。</p></li><li><p>DevOps使用哪些工具？ 描述您使用任何这些工具的经验</p><p>在典型的DevOps生命周期中，有不同的工具来支持产品开发的不同阶段。 因此，用于DevOps的最常用工具可以分为6个关键阶段：</p><p>持续开发：Git, SVN, Mercurial, CVS, Jira<br>持续整合：Jenkins, Bamboo, CircleCI<br>持续交付：Nexus, Archiva, Tomcat<br>持续部署：Puppet, Chef, Docker<br>持续监控：Splunk, ELK Stack, Nagios<br>连续测试：Selenium，Katalon Studio</p></li><li><p>如何在DevOps实践中进行变更管理</p><p>典型的变更管理方法需要与DevOps的现代实践适当集成。 第一步是将变更集中到一个平台中，以简化变更，问题和事件管理流程。</p><p>接下来，企业应建立高透明度标准，以确保每个人都在同一页面上，并确保内部信息和沟通的准确性。</p><p>对即将到来的变更进行分层并建立可靠的策略，将有助于最大程度地降低风险并缩短变更周期。 最后，组织应将自动化应用到其流程中，并与DevOps软件集成。</p></li></ol><h2 id="如何有效实施CI-CD"><a href="#如何有效实施CI-CD" class="headerlink" title="如何有效实施CI/CD"></a>如何有效实施CI/CD</h2><ol start="21"><li><p>CI/CD的一些核心组件是什么？</p><p>稳定的CI/CD管道需要用作版本控制系统的存储库管理工具。 这样开发人员就可以跟踪软件版本中的更改。</p><p>在版本控制系统中，开发人员还可以在项目上进行协作，在版本之间进行比较并消除他们犯的任何错误，从而减轻对所有团队成员的干扰。</p><p>连续测试和自动化测试是成功建立无缝CI / CD管道的两个最关键的关键。 自动化测试必须集成到所有产品开发阶段（包括单元测试，集成测试和系统测试），以涵盖所有功能，例如性能，可用性，性能，负载，压力和安全性。</p></li><li><p>CI/CD的一些常见做法是什么？</p><p>以下是建立有效的CI / CD管道的一些最佳实践：</p><ul><li>发展DevOps文化</li><li>实施和利用持续集成</li><li>以相同的方式部署到每个环境</li><li>失败并重新启动管道</li><li>应用版本控制</li><li>将数据库包含在管道中</li><li>监控您的持续交付流程</li><li>使您的CD流水线流畅</li></ul></li><li><p>什么时候是实施CI/CD的最佳时间？</p><p>向DevOps的过渡需要彻底重塑其软件开发文化，包括工作流，组织结构和基础架构。 因此，组织必须为实施DevOps的重大变化做好准备。</p></li><li><p>有哪些常见的CI/CD服务器</p><p>Visual Studio<br>Visual Studio支持具有敏捷计划，源代码控制，包管理，测试和发布自动化以及持续监视的完整开发的DevOps系统。</p><p>TeamCity<br>TeamCity是一款智能CI服务器，可提供框架支持和代码覆盖，而无需安装任何额外的插件，也无需模块来构建脚本。</p><p>Jenkins<br>它是一个独立的CI服务器，通过共享管道和错误跟踪功能支持开发和运营团队之间的协作。 它也可以与数百个仪表板插件结合使用。</p><p>GitLab<br>GitLab的用户可以自定义平台，以进行有效的持续集成和部署。 GitLab帮助CI / CD团队加快代码交付，错误识别和恢复程序的速度。</p><p>Bamboo<br>Bamboo是用于产品发布管理自动化的连续集成服务器。 Bamboo跟踪所有工具上的所有部署，并实时传达错误。</p></li><li><p>描述持续集成的有效工作流程</p><p>实施持续集成的成功工作流程包括以下实践：</p><ul><li>实施和维护项目源代码的存储库</li><li>自动化构建和集成</li><li>使构建自检</li><li>每天将更改提交到基准</li><li>构建所有添加到基准的提交</li><li>保持快速构建</li><li>在生产环境的克隆中运行测试</li><li>轻松获取最新交付物</li><li>使构建结果易于所有人监视</li><li>自动化部署</li></ul></li></ol><h2 id="每种术语之间的差异"><a href="#每种术语之间的差异" class="headerlink" title="每种术语之间的差异"></a>每种术语之间的差异</h2><ol start="26"><li><p>敏捷和DevOps之间有哪些主要区别？</p><p>基本上，DevOps和敏捷是相互补充的。敏捷更加关注开发新软件和以更有效的方式管理复杂过程的价值和原则。同时，DevOps旨在增强由开发人员和运营团队组成的不同团队之间的沟通，集成和协作。</p><p>它需要采用敏捷方法和DevOps方法来形成无缝工作的产品开发生命周期：敏捷原理有助于塑造和引导正确的开发方向，而DevOps利用这些工具来确保将产品完全交付给客户。</p></li><li><p>持续集成，持续交付和持续部署之间有什么区别？</p><p>持续集成（CI）是一种将代码版本连续集成到共享存储库中的实践。这种做法可确保自动测试新代码，并能快速检测和修复错误。</p><p>持续交付使CI进一步迈出了一步，确保集成后，随时可以在一个按钮内就可以释放代码库。因此，CI可以视为持续交付的先决条件，这是CI / CD管道的另一个重要组成部分。</p><p>对于连续部署，不需要任何手动步骤。这些代码通过测试后，便会自动推送到生产环境。</p><p>所有这三个组件：持续集成，持续交付和持续部署是实施DevOps的重要阶段。</p><p>一方面，连续交付更适合于活跃用户已经存在的应用程序，这样事情就可以变慢一些并进行更好的调整。另一方面，如果您打算发布一个全新的软件并且将整个过程指定为完全自动化的，则连续部署是您产品的更合适选择。</p></li><li><p>连续交付和连续部署之间有哪些根本区别？</p><p>在连续交付的情况下，主分支中的代码始终可以手动部署。 通过这种做法，开发团队可以决定何时发布新的更改或功能，以最大程度地使组织受益。</p><p>同时，连续部署将在测试阶段之后立即将代码中的所有更新和修补程序自动部署到生产环境中，而无需任何人工干预。</p></li><li><p>持续集成和持续交付之间的区别是什么？</p><p>持续集成有助于确保软件组件紧密协作。 整合应该经常进行； 最好每小时或每天一次。 持续集成有助于提高代码提交的频率，并降低连接多个开发人员的代码的复杂性。 最终，此过程减少了不兼容代码和冗余工作的机会。</p><p>持续交付是CI / CD流程中的下一步。 由于代码不断集成到共享存储库中，因此可以持续测试该代码。 在等待代码完成之前，没有间隙可以进行测试。 这样可确保找到尽可能多的错误，然后将其连续交付给生产。</p></li><li><p>DevOps和持续交付之间有什么区别？</p><p>DevOps更像是一种组织和文化方法，可促进工程团队和运营团队之间的协作和沟通。</p><p>同时，持续交付是成功将DevOps实施到产品开发工作流程中的重要因素。 持续交付实践有助于使新发行的版本更加乏味和可靠，并建立更加无缝和短的流程。</p><p>DevOps的主要目的是有效地结合Dev和Ops角色，消除所有孤岛，并实现独立于持续交付实践的业务目标。</p><p>另一方面，如果已经有DevOps流程，则连续交付效果最佳。 因此，它扩大了协作并简化了组织的统一产品开发周期。</p></li><li><p>敏捷，精益IT和DevOps之间有什么区别？</p><p>敏捷是仅专注于软件开发的方法。 敏捷旨在迭代开发，建立持续交付，缩短反馈循环以及在整个软件开发生命周期（SDLC）中改善团队协作。</p><p>精益IT是一种旨在简化产品开发周期价值流的方法。 精益专注于消除不必要的过程，这些过程不会增加价值，并创建流程来优化价值流。</p><p>DevOps专注于开发和部署-产品开发过程的Dev和Ops。 其目标是有效整合自动化工具和IT专业人员之间的角色，以实现更简化和自动化的流程。</p></li></ol><h2 id="准备好在下一次DevOps面试中取得成功吗？"><a href="#准备好在下一次DevOps面试中取得成功吗？" class="headerlink" title="准备好在下一次DevOps面试中取得成功吗？"></a>准备好在下一次DevOps面试中取得成功吗？</h2><p>目前有无数的DevOps面试问题，我们目前还不能完全解决。但是，我们希望这些问题和建议的答案能使您掌握DevOps和CI/CD的大量知识，并成功地帮助您完成面试。</p><p>将来，我们将在此列表中添加更多内容。 因此，如果您对此主题有任何建议，请随时与我们联系。最后，我们祝您在测试事业中一切顺利！</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年务必知道的最好用的14款CI/CD工具</title>
      <link href="/2020/03/Best-14-CI-CD-Tools-in-2020/"/>
      <url>/2020/03/Best-14-CI-CD-Tools-in-2020/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.katalon.com/resources-center/blog/ci-cd-tools/" target="_blank" rel="noopener">原文</a></p></blockquote><p>“Quality at Speed” 是软件开发中的新规范。</p><p>企业正在朝着DevOps方法论和敏捷文化迈进，以加快交付速度并确保产品质量。 在DevOps中，连续和自动化的交付周期是使快速可靠的交付成为可能的基础。</p><p>这导致我们需要适当的持续集成和持续交付（CI/CD）工具。 一个“好的”CI/CD工具可以利用团队当前的工作流程，以最佳利用自动化功能并创建可靠的CI/CD管道，并为团队发展提供所需的动力。</p><p>随着市场上大量CI/CD工具的出现，团队可能难以做出艰难的决定来挑选合适的工具。该列表包含“市场上最好的14种CI/CD工具”及其主要功能，使您和团队在选择过程中更加轻松。</p><a id="more"></a><p>以下罗列出了目前市场上最流行的14种最佳CI/CD工具。希望该列表为您在选择CI/CD前提供了足够的信息，更多详细信息您也可以查看官网做更深入的了解。最终结合您的需求以及现有基础架构以及未来潜力和改进的空间是将影响您最终选择的因素，帮助您选择到最适合您的规格的CI/CD软件。</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins是一个开源自动化服务器，在其中进行集中构建和持续集成。它是一个独立的基于Java的程序，带有Windows，macOS，Unix的操作系统的软件包。通过数百种可用的插件，Jenkins支持软件开发项目的构建，部署和自动化。</p><p>Jenkins主要功能：</p><ul><li>易于在各种操作系统上安装和升级</li><li>简单易用的界面</li><li>可通过社区提供的巨大插件资源进行扩展</li><li>在用户界面中轻松配置环境</li><li>支持主从架构的分布式构建</li><li>根据表达式构建时间表</li><li>在预构建步骤中支持Shell和Windows命令执行</li><li>支持有关构建状态的通知</li></ul><p>许可：免费。Jenkins是一个拥有活跃社区的开源工具。</p><p>主页：<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a></p><h2 id="CircleCI"><a href="#CircleCI" class="headerlink" title="CircleCI"></a>CircleCI</h2><p>CircleCI是一种CI/CD工具，支持快速的软件开发和发布。 CircleCI允许从代码构建，测试到部署的整个用户管道自动化。</p><p>您可以将CircleCI与GitHub，GitHub Enterprise和Bitbucket集成，以在提交新代码行时创建内部版本。CircleCI还可以通过云托管选项托管持续集成，或在私有基础架构的防火墙后面运行。</p><p>CircleCI主要功能:</p><ul><li>与Bitbucket，GitHub和GitHub Enterprise集成</li><li>使用容器或虚拟机运行构建</li><li>简易调试</li><li>自动并行化</li><li>快速测试</li><li>个性化的电子邮件和IM通知</li><li>连续和特定于分支机构的部署</li><li>高度可定制</li><li>自动合并和自定义命令以上传软件包</li><li>快速设置和无限构建</li></ul><p>许可：Linux计划从选择不运行任何并行操作开始。开源项目获得了另外三个免费容器。 在注册期间，将看到价格以决定所需的计划。</p><p>主页： <a href="https://circleci.com/" target="_blank" rel="noopener">https://circleci.com/</a></p><h2 id="TeamCity"><a href="#TeamCity" class="headerlink" title="TeamCity"></a>TeamCity</h2><p>TeamCity是JetBrains的构建管理和持续集成服务器。</p><p>TeamCity是一个持续集成工具，可帮助构建和部署不同类型的项目。 TeamCity在Java环境中运行，并与Visual Studio和IDE集成。该工具可以安装在Windows和Linux服务器上，支持.NET和开放堆栈项目。</p><p>TeamCity 2019.1提供了新的UI和本机GitLab集成。它还支持GitLab和Bitbucket服务器拉取请求。该版本包括基于令牌的身份验证，检测，Go测试报告以及AWS Spot Fleet请求。</p><p>TeamCity主要功能:</p><ul><li>提供多种方式将父项目的设置和配置重用到子项目</li><li>在不同环境下同时运行并行构建</li><li>启用运行历史记录构建，查看测试历史记录报告，固定，标记以及将构建添加到收藏夹</li><li>易于定制，交互和扩展服务器</li><li>保持CI服务器正常运行</li><li>灵活的用户管理，用户角色分配，将用户分组，不同的用户身份验证方式以及带有所有用户操作的日志，以透明化服务器上所有活动</li></ul><p>许可：TeamCity是具有免费和专有许可证的商业工具。</p><p>主页： <a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noopener">https://www.jetbrains.com/teamcity/</a></p><h2 id="Bamboo"><a href="#Bamboo" class="headerlink" title="Bamboo"></a>Bamboo</h2><p>Bamboo是一个持续集成服务器，可自动执行软件应用程序版本的管理，从而创建了持续交付管道。Bamboo涵盖了构建和功能测试，分配版本，标记发行版，在生产中部署和激活新版本。</p><p>Bamboo主要功能:</p><ul><li>支持多达100个远程构建代理</li><li>并行运行批次测试并快速获得反馈</li><li>创建图像并推送到注册表</li><li>每个环境的权限，使开发人员和测试人员可以在生产保持锁定状态的情况下按需部署到他们的环境中</li><li>在Git，Mercurial，SVN Repos中检测新分支，并将主线的CI方案自动应用于它们</li><li>触发器基于在存储库中检测到的更改构建。 推送来自Bitbucket的通知，已设置的时间表，另一个构建的完成或其任何组合。</li></ul><p>许可：Bamboo定价层基于代理（Slave）而不是用户。 代理越多，花费越多。</p><p>主页：<a href="https://www.atlassian.com/software/bamboo" target="_blank" rel="noopener">https://www.atlassian.com/software/bamboo</a></p><h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p>GitLab是一套用于管理软件开发生命周期各个方面的工具。 核心产品是基于Web的Git存储库管理器，具有问题跟踪，分析和Wiki等功能。</p><p>GitLab允许您在每次提交或推送时触发构建，运行测试和部署代码。您可以在虚拟机，Docker容器或另一台服务器上构建作业。</p><p>GitLab主要功能:</p><ul><li>通过分支工具查看，创建和管理代码以及项目数据</li><li>通过单个分布式版本控制系统设计，开发和管理代码和项目数据，从而实现业务价值的快速迭代和交付</li><li>提供真实性和可伸缩性的单一来源，以便在项目和代码上进行协作</li><li>通过自动化源代码的构建，集成和验证，帮助交付团队完全接受CI。</li><li>提供容器扫描，静态应用程序安全测试（SAST），动态应用程序安全测试（DAST）和依赖项扫描，以提供安全的应用程序以及许可证合规性</li><li>帮助自动化并缩短发布和交付应用程序的时间</li></ul><p>许可：GitLab是一个商业工具和免费软件包。它提供了在GitLab或您的本地实例和/或公共云上托管SaaS的功能。</p><p>主页：<a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a></p><h2 id="Buddy"><a href="#Buddy" class="headerlink" title="Buddy"></a>Buddy</h2><p>Buddy是一个CI/CD软件，它使用GitHub，Bitbucket和GitLab的代码构建，测试，部署网站和应用程序。它使用具有预安装语言和框架的Docker容器以及DevOps来监视和通知操作，并以此为基础进行构建。</p><p>Buddy主要功能:</p><ul><li>易于将基于Docker的映像自定义为测试环境</li><li>智能变更检测，最新的缓存，并行性和全面的优化</li><li>创建，定制和重用构建和测试环境</li><li>普通和加密，固定和可设置范围：工作空间，项目，管道，操作</li><li>与Elastic，MariaDB，Memcached，Mongo，PostgreSQL，RabbitMQ，Redis，Selenium Chrome和Firefox关联的服务</li><li>实时监控进度和日志，无限历史记录</li><li>使用模板进行工作流管理，以克隆，导出和导入管道</li><li>一流的Git支持和集成</li></ul><p>许可：Buddy是免费的商业工具。</p><p>主页：<a href="https://buddy.works/" target="_blank" rel="noopener">https://buddy.works/</a></p><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>Travis CI是用于构建和测试项目的CI服务。Travis CI自动检测新提交并推送到GitHub存储库的提交。每次提交新代码后，Travis CI都会构建项目并相应地运行测试。</p><p>该工具支持许多构建配置和语言，例如Node，PHP，Python，Java，Perl等。</p><p>Travis主要功能:</p><ul><li>快速设置</li><li>GitHub项目监控的实时构建视图</li><li>拉取请求支持</li><li>部署到多个云服务</li><li>预装的数据库服务</li><li>通过构建时自动部署</li><li>为每个版本清理虚拟机</li><li>支持macOS，Linux和iOS</li><li>支持多种语言，例如Android，C，C＃，C ++，Java，JavaScript（带有Node.js），Perl，PHP，Python，R，Ruby等。</li></ul><p>许可：Travis CI是一项托管的CI/CD服务。私人项目可以在travis-ci.com上进行收费测试。可以在travis-ci.org上免费应用开源项目。</p><p>主页：<a href="https://travis-ci.com" target="_blank" rel="noopener">https://travis-ci.com</a></p><h2 id="Codeship"><a href="#Codeship" class="headerlink" title="Codeship"></a>Codeship</h2><p>Codeship是一个托管平台，可多次支持早期和自动发布软件。通过优化测试和发布流程，它可以帮助软件公司更快地开发更好的产品。</p><p>Codeship主要功能:</p><ul><li>与所选的任何工具，服务和云环境集成</li><li>易于使用。提供快速而全面的开发人员支持。</li><li>借助CodeShip的交钥匙环境和简单的UI，使构建和部署工作更快</li><li>选择AWS实例大小，CPU和内存的选项</li><li>通过通知中心为组织和团队成员设置团队和权限</li><li>无缝的第三方集成，智能通知管理和项目仪表板，可提供有关项目及其运行状况的高级概述。</li></ul><p>许可：每月最多免费使用100个版本，无限版本从$49/月开始。您可以为更大的实例大小购买更多的并发构建或更多的并行管道。</p><p>主页： <a href="https://codeship.com/" target="_blank" rel="noopener">https://codeship.com/</a></p><h2 id="GoCD"><a href="#GoCD" class="headerlink" title="GoCD"></a>GoCD</h2><p>GoCD来自ThoughtWorks，是一个开放源代码工具，用于构建和发布支持CI/CD上的现代基础结构的软件。</p><ul><li>轻松配置相关性以实现快速反馈和按需部署</li><li>促进可信构件：每个管道实例都锚定到特定的变更集</li><li>提供对端到端工作流程的控制，一目了然地跟踪从提交到部署的更改</li><li>容易看到上游和下游</li><li>随时部署任何版本</li><li>允许将任何已知的良好版本的应用程序部署到您喜欢的任何位置</li><li>通过“比较内部版本”功能获得用于任何部署的简单物料清单</li><li>通过GoCD模板系统重用管道配置，使配置保持整洁</li><li>已经有许多插件</li></ul><p>许可：免费和开源</p><p>主页：<a href="https://www.gocd.org/" target="_blank" rel="noopener">https://www.gocd.org/</a></p><h2 id="Wercker"><a href="#Wercker" class="headerlink" title="Wercker"></a>Wercker</h2><p>对于正在使用或正在考虑基于Docker启动新项目的开发人员，Wercker可能是一个合适的选择。 Wercker支持组织及其开发团队使用CI/CD，微服务和Docker。</p><p>2017年4月17日，甲骨文宣布已签署最终协议收购Wercker。</p><p>Wercker主要功能:</p><ul><li>Git集成，包括GitHub，Bitbucket，GitLab和版本控制</li><li>使用Wercker CLI在本地复制SaaS环境，这有助于在部署之前调试和测试管道</li><li>支持Wercker的Docker集成以构建最少的容器并使尺寸可管理</li><li>Walterbot – Wercker中的聊天机器人–允许您与通知交互以更新构建状态</li><li>环境变量有助于使敏感信息远离存储库</li><li>Wercker利用关键安全功能（包括源代码保护）来关闭测试日志，受保护的环境变量以及用户和项目的可自定义权限</li></ul><p>许可：甲骨文在收购后未提供Wercker的价格信息。</p><p>主页：<a href="https://app.wercker.com" target="_blank" rel="noopener">https://app.wercker.com</a></p><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>Semaphore是一项托管的CI/CD服务，用于测试和部署软件项目。 Semaphore通过基于拉取请求的开发过程来建立CI/CD标准。</p><p>Semaphore主要功能:</p><ul><li>与GitHub集成</li><li>自动执行任何连续交付流程</li><li>在最快的CI/CD平台上运行</li><li>自动缩放您的项目，以便您仅需支付使用费用</li><li>本机Docker支持。测试和部署基于Docker的应用程序</li><li>提供Booster –一种功能，用于通过自动并行化Ruby项目的构建来减少测试套件的运行时间</li></ul><p>许可：灵活。使用传统的CI服务，您会受到计划容量的限制。同时，Semaphore 2.0将根据您团队的实际需求进行扩展，因此您无需使用该工具就不必付费</p><p>主页：<a href="https://semaphoreci.com/" target="_blank" rel="noopener">https://semaphoreci.com/</a></p><h2 id="Nevercode"><a href="#Nevercode" class="headerlink" title="Nevercode"></a>Nevercode</h2><p>Nevercode支持移动应用程序的CI/CD。它有助于更​​快地构建，测试和发布本机和跨平台应用程序。</p><p>Nevercode主要功能:</p><ul><li>自动配置和设置</li><li>测试自动化：单元和UI测试，代码分析，真实设备测试，测试并行化</li><li>自动发布：iTunes Connect，Google Play，Crashlytics，T​​estFairy，HockeyApp</li><li>您的构建和测试状态的详细概述</li></ul><p>许可：灵活。针对不同需求进行持续集成的不同计划。您可以从标准计划中选择，也可以请求根据自己的需求量身定制的计划。</p><p>主页：<a href="https://nevercode.io/" target="_blank" rel="noopener">https://nevercode.io/</a></p><h2 id="Spinnaker"><a href="#Spinnaker" class="headerlink" title="Spinnaker"></a>Spinnaker</h2><p>Spinnaker是一个多云连续交付平台，支持在不同的云提供商之间发布和部署软件更改，包括AWS EC2，Kubernetes，Google Compute Engine，Google Kubernetes Engine，Google App Engine等。</p><p>Spinnaker主要功能:</p><ul><li>创建部署管道，以运行集成和系统测试，旋转服务器组和降低服务器组以及监视部署。通过Git事件，Jenkins，Travis CI，Docker，cron或其他Spinnaker管道触发管道</li><li>创建和部署不可变映像，以实现更快的部署，更轻松的回滚以及消除难以调试的配置漂移问题</li><li>使用它们的指标进行金丝雀分析，将您的发行版与诸如Datadog，Prometheus，Stackdriver或SignalFx的监视服务相关联</li><li>使用Halyard – Spinnaker的CLI管理工具安装，配置和更新您的Spinnaker实例</li><li>设置电子邮件，Slack，HipChat或SMS的事件通知（通过Twilio）</li></ul><p>许可：开源</p><p>主页：<a href="https://www.spinnaker.io/" target="_blank" rel="noopener">https://www.spinnaker.io/</a></p><h2 id="Buildbot"><a href="#Buildbot" class="headerlink" title="Buildbot"></a>Buildbot</h2><p>Buildbot是一个“基于Python的CI框架”，可自动执行编译和测试周期以验证代码更改，然后在每次更改后自动重建并测试树。因此，可以快速查明构建问题。</p><p>Buildbot主要功能:</p><ul><li>自动化构建系统，应用程序部署以及复杂软件发布过程的管理</li><li>支持跨多个平台的分布式并行执行，与版本控制系统的灵活集成，广泛的状态报告</li><li>在各种从属平台上运行构建</li><li>任意构建过程并使用C和Python处理项目</li><li>最低主机要求：Python和Twisted</li><li>注意：Buildbot将停止支持Python 2.7，并需要迁移到Python 3。</li></ul><p>许可：开源</p><p>主页：<a href="https://buildbot.net/" target="_blank" rel="noopener">https://buildbot.net/</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给你的 Git 仓库“瘦身”</title>
      <link href="/2020/03/maintaining-a-git-gepository/"/>
      <url>/2020/03/maintaining-a-git-gepository/</url>
      
        <content type="html"><![CDATA[<p>对 Git 仓库的维护通常是为了减少仓库的大小。如果你从另外一个版本控制系统导入了一个仓库，你可能需要在导入后清除掉不必要的文件。本文主要讨论如何从 Git 仓库中删除不需要的文件。</p><a id="more"></a><blockquote><p>请格外小心…..</p><p>本文中的步骤和工具使用的高级技术涉及破坏性操作。确保您在开始之前仔细读过并备份了你的仓库，创建一个备份最容易的方式是使用 –mirror 标志对你的仓库克隆，然后对整个克隆的文件进行打包压缩。有了这个备份，如果在维护期间意外损坏了你的仓库的关键元素，那么你可以通过备份的仓库来恢复。</p><p>请记住，仓库维护对仓库的用户可能会是毁灭性的。与你的团队或者仓库的关注者进行沟通会是很有必要的。确保每个人都已经检查了他们的代码，并且同意在仓库维护期间停止开发。</p></blockquote><h2 id="理解从-Git-的历史记录中删除文件"><a href="#理解从-Git-的历史记录中删除文件" class="headerlink" title="理解从 Git 的历史记录中删除文件"></a>理解从 Git 的历史记录中删除文件</h2><p>回想一下，克隆仓库会克隆整个历史记录——包括每个源代码文件的所有版本。如果一个用户提交了一个较大的文件，比如一个 JAR，则随后的每次克隆都会包含这个文件。即使用户最终在后面的某次提交中删除了这个文件，但是这个文件仍然存在于这个仓库的历史记录中。要想完全的从你的仓库中删除这个文件，你必须：</p><ul><li>从你的项目的当前的文件树中删除该文件;</li><li>从仓库的历史记录中删除文件——重写 Git 历史记录，从包含该文件的所有的提交中删除这个文件;</li><li>删除指向旧的提交历史记录的所有 reflog 历史记录;</li><li>重新整理仓库，使用 <code>git gc</code> 对现在没有使用的数据进行垃圾回收。</li></ul><p>Git 的 <code>gc</code>（垃圾回收）将通过你的任何一个分支或者标签来删除仓库中所有的实际没用的或者以某种方式引用的数据。为了使其发挥作用，我们需要重写包含不需要的文件的所有 Git 仓库历史记录，仓库将不再引用它 <code>git gc</code> 将会丢弃所有没用的数据。</p><p>重写存储库历史是一个棘手的事情，因为每个提交都依赖它的父提交，所以任何一个很小的改变都会改变它的每一个随后的提交的提交。有两个自动化的工具可以帮助你做这件事：</p><ol><li><code>BFG Repo Cleaner</code> —— 快速、简单且易于使用，需要 Java 6 或者更高版本的运行环境。</li><li><code>git filter-branch</code> —— 功能强大、配置麻烦，用于大于仓库时速度较慢，是核心 Git 套件的一部分。</li></ol><p>切记，当你重写历史记录后，无论你是使用 BFG 还是使用 filter-branch，你都需要删除指向旧的历史记录的 <code>reflog</code> 条目，最后运行垃圾回收器来删除旧的数据。</p><h2 id="使用-BFG-重写历史记录"><a href="#使用-BFG-重写历史记录" class="headerlink" title="使用 BFG 重写历史记录"></a>使用 BFG 重写历史记录</h2><p>BFG 是为将像大文件或者密码这些不想要的数据从 Git 仓库中删除而专门设计的，所以它有一一个简单的标志用来删除那些大的历史文件（不在当前的提交里面）：<code>--strip-blobs-bigger-than</code></p><p>BFG <a href="https://repo1.maven.org/maven2/com/madgag/bfg" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar bfg.jar --strip-blobs-than 100M</span><br></pre></td></tr></table></figure><p>大小超过 100MB 的任何文件（不包含在你最近的提交中的文件——因为 BFG 默认会保护你的最新提交的内容）将会从你的 Git 仓库的历史记录中删除。如果你想用名字来指明具体的文件，你也可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar bfg.jar --delete-files *.mp4</span><br></pre></td></tr></table></figure><p>BFG 的速度要比 git filter-branch 快 10-1000 倍，而且通常更容易使用——查看完整的<a href="https://rtyley.github.io/bfg-repo-cleaner/#usage" target="_blank" rel="noopener">使用说明</a>和<a href="https://rtyley.github.io/bfg-repo-cleaner/#examples" target="_blank" rel="noopener">示例</a>获取更多细节。</p><h2 id="或者，使用-git-filter-branch-来重写历史记录"><a href="#或者，使用-git-filter-branch-来重写历史记录" class="headerlink" title="或者，使用 git filter-branch 来重写历史记录"></a>或者，使用 git filter-branch 来重写历史记录</h2><p><code>filter-branch</code> 命令可以对 Git 仓库的历史记录重写，就像 BFG 一样，但是过程更慢和更手动化。如果你不知道这些大文件在哪里，那么你第一步就需要找到它们：</p><h3 id="手动查看你-Git-仓库中的大文件"><a href="#手动查看你-Git-仓库中的大文件" class="headerlink" title="手动查看你 Git 仓库中的大文件"></a>手动查看你 Git 仓库中的大文件</h3><p><a href="https://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/" target="_blank" rel="noopener">Antony Stubbs</a> 写了一个可以很好地完成这个功能的 BASH 脚本。该脚本可以检查你的包文件的内容并列出大文件。在你开始删除文件之前，请执行以下操作获取并安装此脚本：</p><ol><li><p><a href="https://confluence.atlassian.com/bitbucket/files/321848291/321979854/1/1360604134990/git_find_big.sh" target="_blank" rel="noopener">下载脚本</a>到你的本地的系统</p></li><li><p>将它放在一个可以访问你的 Git 仓库的易于找到的位置</p></li><li><p>让脚本成为可执行文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 git_find_big.sh</span><br></pre></td></tr></table></figure></li><li><p>克隆仓库到你本地系统</p></li><li><p>改变当前目录到你的仓库根目录</p></li><li><p>手动运行 Git 垃圾回收器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc --auto</span><br></pre></td></tr></table></figure></li><li><p>找出 .git 文件夹的大小</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意文件大小，以便随后参考</span></span><br><span class="line">du -hs .git/objects</span><br><span class="line">45M .git/objects</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>git_find_big.sh</code> 脚本来列出你的仓库中的大文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git_find_big.sh</span><br><span class="line">All sizes are <span class="keyword">in</span> kB<span class="string">'s. The pack column is the size of the object, compressed, inside the pack file.</span></span><br><span class="line"><span class="string">size  pack  SHA                                       location</span></span><br><span class="line"><span class="string">592   580   e3117f48bc305dd1f5ae0df3419a0ce2d9617336  media/img/emojis.jar</span></span><br><span class="line"><span class="string">550   169   b594a7f59ba7ba9daebb20447a87ea4357874f43  media/js/aui/aui-dependencies.jar</span></span><br><span class="line"><span class="string">518   514   22f7f9a84905aaec019dae9ea1279a9450277130  media/images/screenshots/issue-tracker-wiki.jar</span></span><br><span class="line"><span class="string">337   92    1fd8ac97c9fecf74ba6246eacef8288e89b4bff5  media/js/lib/bundle.js</span></span><br><span class="line"><span class="string">240   239   e0c26d9959bd583e5ef32b6206fc8abe5fea8624  media/img/featuretour/heroshot.png</span></span><br></pre></td></tr></table></figure></li></ol><p>大文件都是 JAR 文件，包的大小列是最相关的。aui-dependencies.jar 被压缩到 169kb，但是 emojis.jar 只压缩到 500kb。emojis.jar 就是一个待删除的对象。</p><h3 id="运行-filter-branch"><a href="#运行-filter-branch" class="headerlink" title="运行 filter-branch"></a>运行 filter-branch</h3><p>你可以给这个命令传递一个用于重写 Git 索引的过滤器。例如，一个过滤器可以可以将每个检索的提交删除。这个用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --index-filter <span class="string">'git rm --cached --ignore-unmatch&amp;nbsp; _pathname_ '</span> commitHASH</span><br></pre></td></tr></table></figure><p><code>--index-filter</code> 选项可以修改仓库的索引，<code>--cached</code> 选项从索引中而不是磁盘来删除文件。这样会更快，因为你不需要在运行这个过滤器前检查每个修订版本。<br><code>git rm</code> 中的 <code>ignore-unmatch</code> 选项可以防止在尝试移走不存在的文件 pathname 的时候命令失败。通过指定一个提交 HASH 值，你可以从每个以这个 HASH 值开始的提交中删除 pathname。要从开始处删除，你可以省略这个参数或者指定为 HEAD。</p><p>如果你的大文件在不同的分支，你将需要通过名字来删除每个文件。如果大文件都在一个单独的分支，你可以直接删除这个分支本身。</p><h4 id="选项-1：通过文件名删除文件"><a href="#选项-1：通过文件名删除文件" class="headerlink" title="选项 1：通过文件名删除文件"></a>选项 1：通过文件名删除文件</h4><p>使用下面的步骤来删除大文件：</p><ol><li><p>使用下面的命令来删除你找到的第一个大文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --index-filter <span class="string">'git rm --cached --ignore-unmatch filename'</span> HEAD</span><br></pre></td></tr></table></figure></li><li><p>重复步骤 1 找到剩下的每个大文件</p></li><li><p>在你的仓库里更新引用。 <code>filter-branch</code> 会为你原先的引用创建一个 <code>refs/original/</code> 下的备份。一旦你确信已经删除了正确的文件，你可以运行下面的命令来删除备份文件，同时可以让垃圾回收器回收大的对象</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">for</span>-each-ref --format=<span class="string">"%(refname)"</span> refs/original/ | xargs -n 1 git update-ref -d</span><br></pre></td></tr></table></figure></li></ol><h4 id="选项-2：直接删除分支"><a href="#选项-2：直接删除分支" class="headerlink" title="选项 2：直接删除分支"></a>选项 2：直接删除分支</h4><p>如果你所有的大文件都在一个单独的分支上，你可以直接删除这个分支。删除这个分支会自动删除所有的引用。</p><ol><li><p>删除分支</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D PROJ567bugfix</span><br></pre></td></tr></table></figure></li><li><p>从后面的分支中删除所有的 reflog 引用</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog expire --expire=now PROJ567bugfix</span><br></pre></td></tr></table></figure></li></ol><h4 id="对不用的数据垃圾回收"><a href="#对不用的数据垃圾回收" class="headerlink" title="对不用的数据垃圾回收"></a>对不用的数据垃圾回收</h4><ol><li><p>删除从现在到后面的所有 reflog 引用（除非你明确地只在一个分支上操作）</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog expire --expire=now --all</span><br></pre></td></tr></table></figure></li><li><p>通过运行垃圾回收器和删除旧的对象重新打包仓库。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure></li><li><p>把你所有的修改推送回仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all --force</span><br></pre></td></tr></table></figure></li><li><p>确保你所有的标签也是当前最新的</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags --force</span><br></pre></td></tr></table></figure></li></ol><p><a href="https://confluence.atlassian.com/bitbucket/maintaining-a-git-repository-321848291.html" target="_blank" rel="noopener">英文原文地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cleanup </tag>
            
            <tag> Azure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一款免费的 C/C++ 静态代码分析工具 Cppcheck 与 Jenkins 集成</title>
      <link href="/2020/02/cppcheck/"/>
      <url>/2020/02/cppcheck/</url>
      
        <content type="html"><![CDATA[<p>由于历史遗留原因，我们当前产品的代码仓库里遗留很多 Warning，这些 Warning 不是一时半会可以解决掉的。只有通过不断的丰富自动化测试用例，来保障最后的质量关卡，才敢有条不紊的进行 Warining 的修复，在次之前，如何有效杜绝继续引入更多的 Warining 是当下应该做的。</p><a id="more"></a><p>因此我想在 Pull Request 阶段加入 C/C++ 的静态代码扫描的集成，但是很多工具只要涉及的是 C/C++ 经常都是收费的，比如这里首选的 SonarQube，Community 版本不支持 C/C++ 代码扫描，只有 Developer 以及 Enterprise 等付费版本才支持，在静态代码扫描还没有带来收益之前，盲目的付费只会给产品带来更多的成本，因此决定先寻找其他开源工具来替代。</p><p>最终我选择了 CPPCheck，主要有以下几个原因：</p><ol><li>这是为数不多的 C/C++ 开源静态代码扫描工具</li><li>可以与 Jenkins 集成，可以在 Jenkins 里查看结果报告</li><li>支持 Jenkins Pipeline</li></ol><p>本文记录我调查和使用的经验，如果您也相关的需求，提供一点参考。</p><h2 id="安装-Cppcheck"><a href="#安装-Cppcheck" class="headerlink" title="安装 Cppcheck"></a>安装 Cppcheck</h2><p>安装到 Linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cppcheck.x86_64</span><br></pre></td></tr></table></figure><p>其他平台安装请参考 cppcheck <a href="http://cppcheck.sourceforge.net/" target="_blank" rel="noopener">官网</a></p><p>如果你在 Linux 无法通过命令一键安装，也可通过下载源代码构建 cppcheck。以下是从代码手动构建一个 cppcheck 可执行文件的步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> opt &amp;&amp; mkdir cppcheck &amp;&amp; <span class="built_in">cd</span> cppcheck</span><br><span class="line"><span class="comment"># 下载代码</span></span><br><span class="line">wget https://github.com/danmar/cppcheck/archive/1.90.tar.gz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xvf 1.90.tar.gz</span><br><span class="line"><span class="comment"># make build</span></span><br><span class="line"><span class="built_in">cd</span> cppcheck-1.90</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">cmake --build .</span><br><span class="line"><span class="comment"># link</span></span><br><span class="line">sudo ln -s /opt/cppcheck/cppcheck-1.90/cppcheck /usr/bin/cppcheck</span><br><span class="line"><span class="comment"># 检查是否安装成功</span></span><br><span class="line"><span class="built_in">which</span> cppcheck</span><br><span class="line">/usr/bin/cppcheck</span><br><span class="line">cppcheck --version</span><br><span class="line">Cppcheck 1.90</span><br></pre></td></tr></table></figure><h2 id="使用-cppcheck-静态代码扫描"><a href="#使用-cppcheck-静态代码扫描" class="headerlink" title="使用 cppcheck 静态代码扫描"></a>使用 cppcheck 静态代码扫描</h2><p>在与 Jenkins 集成之前，先看看这个工具怎么用。通过查阅<a href="http://cppcheck.sourceforge.net/manual.pdf" target="_blank" rel="noopener">Cppcheck 官方文档</a>，一般的使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如扫描 src 下 public 和 themes 两个目录下的代码将结果输出到 cppcheck.xml</span></span><br><span class="line">cppcheck src/public src/themes --xml 2&gt; cppcheck.xml</span><br></pre></td></tr></table></figure><h2 id="Cppcheck-与-Jenkins-集成"><a href="#Cppcheck-与-Jenkins-集成" class="headerlink" title="Cppcheck 与 Jenkins 集成"></a>Cppcheck 与 Jenkins 集成</h2><p>首先，下载 Cppcheck Jenkins <a href="https://plugins.jenkins.io/cppcheck/" target="_blank" rel="noopener">插件</a>，通过 Pipeline Syntax 生成了此代码 <code>publishCppcheck pattern: &#39;cppcheck.xml&#39;</code></p><p>但是在读取 xml 文件进行报告展示时，我遇到了两个问题：</p><p>问题1：分析 cppcheck.xml 我在有的 Linux 机器上成功，有的机器上会失败，我怀疑是我的 JDK 版本不同所致。Jenkins JIRA 我也找到了次问题 <a href="https://issues.jenkins-ci.org/browse/JENKINS-60077" target="_blank" rel="noopener">JENKINS-60077</a> 但目前还没有人来解决。</p><p>我之所以没有继续尝试去解决问题1，最主要的原因是它有一个对我来说是更致命的缺陷，那就是下面说的问题。</p><p>问题2： 无法通过 Cppcheck Results 报告直接查看代码，这样就算扫描出来了问题还需要去 git 或是本地的 IDE 上去查看具体的问题，大大降低效率。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看代码文件时会出错</span></span><br><span class="line">Can<span class="string">'t read file: Can'</span>t access the file: file:/disk1/agent/workspace/cppcheck-ud113/src/public/dummy/err_printf.c</span><br></pre></td></tr></table></figure><p>并且官方也相应的 Ticket 记录了该问题 <a href="https://issues.jenkins-ci.org/browse/JENKINS-42613" target="_blank" rel="noopener">JENKINS-42613</a> 和 <a href="https://issues.jenkins-ci.org/browse/JENKINS-54209" target="_blank" rel="noopener">JENKINS-54209</a>，JENKINS-42613 一直在等待 merge，截止发文，都还是暂时没有解决。</p><p>最后我发现 <a href="https://plugins.jenkins.io/warnings-ng/" target="_blank" rel="noopener">Warnings Next Generation</a> 这个插件将取代整个 Jenkins 静态分析套件，其中包含了这些插件 Android Lint, CheckStyle, Dry, FindBugs, PMD, Warnings, Static Analysis Utilities, Static Analysis Collector，最后通过 Warnings Next Generation 插件解决了报告展示的问题。</p><p>这里可以通过 Pipeline Syntax 生成读取报告代码 <code>recordIssues(tools: [codeAnalysis(pattern: &#39;cppcheck.xml&#39;)])</code></p><p>更多有关 Warnings Next Generation 插件的使用，请参看<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md" target="_blank" rel="noopener">文档</a></p><h3 id="最终-Pipeline-示例如下"><a href="#最终-Pipeline-示例如下" class="headerlink" title="最终 Pipeline 示例如下"></a>最终 Pipeline 示例如下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">      label <span class="string">'cppcheck'</span></span><br><span class="line">      customWorkspace <span class="string">"/agent/workspace/cppcheck"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">    string(name: <span class="string">'Branch'</span>, defaultValue: <span class="string">'develop'</span>, description: <span class="string">'Which branch do you want to do cppcheck?'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options &#123;</span><br><span class="line">    timestamps ()</span><br><span class="line">    buildDiscarder(logRotator(numToKeepStr:<span class="string">'50'</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stage(<span class="string">"Checkout"</span>)&#123;</span><br><span class="line">    steps&#123;</span><br><span class="line">      checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'*/$&#123;Branch&#125;'</span>]],</span><br><span class="line">      browser: [<span class="variable">$class</span>: <span class="string">'BitbucketWeb'</span>, repoUrl: <span class="string">'https://git.yourcompany.com/projects/repos/cppcheck-example/browse'</span>],</span><br><span class="line">      doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [</span><br><span class="line">      [<span class="variable">$class</span>: <span class="string">'LocalBranch'</span>, localBranch: <span class="string">'**'</span>], [<span class="variable">$class</span>: <span class="string">'CheckoutOption'</span>, timeout: 30], [<span class="variable">$class</span>: <span class="string">'CloneOption'</span>, depth: 1, noTags: <span class="literal">false</span>, reference: <span class="string">''</span>, shallow: <span class="literal">true</span>,   timeout: 30]], submoduleCfg: [],</span><br><span class="line">      userRemoteConfigs: [[credentialsId: <span class="string">'d1cbab74-823d-41aa-abb7'</span>, url: <span class="string">'https://git.yourcompany.com/scm/cppcheck-example.git'</span>]]])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stage(<span class="string">"Cppcheck"</span>)&#123;</span><br><span class="line">    steps&#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        sh <span class="string">'cppcheck src/public src/themes --xml 2&gt; cppcheck.xml'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  stage(<span class="string">'Publish results'</span>)&#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">      recordIssues(tools: [cppCheck(pattern: <span class="string">'cppcheck.xml'</span>)])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="报告展示"><a href="#报告展示" class="headerlink" title="报告展示"></a>报告展示</h3><p>我将 CPPCheck 应用到每个 Pull Request 里，当开发提交新的代码时，CPPCheck 就会去扫描代码，然后跟之前的历史记录做对比。CPPCheck 执行成功并生成报告，这里会出现一个按钮，点击进入。</p><p><img src="/2020/02/cppcheck/cppcheck-icon.png" alt="CPPCheck 入口"></p><p>打开之后就会当前分支代码的扫结果。</p><p><img src="/2020/02/cppcheck/cppcheck-view.png" alt="CPPCheck 当前的结果"></p><p>CPPCheck 有三个维度来来展示静态代码扫描结果：</p><ol><li><p>严重程度分布（Severities Distribution）：这里分为 High，Normal，Low 三种级别</p></li><li><p>参考比较（Reference Comparison）：这里会参考之前的数据进行比较，如果有新增就会显示 New，如果是现存的就显示为 Outstanding，如果减少了就会显示 Fixed</p></li><li><p>历史（History）：随着代码的增加和修改，这里会显示一个历史记录的趋势</p></li></ol><p>注意：cppcheck 相关的 xml 是存储在 Jenkins master 上，只有当前的 Jenkins Job 被人为删掉，那么 cppcheck xml 才会被删掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-sh-4.2$ ls -l cppcheck*</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 418591 Feb 27 05:54 cppcheck-blames.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins    219 Feb 27 05:54 cppcheck-fixed-issues.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 142298 Feb 27 05:54 cppcheck-forensics.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins    219 Feb 27 05:54 cppcheck-new-issues.xml</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 488636 Feb 27 05:54 cppcheck-outstanding-issues.xml</span><br></pre></td></tr></table></figure><p><img src="/2020/02/cppcheck/cppcheck-code.png" alt="查看具体 Warining 代码"></p><p>点击相应的连接就可以直接跳转到具体的代码警告位置了。</p><p>它是不是还挺香的？</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> cppcheck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 VirtualBox 配置一台 Linux 虚拟机</title>
      <link href="/2020/02/Setup-Linux-in-VirtualBox/"/>
      <url>/2020/02/Setup-Linux-in-VirtualBox/</url>
      
        <content type="html"><![CDATA[<p>如果你想使用 Linux 但又不想租用云厂商的虚拟机，那么 VirtualBox 是一个比较好的选择。我们可以在 VirtualBox 安装你需要的绝大数的操作系统。</p><p>为了保证使用的流畅，这里最好使用内存建议 8G 及以上，硬盘 256 GB 的 Windows 电脑。</p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>下载和安装 VirtualBox <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">https://www.virtualbox.org/wiki/Downloads</a></li><li>CentOS 镜像下载地址 <a href="https://mirror.umd.edu/centos/7/isos/x86_64/" target="_blank" rel="noopener">https://mirror.umd.edu/centos/7/isos/x86_64/</a></li><li>Ubuntu 镜像下载地址 <a href="https://ubuntu.com/#download" target="_blank" rel="noopener">https://ubuntu.com/#download</a></li></ul><p>安装和配置</p><p><em>本文没有详细介绍每个安装步骤，只列出一些关键步骤。</em></p>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最有用的 Linux 命令行技巧</title>
      <link href="/2020/02/linux-tips/"/>
      <url>/2020/02/linux-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h2><p>列出当前目录的文件和文件夹。参数:</p><p><code>-l</code> 列出时显示详细信息</p><p><code>-a</code> 显示所有文件，包括隐藏的和不隐藏的</p><a id="more"></a><p>可以组合使用，像这样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -la</span><br></pre></td></tr></table></figure><h2 id="cp-命令"><a href="#cp-命令" class="headerlink" title="cp 命令"></a>cp 命令</h2><p>将源文件复制到目标。参数：</p><p><code>-i</code> 交互模式意味着等待确认，如果目标上有文件将被覆盖。</p><p><code>-r</code> 递归复制，意味着包含子目录（如果有的话）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp –ir source_dir target_dir</span><br></pre></td></tr></table></figure><h2 id="tmp-空间不够怎么办"><a href="#tmp-空间不够怎么办" class="headerlink" title="/tmp 空间不够怎么办"></a>/tmp 空间不够怎么办</h2><p>在 /etc/fstab 文件里增加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/fstab</span><br><span class="line"><span class="comment"># 添加如下一行</span></span><br><span class="line">tmpfs                   /tmp                    tmpfs   defaults,size=4G          0 0</span><br></pre></td></tr></table></figure><p>重启之后，<code>df -h</code> 查看，/tmp 目录已经就变成 4G 了。</p><p>More, Refer to these links</p><ul><li><a href="https://likegeeks.com/main-linux-commands-easy-guide/" target="_blank" rel="noopener">https://likegeeks.com/main-linux-commands-easy-guide/</a></li><li><a href="https://dzone.com/articles/most-useful-linux-command-line-tricks" target="_blank" rel="noopener">https://dzone.com/articles/most-useful-linux-command-line-tricks</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HP-UX 安装工具以及一些使用总结</title>
      <link href="/2020/02/hpxu-tips/"/>
      <url>/2020/02/hpxu-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-Java8"><a href="#安装-Java8" class="headerlink" title="安装 Java8"></a>安装 Java8</h2><p>安装包下载链接是 <a href="https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=JDKJRE8018" target="_blank" rel="noopener">https://h20392.www2.hpe.com/portal/swdepot/displayProductInfo.do?productNumber=JDKJRE8018</a></p><p>需要先注册，然后登陆后才能下载，我下载的是 <code>Itanium_JDK_8.0.18_June_2019_Z7550-96733_java8_18018_ia.depot</code></p><p>在线安装文档 <a href="https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-c04481894" target="_blank" rel="noopener">https://support.hpe.com/hpesc/public/docDisplay?docId=emr_na-c04481894</a></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swinstall -s /tmp/Itanium_JDK_8.0.18_June_2019_Z7550-96733_java8_18018_ia.depot</span><br><span class="line"></span><br><span class="line"><span class="comment"># if swinstall not found</span></span><br><span class="line">/usr/sbin/swinstall -s /tmp/Itanium_JDK_8.0.18_June_2019_Z7550-96733_java8_18018_ia.depot</span><br></pre></td></tr></table></figure><p>安装成功后，会在根目录 opt 下多了一个 java8 目录，检查下 java 版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash-5.0$ <span class="built_in">pwd</span></span><br><span class="line">/opt/java8</span><br><span class="line">bash-5.0$ <span class="built_in">cd</span> bin</span><br><span class="line">bash-5.0$ java -version</span><br><span class="line">java version <span class="string">"1.8.0.18-hp-ux"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0.18-hp-ux-b1)</span><br><span class="line">Java HotSpot(TM) Server VM (build 25.18-b1, mixed mode)</span><br></pre></td></tr></table></figure><p>创建软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/java8/bin/java /bin/java</span><br></pre></td></tr></table></figure><h2 id="安装-gzip-和-gunzip"><a href="#安装-gzip-和-gunzip" class="headerlink" title="安装 gzip 和 gunzip"></a>安装 gzip 和 gunzip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 gzip</span></span><br><span class="line">/usr/bin/sudo /usr/<span class="built_in">local</span>/bin/depothelper gzip</span><br></pre></td></tr></table></figure><p>如果你机器上已经有 zip 和 gunzip 了，只需要软连接一下即可，防止出现命令找不到的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/sudo ln -s /usr/contrib/bin/gzip /usr/bin/gzip</span><br><span class="line">/usr/bin/sudo ln -s /usr/contrib/bin/gunzip /usr/bin/gunzip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UNIX </tag>
            
            <tag> HP-UX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Jenkins 定期自动给老板提供 Git 仓库的多维度代码分析报告</title>
      <link href="/2020/01/git-stats-jenkins/"/>
      <url>/2020/01/git-stats-jenkins/</url>
      
        <content type="html"><![CDATA[<p>上一篇（GitStats - Git 历史统计信息工具），我已经给老板提供了他想看的所有仓库的 Git 提交历史分析报告了，并且把报告都部署到了一台虚拟机的 tomcat 上了，老板可以通过网址访问直接查看每个仓库的分析报告了，看看谁的贡献大，谁活跃，谁偷懒了，谁周末写代码了（这里不鼓励 996）。</p><p>最近老板提需求了。</p><p><em>老板：你弄个这个网址的数据咋不更新呢？报告上咋没见你们提交代码呢？</em><br><em>小开：老板儿，您看到这些一个个仓库的数据都是小开我人肉手动生成的，要不您给我点时间，我来做个自动化任务吧。</em></p><a id="more"></a><p>我这么积极主动，不是我奉承老板，我心里也知道老板如果觉得 Git Stats 这个工具好用，肯定希望看到的分析报告是最新的。既然老板先提了，那我就别磨蹭了，赶紧干吧。</p><p>不过用啥实现呢？肯定是 Jenkins 了。一来我已经在 Jenkins 上做了很多的自动化任务了，轻车熟路；二来使用同一套系统不但可以减少繁多的系统入口，降低学习成本，也提高 Jenkins 服务器的利用率。</p><p>设身处地的考虑了下老板的使用需求，他肯定不希望自己去 Jenkins 服务器上去运行 Job 来生成这个Git 仓库的多维度代码分析报告，那么，如果我是老板，我希望：</p><ol><li>这个 Jenkins 任务要定期执行，不需要太频繁，一周更新一次就行；</li><li>另外还要支持对单独仓库的单独执行，一旦老板要立即马上查看某个仓库的的分析报告呢。</li></ol><p>最后实现的效果如下：</p><h2 id="手动执行"><a href="#手动执行" class="headerlink" title="手动执行"></a>手动执行</h2><p>老板可以勾选他最关心的代码仓库进行更新</p><h2 id="每周末定时执行"><a href="#每周末定时执行" class="headerlink" title="每周末定时执行"></a>每周末定时执行</h2><p>老板在周一上班就能看到最新的分析数据了，可以看到这个任务 Started by timer</p><h2 id="最终的-Jenkinsfile-是这样的"><a href="#最终的-Jenkinsfile-是这样的" class="headerlink" title="最终的 Jenkinsfile 是这样的"></a>最终的 Jenkinsfile 是这样的</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent&#123;</span><br><span class="line">    node &#123;</span><br><span class="line">      label <span class="string">'main-slave'</span></span><br><span class="line">      customWorkspace <span class="string">"/workspace/gitstats"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">    USER_CRE = credentials(<span class="string">"d1cbab74-823d-41aa-abb7"</span>)</span><br><span class="line">    webapproot = <span class="string">"/workspace/apache-tomcat-7.0.99/webapps/gitstats"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">    booleanParam(defaultValue: <span class="literal">true</span>, name: <span class="string">'repo1'</span>, description: <span class="string">'uncheck to disable [repo1]'</span>)</span><br><span class="line">    booleanParam(defaultValue: <span class="literal">true</span>, name: <span class="string">'repo2'</span>, description: <span class="string">'uncheck to disable [repo2]'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  triggers &#123;</span><br><span class="line">    cron <span class="string">'0 3 * * 7'</span>    <span class="comment"># 每周日早上进行定时运行，因此此时机器是空闲的。</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options &#123;</span><br><span class="line">    buildDiscarder(logRotator(numToKeepStr:<span class="string">'10'</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stages&#123;</span><br><span class="line">    stage(<span class="string">"Checkout gitstats"</span>)&#123;</span><br><span class="line">      steps&#123;</span><br><span class="line">        <span class="comment"># 准备存放 html 报告目录</span></span><br><span class="line">        sh <span class="string">"mkdir -p html"</span></span><br><span class="line">        <span class="comment"># 下载 gitstats 代码</span></span><br><span class="line">        sh <span class="string">"rm -rf gitstats &amp;&amp; git clone https://github.com/hoxu/gitstats.git"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">"Under statistics"</span>) &#123;</span><br><span class="line">      parallel &#123;</span><br><span class="line">        stage(<span class="string">"reop1"</span>) &#123;</span><br><span class="line">          when &#123;</span><br><span class="line">            expression &#123; <span class="built_in">return</span> params.repo1 &#125;  <span class="comment"># 判断是否勾选了</span></span><br><span class="line">          &#125;</span><br><span class="line">          steps &#123;</span><br><span class="line">            <span class="comment"># 下载要进行分析的仓库 repo1</span></span><br><span class="line">            sh <span class="string">'git clone -b master https://$USER_CRE_USR:"$USER_CRE_PSW"@git.software.com/scm/repo1.git'</span></span><br><span class="line">            <span class="comment"># 进行仓库 repo1 的历史记录分析</span></span><br><span class="line">            sh <span class="string">"cd gitstats &amp;&amp; ./gitstats ../repo1 ../html/repo1"</span></span><br><span class="line">          &#125;</span><br><span class="line">          post &#123;</span><br><span class="line">            success &#123;</span><br><span class="line">              <span class="comment"># 如果分析成功，则将分析结果放到 apache-tomcat-7.0.99/webapps/gitstats 目录下</span></span><br><span class="line">              sh <span class="string">'rm -rf $&#123;webapproot&#125;/repo1 &amp;&amp; mv html/repo1 $&#123;webapproot&#125;'</span></span><br><span class="line">              <span class="comment"># 然后删掉 repo1 的代码和 html 报告，以免不及时清理造成磁盘空间的过度占用</span></span><br><span class="line">              sh <span class="string">"rm -rf repo1"</span></span><br><span class="line">              sh <span class="string">"rm -rf html/repo1"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stage(<span class="string">"repo2"</span>) &#123;</span><br><span class="line">          when &#123;</span><br><span class="line">            expression &#123; <span class="built_in">return</span> params.repo2 &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          steps &#123;</span><br><span class="line">            sh <span class="string">'git clone -b master https://$USER_CRE_USR:"$USER_CRE_PSW"@git.software.com/scm/repo2.git'</span></span><br><span class="line">            sh <span class="string">"cd gitstats &amp;&amp; ./gitstats ../repo2 ../html/repo2"</span></span><br><span class="line">          &#125;</span><br><span class="line">          post &#123;</span><br><span class="line">            success &#123;</span><br><span class="line">              sh <span class="string">'rm -rf $&#123;webapproot&#125;/repo2 &amp;&amp; mv html/repo2 $&#123;webapproot&#125;'</span></span><br><span class="line">              sh <span class="string">"rm -rf repo2"</span></span><br><span class="line">              sh <span class="string">"rm -rf html/repo2"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  post&#123;</span><br><span class="line">    always&#123;</span><br><span class="line">      <span class="comment"># 总是给执行者分送邮件通知，不论是否成功都会对工作空间进行清理</span></span><br><span class="line">      script &#123;</span><br><span class="line">        def email = load <span class="string">"vars/email.groovy"</span></span><br><span class="line">        email.build(currentBuild.result, <span class="string">''</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      cleanWs()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果你是测试、DevOps或是从事研发效能方面的工作，那么利用好开源工具，比如 Jenkins 和 Git Stats 就可以快速帮助老板或是你自己提供一个 Git 仓库的多维度代码分析报告，有助于更加了解产品的代码情况。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Stats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AIX 上安装工具以及一些使用总结</title>
      <link href="/2020/01/aix-tips/"/>
      <url>/2020/01/aix-tips/</url>
      
        <content type="html"><![CDATA[<p>记录在使用 AIX 时所遇到的问题和解决办法，以备以后遇到同样问题不要再因为这些再浪费时间，希望也能帮助到你。</p><a id="more"></a><h2 id="在-AIX-上无法解压超一个大约-600-MB-文件"><a href="#在-AIX-上无法解压超一个大约-600-MB-文件" class="headerlink" title="在 AIX 上无法解压超一个大约 600 MB 文件"></a>在 AIX 上无法解压超一个大约 600 MB 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bash-4.3$ ls</span><br><span class="line">data_cdrom_debug_AIX_05949fb.tar.Z</span><br><span class="line">bash-4.3$ gzip -d data_cdrom_debug_AIX_05949fb.tar.Z</span><br><span class="line"><span class="comment"># 错误信息</span></span><br><span class="line">gzip: data_cdrom_debug_AIX_05949fb.tar: File too large</span><br><span class="line"><span class="comment"># 解决办法</span></span><br><span class="line">bash-4.3$ sudo vi /etc/security/limits</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">        fsize = -1 <span class="comment"># 修改为 -1</span></span><br><span class="line">        core = 2097151</span><br><span class="line">        cpu = -1</span><br><span class="line">        data = -1</span><br><span class="line">        rss = 65536</span><br><span class="line">        stack = 65536</span><br><span class="line">        nofiles = 2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要重启</span></span><br><span class="line">bash-4.3$ sudo reboot</span><br><span class="line"></span><br><span class="line">Rebooting . . .</span><br></pre></td></tr></table></figure><p>修改之后，重启，再解压就没有问题了。</p><h2 id="安装-Java-Standard-Edition-on-AIX"><a href="#安装-Java-Standard-Edition-on-AIX" class="headerlink" title="安装 Java Standard Edition on AIX"></a>安装 Java Standard Edition on AIX</h2><p>下载地址 <a href="https://developer.ibm.com/javasdk/support/aix-download-service/" target="_blank" rel="noopener">https://developer.ibm.com/javasdk/support/aix-download-service/</a></p><ol><li>download Java8_64.sdk.8.0.0.600.tar.gz Java8_64.jre.8.0.0.600.tar.gz</li><li>gzip -d Java8_64.sdk.8.0.0.600.tar.gz and Java8_64.jre.8.0.0.600.tar.gz</li><li>tar -xvf Java8_64.sdk.8.0.0.600.tar  and Java8_64.jre.8.0.0.600.tar</li><li>installp -agXYd .  Java8_64.jre Java8_64.sdk 2&gt;&amp;1 | tee installp.log</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install output</span></span><br><span class="line">Installation Summary</span><br><span class="line">--------------------</span><br><span class="line">Name                        Level           Part        Event       Result</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Java8_64.sdk                8.0.0.600       USR         APPLY       SUCCESS</span><br><span class="line">Java8_64.jre                8.0.0.600       USR         APPLY       SUCCESS</span><br><span class="line">Java8_64.jre                8.0.0.600       ROOT        APPLY       SUCCESS</span><br></pre></td></tr></table></figure><ol start="5"><li>smitty install_all</li><li>Input: Type “./“ in the field</li><li>Acceptance Install the Agreement, then start install.</li></ol><p>Troubleshooting</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash-4.4<span class="comment"># ./java -version</span></span><br><span class="line">Error: Port Library failed to initialize: -70</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UNIX </tag>
            
            <tag> AIX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solaris 安装工具以及一些使用总结</title>
      <link href="/2020/01/solaris-tips/"/>
      <url>/2020/01/solaris-tips/</url>
      
        <content type="html"><![CDATA[<p>记录在使用 Solaris 时所遇到的问题和解决办法，以备以后遇到同样问题不要再因为这些再浪费时间，希望也能帮助到你。</p><a id="more"></a><h2 id="install-packages-on-solaris"><a href="#install-packages-on-solaris" class="headerlink" title="install packages on solaris"></a>install packages on solaris</h2><p><a href="https://www.opencsw.org/get-it/packages/" target="_blank" rel="noopener">https://www.opencsw.org/get-it/packages/</a></p><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><p><a href="https://www.opencsw.org/packages/git/" target="_blank" rel="noopener">https://www.opencsw.org/packages/git/</a></p>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UNIX </tag>
            
            <tag> Solaris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Warnings Next Generation 插件</title>
      <link href="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/"/>
      <url>/2019/12/Jenkins-Warnings-Next-Generation-Plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="Jenkins-Warnings-Next-Generation-插件"><a href="#Jenkins-Warnings-Next-Generation-插件" class="headerlink" title="Jenkins Warnings Next Generation 插件"></a>Jenkins Warnings Next Generation 插件</h2><p>Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md" target="_blank" rel="noopener">支持的报告格式</a>。</p><a id="more"></a><h3 id="支持的项目类型"><a href="#支持的项目类型" class="headerlink" title="支持的项目类型"></a>支持的项目类型</h3><p>Warnings Next Generation 插件支持以下 Jenkins 项目类型：</p><ul><li>自由式项目</li><li>Maven 项目</li><li>矩阵项目</li><li>脚本化管道（顺序和并行步骤）</li><li>声明式管道（顺序步骤和并行步骤）</li><li>多分支管道</li></ul><h3 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h3><p>当作为后续构建任务操作（或步骤）添加时，Warnings Next Generation 插件提供以下功能：</p><ol><li><p>该插件会扫描 Jenkins 版本的控制台日志或你工作区中的文件中是否存在任何问题。支持一百多种<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md" target="_blank" rel="noopener">报告格式</a>，它可以检测到的问题包括：</p><ul><li>来自编译器的错误（C，C＃，Java等）</li><li>来自静态分析工具（CheckStyle，StyleCop，SpotBugs 等）的警告</li><li>来自复制粘贴检测器（CPD, Simian 等）的重复</li><li>漏洞</li><li>在源文件的注释中打开任务</li></ul></li><li><p>该插件会发布有关在构建中发现的问题的报告，因此可以从以下位置导航到摘要报告，主构建页面。你还可以从那里深入了解细节：</p><ul><li>发行新的，固定的和未解决的问题</li><li>按严重性，类别，类型，模块或程序包分发问题</li><li>所有问题的列表，包括来自报告工具的有用评论</li><li>受影响文件的带注释的源代码</li><li>问题趋势图</li></ul></li></ol><p>该插件不会运行静态分析，它只是可视化此类工具报告的结果。你仍然需要在构建文件或 Jenkinsfile 中启用和配置静态分析工具。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>你可以在 Jenkins 作业配置用户界面中配置插件的每个选项（在自由式，maven 或矩阵作业中）。在这里你需要在工作中添加并启用生成后操作“记录编译器警告和静态分析结果”。</p><p>在管道中，将通过添加 recordIssues 激活插件。也可以使用相同的用户界面来配置此步骤（通过使用 Snippet 编辑器）。请注意，对于脚本化管道，一些其他功能可用于汇总和分组问题，有关详细信息，请参阅“高级管道配置”部分。</p><p>在以下各节中，将同时显示图形配置和管道配置。</p><h3 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h3><p>下图显示了插件的基本配置：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/01.png" alt="静态分析工具"></p><p>首先，你需要指定用于创建问题的工具，根据所选工具，你可能还会配置一些其他参数。</p><p>对于所有读取报告文件的解析器，你需要指定应分析和扫描问题的报告文件的模式。如果未指定模式，则将扫描构建的控制台日志。对于几种流行的工具，提供了默认模式，在这种情况下，如果模式为空，则将使用默认模式。</p><p>为了让扫描程序正确解析你的报告，需要设置文件的编码，否则将使用平台编码，这可能不正确。</p><p>每个工具都由一个 ID 标识，该 ID 用作分析结果的 URL。对于每个工具，都提供了一个默认 URL（和名称），可以根据需要进行更改。例如，如果你打算多次使用解析器，则需要为每个调用指定不同的 ID。</p><p>你可以指定将用于同一配置的多个工具（和模式），由于 Jenkins 的技术（或市场）限制，无法通过使用多个后期构建操作来选择不同的配置。</p><p>通过使用“汇总结果”复选框，可以使用一项新功能。如果选中此选项，则将创建一个结果，其中包含所选工具的所有问题的汇总。这是之前静态分析收集器插件提供的。激活此选项后，你将获得所有问题的唯一入口点。以下屏幕截图显示了此新行为：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/02.png" alt="汇总结果"></p><p>如果未启用此选项，则将为每个工具创建单独的结果。此结果具有唯一的 URL 和图标，因此你可以快速查看创建的报告之间的区别：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/03.png" alt="分开的结果"></p><p>在基本配置部分中，你还可以选择是否针对失败的构建也运行该步骤。默认情况下禁用此选项，因为如果构建失败，分析结果可能会不准确。</p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">recordIssues(</span><br><span class="line">    enabledForFailure: <span class="keyword">true</span>, aggregatingResults: <span class="keyword">true</span>, </span><br><span class="line">    tools: [java(), checkStyle(pattern: <span class="string">'checkstyle-result.xml'</span>, reportEncoding: <span class="string">'UTF-8'</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果使用单个工具，则可以使用属性工具代替工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues enabledForFailure: <span class="literal">true</span>, aggregatingResults: <span class="literal">true</span>, tool: checkStyle(pattern: <span class="string">'checkstyle-result.xml'</span>)</span><br></pre></td></tr></table></figure><h3 id="创建对自定义工具的支持"><a href="#创建对自定义工具的支持" class="headerlink" title="创建对自定义工具的支持"></a>创建对自定义工具的支持</h3><p>如果你的项目中没有内置工具，则可以通过多种方式添加其他工具。</p><h4 id="将问题导出为受支持的格式"><a href="#将问题导出为受支持的格式" class="headerlink" title="将问题导出为受支持的格式"></a>将问题导出为受支持的格式</h4><p>将工具的分析结果获取到 Warnings 插件中的一种简单方法是将信息导出为一种已经支持的格式。例如，几种工具将其问题导出为 CheckStyle 或 PMD 格式。如果要使用警告插件的所有功能，则最好将信息导出为本机 XML 或 JSON 格式（此解析器使用 ID 问题）。<br>这些格式已经在用户界面中注册，你可以直接使用它们。你甚至可以在包含单行 JSON 问题的简单日志文件中提供问题，请参见示例。</p><p>这是一个示例步骤，可用于解析本机 JSON（或 XML）格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues(tool: issues())</span><br></pre></td></tr></table></figure><h4 id="使用自定义插件部署新工具"><a href="#使用自定义插件部署新工具" class="headerlink" title="使用自定义插件部署新工具"></a>使用自定义插件部署新工具</h4><p>最灵活的方法是通过编写将在你自己的小型 Jenkins 插件中部署的 Java 类来定义新工具，有关详细信息，请参见文档“为自定义静态分析工具提供支持”。</p><h4 id="使用Groovy解析器创建新工具"><a href="#使用Groovy解析器创建新工具" class="headerlink" title="使用Groovy解析器创建新工具"></a>使用Groovy解析器创建新工具</h4><p>如果日志消息的格式非常简单，则可以通过在 Jenkins 的用户界面中创建简单的工具配置来定义对工具的支持。 出于安全原因（Groovy 脚本可能会危害你的主服务器），此配置仅在系统配置中可用。 新解析器的配置采用正则表达式，该正则表达式将用于匹配报告格式。 如果表达式匹配，则将调用 Groovy 脚本，该脚本将匹配的文本转换为问题实例。 这是基于 Groovy 的解析器的示例：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/04.png" alt="Groovy 解析器"></p><h4 id="以编程方式创建-Groovy-解析器"><a href="#以编程方式创建-Groovy-解析器" class="headerlink" title="以编程方式创建 Groovy 解析器"></a>以编程方式创建 Groovy 解析器</h4><p>还可以使用 Groovy 脚本从管道，Jenkins 启动脚本或脚本控制台中创建基于 Groovy 的解析器，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def config = io.jenkins.plugins.analysis.warnings.groovy.ParserConfiguration.getInstance()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!config.contains(<span class="string">'pep8-groovy'</span>))&#123;</span><br><span class="line">  def newParser = new io.jenkins.plugins.analysis.warnings.groovy.GroovyParser(</span><br><span class="line">    <span class="string">'pep8-groovy'</span>, </span><br><span class="line">    <span class="string">'Pep8 Groovy Parser'</span>, </span><br><span class="line">    <span class="string">'(.*):(\\d+):(\\d+): (\\D\\d*) (.*)'</span>, </span><br><span class="line">    <span class="string">'return builder.setFileName(matcher.group(1)).setCategory(matcher.group(4)).setMessage(matcher.group(5)).buildOptional()'</span>, </span><br><span class="line">    <span class="string">"optparse.py:69:11: E401 multiple imports on one line"</span></span><br><span class="line">  )</span><br><span class="line">  config.setParsers(config.getParsers().plus(newParser))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用配置作为代码导入解析器（JCasC）"><a href="#使用配置作为代码导入解析器（JCasC）" class="headerlink" title="使用配置作为代码导入解析器（JCasC）"></a>使用配置作为代码导入解析器（JCasC）</h4><p>还可以使用 JCasC yaml 文件中的部分来指定基于 Groovy 的解析器。这是一个小示例，展示了如何添加这样的解析器：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">unclassified:</span></span><br><span class="line">  <span class="attr">warningsParsers:</span></span><br><span class="line">    <span class="attr">parsers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"Example parser"</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">example-id</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">"^\\s*(.*):(\\d+):(.*):\\s*(.*)$"</span></span><br><span class="line">        <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">import</span> <span class="string">edu.hm.hafner.analysis.Severity</span></span><br><span class="line">          <span class="string">builder.setFileName(matcher.group(1))</span></span><br><span class="line">                  <span class="string">.setLineStart(Integer.parseInt(matcher.group(2)))</span></span><br><span class="line">                  <span class="string">.setSeverity(Severity.WARNING_NORMAL)</span></span><br><span class="line">                  <span class="string">.setCategory(matcher.group(3))</span></span><br><span class="line">                  <span class="string">.setMessage(matcher.group(4))</span></span><br><span class="line">          <span class="string">return</span> <span class="string">builder.buildOptional();</span></span><br><span class="line">        <span class="attr">example:</span> <span class="string">"somefile.txt:2:SeriousWarnings:SomethingWentWrong"</span></span><br></pre></td></tr></table></figure><h4 id="使用定义的工具"><a href="#使用定义的工具" class="headerlink" title="使用定义的工具"></a>使用定义的工具</h4><p>一旦注册了 Groovy 解析器，就可以在作业的工具配置部分中使用它：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/05.png" alt="Groovy 配置"></p><p>首先，你需要选择工具 “Groovy Parser” 以获取 Groovy 解析器的配置屏幕。 然后，你可以从可用解析器列表中选择解析器。 该列表是根据 Jenkins 的“系统配置”部分中定义的解析器动态创建的。可以使用与其他工具相同的方式来设置自定义 ID 和名称属性。</p><p>为了在管道中使用 Groovy 解析器，你需要使用以下形式的脚本语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">recordIssues sourceCodeEncoding: <span class="string">'UTF-8'</span>, </span><br><span class="line">    tool: groovyScript(parserId: <span class="string">'groovy-id-in-system-config'</span>, pattern:<span class="string">'**/*report.log'</span>, reportEncoding:<span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure><h3 id="处理受影响的源代码文件的属性"><a href="#处理受影响的源代码文件的属性" class="headerlink" title="处理受影响的源代码文件的属性"></a>处理受影响的源代码文件的属性</h3><p>为了让插件解析并显示你的源代码文件，需要为这些文件设置正确的编码。 此外，如果你的源代码不在工作区中（例如，它已签出到共享代理文件夹中），则该插件将不会自动找到你的源文件。 为了让插件显示这些文件，你可以添加一个附加的源目录：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/06.png" alt="受影响文件"></p><p>以下代码段显示了带有这些选项的示例管道，请注意，如果需要，可以不同地设置报告文件的编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues sourceCodeEncoding: <span class="string">'ISO-8859-1'</span>, sourceDirectory: <span class="string">'/path/to/sources'</span>, tool: java(reportEncoding: <span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure><p>请注意，工作区外部的文件内容可能很敏感。 为了防止意外显示此类文件，你需要在 Jenkins 系统配置屏幕中提供允许的源代码目录的白名单：</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/07.png" alt="源代码目录的白名单"></p><p>另外，此配置设置可以由 JCasC yaml 文件中的以下子节提供</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">unclassified:</span></span><br><span class="line">  <span class="attr">warningsPlugin:</span></span><br><span class="line">    <span class="attr">sourceDirectories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"C:\\Temp"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">"/mnt/sources"</span></span><br></pre></td></tr></table></figure><h3 id="控制参考构建的选择（基准）"><a href="#控制参考构建的选择（基准）" class="headerlink" title="控制参考构建的选择（基准）"></a>控制参考构建的选择（基准）</h3><p>警告下一代插件的一项重要功能是将问题分类为新问题，未解决问题和已解决问题：</p><ul><li>新增：所有问题，属于当前报告的一部分，但未在参考报告中显示</li><li>已修复：所有问题，属于参考报告的一部分，但不再存在于当前报告中</li><li>未解决：所有问题，是当前报告和参考报告的一部分</li></ul><p>为了计算此分类，插件需要参考构建（基准）。 然后，通过比较当前版本和基准中的问题来计算新的，已修复的和未解决的问题。 有三个选项可控制参考构建的选择。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/08.png" alt="参考"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues tool: java(), ignoreQualityGate: <span class="literal">false</span>, ignoreFailedBuilds: <span class="literal">true</span>, referenceJobName: <span class="string">'my-project/master'</span></span><br></pre></td></tr></table></figure><h3 id="筛选问题"><a href="#筛选问题" class="headerlink" title="筛选问题"></a>筛选问题</h3><p>创建的问题报告可以随后进行过滤。 你可以指定任意数量的包含或排除过滤器。 当前，支持按模块名称，程序包或名称空间名称，文件名，类别或类型过滤问题。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/09.png" alt="筛选"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">'*.log'</span>), filters: [includeFile(<span class="string">'MyFile.*.java'</span>), excludeCategory(<span class="string">'WHITESPACE'</span>)]</span><br></pre></td></tr></table></figure><h3 id="Quality-gate-配置"><a href="#Quality-gate-配置" class="headerlink" title="Quality gate 配置"></a>Quality gate 配置</h3><p>你可以定义几个 Quality gate (质量门)，在报告问题后将对其进行检查。这些质量门使你可以修改詹金斯的生产状态，以便立即查看是否满足所需的产品质量。对于这些质量门中的每一个，都可以将构建设置为不稳定或失败。所有质量门都使用一个简单的度量标准：给定质量门将失败的问题数量。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/10.png" alt="质量门"></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">'*.log'</span>), qualityGates: [[threshold: 1, <span class="built_in">type</span>: <span class="string">'TOTAL'</span>, unstable: <span class="literal">true</span>]]</span><br></pre></td></tr></table></figure><p>类型确定将用来评估质量门的属性。请参阅枚举 QualityGateType 以查看支持哪些不同类型。</p><h3 id="健康报告配置"><a href="#健康报告配置" class="headerlink" title="健康报告配置"></a>健康报告配置</h3><p>该插件可以参与你项目的运行状况报告。你可以更改将运行状况更改为 0％ 和 100％ 的问题数。此外，可以选择在创建运行状况报告时应考虑的严重性。</p><p><a href="Jenkins-Warnings-Next-Generation-Plugin/11.png">健康报告配置!</a></p><p>以下代码段显示了具有这些选项的示例管道：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues tool: java(pattern: <span class="string">'*.log'</span>), healthy: 10, unhealthy: 100, minimumSeverity: <span class="string">'HIGH'</span></span><br></pre></td></tr></table></figure><p>该作业根据严重性为 HIGH 和错误的所有警告来调整构建运行状况。如果内部版本包含 10 条或更少的警告，则运行状况为 100％。如果内部版本有 100 个以上的警告，则运行状况为 0％。</p><h3 id="管道配置"><a href="#管道配置" class="headerlink" title="管道配置"></a>管道配置</h3><p>在 Jenkins Pipeline 中使用 Warnings 插件的要求可能很复杂，有时会引起争议。为了尽可能灵活，我决定将主要步骤分为两个独立的部分，然后可以彼此独立使用。</p><h4 id="简单的管道配置"><a href="#简单的管道配置" class="headerlink" title="简单的管道配置"></a>简单的管道配置</h4><p>步骤 recordIssues 提供了简单的管道配置，它提供了与构建后操作相同的属性（请参见上文）。此步骤扫描给定文件集（或控制台日志）中的问题，并在构建中报告这些问题。你可以使用代码片段生成器来创建一个有效的代码片段，以调用此步骤。以下示例显示了此步骤的典型示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">recordIssues(</span><br><span class="line">    enabledForFailure: <span class="literal">true</span>, </span><br><span class="line">    tool: java(pattern: <span class="string">'*.log'</span>), </span><br><span class="line">    filters: [includeFile(<span class="string">'MyFile.*.java'</span>), excludeCategory(<span class="string">'WHITESPACE'</span>)]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在此示例中，将扫描文件 <code>* .log</code> 中的 Java 问题。仅包括文件名与模式 <code>MyFile.*.java</code> 匹配的问题。类别 <code>WHITESPACE</code> 的问题将被排除，即使构建失败，也会执行该步骤。</p><p>为了查看所有配置选项，你可以研究<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/src/main/java/io/jenkins/plugins/analysis/core/steps/IssuesRecorder.java" target="_blank" rel="noopener">步骤实现</a>。</p><h4 id="声明式管道配置"><a href="#声明式管道配置" class="headerlink" title="声明式管道配置"></a>声明式管道配置</h4><p>声明性管道作业中的插件配置与脚本管道中的配置相同，请参见以下示例，该示例在 Jenkins 上构建分析模型库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent <span class="string">'any'</span></span><br><span class="line">    tools &#123;</span><br><span class="line">        maven <span class="string">'mvn-default'</span></span><br><span class="line">        jdk <span class="string">'jdk-default'</span></span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage (<span class="string">'Build'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false -Dmaven.test.failure.ignore'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage (<span class="string">'Analysis'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'$&#123;M2_HOME&#125;/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs spotbugs:spotbugs'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            junit testResults: <span class="string">'**/target/surefire-reports/TEST-*.xml'</span></span><br><span class="line"></span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tools: [mavenConsole(), java(), javaDoc()]</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: checkStyle()</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: spotBugs()</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: cpd(pattern: <span class="string">'**/target/cpd.xml'</span>)</span><br><span class="line">            recordIssues enabledForFailure: <span class="literal">true</span>, tool: pmdParser(pattern: <span class="string">'**/target/pmd.xml'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="高级管道配置"><a href="#高级管道配置" class="headerlink" title="高级管道配置"></a>高级管道配置</h4><p>有时仅使用一个步骤发布和报告问题是不够的。例如，如果你使用多个并行步骤来构建产品，并且想要将所有这些步骤中的问题合并为一个结果。然后，你需要拆分扫描和聚合。该插件提供以下两个步骤：</p><ul><li>scanForIssues 此步骤使用特定的解析器扫描报告文件或控制台日志，并创建一个包含报告的中 间 AnnotatedReport 对象。有关详细信息，请参见步骤实现。</li><li>publishIssues：此步骤在你的构建中发布一个新报告，其中包含几个 scanForIssues 步骤的汇总结果。有关详细信息，请参见步骤实现。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">  stage (<span class="string">'Checkout'</span>) &#123;</span><br><span class="line">      git branch:<span class="string">'5.0'</span>, url: <span class="string">'git@github.com:jenkinsci/warnings-plugin.git'</span></span><br><span class="line">  &#125;</span><br><span class="line">  stage (<span class="string">'Build'</span>) &#123;</span><br><span class="line">    def mvnHome = tool <span class="string">'mvn-default'</span></span><br><span class="line"></span><br><span class="line">    sh <span class="string">"<span class="variable">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e clean verify -Dsurefire.useFile=false"</span></span><br><span class="line"></span><br><span class="line">    junit testResults: <span class="string">'**/target/*-reports/TEST-*.xml'</span></span><br><span class="line"></span><br><span class="line">    def java = scanForIssues tool: java()</span><br><span class="line">    def javadoc = scanForIssues tool: javaDoc()</span><br><span class="line">    </span><br><span class="line">    publishIssues issues: [java, javadoc], filters: [includePackage(<span class="string">'io.jenkins.plugins.analysis.*'</span>)]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stage (<span class="string">'Analysis'</span>) &#123;</span><br><span class="line">    def mvnHome = tool <span class="string">'mvn-default'</span></span><br><span class="line"></span><br><span class="line">    sh <span class="string">"<span class="variable">$&#123;mvnHome&#125;</span>/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs"</span></span><br><span class="line"></span><br><span class="line">    def checkstyle = scanForIssues tool: checkStyle(pattern: <span class="string">'**/target/checkstyle-result.xml'</span>)</span><br><span class="line">    publishIssues issues: [checkstyle]</span><br><span class="line"></span><br><span class="line">    def pmd = scanForIssues tool: pmdParser(pattern: <span class="string">'**/target/pmd.xml'</span>)</span><br><span class="line">    publishIssues issues: [pmd]</span><br><span class="line">    </span><br><span class="line">    def cpd = scanForIssues tool: cpd(pattern: <span class="string">'**/target/cpd.xml'</span>)</span><br><span class="line">    publishIssues issues: [cpd]</span><br><span class="line">    </span><br><span class="line">    def spotbugs = scanForIssues tool: spotBugs(pattern: <span class="string">'**/target/findbugsXml.xml'</span>)</span><br><span class="line">    publishIssues issues: [spotbugs]</span><br><span class="line"></span><br><span class="line">    def maven = scanForIssues tool: mavenConsole()</span><br><span class="line">    publishIssues issues: [maven]</span><br><span class="line">    </span><br><span class="line">    publishIssues id: <span class="string">'analysis'</span>, name: <span class="string">'All Issues'</span>, issues: [checkstyle, pmd, spotbugs], filters: [includePackage(<span class="string">'io.jenkins.plugins.analysis.*'</span>)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新功能"><a href="#新功能" class="headerlink" title="新功能"></a>新功能</h2><p>以下各节介绍了最重要的新功能。</p><h3 id="发行记录：New-Fixed-Outstanding-问题"><a href="#发行记录：New-Fixed-Outstanding-问题" class="headerlink" title="发行记录：New, Fixed, Outstanding 问题"></a>发行记录：New, Fixed, Outstanding 问题</h3><p>该插件的一大亮点是能够将后续版本的问题分类为 New, Fixed, Outstanding。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/12.png" alt="趋势"></p><p>使用此功能可以更轻松地控制项目的质量：你只能专注于最近引入的警告。</p><p>注意：新警告的检测基于复杂的算法，该算法试图在源代码的两个不同版本中跟踪同一警告。根据源代码的修改程度，它可能会产生一些误报，即，即使应该没有警告也可能会收到一些新的固定警告。该算法的准确性仍在研究中，并将在接下来的几个月中进行完善。</p><h3 id="Severities-严重程度"><a href="#Severities-严重程度" class="headerlink" title="Severities 严重程度"></a>Severities 严重程度</h3><p>该插件在图表中显示问题严重性的分布，它定义了以下默认严重级别，但是扩展警告插件的插件可能会添加其他默认级别。</p><ul><li><strong>Error</strong>：表示通常会导致构建失败的错误</li><li><strong>Warning</strong> (High, Normal, Low)：指示给定优先级的警告。映射到优先级取决于各个解析器。</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/13.png" alt="严重程度"></p><p>请注意，并非每个解析器都能产生不同严重性的警告。某些解析器仅对所有问题使用相同的严重性。</p><h3 id="Build-trend-构建趋势"><a href="#Build-trend-构建趋势" class="headerlink" title="Build trend 构建趋势"></a>Build trend 构建趋势</h3><p>为了查看分析结果的趋势，几个图表显示了每个构建的问题数量。这些图表用于详细信息页面和作业概述中。当前提供以下不同的趋势图类型：</p><h4 id="问题的严重程度分布"><a href="#问题的严重程度分布" class="headerlink" title="问题的严重程度分布"></a>问题的严重程度分布</h4><p>默认趋势图显示问题总数，按严重性堆叠。使用此图表，你可以查看哪种严重程度对问题总数贡献最大。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/14.png" alt="严重度趋势图"></p><h4 id="每种静态分析类型的问题"><a href="#每种静态分析类型的问题" class="headerlink" title="每种静态分析类型的问题"></a>每种静态分析类型的问题</h4><p>如果你要汇总几个静态分析结果，则类型图将使用单独的一行显示每个工具的问题数量。你可以通过单击相应的图例符号暂时隐藏工具。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/15.png" alt="工具趋势图"></p><h4 id="新问题与已修复问题"><a href="#新问题与已修复问题" class="headerlink" title="新问题与已修复问题"></a>新问题与已修复问题</h4><p>如果你对积压的问题感兴趣，可以打开新的与固定的图表。它映射了引入的问题与通过一系列构建解决的问题。这可以帮助你了解整个待办事项列表是在增加还是在减少。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/16.png" alt="新修复趋势图"></p><h4 id="项目健康"><a href="#项目健康" class="headerlink" title="项目健康"></a>项目健康</h4><p>仅当启用了运行状况报告后，运行状况图表才可用。在这种情况下，趋势图将显示健康和不健康区域中的警告数量。你的项目目标应该是使警告数量不逃避图表的绿色部分。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/17.png" alt="健康趋势图"></p><h4 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h4><p>细节视图中的所有趋势图都支持使用图表底部的范围滑块缩放构建轴。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/18.png" alt="放大"></p><h4 id="构建与日期轴"><a href="#构建与日期轴" class="headerlink" title="构建与日期轴"></a>构建与日期轴</h4><p>详细信息视图中的所有趋势图都可以显示每个构建或每天的警告数量。你可以通过选择右上角的相应图标在X轴变体之间切换，每天显示平均警告数。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/19.png" alt="构建与日期"></p><h3 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h3><p>你可以在几个聚合视图中快速，高效地查看报告的问题集。根据问题的数量或类型，你将看到问题的分布</p><ul><li>Static Analysis Tool（静态分析工具）</li><li>Module（模组）</li><li>Package or Namespace（包或命名空间）</li><li>Severity（严重程度）</li><li>Category（类别）</li><li>Type（类型）</li></ul><p>这些详细信息视图中的每一个都是交互式的，即，你可以导航到已分类问题的子集。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/20.png" alt="软件包"></p><h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3><p>一组已报告的问题显示在一个现代化的响应表中。该表使用 Ajax 调用按需加载，它提供以下功能：</p><ul><li><strong>Pagination</strong>（分页）：问题的数量分为几个页面，可以使用提供的页面链接进行选择。请注意，目前分页是在客户端进行的，即从服务器获取整个问题表可能要花费一些时间。</li><li><strong>Sorting</strong>（排序）：可以通过单击表列中的仅一个来对表内容进行排序。</li><li><strong>Filtering, Searching</strong>（过滤，搜索）：你可以通过在搜索框中输入一些文本来过滤显示的问题。</li><li><strong>Content Aware</strong>（内容感知）：仅当有必要显示的内容时才显示列。也就是说，如果工具未报告问题类别，则该类别将被自动隐藏。</li><li><strong>Responsive</strong>（响应式）：布局应适应实际的屏幕阈值。</li><li><strong>Details</strong>（详细信息）：问题的详细信息消息（如果由相应的静态分析工具提供）在表中显示为子行。</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/20.png" alt="详情"></p><h3 id="源代码-Blame（归咎于）"><a href="#源代码-Blame（归咎于）" class="headerlink" title="源代码 Blame（归咎于）"></a>源代码 Blame（归咎于）</h3><p>这个功能需要安装其他插件：<a href="https://github.com/jenkinsci/git-forensics-plugin" target="_blank" rel="noopener">Git Forensics 插件</a></p><p>如果未在作业配置中禁用，则插件将执行 <code>git blame</code> 以确定谁是问题的负责 <code>author</code>。在相应的 SCM Blames 视图中，所有问题将与 <code>auther name</code>, <code>email</code>, 和 <code>commit ID</code> 一起列出。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/22.png" alt="Git"></p><p>为了禁用 <code>git blame</code> 功能，请将属性 <code>blameDisabled</code> 设置为 <code>true</code>，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues blameDisabled: <span class="literal">true</span>, tool: java(pattern: <span class="string">'*.log'</span>)</span><br></pre></td></tr></table></figure><h3 id="Git-仓库取证"><a href="#Git-仓库取证" class="headerlink" title="Git 仓库取证"></a>Git 仓库取证</h3><p>此功能需要安装其他插件：<a href="https://github.com/jenkinsci/git-forensics-plugin" target="_blank" rel="noopener">Git Forensics 插件</a></p><p>如果未在作业配置中禁用，则该插件将以“犯罪现场代码”的样式（Adam Tornhill，2013年11月）挖掘源代码存储库，以确定受影响文件的统计信息。在相应的 “SCM 取证” 视图中，将列出所有问题以及受影响文件的以下属性：</p><ul><li>提交总数</li><li>不同作者总数</li><li>创作时间</li><li>最后修改时间</li><li>源代码控制概述</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/23.png" alt="取证视图"></p><p>为了禁用 Git 取证功能，请将属性 <code>forensicsDisabled</code>设置为 <code>true</code>，请参见以下示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recordIssues forensicsDisabled: <span class="literal">true</span>, tool: java(pattern: <span class="string">'*.log'</span>)</span><br></pre></td></tr></table></figure><h3 id="源代码视图"><a href="#源代码视图" class="headerlink" title="源代码视图"></a>源代码视图</h3><p>现在，源代码视图使用 JS 库 Prism 在受影响的文件中显示警告。该库为最流行的语言提供语法高亮显示，并在客户端呈现所有内容。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/24.png" alt="源视图"></p><h3 id="发行总数栏"><a href="#发行总数栏" class="headerlink" title="发行总数栏"></a>发行总数栏</h3><p>你可以在 Jenkins 作业表的单独列中显示作业的总数。 默认情况下，Jenkins 主列表视图将显示一个新列，该列计算所有工具的发行总数。 你可以添加可以配置的其他列</p><ul><li>列名</li><li>应考虑的实际工具</li><li>要显示的总计类型（总体警告，新警告，特定严重性等），请参阅 “token宏支持” 部分。</li></ul><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/25.png" alt="问题列"></p><h3 id="仪表板视图支持"><a href="#仪表板视图支持" class="headerlink" title="仪表板视图支持"></a>仪表板视图支持</h3><p>还提供对 Jenkins 仪表板视图的支持。当前，以下 portlet 可用：</p><h4 id="每个工具和作业表的问题"><a href="#每个工具和作业表的问题" class="headerlink" title="每个工具和作业表的问题"></a>每个工具和作业表的问题</h4><p>问题表显示了作业的问题总数（由每个工具分开）。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/26.png" alt="问题 portlet"></p><h4 id="问题趋势"><a href="#问题趋势" class="headerlink" title="问题趋势"></a>问题趋势</h4><p>可以将趋势图添加为 portlet，该趋势图显示所有作业的发行总数。</p><p><img src="/2019/12/Jenkins-Warnings-Next-Generation-Plugin/27.png" alt="图表 portlet"></p><h3 id="远程API"><a href="#远程API" class="headerlink" title="远程API"></a>远程API</h3><p>该插件提供以下 REST API 端点。</p><h4 id="所有分析结果的汇总摘要"><a href="#所有分析结果的汇总摘要" class="headerlink" title="所有分析结果的汇总摘要"></a>所有分析结果的汇总摘要</h4><p>可以使用 URL <code>[build-url]/warnings-ng/api/json</code>（或 <code>[build-url]/warnings-ng/api/xml</code>）查询构建中已配置的所有静态分析工具。此汇总显示每个工具的 ID，名称，URL 和问题总数。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_class"</span>: <span class="string">"io.jenkins.plugins.analysis.core.restapi.AggregationApi"</span>,</span><br><span class="line">  <span class="attr">"tools"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"maven"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/maven"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Maven Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">9</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"java"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/java"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Java Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"javadoc"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/javadoc"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"JavaDoc Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"checkstyle"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/checkstyle"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"CheckStyle Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"pmd"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/pmd"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"PMD Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">671</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"spotbugs"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/spotbugs"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"SpotBugs Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"cpd"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/cpd"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"CPD Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">123</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"open-tasks"</span>,</span><br><span class="line">      <span class="attr">"latestUrl"</span>: <span class="string">"http://localhost:8080/view/White%20Mountains/job/New%20-%20Pipeline%20-%20Simple%20Model/26/open-tasks"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"Open Tasks Scanner Warnings"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">11</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析结果汇总"><a href="#分析结果汇总" class="headerlink" title="分析结果汇总"></a>分析结果汇总</h4><p>你可以使用 URL <code>[build-url]/[tool-id]/api/xml</code>（或 <code>[build-url]/[tool-id]/api/json</code>）获得特定分析报告的摘要。摘要包含问题数量，质量门状态以及所有信息和错误消息。</p><p>这是一个示例 XML 报告：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">analysisResultApi</span> <span class="attr">_class</span>=<span class="string">'io.jenkins.plugins.analysis.core.restapi.AnalysisResultApi'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">totalSize</span>&gt;</span>3<span class="tag">&lt;/<span class="name">totalSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixedSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">fixedSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">newSize</span>&gt;</span>0<span class="tag">&lt;/<span class="name">newSize</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noIssuesSinceBuild</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">noIssuesSinceBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">successfulSinceBuild</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">successfulSinceBuild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">qualityGateStatus</span>&gt;</span>WARNING<span class="tag">&lt;/<span class="name">qualityGateStatus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">owner</span> <span class="attr">_class</span>=<span class="string">'org.jenkinsci.plugins.workflow.job.WorkflowRun'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">number</span>&gt;</span>46<span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/view/White%20Mountains/job/Full%20Analysis%20-%20Model/46/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">owner</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Searching for all files in '/tmp/node1/workspace/Full Analysis - Model' that match the pattern</span><br><span class="line">    '**/target/spotbugsXml.xml'</span><br><span class="line">  <span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; found 1 file<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Successfully parsed file /tmp/node1/workspace/Full Analysis - Model/target/spotbugsXml.xml<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; found 3 issues (skipped 0 duplicates)<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Post processing issues on 'node1' with encoding 'UTF-8'<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving absolute file names for all issues<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; affected files for all issues already have absolute paths<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Copying affected files to Jenkins' build folder /Users/hafner/Development/jenkins/jobs/Full Analysis -</span><br><span class="line">    Model/builds/46</span><br><span class="line">  <span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; 2 copied, 0 not in workspace, 0 not-found, 0 with I/O error<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving module names from module definitions (build.xml, pom.xml, or Manifest.mf files)<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; all issues already have a valid module name<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Resolving package names (or namespaces) by parsing the affected files<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; all affected files already have a valid package name<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Creating fingerprints for all affected code blocks to track issues over different builds<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>No filter has been set, publishing all 3 issues<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>No valid reference build found - all reported issues will be considered outstanding<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Evaluating quality qualityGates<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; WARNING - Total number of issues: 3 - Quality Gate: 1<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>-&gt; Some quality qualityGates have been missed: overall result is WARNING<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">infoMessage</span>&gt;</span>Health report is disabled - skipping<span class="tag">&lt;/<span class="name">infoMessage</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">analysisResultApi</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Token-宏支持"><a href="#Token-宏支持" class="headerlink" title="Token 宏支持"></a>Token 宏支持</h3><p>Warnings 插件提供了 token <code>ANALYSIS_ISSUES_COUNT</code>，可用于其他后期构建处理步骤，例如在邮件中。为了使用此 token，你需要安装 token 宏插件。token 具有以下可选参数：</p><ul><li><code>tool</code>：选择特定的分析结果，如果未定义，则将所有结果相加</li><li><code>type</code>：选择要使用的计数器的类型，请选择以下之一<ul><li>Total（任何严重性）</li><li>Total（仅错误）</li><li>Total（仅严重度高）</li><li>Total（仅严重级别正常）</li><li>Total（仅限严重性低）</li><li>New  （任何严重程度）</li><li>New  （仅限错误）</li><li>New  （仅限严重性高）</li><li>New  （仅严重性为正常）</li><li>New  （仅限严重性低）</li><li>Delta（任何严重程度）</li><li>Delta（仅错误）</li><li>Delta（仅严重度高）</li><li>Delta（仅严重等级正常）</li><li>Delta（仅严重度低）</li><li>Fixed（任何严重性）</li></ul></li></ul><p>例子：</p><p><code>${ANALYSIS_ISSUES_COUNT}</code>：扩展到所有分析工具的合计数量</p><p><code>${ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;}</code>：扩展到CheckStyle问题的总数</p><p><code>${ANALYSIS_ISSUES_COUNT, tool=&quot;checkstyle&quot;, type: &quot;NEW&quot;}</code>：扩展到新的 CheckStyle 问题数</p><h2 id="从静态分析套件过渡"><a href="#从静态分析套件过渡" class="headerlink" title="从静态分析套件过渡"></a>从静态分析套件过渡</h2><p>以前，静态分析套件的插件提供了相同的功能集（CheckStyle，PMD，FindBugs，静态分析实用工具，Analysis Collector，任务扫描器，Warnings 等）。为了简化用户体验和开发过程，这些插件和核心功能已合并到Warnings Next Generation 插件中。这些旧的静态分析插件不再需要，现在已经停产。如果当前使用这些旧插件之一，则应尽快迁移到新的记录器和步骤。我仍然会保留旧代码一段时间，但是主要的开发工作将花在新的代码库中。</p><ul><li>迁移 Pipelines</li></ul><p>调用旧的静态分析步骤（例如，findbug，checkstyle 等）的管道需要立即调用新的 recordIssues 步骤。所有静态分析工具都使用相同的步骤，使用 step 属性工具选择实际的解析器。有关可用参数集的更多详细信息，请参见“<a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/doc/Documentation.md#configuration" target="_blank" rel="noopener">配置</a>”部分。</p><ul><li>迁移其他所有工作</li></ul><p>使用旧版 API 的 Freestyle，Matrix 或 Maven Jobs 使用了由每个插件提供的所谓的 Post Build Action。例如，FindBugs 插件确实提供了构建后操作“发布 FindBugs 分析结果”。这些旧的插件特定操作不再受支持，它们现在在用户界面中标记为 [Deprecated]。现在，你需要添加一个新的后期构建步骤-对于所有静态分析工具，此步骤现在称为“记录编译器警告和静态分析结果”。工具的选择是此后期构建步骤配置的一部分。注意：新的后期制作操作无法读取使用旧 API 的后期制作步骤所产生的警告。也就是说，你看不到新旧结果的合并历史记录-你仅看到两个不相关的结果。也不会自动转换以旧格式存储的结果。</p><ul><li>插件的迁移取决于分析核心</li></ul><p>以下插件已集成到此警告插件的新版本中：</p><ul><li>Android-Lint 插件</li><li>Analysis Collector 插件</li><li>CheckStyle 插件</li><li>CCM 插件</li><li>Dry 插件</li><li>PMD 插件</li><li>FindBugs 插件</li><li>Tasks Scanner 插件</li><li>Warnings 插件</li></ul><p>所有其他插件仍需要集成或需要重构以使用新的 API</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Translate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年终总结</title>
      <link href="/2019/12/my-2019-summary/"/>
      <url>/2019/12/my-2019-summary/</url>
      
        <content type="html"><![CDATA[<p>时间过得飞快，转眼已经是 2020 年的第三天了，回顾 2019 年，我给自己的年终关键词是：尽力。</p><p>这是我作为开发工程师的第二年，虽然 Title 是 SE (Software Engnieer)，但主要的工作内容是产品的构建和发布以及 CI/CD/DevOps 的落地（自称打杂）。流水的记录一下 2019 年发生在工作上的“成绩”。</p><a id="more"></a><p>2019 年在工作中除了完成日常产品构建、发布、Git 管理、VM 管理等，尝试在构建和发布自动化上做大的调整，将手工构建和部分自动构建从 Bamboo 迁移到 Jenkins，通过 Jenkins 的 multi-branch pipeline、Shared Libraries 与 Artifactory 做持续集成。</p><p>2019 年在公司内部提交了一个创新项目，有幸拿到了第一名和首席产品奖。</p><p>因此有机会再去美国，参加了公司的开发者大会。很开心这个项目最终进入到了产品的 Roadmap 里。</p><p>2019 年底 12 月去北京参加了一次两天的《JFrog Jenkins，Artifactory &amp; Kubernetes》训练营，跟 DevOps 行业工具里最有影响力（之一）的公司的工程师学习最佳实践。</p><p>这一年关于持续集成和持续交付收获不少新的知识，但只更新了 11 篇公众号相关原创文章，33 篇 Blog。这差别是因为 Blog 更像笔记，随时记录修改不怕错；公众号更像报纸，发出去的内容无法修改和补充，每次更新都需要一字一句反复修改和阅览确认，最终输出一篇完整的原创内容需要花费比写 Blog 多几倍的时间。</p><p>希望 2020 年能完成更多有价值的内容输出，有机会的话用 8 到 10 个月的业余时间完成一件以前一直不敢想的事（如果完成就写下来，没成就烂在肚子里）。</p><p>分享在 2019 年最后一天收到的一封邮件：</p><p>前段时间大家都做了年末总结。试问，有多少人对自己一年的表现满意？你是否在工作中体现出你的价值？你提交了多少次代码？提交的代码质量怎么样？你解决了多少个客户问题？你发现了多少 bug？<br>你是否在技术和业务知识有所提高？和你的同事比较，你的进步速度你自己是否满意？又有多少人把时间都花在了微信和聊天上？有没有人是待着混日子，或者应付公事的思路在这里工作。<br>我们年龄都差不多，多半是三四十岁。这个年龄被认为是最好的工作年龄。希望你不要在这里浪费你最好的时光。<br>有人可能说，我已经实现或者接近时间财务自由了，我对工作没有大的要求。首先我恭喜你实现财务自由，但同时我想说的是工作绝不只是一份收入来源这么简单。你是否能在工作中得到同事和领导的认可，是否能体现自己的价值。<br>我喜欢和有求知欲，有责任感，有上进心的人一起工作。我同时不喜欢工作时间，整天拿着手机不离手的， 工作上没有上进心的人。如果确实有事情，可以离开作为去打个电话，迅速解决一下。没有事情的闲看，是不赞成的。<br>还有人，到点就准时下班，很像多干几分钟自己就吃亏了一样，这种心态千万不可取。试问，如果你的能力水平不及你的同事，你每天还不比别人多努力，你怎么才能接近或者超过别人？难道永远都想落后？每天多走一里路，每天多做一些吧。</p><p>我读了好几遍，感谢上面的话，从个人角度非常认同以上观点，尤其是说工作绝不是一份收入来源这么简单，它是一个人的价值体现。如果喜欢这份工作，尽力去做到最好吧；如果不喜欢，还是趁早找到自己的乐趣所在。</p>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thought </tag>
            
            <tag> Summary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 历史统计信息生成器</title>
      <link href="/2019/12/git-stats/"/>
      <url>/2019/12/git-stats/</url>
      
        <content type="html"><![CDATA[<p>如果你是研发效能组的一员或者在从事 CI/CD 或 DevOps，除了提供基础设施，指标和数据是也是一个很重要的一环，比如需要分析下某个 Git 仓库代码提交情况：</p><ul><li>这个仓库的代码谁提交的代码最多</li><li>这个仓库的活跃度是什么样子的</li><li>各个时段的提交分析数据</li><li>每个版本的贡献排名</li><li>每周/每月/每年的贡献排名等等</li></ul><p>几天前发现一个 Git 历史统计信息生成工具叫 GitStats ( <a href="http://gitstats.sourceforge.net/" target="_blank" rel="noopener">http://gitstats.sourceforge.net/</a> )</p><a id="more"></a><p>这是一个用 python 写的，代码量很少，功能却非常强大的分析工具，也是我目前发现为数不多的可以生成漂亮的报告并且使用很方便的开源项目。</p><p>gitstats 的报告也很强大 (<a href="https://github.com/tomgi/gitstats" target="_blank" rel="noopener">https://github.com/tomgi/gitstats</a>) 感兴趣的可以试试</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>安装依赖：Git，Python，Gnuplot。</p><p>如果有 Linux，推荐在 Linux 上下载和安装。我曾尝试用 Windows 来准备环境，要下载 Python2，配置 Cygwin，还要手动配置 Gnuplot （Gnuplot 是一个可移植的命令行驱动的图形工具），挺麻烦的。以下是我在 Linux 上来的安装和使用步骤。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 Python 2</span></span><br><span class="line">sudo yum -y install python27</span><br><span class="line"><span class="comment"># 安装 Gnuplot</span></span><br><span class="line">sudo yum -y install gnuplot</span><br><span class="line"><span class="comment"># 下载 gitstats</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hoxu/gitstats.git</span><br><span class="line"><span class="comment"># 下载你要分析的代码仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/alibaba/fastjson.git</span><br><span class="line"><span class="comment"># 执行命令，生产报告</span></span><br><span class="line"><span class="built_in">cd</span> gitstats</span><br><span class="line">./gitstats ../fastjson ../html/fastjson</span><br><span class="line"><span class="comment"># 经过 15 秒钟的执行，生成报告</span></span><br><span class="line">Generating report...</span><br><span class="line">[0.00393] &gt;&gt; git --git-dir=/workspace/gitstats/.git --work-tree=/workspace/gitstats rev-parse --short HEAD</span><br><span class="line">[0.00236] &gt;&gt; git --version</span><br><span class="line">[0.00716] &gt;&gt; gnuplot --version</span><br><span class="line">Generating graphs...</span><br><span class="line">[0.01676] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/day_of_week.plot"</span></span><br><span class="line">[0.01571] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/files_by_date.plot"</span></span><br><span class="line">[0.01281] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/month_of_year.plot"</span></span><br><span class="line">[0.09293] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/lines_of_code_by_author.plot"</span></span><br><span class="line">[0.01340] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/commits_by_year.plot"</span></span><br><span class="line">[0.01799] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/hour_of_day.plot"</span></span><br><span class="line">[0.01627] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/domains.plot"</span></span><br><span class="line">[0.01268] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/commits_by_year_month.plot"</span></span><br><span class="line">[0.09435] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/commits_by_author.plot"</span></span><br><span class="line">[0.01522] &gt;&gt; gnuplot <span class="string">"/workspace/html/fastjson/lines_of_code.plot"</span></span><br><span class="line">Execution time 15.16208 secs, 4.58247 secs (30.22 %) <span class="keyword">in</span> external commands)</span><br><span class="line">You may now run:</span><br><span class="line"></span><br><span class="line">   sensible-browser <span class="string">'/workspace/html/fastjson/index.html'</span></span><br></pre></td></tr></table></figure><h2 id="报告分析"><a href="#报告分析" class="headerlink" title="报告分析"></a>报告分析</h2><h3 id="常规统计"><a href="#常规统计" class="headerlink" title="常规统计"></a>常规统计</h3><p>可以看到这个项目叫 fastjson，从 2011 年 7 月 31 日开始提交第一次代码，距离当前已经 3060 天了，893 个活跃天。总共文件是 2960 个，一共的代码行数是 25 万行。</p><p><img src="/2019/12/git-stats/git-stats-index.png" alt="常规统计"></p><h3 id="活跃度"><a href="#活跃度" class="headerlink" title="活跃度"></a>活跃度</h3><p>每天中的每小时的、每周中的每天、每周中的每小时，每年中的每月的、每年的提交数量。</p><p>在过去的 32 周里，其中前 12 周到 17 周这段时间很活跃，提交很多。另外可以看到在白天 12 点到晚上 20 点这段时间提交很少，大部分程序员在这段时间都在应对公司里的工作，无法贡献开源项目。</p><p>晚上 20 点之后提交开始增多，看来是一个非常努力的开发者。另外可以看到周一到周日都有提交，周六相对最少，应该是周六休息和放松一下。周日提交明显比周六多，看来还是花费了不少的个人宝贵周末时间。</p><p><img src="/2019/12/git-stats/git-stats-activity-1.png" alt="活跃度-1"></p><p>还能看到该项目主要完成时间在 2016 年到 2017 年，完成的时区是在东八区，这个维度可对不同区域的开发者贡献数量进行分析。</p><p><img src="/2019/12/git-stats/git-stats-activity-2.png" alt="活跃度-2"></p><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><p>列举了所有的作者，提交数，第一次提交及最近一次提交。</p><p><img src="/2019/12/git-stats/git-stats-authors-1.png" alt="贡献者-1"></p><p>这张图也是可以看到谁是该项目的创建者，以及这几年以来每年的谁的贡献最大。还有可以看到提交者所用的邮箱账户。</p><p><img src="/2019/12/git-stats/git-stats-authors-2.png" alt="贡献者-2"></p><h3 id="文件及行数"><a href="#文件及行数" class="headerlink" title="文件及行数"></a>文件及行数</h3><p>文件总数是 2960 个，代码行数是 25 万行。</p><p>另外还可以看到每年的文件增加趋势图以及这些文件类型数量的排名，可以看到 java 文件占了 96.08%，其次是 json。</p><p><img src="/2019/12/git-stats/git-stats-files.png" alt="文件"></p><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>Tags 对于团队是一个很重要分析指标（前提是所要分析的仓库在版本发布后创建了 Tag）可以看到每个版本的贡献度排名。</p><p><img src="/2019/12/git-stats/git-stats-tags.png" alt="Tags"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果感兴趣可以分析一下自己的项目或是去 GitHub 上找一个有意思、有影响力的项目拿来分析一下，比如 996.ICU 以及 vue 等，玩的开心。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Stats </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JFrog CLI 安装和使用</title>
      <link href="/2019/12/JFrog-CLI/"/>
      <url>/2019/12/JFrog-CLI/</url>
      
        <content type="html"><![CDATA[<h2 id="安装-JFrog-CLI"><a href="#安装-JFrog-CLI" class="headerlink" title="安装 JFrog CLI"></a>安装 JFrog CLI</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ON MAC</span></span><br><span class="line">brew install jfrog-cli-go</span><br><span class="line"><span class="comment"># WITH CURL</span></span><br><span class="line">curl -fL https://getcli.jfrog.io | sh</span><br><span class="line"><span class="comment"># WITH NPM</span></span><br><span class="line">npm install -g jfrog-cli-go</span><br><span class="line"><span class="comment"># WITH DOCKER</span></span><br><span class="line">docker run docker.bintray.io/jfrog/jfrog-cli-go:latest jfrog -v</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="CLI-for-JFrog-Aritifactory"><a href="#CLI-for-JFrog-Aritifactory" class="headerlink" title="CLI for JFrog Aritifactory"></a>CLI for JFrog Aritifactory</h2><p><a href="https://www.jfrog.com/confluence/display/CLI/CLI+for+JFrog+Artifactory" target="_blank" rel="noopener">如何在 Artifactory 上使用 JFrog CLI</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blackduck 与 Jenkins 集成</title>
      <link href="/2019/12/Blackduck-interation-into-Jenkins/"/>
      <url>/2019/12/Blackduck-interation-into-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>最近做了 Black Duck 与 Jenkins 的集成，目标是给测试和开发提供定制化、定时的对各个开发代码仓库的进行源码扫描。</p><h2 id="为什么要做源码扫描"><a href="#为什么要做源码扫描" class="headerlink" title="为什么要做源码扫描"></a>为什么要做源码扫描</h2><a id="more"></a><p>在产品开发中经常需要引入一些开源组件，但这些开源的代码会给产品风险。因此我们在发布自己产品的时候需要对这些开源组件的漏洞和许可信息进行评估。<br><img src="/2019/12/Blackduck-interation-into-Jenkins/open-source.png" alt="开源不等于安全"></p><p>Black Duck（黑鸭）是一款对源代码进行扫描、审计和代码管理的软件工具（同类型的工具还有 JFrog Xray）。能够搜索安全的开源代码，检测产品的开源代码使用情况，以检查外来代码的开源代码使用情况和风险情况。</p><p>如果不能及时的进行代码扫描，在产品发布快要发布才进行扫描，如果发现问题这时候再去解决就会变得非常被动，因此团队需要尽早发现并解决问题，将 CI 工具进行集成，进行每日、每周、每月扫描就变得十分重要。</p><h2 id="Black-Duck-手动执行一般步骤"><a href="#Black-Duck-手动执行一般步骤" class="headerlink" title="Black Duck 手动执行一般步骤"></a>Black Duck 手动执行一般步骤</h2><ol><li>手动下载指定 Git 仓库及分支代码</li><li>去掉不相关的代码（也可以通过 Black Duck 参数去指定要扫描的特定文件或文件夹）</li><li>手动执行 Black Duck 扫描命令​</li><li>扫描成功后，结果传到内部 Black Duck 网站供相关人员进行审查</li></ol><h2 id="Black-Duck-与-Jenkins-的集成目标"><a href="#Black-Duck-与-Jenkins-的集成目标" class="headerlink" title="Black Duck 与 Jenkins 的集成目标"></a>Black Duck 与 Jenkins 的集成目标</h2><ol><li>一个流水线支持定制化仓库的代码下载</li><li>给开发和测试提供简单的、可随时可以执行源码扫描的界面</li><li>支持定期自动扫描，以及与其他 Jenkins 任务联动执行​</li></ol><h2 id="Black-Duck-参数介绍"><a href="#Black-Duck-参数介绍" class="headerlink" title="Black Duck 参数介绍"></a>Black Duck 参数介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--blackduck.url                                       <span class="comment"># 你的 Black Duck 网址</span></span><br><span class="line">--blackduck.username                                  <span class="comment"># 你的登录用户</span></span><br><span class="line">--blackduck.api.token                                 <span class="comment"># 你的登录用户 Token</span></span><br><span class="line">--detect.project.name                                 <span class="comment"># Black Duck 下面的项目</span></span><br><span class="line">--detect.project.version.name                         <span class="comment"># 项目版本号</span></span><br><span class="line">--detect.source.path                                  <span class="comment"># 要扫描的代码目录</span></span><br><span class="line">--logging.level.com.synopsys.integration              <span class="comment"># 扫描日志级别</span></span><br><span class="line">--blackduck.trust.cert=TRUE                           <span class="comment"># 是否信任 socket (SSL)</span></span><br><span class="line">--detect.blackduck.signature.scanner.snippet.matching <span class="comment"># 扫描片段模式</span></span><br></pre></td></tr></table></figure><p>更多其他参数可以参照官方的 CI 集成文档 <a href="https://synopsys.atlassian.net/wiki/spaces/INTDOCS/pages/71106939/Synopsys+Detect+for+Jenkins" target="_blank" rel="noopener">Synopsys Detect for Jenkins</a></p><h2 id="Black-Duck-配置"><a href="#Black-Duck-配置" class="headerlink" title="Black Duck 配置"></a>Black Duck 配置</h2><p>首先，安装 Black Duck 插件 <a href="https://wiki.jenkins.io/display/JENKINS/Synopsys+Detect+Plugin" target="_blank" rel="noopener">Synopsys Detect</a> 到 Jenkins</p><p>然后，配置 Synopsys Detect 插件</p><ul><li>Jenkins -&gt; Confiruration（系统配置）</li><li>Black Duck URL： 公司内部的 Black Duck 网址，例如 <a href="https://yourcompany.blackducksoftware.com" target="_blank" rel="noopener">https://yourcompany.blackducksoftware.com</a></li><li>Black Duck credentials： 注意要选择 credentials 类型为 Secret text, Secret 填写你用户的 Token<br><img src="/2019/12/Blackduck-interation-into-Jenkins/blackduck-credentials.png" alt="Secret text 配置"></li><li>配置完成后点击 Test connections to Black Duck，显示 Connection successful 表示配置成功。<br><img src="/2019/12/Blackduck-interation-into-Jenkins/blackduck-config.png" alt="Connection successful"></li></ul><h2 id="Black-Duck-流水线任务效果"><a href="#Black-Duck-流水线任务效果" class="headerlink" title="Black Duck 流水线任务效果"></a>Black Duck 流水线任务效果</h2><p><img src="/2019/12/Blackduck-interation-into-Jenkins/blackduck-Jenkins-job.png" alt="Build with Parameters"></p><h2 id="Black-Duck-流水线代码"><a href="#Black-Duck-流水线代码" class="headerlink" title="Black Duck 流水线代码"></a>Black Duck 流水线代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">  agent &#123;</span><br><span class="line">    node &#123;</span><br><span class="line">      label <span class="string">'black-duck'</span></span><br><span class="line">      customWorkspace <span class="string">"/agent/workspace/blackduck"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parameters &#123;</span><br><span class="line">    choice(</span><br><span class="line">      name: <span class="string">'VERSION'</span>,</span><br><span class="line">      choices: [<span class="string">'MVSURE_v1.1'</span>, <span class="string">'MVSURE_v1.2'</span>, <span class="string">'MVSURE_v2.2'</span>],</span><br><span class="line">      description: <span class="string">'Which version do you want scan on black duck? MVSURE_v1.1, MVSURE_v1.2 or others?'</span>)</span><br><span class="line">    choice(</span><br><span class="line">      name: <span class="string">'REPO'</span>,</span><br><span class="line">      choices: [<span class="string">'blog-server'</span>, <span class="string">'blog-client'</span>, <span class="string">'blog-docker'</span>],</span><br><span class="line">      description: <span class="string">'Which repository code does above VERSION belong to?'</span>)</span><br><span class="line">    string(</span><br><span class="line">      name: <span class="string">'BRANCH'</span>,</span><br><span class="line">      defaultValue: <span class="string">'develop'</span>,</span><br><span class="line">      description: <span class="string">'Which branch does above VERSION belong to?'</span>)</span><br><span class="line">    choice(</span><br><span class="line">      name: <span class="string">'SNIPPET-MODES'</span>,</span><br><span class="line">      choices: [<span class="string">'SNIPPET_MATCHING'</span>, <span class="string">'SNIPPET_MATCHING_ONLY'</span>, <span class="string">'FULL_SNIPPET_MATCHING'</span>, <span class="string">'FULL_SNIPPET_MATCHING_ONLY'</span>, <span class="string">'NONE'</span>],</span><br><span class="line">      description: <span class="string">'What snippet scan mode do you want to choose?'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  environment &#123;</span><br><span class="line">    ROBOT                  = credentials(<span class="string">"d1cbab74-823d-41aa-abb7-858485121212"</span>)</span><br><span class="line">    hub_detect             = <span class="string">'https://blackducksoftware.github.io/hub-detect/hub-detect.sh'</span></span><br><span class="line">    blackduck_url          = <span class="string">'https://yourcompany.blackducksoftware.com'</span></span><br><span class="line">    blackduck_user         = <span class="string">'robot@yourcompany.com'</span></span><br><span class="line">    detect_project         = <span class="string">'GITHUB'</span></span><br><span class="line">    detect_project_version = <span class="string">'$&#123;VERSION&#125;'</span></span><br><span class="line">    detect_source_path     = <span class="string">'$&#123;WORKSPACE&#125;/$&#123;REPO&#125;/src'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 只保留最近十次 Jenkins 执行结果</span></span><br><span class="line">  options &#123;buildDiscarder(logRotator(numToKeepStr:<span class="string">'10'</span>))&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 定时触发可以在这里添加</span></span><br><span class="line"></span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">"git clone"</span>)&#123; <span class="comment"># 参数化 git clone 代码过程</span></span><br><span class="line">      steps&#123;</span><br><span class="line">        sh <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        if [ -d $&#123;REPO&#125; ]; then</span></span><br><span class="line"><span class="string">            rm -rf $&#123;REPO&#125;</span></span><br><span class="line"><span class="string">        fi</span></span><br><span class="line"><span class="string">        git clone -b $&#123;BRANCH&#125; --depth 1 https://$ROBOT_USR:"$ROBOT_PSW"@git.yourcompany.com/scm/github/$&#123;REPO&#125;.git</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">"black duck scan"</span>)&#123; <span class="comment"># 参数化 Black Duck 所用到的参数值</span></span><br><span class="line">      steps &#123;</span><br><span class="line">        withCredentials([string(credentialsId: <span class="string">'robot-black-duck-scan'</span>, variable: <span class="string">'TOKEN'</span>)]) &#123; <span class="comment"># 用 withCredentials 来获得 Token</span></span><br><span class="line">          synopsys_detect <span class="string">'bash &lt;(curl -s $&#123;hub_detect&#125;) --blackduck.url=$&#123;blackduck_url&#125; --blackduck.username=$&#123;blackduck_user&#125; --blackduck.api.token=$&#123;TOKEN&#125; --detect.project.name=$&#123;detect_project&#125; --detect.project.version.name=$&#123;detect_project_version&#125; --detect.source.path=$&#123;detect_source_path&#125; --logging.level.com.synopsys.integration=debug --blackduck.trust.cert=TRUE --detect.blackduck.signature.scanner.snippet.matching=$&#123;SNIPPET-MODES&#125;'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  post &#123;</span><br><span class="line">    <span class="comment"># 不论结果任何都给执行者发送邮件通知</span></span><br><span class="line">    always &#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        def email = load <span class="string">"vars/email.groovy"</span></span><br><span class="line">        wrap([<span class="variable">$class</span>: <span class="string">'BuildUser'</span>]) &#123;</span><br><span class="line">            def user = env.BUILD_USER_ID</span><br><span class="line">            email.build(currentBuild.result, <span class="string">"<span class="variable">$&#123;user&#125;</span>"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    success &#123;</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"success, cleanup blackduck workspace"</span></span><br><span class="line">      cleanWs()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Blackduck </tag>
            
            <tag> Synopsys </tag>
            
            <tag> Detect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="/2019/12/Docker-commands/"/>
      <url>/2019/12/Docker-commands/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-start-stop-restart"><a href="#Docker-start-stop-restart" class="headerlink" title="Docker start|stop|restart"></a>Docker start|stop|restart</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Docker 版本</span></span><br><span class="line">docker -v <span class="comment"># or docker --version</span></span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">sudo systemctl restart docker.service</span><br><span class="line"><span class="comment"># 停止 docker</span></span><br><span class="line">sudo systemctl stop docker.service</span><br><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">sudo systemctl start docker.service</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Docker-run"><a href="#Docker-run" class="headerlink" title="Docker run"></a>Docker run</h2><p>我们通过 docker 的两个参数 -i -t，让 docker 运行的容器实现”对话”的能力：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="Login-Artifactory"><a href="#Login-Artifactory" class="headerlink" title="Login Artifactory"></a>Login Artifactory</h2><p>注意：Open Source 版本 Artifactory 不支持 Docker，需要下载 <a href="https://jfrog.com/container-registry/" target="_blank" rel="noopener">JFrog Container Registry</a> 或是 Artifactory 企业版。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u &lt;USER_NAME&gt; -p &lt;USER_PASSWORD&gt; dendevmvasvm01.dev.rocketsoftware.com:&lt;REPOSITORY_PORT&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-sh-4.2$ sudo docker login dendevmvasvm03.dev.rocketsoftware.com:8040</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>把 Docker image 推送到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// docker tag SOURCE_IMAGE[:TAG] dendevmvasvm03.dev.rocketsoftware.com:8040/docker-local/IMAGE[:TAG]</span><br><span class="line">-sh-4.2$ sudo docker tag ubuntu:15.10 dendevmvasvm03.dev.rocketsoftware.com:8040/docker-local/ubuntu:15.10</span><br><span class="line"></span><br><span class="line">// docker push dendevmvasvm03.dev.rocketsoftware.com:8040/docker-local/IMAGE[:TAG]</span><br><span class="line">-sh-4.2$ sudo docker push dendevmvasvm03.dev.rocketsoftware.com:8040/docker-local/ubuntu:15.10</span><br><span class="line">The push refers to repository [dendevmvasvm03.dev.rocketsoftware.com:8040/docker-local/ubuntu]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>之后会更新更多的常用的 Docker 命令到这篇文章。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>北京48小时：记一次参加 DevOps 训练营</title>
      <link href="/2019/12/48h-in-Beijing/"/>
      <url>/2019/12/48h-in-Beijing/</url>
      
        <content type="html"><![CDATA[<p>本周二下班我没有像往常一样加会班（我一般都会赶在晚6点后下班来躲过晚高峰期），而是直接挤地铁奔向机场，准备坐八点半去往北京的一班飞机，因为第二天要参加 JFrog 中国在北京望京举办的 Jenkins, Artifactory &amp; Kubernetes 实战训练营。</p><a id="more"></a><p>一是由于公司每人每年都有两天带薪培训假期，如果有特别适合我的，我会自费前往。二是培训内容本身也十分贴近我目前的工作内容，想了解下行业最佳实践与相关同行交流。</p><p>在出行前，跟领导请了假说明意向，顺便问了下去参加类似培训是否会有预算，领导让我报一下，我大概算了车票和酒店的钱，领导就跟公司申请，并且还附带帮我申请了饭钱。公司同意，前提只有一个就是回来要做好分享。就这样我就带着任务去参加这次 JFrog DevOps 训练营了，这里我特别感谢我的领导以及公司。</p><h2 id="再次见北京"><a href="#再次见北京" class="headerlink" title="再次见北京"></a>再次见北京</h2><p>想想离开北京已经5年多了，这是唯一一次在北京停留时间最长的 48 小时，之前有过出差路过北京。以前虽然在北京工作，但那时候我还没有太多关注过生活，这次有意的注意了下，脑子里一直思考一个问题，如果再让我回到北京我还会像当初的执念仅仅想着北京工作几年而已吗？</p><p>下了飞机已经十点半了，从机场到望京这段的机场高速车流量还是很大的，北京的夜生活跟以前的感觉一样，比起二三线城市足足晚了两个多小时。五年前在北我京通常都是九点后从公司走，赶上上线的时候后半夜才到家，第二天中午到公司，每天的时间比二三线城市现在我足足延后了五六个小时。</p><p>我现在的生活是早九晚六，不推崇加班，上班期间也是很忙，但绝大多数人也不会加班，加不加班是自愿。期间去过美国出差，美国的同事很多是早上七八点上班，他们一般中午吃的很简单也很快，吃完饭如果工作忙，他们会立马投入工作，下午三四点钟就离开办公室了，待到五六点钟的极少数，但工作效率其实感觉不差。这让我想起了今年轰轰烈烈的讨论过的996，可能归根到底是我们的社会发展阶段所造成的，年轻人压力很大需要努力赚钱买房，有娃的人有自己的父母来帮忙照顾孩子，年老的人也不考虑自己的退休生活，更多的是希望能帮忙自己的孩子解决一些后顾之忧，就这样年轻人就可以安心的的996了。但是美国人他们不行，很现实的他们如果不三四点钟下班，他们的孩子就没人接，他们需要自己的家庭生活。因此，我们本应该由企业甚至是社会来承担事情，被全社会的来承担了，996就自然而然不可避免的发生了。</p><p>早高峰时段，望京有的路口有年长的大爷大妈在指挥交通，每当绿灯时，大量的电动车和自行车与行人一同穿行，我总担心会被刮到。晚上下班吃完饭回去的时候，路口没有指挥了，行人、自行车以及电动车在红灯时过马路的情况还是挺普遍的，造成了绿灯时机动车通行效率很低。另外，就是走在路上，后面不时的有自行车、电动车骑过，我总是挺担心被撞到，这种走路时候担心的感觉其实是不太舒服的。</p><p>中午跟朋友约了吃饭，听他聊起过去五年多的工作情况，期间他换了好几个公司，有勾心斗角的，有 P2P 黄的（工资还欠着的，还在仲裁中），谈起最近一年北京大厂裁员以及网易最近的裁员风波，都让我感受在哪混着都挺不容易的。随着他要当爸爸了，从没有考虑过要离开北京的他也有了离开的念头，如果不能在将来在北京购买个小房子，他可能就回到家乡，住他自己已经购买房子里生活。</p><p>随着企业成本控制，不少企业已经去二三线城市发展，那里的租金甚至比北京便宜四五倍，如果能招到人的话，他们就可以落地二三线了。当初我在北京的时候，我的室友就在中国移动研究院，后来中国移动研究院搬到了苏州，他和几个小伙伴也都去了苏州，现在已经早早在那里买房了，那边环境很好，有自己的房子，工资也不低，其实生活挺舒服的。尤其是软件行业，有的公司允许远程办公，那只要能满足岗位要求，其他也挺好的。身边就有朋友他们的公司在北京撤除了办公室，他们现在就在家办公，隔一段时间可以去出差去二三线城市的办公室与同事工作交流。</p><p>此时，脑海中的问题一直缠绕，再给你一次机会你还想在留在北京生活吗？我的决定和当初一样回到现在的城市。</p><p>我喜欢这里的工作生活的平衡，加班也都是主动加班学习，没有被迫的加班给领导看；我喜欢这里的海，中午吃完饭就可以跟同事一起散步走到海边看海；我喜欢这里离父母很近，开车半个小时就能到，可以经常与他们相聚照顾他们；我喜欢住在自己的房子，不用担心搬家了，可以不断的改善生活环境；我喜欢这里人不太多、该有的专卖店和商城都有、有地铁，去哪里都不算太远。</p><p>周四下午 5 点培训完，吃了个饭就直奔机场连夜回到家，第二天回来继续上班了。这短短的两天，往返两座城市之间工作和培训，飞机上只需要40分钟，就像没有离开过一样，让人感叹交通的便利。</p><p>祝愿每个人都收获自己享受的生活。</p><p align="right">2019 年 12 月 1 日 23 : 55 : 00</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 版本概述</title>
      <link href="/2019/12/Overview-of-Docker-editions/"/>
      <url>/2019/12/Overview-of-Docker-editions/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-可分为三个版本"><a href="#Docker-可分为三个版本" class="headerlink" title="Docker 可分为三个版本"></a>Docker 可分为三个版本</h2><ul><li>Docker Engine - Community</li><li>Docker Engine - Enterprise</li><li>Docker Enterprise</li></ul><p>Docker Engine - Community 是希望开始使用 Docker 并尝试基于容器的应用程序的个人开发人员和小型团队的理想选择。</p><p>Docker Engine - Enterprise 专为企业开发容器运行时而设计，同时考虑了安全性和企业级SLA。</p><p>Docker Enterprise 专为企业开发和IT团队而设计，他们可以大规模构建，交付和运行关键业务应用程序。</p><table><thead><tr><th>能力</th><th>Docker Engine - Community</th><th>Docker Engine - Enterprise</th><th>Docker Enterprise</th></tr></thead><tbody><tr><td>容器引擎和内建的编配，网络，安全</td><td>√</td><td>√</td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/supported-platforms/#docker-enterprise" target="_blank" rel="noopener">认证的基础设施，插件和ISV容器</a></td><td></td><td>√</td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/dtr/" target="_blank" rel="noopener">镜像管理</a></td><td></td><td></td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/ucp/" target="_blank" rel="noopener">容器应用程序管理</a></td><td></td><td></td><td>√</td></tr><tr><td><a href="https://docs.docker.com/ee/dtr/user/manage-images/scan-images-for-vulnerabilities/" target="_blank" rel="noopener">镜像安全扫描</a></td><td></td><td></td><td>√</td></tr></tbody></table><h2 id="安装-Docker-社区版本"><a href="#安装-Docker-社区版本" class="headerlink" title="安装 Docker 社区版本"></a>安装 Docker 社区版本</h2><ul><li>以 CentOS 安装为例： <a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></li></ul><h2 id="其他-Docker-版本安装"><a href="#其他-Docker-版本安装" class="headerlink" title="其他 Docker 版本安装"></a>其他 Docker 版本安装</h2><ul><li>参考 Docker 官网：<a href="https://docs.docker.com/install/overview/" target="_blank" rel="noopener">https://docs.docker.com/install/overview/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定制一个 Docker 版 Jenkins 镜像</title>
      <link href="/2019/12/Install-Docker-Jenkins/"/>
      <url>/2019/12/Install-Docker-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>对于如何备份 Jenkins 除了用 Jenkins 插件来定期备份之外，如果把 Jenkins 安装到 Docker 里，定期备份一个 Docker Image 最后传到 Artifatory 中，也是一个不错的方案。</p><a id="more"></a><h2 id="安装-Docker-版-Jenkins"><a href="#安装-Docker-版-Jenkins" class="headerlink" title="安装 Docker 版 Jenkins"></a>安装 Docker 版 Jenkins</h2><p>在 CentOS 上安装 Docker 版 Jenkins，这里推荐用 Long-term Support (LTS) 版本，可以从 Jenkins 官网<a href="https://jenkins.io/download/" target="_blank" rel="noopener">下载</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载指定 lts 版本 2.130</span></span><br><span class="line">sudo docker pull jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 运行指定 docker Jenkins</span></span><br><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 如果想下载最新的 lts 版</span></span><br><span class="line">sudo docker pull jenkins/jenkins:lts</span><br><span class="line"><span class="comment"># 运行最新的 lts 版 docker Jenkins</span></span><br><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p>启动成功后即可打开 <a href="http://hostname:8080/" target="_blank" rel="noopener">http://hostname:8080/</a> 网址</p><h2 id="修改登录密码"><a href="#修改登录密码" class="headerlink" title="修改登录密码"></a>修改登录密码</h2><p>显示所有的 image 以及正在运行的 container</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出来所有 image</span></span><br><span class="line">sudo docker image list</span><br><span class="line"><span class="comment"># 列出当前运行的 container</span></span><br><span class="line">sudo docker ps</span><br><span class="line"><span class="comment"># 进入容器，使用 -it 参数</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it 39bc7a8307d9 /bin/bash</span><br><span class="line"><span class="comment"># 查看默认 admin 密码</span></span><br><span class="line">jenkins@a6195912b579:/$ cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">5193d06c813d46d3b18babeda836363a</span><br></pre></td></tr></table></figure><p>建议登录之后，修改 admin 密码，方便下次登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit 39bc7a8307d9 myjenkins:v0.1</span><br></pre></td></tr></table></figure><h2 id="将宿主机目录映射到-Jenkins-Docker-中"><a href="#将宿主机目录映射到-Jenkins-Docker-中" class="headerlink" title="将宿主机目录映射到 Jenkins Docker 中"></a>将宿主机目录映射到 Jenkins Docker 中</h2><p>如果想让 Docker 里的 Jenkins 可以访问宿主机的目录，在运行 docker 时使用 -v 参数进行 mount volume</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 8080:8080 -p 50000:50000 --name mydata -v /data/backup:/home/backup jenkins/jenkins:2.130</span><br><span class="line"><span class="comment"># 映射成功，可以看到宿主机上的备份文件了</span></span><br><span class="line">jenkins@c85db3f88115:/home/backup$ ls</span><br><span class="line">FULL-2019-09-14_02-00  FULL-2019-09-28_02-00  FULL-2019-10-19_02-00  FULL-2019-11-02_02-00  FULL-2019-11-23_02-00</span><br><span class="line">FULL-2019-09-21_02-00  FULL-2019-10-05_02-00  FULL-2019-10-26_02-00  FULL-2019-11-09_02-00  FULL-2019-11-30_02-00</span><br></pre></td></tr></table></figure><h2 id="将-Jenkins-Docker-Image-保持在-Artifactory"><a href="#将-Jenkins-Docker-Image-保持在-Artifactory" class="headerlink" title="将 Jenkins Docker Image 保持在 Artifactory"></a>将 Jenkins Docker Image 保持在 Artifactory</h2><p>下载并安装 Artifactory 企业版或是 JFrog Container Registry，注意 Artifactory Open Source 版本不支持 Docker Registry。</p><p>例如我的 JFrog Container Registry 是：dln.dev.mycompany.com:8040，并创建了一个 docker repository 叫 docker-local。</p><p>上传 Docker Image 一共分为三步：</p><p>docker login</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  在登录前需要添加如下配置到 /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"insecure-registries"</span> : [<span class="string">"dln.dev.mycompany.com:8040"</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># docker login &lt;DOCKER_SERVER&gt;, example below:</span></span><br><span class="line">sudo docker login dln.dev.mycompany.com:8040</span><br></pre></td></tr></table></figure><p>docker tag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker tag &lt;IMAGE_ID&gt; artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class="line">sudo docker tag myjenkins:v0.1 dln.dev.mycompany.com:8040/docker-local/myjenkins:v0.1</span><br></pre></td></tr></table></figure><p>docker push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker push artprod.mycompany/&lt;DOCKER_REPOSITORY&gt;:&lt;DOCKER_TAG&gt;, example below:</span></span><br><span class="line">$ sudo docker push dln.dev.mycompany.com:8040/docker-local/myjenkins::v0.1</span><br><span class="line">The push refers to repository [dln.dev.mycompany.com:8040/docker-local/myjenkins]</span><br><span class="line">98d59071f692: Pushed</span><br><span class="line">af288f00b8a7: Pushed</span><br><span class="line">4b955941a4d0: Pushed</span><br><span class="line">f121afdbbd5d: Pushed</span><br><span class="line">15.10: digest: sha256:a3f5e428c0cfbfd55cffb32d30b1d78fedb8a9faaf08efdd9c5208c94dc66614 size: 1150</span><br></pre></td></tr></table></figure><p>登录 JFrog Container Registry 刷新就可以到已经上次的 Image 了。说明：截图是我上传的另外一个镜像 ubuntu:15.10</p><p><img src="/2019/12/Install-Docker-Jenkins/example-image.png" alt="举例"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artifactory 与 Jenkins 集成</title>
      <link href="/2019/11/Artifactory-integrate-with-Jenkins/"/>
      <url>/2019/11/Artifactory-integrate-with-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>上一篇 <a href="https://shenxianpeng.github.io/2019/11/Artifactory-install-and-upgrade/">初识 JFrog Artifactory</a>，介绍了什么是 Artifactory，以及如何安装、启动和升级。</p><p>本篇介绍 Artifactory 与 Jenkins 的集成，因为没有与 CI 工具集成的 Artifactory 是没有灵魂的。</p><p>通过集成，可以让 Jenkins 在完成构建之后，可以直接将制品（比如 build）推送到 Artifactory，供测试下载、部署或是后续的 Jenkins 任务去继续进行持续集成。</p><a id="more"></a><h2 id="Jenkins-里配置-Artifactory"><a href="#Jenkins-里配置-Artifactory" class="headerlink" title="Jenkins 里配置 Artifactory"></a>Jenkins 里配置 Artifactory</h2><p>打开 Manage Jenkins-&gt;Configure System，找到 Artifactory，点击 Add Artifactory Server， 输入 Server ID 和 URL</p><ol><li>Server ID 是给你的 Artifactory 起个别名，这样使用 Jenkins pipeline 的时候会用到</li><li>URL 是你的 Artifactory 服务器的地址，例如 <code>http://art.company.com:8040/artifactory</code></li><li>配置完成后，点击Test Connection，返回 <code>Found Artifactory 6.14.0</code> 表示配置成功。</li></ol><p>如图所示: <img src="/2019/11/Artifactory-integrate-with-Jenkins/jenkins-artifactory-integration.png" alt="配置和测试"></p><h2 id="使用-Pipeline-调用-Artifactory"><a href="#使用-Pipeline-调用-Artifactory" class="headerlink" title="使用 Pipeline 调用 Artifactory"></a>使用 Pipeline 调用 Artifactory</h2><p>这里演示了两种方式，我在项目中用的是 Jenkins Shared Library；当然你也可以仅仅使用 Jenkinsfile，把如下两个 groovy 文件组合成一个 Jenkinsfile。</p><h3 id="方式1：Jenkins-Shared-Library"><a href="#方式1：Jenkins-Shared-Library" class="headerlink" title="方式1：Jenkins Shared Library"></a>方式1：Jenkins Shared Library</h3><p><code>build.groovy</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def <span class="function"><span class="title">call</span></span>() &#123;</span><br><span class="line">  pipeline &#123;</span><br><span class="line">    <span class="comment"># 省略其他代码</span></span><br><span class="line">    post &#123;</span><br><span class="line">      <span class="comment"># 这里只有在 Jenkins Job 成功的时候才将 build post 到 artifactory</span></span><br><span class="line">      success &#123;</span><br><span class="line">        script &#123;</span><br><span class="line">          <span class="keyword">if</span> (env.BRANCH_NAME == <span class="string">'develop'</span>) &#123;</span><br><span class="line">            <span class="comment"># 如果当前是 develop 分支，则将 release 和 debug build 都 post 到 artifactory</span></span><br><span class="line">            artifactory(<span class="string">"<span class="variable">$&#123;PATTERN_RELEASE_PATH&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;TARGET_PATH&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;BUILD_NAME&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;BUILD_NUMBER&#125;</span>"</span>)</span><br><span class="line">            artifactory(<span class="string">"<span class="variable">$&#123;PATTERN_DEBUG_PATH&#125;</span>"</span>,   <span class="string">"<span class="variable">$&#123;TARGET_PATH&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;BUILD_NAME&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;BUILD_NUMBER&#125;</span>"</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">'PR'</span>)) &#123;</span><br><span class="line">            <span class="comment"># 如果当前是 pull request 分支，则只将 release build 都 post 到 artifactory</span></span><br><span class="line">            artifactory(<span class="string">"<span class="variable">$&#123;PATTERN_RELEASE_PATH&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;TARGET_PATH&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;BUILD_NAME&#125;</span>"</span>, <span class="string">"<span class="variable">$&#123;BUILD_NUMBER&#125;</span>"</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>artifactory.groovy</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import groovy.transform.Field</span><br><span class="line"></span><br><span class="line">@Field artifactoryServerId   = <span class="string">"art-1"</span></span><br><span class="line">@Field artifactoryURL        = <span class="string">"http://art.company.com:8040/artifactory"</span></span><br><span class="line">@Field artifactoryCredential = <span class="string">"d1cbab74-823d-41aa-abb7"</span></span><br><span class="line"></span><br><span class="line">def call(String patternPath, String targetPath, String buildName, String buildNumber) &#123;</span><br><span class="line">  rtServer (</span><br><span class="line">    id: <span class="string">"<span class="variable">$&#123;artifactoryServerId&#125;</span>"</span>,</span><br><span class="line">    url: <span class="string">"<span class="variable">$&#123;artifactoryURL&#125;</span>"</span>,</span><br><span class="line">    credentialsId: <span class="string">"<span class="variable">$&#123;artifactoryCredential&#125;</span>"</span></span><br><span class="line">  )</span><br><span class="line">  rtPublishBuildInfo (</span><br><span class="line">      serverId: <span class="string">"<span class="variable">$&#123;artifactoryServerId&#125;</span>"</span></span><br><span class="line">  )</span><br><span class="line">  rtUpload (</span><br><span class="line">    serverId: <span class="string">"<span class="variable">$&#123;artifactoryServerId&#125;</span>"</span>,</span><br><span class="line">    spec: <span class="string">""</span><span class="string">"&#123;</span></span><br><span class="line"><span class="string">      "</span>files<span class="string">": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">        "</span>pattern<span class="string">": "</span><span class="variable">$&#123;patternPath&#125;</span><span class="string">",</span></span><br><span class="line"><span class="string">        "</span>target<span class="string">": "</span><span class="variable">$&#123;targetPath&#125;</span><span class="string">"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;"</span><span class="string">""</span>,</span><br><span class="line">    buildNumber: <span class="string">"<span class="variable">$&#123;buildNumber&#125;</span>"</span>,</span><br><span class="line">    buildName: <span class="string">"<span class="variable">$&#123;buildName&#125;</span>"</span>,</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式2：Jenkinsfile"><a href="#方式2：Jenkinsfile" class="headerlink" title="方式2：Jenkinsfile"></a>方式2：Jenkinsfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  <span class="comment"># 省略其他代码</span></span><br><span class="line">  stage(<span class="string">'config art'</span>)&#123;</span><br><span class="line">    rtServer (</span><br><span class="line">    id: <span class="string">"art-1"</span>,</span><br><span class="line">    url: <span class="string">"http://art.company.com:8040/artifactory"</span>,</span><br><span class="line">    credentialsId: <span class="string">"d1cbab74-823d-41aa-abb7"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  post &#123;</span><br><span class="line">    <span class="comment"># 这里只有在 Jenkins Job 成功的时候才将 build post 到 artifactory</span></span><br><span class="line">    success &#123;</span><br><span class="line">      script &#123;</span><br><span class="line">        <span class="keyword">if</span> (env.BRANCH_NAME == <span class="string">'develop'</span>) &#123;</span><br><span class="line">          rtUpload (</span><br><span class="line">            serverId: <span class="string">"art-1"</span>,</span><br><span class="line">            spec: <span class="string">""</span><span class="string">"&#123;</span></span><br><span class="line"><span class="string">              "</span>files<span class="string">": [</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                "</span>pattern<span class="string">": "</span>/release/build/*.zip<span class="string">",</span></span><br><span class="line"><span class="string">                "</span>target<span class="string">": "</span>demo/develop/<span class="string">"</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">              ]</span></span><br><span class="line"><span class="string">            &#125;"</span><span class="string">""</span>,</span><br><span class="line">            buildNumber: <span class="string">"<span class="variable">$&#123;buildNumber&#125;</span>"</span>,</span><br><span class="line">            buildName: <span class="string">"<span class="variable">$&#123;buildName&#125;</span>"</span>,</span><br><span class="line">          )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (env.BRANCH_NAME.startsWith(<span class="string">'PR'</span>)) &#123;</span><br><span class="line">          rtUpload (</span><br><span class="line">            serverId: <span class="string">"art-1"</span>,</span><br><span class="line">            spec: <span class="string">""</span><span class="string">"&#123;</span></span><br><span class="line"><span class="string">                "</span>files<span class="string">": [</span></span><br><span class="line"><span class="string">                  &#123;</span></span><br><span class="line"><span class="string">                  "</span>pattern<span class="string">": "</span>/release/build/*.zip<span class="string">",</span></span><br><span class="line"><span class="string">                  "</span>target<span class="string">": "</span>demo/pull-request/<span class="string">"</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                ]</span></span><br><span class="line"><span class="string">            &#125;"</span><span class="string">""</span>,</span><br><span class="line">            buildNumber: <span class="string">"<span class="variable">$&#123;buildNumber&#125;</span>"</span>,</span><br><span class="line">            buildName: <span class="string">"<span class="variable">$&#123;buildName&#125;</span>"</span>,</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Jenkins-与-Artifactory-集成成功"><a href="#Jenkins-与-Artifactory-集成成功" class="headerlink" title="Jenkins 与 Artifactory 集成成功"></a>Jenkins 与 Artifactory 集成成功</h2><p>蓝色表示构建成功，绿色圆圈表示 Build 已经 Post 到 Artifactory 上了。</p><p><img src="/2019/11/Artifactory-integrate-with-Jenkins/post-to-artifactory.png" alt="显示构建以及 Post 成功"></p><p>点击绿色圆圈可以跳转到 Artifactory 看到制品。</p><p><img src="/2019/11/Artifactory-integrate-with-Jenkins/artifactory-builds.png" alt="Artifactory"></p><p>Jenkins 与 Artifactory 打通了，大功告成 :)</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Artifactory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 JFrog Artifactory</title>
      <link href="/2019/11/Artifactory-install-and-upgrade/"/>
      <url>/2019/11/Artifactory-install-and-upgrade/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Artifactory"><a href="#什么是-Artifactory" class="headerlink" title="什么是 Artifactory"></a>什么是 Artifactory</h2><p>Artifactory 是 JFrog 的一个产品，用作二进制存储库管理器。二进制存储库可以将所有这些二进制统一托管，从而使团队的管理更加高效和简单。</p><p>就跟你用 Git 一样，Git 是用来管理代码的，Artifactory 是用来管理二进制文件的，通常是指 jar, war, pypi, DLL, EXE 等 build 文件。</p><p>我觉得使用 Artifactory 的最大优势是创造了更好的持续集成环境，有助于其他持续集成任务去 Artifactory 里调用，再部署到不同的测试或开发环境，这对于实施 DevOps 至关重要。</p><a id="more"></a><p>如果想了解更多有关 Artifactory，请参看 <a href="https://www.jfrogchina.com/" target="_blank" rel="noopener">中文官网</a> 以及 <a href="https://jfrog.com/artifactory/" target="_blank" rel="noopener">English Website</a>。</p><h2 id="安装-Artifactory"><a href="#安装-Artifactory" class="headerlink" title="安装 Artifactory"></a>安装 Artifactory</h2><ol><li>从官网下载 Open Source <a href="https://jfrog.com/open-source/#artifactory" target="_blank" rel="noopener">Artifactory</a>，这里演示的是安装到 Linux，所以点击 Download RPM 下载</li><li>将下载好的 jfrog-artifactory-oss-6.14.0.rpm 上传到 Linux 上</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录创建一个文件，你也可以在任何目录创建文件夹</span></span><br><span class="line">sudo mkdir /artifactory</span><br><span class="line"><span class="built_in">cd</span> /artifactory</span><br><span class="line"><span class="comment"># 将下载好的 jfrog-artifactory-oss-6.15.0.rpm 上传到你的 Linux 上</span></span><br><span class="line">$ ls</span><br><span class="line">jfrog-artifactory-oss-6.14.0.rpm</span><br><span class="line"><span class="comment"># 安装 artifactory</span></span><br><span class="line">sudo rpm -ivh jfrog-artifactory-oss-6.14.0.rpm</span><br></pre></td></tr></table></figure><h2 id="Artifactory-服务启动和关闭"><a href="#Artifactory-服务启动和关闭" class="headerlink" title="Artifactory 服务启动和关闭"></a>Artifactory 服务启动和关闭</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">sudo systemctl start artifactory.service</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop artifactory.service</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">sudo systemctl status artifactory.service</span><br></pre></td></tr></table></figure><h2 id="访问-Artifactory"><a href="#访问-Artifactory" class="headerlink" title="访问 Artifactory"></a>访问 Artifactory</h2><p>Artifactory 默认端口是8040，安装成功后访问：<code>http://hostname:8040</code> 即可登录（默认用户名 admin 密码 password）<br><img src="/2019/11/Artifactory-install-and-upgrade/homepage.png" alt="Artifactory 首页"></p><h2 id="Artifactory-升级"><a href="#Artifactory-升级" class="headerlink" title="Artifactory 升级"></a>Artifactory 升级</h2><ol><li><p>从官网下载最新的 <a href="https://jfrog.com/open-source/#artifactory" target="_blank" rel="noopener">Artifactory</a></p></li><li><p>将下载好的 jfrog-artifactory-oss-6.15.0.rpm（目前最新）上传到你的 Linux 上</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /artifactory</span><br><span class="line">ls</span><br><span class="line">jfrog-artifactory-oss-6.14.0.rpm  jfrog-artifactory-oss-6.15.0.rpm</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">sudo systemctl stop artifactory.service</span><br><span class="line"><span class="comment"># 进行升级</span></span><br><span class="line">sudo rpm -U jfrog-artifactory-oss-6.15.0.rpm</span><br><span class="line"><span class="comment"># 输出日志，显示升级成功</span></span><br><span class="line">warning: jfrog-artifactory-oss-6.15.0.rpm: Header V4 DSA/SHA1 Signature, key ID d7639232: NOKEY</span><br><span class="line">Checking <span class="keyword">if</span> ARTIFACTORY_HOME exists</span><br><span class="line">Removing tomcat work directory</span><br><span class="line">Removing Artifactory<span class="string">'s exploded WAR directory</span></span><br><span class="line"><span class="string">Initializing artifactory service with systemctl...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">************ SUCCESS ****************</span></span><br><span class="line"><span class="string">The upgrade of Artifactory has completed successfully.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Start Artifactory with:</span></span><br><span class="line"><span class="string">&gt; systemctl start artifactory.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Check Artifactory status with:</span></span><br><span class="line"><span class="string">&gt; systemctl status artifactory.service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NOTE: Updating the ownership of files and directories. This may take several minutes. Do not stop the installation/upgrade process.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Artifactory </tag>
            
            <tag> JFrog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Console Output 显示彩色</title>
      <link href="/2019/09/output-display-color/"/>
      <url>/2019/09/output-display-color/</url>
      
        <content type="html"><![CDATA[<p>如果想让 Jenkins Console Output 出来一些重要日志醒目的显示，可以让一些日志显示颜色方便查看</p><ol><li>首先需要安装插件： <a href="https://wiki.jenkins.io/display/JENKINS/AnsiColor+Plugin" target="_blank" rel="noopener">https://wiki.jenkins.io/display/JENKINS/AnsiColor+Plugin</a></li><li>安装成功后进入系统设置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> AnsiColor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins privilege management</title>
      <link href="/2019/11/Jenkins-privilege-management/"/>
      <url>/2019/11/Jenkins-privilege-management/</url>
      
        <content type="html"><![CDATA[<p>如何针对 Jenkins 里的不同 Job 进行不同的策略管理。比如某个 Job 所有人都可以查看，但仅限于某些人可以执行，这时候就需要对 Job 行程权限设置。</p><a id="more"></a><p>这里用的插件是 Role-based Authorization Strategy。安装成功后，打开要设置的 Job, 设置如下：</p><p><img src="/2019/11/Jenkins-privilege-management/jenkins-privilege-management.png" alt="Enable project-based security"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Authorization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何设置 NFS 共享以及在不同的平台 Windows/Linux/Unix 进行挂载</title>
      <link href="/2019/09/nfs/"/>
      <url>/2019/09/nfs/</url>
      
        <content type="html"><![CDATA[<p>例如我有一个共享仓库的代码所在用的空间非常大（超过 20 G），在每个产品构建时候都需要用到这个仓库的代码（从里面 copy 第三方库），如果每个人都要 git clone 这个第三方仓库，一是网络开销非常大，二是 git clone 时间长，而且占用大量的物理空间。</p><p>这可以通过 NFS 共享来解决。</p><p>另外希望这个代码仓库能自动更新，这里引入了 Jenkins。用它来检查如果这个容量巨大的仓库有代码提交就自动执行 git pull 操作，更新最新的代码到共享服务器上。</p><a id="more"></a><p>什么是 NFS？NFS（Network File System）即网络文件系统，是 FreeBSD 支持的文件系统中的一种，它允许网络中的计算机之间共享资源。在 NFS 的应用中，本地 NFS 的客户端应用可以透明地读写位于远端 NFS 服务器上的文件，就像访问本地文件一样，Windows 上俗称共享。</p><h2 id="设置-NFS"><a href="#设置-NFS" class="headerlink" title="设置 NFS"></a>设置 NFS</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如在 Linux 上, 共享服务器的 ip 是 192.168.1.1</span></span><br><span class="line">sudo vi /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下是我的 exports 文件的配置</span></span><br><span class="line"><span class="comment"># 假设内网 ip 是这样的区间 192.168.1.1 ~ 192.168.1.250</span></span><br><span class="line"><span class="comment"># ro 表示只读</span></span><br><span class="line"><span class="comment"># all_squash 表示不管使用 NFS 的用户是谁，他的身份都会被限定成为一个指定的普通用户身份(nfsnobody)</span></span><br><span class="line">/agent/workspace/opensrc 192.168.1.*(ro,all_squash)</span><br><span class="line">/agent/workspace/opensrc dev-team<span class="_">-a</span>*.com(ro,all_squash)</span><br><span class="line">/agent/workspace/opensrc dev-team-b*.com(ro,all_squash)</span><br><span class="line">/agent/workspace/opensrc dev-ci*(ro,all_squash)</span><br></pre></td></tr></table></figure><h2 id="NFS-操作"><a href="#NFS-操作" class="headerlink" title="NFS 操作"></a>NFS 操作</h2><h3 id="启动-NFS-服务"><a href="#启动-NFS-服务" class="headerlink" title="启动 NFS 服务"></a>启动 NFS 服务</h3><p>启动 NFS 服务，需要启动 portmap 和 nfs 两个服务，并且 portmap 一定要先于 nfs 启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service portmap start</span><br><span class="line">service nfs start</span><br><span class="line"><span class="comment"># 查看 portmap 状态</span></span><br><span class="line">service portmap status</span><br></pre></td></tr></table></figure><h3 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nfs status</span><br></pre></td></tr></table></figure><h3 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nfs stop</span><br></pre></td></tr></table></figure><h3 id="导出配置"><a href="#导出配置" class="headerlink" title="导出配置"></a>导出配置</h3><p>当改变/etc/exports配置文件后，不用重启 NFS 服务直接用这个 exportfs 即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo exportfs -rv</span><br></pre></td></tr></table></figure><h2 id="挂载到不同平台"><a href="#挂载到不同平台" class="headerlink" title="挂载到不同平台"></a>挂载到不同平台</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the NFS Client(Services for NFS)</span></span><br><span class="line"><span class="comment"># Step 1: Open Programs and Features</span></span><br><span class="line"><span class="comment"># Step 2: Click Turn Windows features on or off</span></span><br><span class="line"><span class="comment"># Step 3: Find and check option Services for NFS</span></span><br><span class="line"><span class="comment"># Step 4: Once installed, click Close and exit back to the desktop. refer to https://graspingtech.com/mount-nfs-share-windows-10/</span></span><br><span class="line">$ mount -o anon 192.168.1.1:/agent/workspace/opensrc Z:</span><br></pre></td></tr></table></figure><h3 id="Linux-Unix"><a href="#Linux-Unix" class="headerlink" title="Linux/Unix"></a>Linux/Unix</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">sudo mount -t nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># AIX</span></span><br><span class="line">sudo nfso -o nfs_use_reserved_ports=1     <span class="comment"># should only first time mount need to run this command</span></span><br><span class="line">sudo mount -F nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># HP-UX</span></span><br><span class="line">sudo mount -F nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solaris-SPARC</span></span><br><span class="line"><span class="comment"># 如果你不能直接在命令行执行 mount</span></span><br><span class="line">sudo /usr/sbin/mount -F nfs 192.168.1.1:/agent/workspace/opensrc /agent/workspace/opensrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Shell </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Could not read from remote repository 问题</title>
      <link href="/2019/09/could-not-read-from-remote-repository/"/>
      <url>/2019/09/could-not-read-from-remote-repository/</url>
      
        <content type="html"><![CDATA[<p>最近我在运行 Jenkins Job 时候突然发现 git clone 代码的时候突然报了这个错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> ssh://git@git.companyname.com:7999/mvcc/opensrc.git</span><br><span class="line">Cloning into <span class="string">'opensrc'</span>...</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>这个错误只在我刚开始使用 git 的时候遇到过，那时候我还不知道如何使用 ssh 的方式来 clone 代码。怎么会出现这个错误呢？我也没改过什么，非常不理解。</p><h2 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h2><a id="more"></a><p>Google 了没有找到我遇到的这个问题，绝大多数都是应为没有生成 ssh-key，然后将 pub key 添加到 Github 或是其他 Web git 管理平台，对于这个问题是这样解决的，以 GitHub 为例</p><p>首先，生成 SSH key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记得替换成你自己的邮箱账号</span></span><br><span class="line">ssh-keygen -t rsa -C xianpeng.shen@gmail.com</span><br></pre></td></tr></table></figure><p>其次，拷贝 SSH pub key 到你使用的 git web 平台，比如 Github 等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> %userprofile%/.ssh</span><br><span class="line"><span class="comment"># 打开 id_rsa.pub 并拷贝内容</span></span><br><span class="line">notepad id_rsa.pub</span><br></pre></td></tr></table></figure><p>最后，打开 <a href="https://github.com/settings/ssh/new" target="_blank" rel="noopener">https://github.com/settings/ssh/new</a> 把你复制的内容贴进去保存即可。</p><h2 id="通过-SSH-连接测试排查"><a href="#通过-SSH-连接测试排查" class="headerlink" title="通过 SSH 连接测试排查"></a>通过 SSH 连接测试排查</h2><p>对于我遇到的问题，这种解决方式是无效的，因为同样的账号在别的虚拟机上并不存在这个问题，因此我在这个 HP-UX 虚拟机上用了另外一个账号生成 ssh-key, git clone 代码没有问题，那我知道了就是这两个账号的之间存在差异。</p><p>首先，我查看了这两个账号的 .gitconfig 文件，确实有差异，当我将好用的账号的 .gitconfig 内容复制到不好用的账号的 .gitconfig 文件时，并不好用。</p><p>其次，我发现执行 git clone 的时候在当前目录下生成了一个 core 文件，说明已经 coredump 了，但是这个 core 直接打开大部分都是乱码，错误信息很难准确定位。</p><p>最后，我发现有一个命令是可以用来测试 SSH 连接的<br>对于 Github 是这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>我当前使用和出问题的是 Bitbucket，它的 SSH 连接测试命令是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -vvv git\@bitbucket.org</span><br></pre></td></tr></table></figure><p>我先用好 git clone 好用的账号，测试结果如下，这里我省略一些其他返回信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -vvv git\@bitbucket.org</span><br><span class="line">OpenSSH_6.2p1+sftpfilecontrol-v1.3-hpn13v12, OpenSSL 0.9.8y 5 Feb 2013      <span class="comment"># OpenSSH 版本不同</span></span><br><span class="line">HP-UX Secure Shell-A.06.20.006, HP-UX Secure Shell version                  <span class="comment"># 原来是调用路径不同</span></span><br><span class="line">debug1: Reading configuration data /opt/ssh/etc/ssh_config</span><br><span class="line">debug3: RNG is ready, skipping seeding</span><br><span class="line">debug2: ssh_connect: needpriv 0</span><br><span class="line">debug1: Connecting to bitbucket.org [18.205.93.1] port 22.</span><br><span class="line">debug1: Connection established.</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">debug2: we did not send a packet, <span class="built_in">disable</span> method</span><br><span class="line">debug1: No more authentication methods to try.</span><br><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>我再用 git clone 不好用的账号进行测试，结果返回如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -vvv git\@bitbucket.org</span><br><span class="line">OpenSSH_8.0p1, OpenSSL 1.0.2s  28 May 2019                                  <span class="comment"># OpenSSH 版本不同</span></span><br><span class="line">debug1: Reading configuration data /usr/<span class="built_in">local</span>/etc/ssh_config                <span class="comment"># 原来是调用路径不同</span></span><br><span class="line">debug2: resolving <span class="string">"bitbucket.org"</span> port 22</span><br><span class="line">debug2: ssh_connect_direct</span><br><span class="line">debug1: Connecting to bitbucket.org [180.205.93.10] port 22.</span><br><span class="line">debug1: Connection established.</span><br><span class="line">Memory fault(coredump)</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>明显看到他们使用了不同版本的 OpenSSH，说明他们的环境变量有所不同。我之前查看过环境变量，但由于变量很多，不能一下判断那个变量可能会有影响。</p><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>回到 git clone 失败的那个账号下面的 .profile 文件查看，这里确实添加了一个 /usr/bin 的环境变量，导致这个账号在执行 git clone 时候用了另外版本的 OpenSSH，我用的是 HP-UX，它对于包之前的依赖以及版本要求都非常高，把这个环境变量去掉之后，保存，重新登录到虚拟机，执行 git clone 恢复正常。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit Squash</title>
      <link href="/2019/08/git-commit-squash/"/>
      <url>/2019/08/git-commit-squash/</url>
      
        <content type="html"><![CDATA[<h2 id="If-your-commits-on-local-not-pushed-to-remote"><a href="#If-your-commits-on-local-not-pushed-to-remote" class="headerlink" title="If your commits on local not pushed to remote"></a>If your commits on local not pushed to remote</h2><h3 id="combine-local-commits-you-could-follow-this-flow"><a href="#combine-local-commits-you-could-follow-this-flow" class="headerlink" title="combine local commits, you could follow this flow"></a>combine local commits, you could follow this flow</h3><p>Here is <a href="https://www.youtube.com/watch?v=V5KrD7CmO4o" target="_blank" rel="noopener">short video</a> (only 3 minutes) and good explanation of <code>git rebase -i</code> usage.</p><p>list your local repository log</p><p><img src="/2019/08/git-commit-squash/example-01.png" alt="list your logs in oneline"></p><p>If you want to combine these 3 commits (add6152, 3650100, 396a652) to 1 commit, execute this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3      <span class="comment"># last three commits</span></span><br></pre></td></tr></table></figure><p><img src="/2019/08/git-commit-squash/example-02.png" alt="list last three commits"></p><p>Select which commit you want to squash (type s or squash are OK)</p><p><img src="/2019/08/git-commit-squash/example-03.png" alt="combine three commits to one"></p><p>then press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-04.png" alt="comment out some commits message you don&#39;t need"></p><p>Comment out some commits message you don’t need, press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-05.png" alt="comment out some commits message you don&#39;t need"></p><p>Check log, you will see your local repository logs has combine to one commit</p><p><img src="/2019/08/git-commit-squash/example-06.png" alt="comment out some commits message you don&#39;t need"></p><h2 id="If-your-commits-had-pushed-to-remote"><a href="#If-your-commits-had-pushed-to-remote" class="headerlink" title="If your commits had pushed to remote"></a>If your commits had pushed to remote</h2><h3 id="combine-remote-commits-you-could-follow-this-flow"><a href="#combine-remote-commits-you-could-follow-this-flow" class="headerlink" title="combine remote commits, you could follow this flow"></a>combine remote commits, you could follow this flow</h3><p>list your repository logs</p><p><img src="/2019/08/git-commit-squash/example-07.png" alt="list your logs in oneline"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># so you can create another branch from bugfix/UNV-1234 named bugfix/UNV-1234-for-squash</span></span><br><span class="line">xshen@dln<span class="_">-l</span>-xs01 MINGW64 /c/U2GitCode/git-test (bugfix/UNV-1234)</span><br><span class="line">$ git checkout -b bugfix/UNV-1234-for-squash</span><br><span class="line">Switched to a new branch <span class="string">'bugfix/UNV-1234-for-squash'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># combine last 2 commits</span></span><br><span class="line">$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>change one commit from pick to squash, see the screenshot below. press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-08.png" alt="select a commit you want to squash"></p><p>change commit message, for example “UNV-1234 combine all commit to one commit”, then press ESC, enter :wq! to save and exit.</p><p><img src="/2019/08/git-commit-squash/example-09.png" alt="comment out commit message you don&#39;t want to display"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># push your new create branch to remote.</span></span><br><span class="line">git push -u origin bugfix/UNV-1234-for-squash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Squash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERROR: Error cloning remote repo &#39;origin&#39; timeout=10</title>
      <link href="/2019/08/jenkins-troubleshooting/"/>
      <url>/2019/08/jenkins-troubleshooting/</url>
      
        <content type="html"><![CDATA[<h2 id="Jenkins-问题解决记录（一）"><a href="#Jenkins-问题解决记录（一）" class="headerlink" title="Jenkins 问题解决记录（一）"></a>Jenkins 问题解决记录（一）</h2><p>最近 Jenkins Build 不知为何总是 git clone 失败，报这个错误,  ERROR: Error cloning remote repo ‘origin’。</p><ol><li>我首先怀疑是网络原因，我们的 Bitbucket 在 Git clone 时所占带宽很大造成短暂断网情况，怀疑是 IT 更改了 Bitbucket 的设置，但我手动去那台 agent 上执行却没问题，好像跟 IT 无关</li><li>再看日志这里有一处显示 timeout=10，这时候我突然想起来前些日子我删除了非常大的一个文件夹，然后做了一次提交，这会导致我们的仓库增大，在做一次完整的 clone 的时候所需要的时间可能超过 Jenkins 默认 10 分钟。</li></ol><p>去 Google 搜索最后找到这个 issue JENKINS-47660，和我的问题一样。</p><a id="more"></a><h2 id="解决办法-Troubleshooting"><a href="#解决办法-Troubleshooting" class="headerlink" title="解决办法 Troubleshooting"></a>解决办法 Troubleshooting</h2><p>最终我找到 Git clone 有个 Behaviors 属性，找到里面的 Advanced clone behaviours 功能，将 Fetch tags 去掉（因为我暂时不用，去掉也可能减少那么一丁点的时间吧），勾选了 Shallow clone，然后将 Shallow clone depth 设置为 1，（这个设置等同于 –depth 1），Timeout 时间从 10 分钟改为 15 分钟。最终的设置如图：</p><p><img src="/2019/08/jenkins-troubleshooting/advanced-clone-behaviour.png" alt="Advanced clone behaviours"></p><h2 id="Full-Log-below"><a href="#Full-Log-below" class="headerlink" title="Full Log below"></a>Full Log below</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">using credential d1cbab74-823d-41aa-abb7</span><br><span class="line"> Wiping out workspace first.</span><br><span class="line"> Cloning the remote Git repository</span><br><span class="line"> Cloning with configured refspecs honoured and without tags</span><br><span class="line"> Cloning repository https:&#x2F;&#x2F;git.company.com&#x2F;scm&#x2F;db&#x2F;blog.git</span><br><span class="line">  &gt; C:\Program Files\Git\bin\git.exe init C:\agent\workspace\develop # timeout&#x3D;10</span><br><span class="line"> Fetching upstream changes from https:&#x2F;&#x2F;git.company.com&#x2F;scm&#x2F;db&#x2F;blog.git</span><br><span class="line">  &gt; C:\Program Files\Git\bin\git.exe --version # timeout&#x3D;10</span><br><span class="line"> using GIT_ASKPASS to set credentials blwmv</span><br><span class="line">  &gt; C:\Program Files\Git\bin\git.exe fetch --no-tags --progress https:&#x2F;&#x2F;git.company.com&#x2F;scm&#x2F;db&#x2F;blog.git +refs&#x2F;heads&#x2F;develop:refs&#x2F;remotes&#x2F;origin&#x2F;develop</span><br><span class="line"> ERROR: Error cloning remote repo &#39;origin&#39;</span><br><span class="line"> hudson.plugins.git.GitException: Command &quot;C:\Program Files\Git\bin\git.exe fetch --no-tags --progress https:&#x2F;&#x2F;git.company.com&#x2F;scm&#x2F;db&#x2F;blog.git +refs&#x2F;heads&#x2F;develop:refs&#x2F;remotes&#x2F;origin&#x2F;develop&quot; returned status code 130:</span><br><span class="line"> stdout: </span><br><span class="line"> stderr: remote: Counting objects: 1           </span><br><span class="line">remote: Counting objects: 242690, done.        </span><br><span class="line"> remote: Compressing objects:   0% (1&#x2F;75028)           </span><br><span class="line">remote: Compressing objects:   1% (751&#x2F;75028)           </span><br><span class="line">remote: Compressing objects:   2% (1501&#x2F;75028)           </span><br><span class="line">remote: Compressing objects:   3% (2251&#x2F;75028)           </span><br><span class="line">remote: Compressing objects:   4% (3002&#x2F;75028)           </span><br><span class="line">remote: Compressing objects:   5% (3752&#x2F;75028)           </span><br><span class="line">... ...</span><br><span class="line">remote: Compressing objects: 100% (75028&#x2F;75028), done.        </span><br><span class="line"> Receiving objects:   0% (1&#x2F;242690)   </span><br><span class="line">Receiving objects:   1% (2427&#x2F;242690)   </span><br><span class="line">Receiving objects:   1% (4762&#x2F;242690), 972.00 KiB | 949.00 KiB&#x2F;s   </span><br><span class="line">Receiving objects:   2% (4854&#x2F;242690), 972.00 KiB | 949.00 KiB&#x2F;s   </span><br><span class="line">Receiving objects:   3% (7281&#x2F;242690), 1.38 MiB | 919.00 KiB&#x2F;s   </span><br><span class="line">Receiving objects:   3% (8998&#x2F;242690), 1.82 MiB | 645.00 KiB&#x2F;s   </span><br><span class="line">Receiving objects:   4% (9708&#x2F;242690), 1.82 MiB | 645.00 KiB&#x2F;s   </span><br><span class="line">Receiving objects:   4% (9778&#x2F;242690), 1.82 MiB | 645.00 KiB&#x2F;s   </span><br><span class="line">Receiving objects:   5% (12135&#x2F;242690), 1.82 MiB | 645.00 KiB&#x2F;s   </span><br><span class="line">... ...</span><br><span class="line">Receiving objects:  86% (209321&#x2F;242690), 1.01 GiB | 2.08 MiB&#x2F;s   </span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:2042)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandWithCredentials(CliGitAPIImpl.java:1761)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$400(CliGitAPIImpl.java:72)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$1.execute(CliGitAPIImpl.java:442)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$2.execute(CliGitAPIImpl.java:655)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler$1.call(RemoteGitImpl.java:153)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler$1.call(RemoteGitImpl.java:146)</span><br><span class="line"> at hudson.remoting.UserRequest.perform(UserRequest.java:212)</span><br><span class="line"> at hudson.remoting.UserRequest.perform(UserRequest.java:54)</span><br><span class="line"> at hudson.remoting.Request$2.run(Request.java:369)</span><br><span class="line"> at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)</span><br><span class="line"> at java.util.concurrent.FutureTask.run(Unknown Source)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)</span><br><span class="line"> at java.lang.Thread.run(Unknown Source)</span><br><span class="line"> Suppressed: hudson.remoting.Channel$CallSiteStackTrace: Remote call to dendevu2uvbw01</span><br><span class="line"> at hudson.remoting.Channel.attachCallSiteStackTrace(Channel.java:1743)</span><br><span class="line"> at hudson.remoting.UserRequest$ExceptionResponse.retrieve(UserRequest.java:357)</span><br><span class="line"> at hudson.remoting.Channel.call(Channel.java:957)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler.execute(RemoteGitImpl.java:146)</span><br><span class="line"> at sun.reflect.GeneratedMethodAccessor1074.invoke(Unknown Source)</span><br><span class="line"> at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line"> at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line"> at org.jenkinsci.plugins.gitclient.RemoteGitImpl$CommandInvocationHandler.invoke(RemoteGitImpl.java:132)</span><br><span class="line"> at com.sun.proxy.$Proxy124.execute(Unknown Source)</span><br><span class="line"> at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1152)</span><br><span class="line"> at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1192)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.scm.SCMStep.checkout(SCMStep.java:124)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:93)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:80)</span><br><span class="line"> at org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution.lambda$start$0(SynchronousNonBlockingStepExecution.java:47)</span><br><span class="line"> at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line"> at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line"> at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> [Pipeline] &#x2F;&#x2F; ws</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> [Pipeline] &#x2F;&#x2F; node</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> [Pipeline] &#x2F;&#x2F; stage</span><br><span class="line"> [Pipeline] &#125;</span><br><span class="line"> Failed in branch Windows build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过 Jenkins 进行资源的锁定和释放</title>
      <link href="/2019/08/jenkins-lock-resource/"/>
      <url>/2019/08/jenkins-lock-resource/</url>
      
        <content type="html"><![CDATA[<h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>日常工作中需要切换到不同平台（包括 Linux, AIX, Windows, Solris, HP-UX）不同的版本进行开发和验证问题，但是由于虚拟机有限，并不能保证每个开发和测试都有所以平台的虚拟机并且安装了不同的版本，因此准备各种各样的开发和测试环境会花费很长时间。</p><a id="more"></a><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>对于这样的需求，一般都会首先想到 Docker；其次是从 Artifactory 取 Build 然后通过 CI 工具进行安装；最后从 Source Code 进行构建然后安装。</p><ul><li><p>先说 Docker，由于我们所支持的平台繁多，包括 Linux, AIX, Windows, Solris, HP-UX, Docker 只适用于 Linux 和 Windows，因此不能满足这样的需求。</p></li><li><p>由于其他原因我们的 Artifactory 暂时还不能使用，最后只能选择用 Source Code 进行构建然后进行安装。这两种方式都需要解决锁定资源以及释放资源的问题。如果当前环境有人正在使用，那么这台虚拟机的资源应该被锁住，不允许 Jenkins 再去调用这台正在使用的 node，以保证环境在使用过程中不被破坏。</p></li></ul><p>本文主要介绍如何通过 Jenkins Lockable Resources Plugin 来实现资源的上锁和解锁。</p><h2 id="演示-Demo"><a href="#演示-Demo" class="headerlink" title="演示 Demo"></a>演示 Demo</h2><ol><li><p>设置 Lockable Resources</p><ul><li>Jenkins -&gt; configuration -&gt; Lockable Resources Manager -&gt; Add Lockable Resource<br><img src="/2019/08/jenkins-lock-resource/config-lock-resource.png" alt="我设置了两个 Resources "><br>这里的 Labels 是你的 node 的 Label，在 Jenkins -&gt; Nodes 设置</li></ul></li><li><p>查看 Lockable Resources 资源池</p><p> <img src="/2019/08/jenkins-lock-resource/lock-resource-pool.png" alt="显示我有两个资源可用 "></p></li><li><p>测试锁资源</p><ul><li>这里我配置的是参数化类型的 Job，可以选择不同平台，不同仓库进行构建<br><img src="/2019/08/jenkins-lock-resource/build-with-parameters.png" alt=" Build With Parameters "> build-with-parameters</li><li>运行第一个 Job<br><img src="/2019/08/jenkins-lock-resource/build-with-parameters-1.png" alt=" 第一个 Job 已经运行 "></li><li>查看当前可用资源数量 Free resources = 1，看到已经被 #47 这个 Job 所使用<br><img src="/2019/08/jenkins-lock-resource/lock-resource-pool-1.png" alt="当前可用资源数为1"></li><li>继续运行第二个 Job<br><img src="/2019/08/jenkins-lock-resource/build-with-parameters-2.png" alt=" 第二个 Job 已经运行 "></li><li>查看当前可用资源数量 Free resources = 0，看到已经被 #48 这个 Job 所使用<br><img src="/2019/08/jenkins-lock-resource/lock-resource-pool-2.png" alt="当前可用资源数为0"></li><li>最关键是这一步，如果继续运行第三个 Job，是否能够被继续行呢<br><img src="/2019/08/jenkins-lock-resource/build-with-parameters-3.png" alt=" 第三个 Job 已经运行 "></li><li>可以看到这个任务没有开始执行，看下 log 是否真的没有被执行。通过日志发现，当前正在等待可用的资源<br><img src="/2019/08/jenkins-lock-resource/build-with-parameters-3-log.png" alt=" 第三个 Job log "></li></ul></li><li><p>测试释放锁</p><ul><li>现在释放一个资源，看下第三个 Job 是否能拿到资源，并且执行<br><img src="/2019/08/jenkins-lock-resource/unlock-job-1.png" alt=" 释放 Job 1 锁 "></li><li>从下图可以看到 第三个 Job 已经运行成功了<br><img src="/2019/08/jenkins-lock-resource/unlock-job-1-after.png" alt=" 第三个 Job 运行 "></li></ul></li></ol><h2 id="Jenkins-pipeline-代码"><a href="#Jenkins-pipeline-代码" class="headerlink" title="Jenkins pipeline 代码"></a>Jenkins pipeline 代码</h2><p>整个 pipeline 最关键的部分就是如何上锁和释放，这里是通过 lock 和 input message 来实现。</p><p>当前 Job 只要用户不点击 Yes，就会一直处于没有完成的状态，那么的它的锁会一直生效中。直到点击 Yes， Job 结束，锁也就释放了。</p><p>具体可以参考下面的 Jenkinsfile。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">'PreDevENV'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    options &#123;</span><br><span class="line">        lock(label: <span class="string">'PreDevENV'</span>, quantity: 1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">'platform'</span>,</span><br><span class="line">            choices: [<span class="string">'Linux'</span>, <span class="string">'AIX'</span>, <span class="string">'Windows'</span>, <span class="string">'Solris'</span>, <span class="string">'HP-UX'</span>],</span><br><span class="line">            description: <span class="string">'Required: which platform do you want to build'</span>)</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">'repository'</span>,</span><br><span class="line">            choices: [<span class="string">'repo-0.1'</span>, <span class="string">'repo-1.1'</span>, <span class="string">'repo-2.1'</span>, <span class="string">'repo-3.1'</span>, <span class="string">'repo-4.1'</span>],</span><br><span class="line">            description: <span class="string">'Required: which repository do you want to build'</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">'branch'</span>,</span><br><span class="line">            defaultValue: <span class="string">''</span>,</span><br><span class="line">            description: <span class="string">'Required: which branch do you want to build'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'git clone'</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"git clone source"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'start build'</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"start build"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'install build'</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"installing"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'unlock your resource'</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                input message: <span class="string">"do you have finished?"</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"Yes, I have finished"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在大型企业里维护多分支流水线</title>
      <link href="/2019/08/jenkins-multi-branch-pipeline/"/>
      <url>/2019/08/jenkins-multi-branch-pipeline/</url>
      
        <content type="html"><![CDATA[<p>Jenkins 是 DevOps 领域里非常好的 CI/CD 工具，它凭借其独特的功能，几乎可以满足你一切的的业务要求。其中一个独特的功能是多分支流水线(Multi-branch 流水线)，可以动态配置流水线。但是，随着公司的发展，单独的多分支流水线并不能完全满足你的所有需求，特别是在涉及大型企业时，你需要考虑流水线的集中管理，治理，稳定性，限制和安全性等其他事项。因此对于具有 Jenkins 流水线的大规模 CI/CD 环境，你需要添加之前没有想到的更多功能。</p><a id="more"></a><p><img src="/2019/08/jenkins-multi-branch-pipeline/cover.jpeg" alt="jenkins multi branch"></p><h2 id="动态配置流水线"><a href="#动态配置流水线" class="headerlink" title="动态配置流水线"></a>动态配置流水线</h2><p>当一个开发人员创建一个新分支并将其推送到远程代码仓库时，Jenkins 会为这个新分支动态创建流水线。根据代码仓库，甚至也可以作为动态创建 Pull Request 流水线。这个动态功能在使用 Feature 分支或其他类似功能的团队中非常有用，由于本文的主题不是多分支流水线，你可以在<a href="https://jenkins.io/doc/tutorials/build-a-multibranch-pipeline-project/" target="_blank" rel="noopener">端到端多分支流水线项目创建</a>中找到详细信息和一些示例。</p><h2 id="流水线即代码"><a href="#流水线即代码" class="headerlink" title="流水线即代码"></a>流水线即代码</h2><p>在多分支流水线中，脚本存储在项目代码仓库中，这就是“流水线即代码”的概念。此外，当你拥有小型开发人员团队或项目没有大量分支时，它非常有用。这样，开发人员可以根据需要更改流水线，将更改推送到分支，并立即看到更改生效，但对于拥有数百或数千名拥有大量项目的开发人员的大型企业而言，这种方案就完成不可行了。</p><h2 id="集中式库"><a href="#集中式库" class="headerlink" title="集中式库"></a>集中式库</h2><p>当你的团队或项目增加时，是时候考虑一种方法，比如通过共享的的方式应该在所有项目中。从长远来看，这种“集中式库”变得非常关键，因为随着规模的扩大，流水线中出现了新的要求或变化，在这种情况下，手动更改每个流水线或脚本对管理员来说将是一场噩梦。因此，如果你在一个地方进行更改并且每个流水线都得到更新，那么拥有该集中式库将更加实用。这是 Jenkins <a href="https://jenkins.io/doc/book/pipeline/shared-libraries/" target="_blank" rel="noopener">共享库</a>概念的用武之地。有关详细信息，你可以访问<a href="https://jenkins.io/doc/book/pipeline/shared-libraries/" target="_blank" rel="noopener">该站点</a>。</p><p>即使你只有一个流水线，仍然可以使用集中式库。</p><h2 id="治理与稳定"><a href="#治理与稳定" class="headerlink" title="治理与稳定"></a>治理与稳定</h2><p>如果你的团队有对 CI/CD 一定了解的开发人员，并且你确信他们不会做出重大更改或编写脚本错误导致影响环境的稳定性，那么将流水线脚本放在代码中是很好的。但是，你真的确定吗？</p><p>有人很可能会意外删除流水线文件或者可能出现小错误，这些小错误都会影响 CI/CD 的稳定性。如果你在早期发现这些错误时很容易解决这些错误，如果没有，这些微小的变化或错误将可能比你想象的更严重的影响 CI/CD，它将被传播到不同项目中的所有分支或 tag，这会变得很难解决。</p><p>你需要将正确的流水线脚本推送到所有分支和/或代码仓库，或是要求每个开发人员提取最新的脚本，这种类型的问题集中式库这种更高级的方式来解决，除此之外，你的环境会因为有人可能会删除 Jenkins 文件或输入一些拼写错误带来风险。</p><h2 id="远程文件插件"><a href="#远程文件插件" class="headerlink" title="远程文件插件"></a>远程文件插件</h2><p>为了消除不必要的更改的风险并降低使用的库的复杂性，我们需要以某种方式将流水线脚本与项目/代码代码仓库分开，同时仍继续使用多分支流水线功能。为此，我们有<a href="https://plugins.jenkins.io/remote-file" target="_blank" rel="noopener">远程文件插件</a>。</p><p>这个插件使多分支流水线能够从其他代码仓库运行/加载流水线脚本，而不是将它们放在项目/代码代码仓库中，通过这个功能，你可以拥有一个单独的代码仓库，你可以在其中放置所有流水线脚本，并且只能为你自己提供访问权限。这样，你将拥有与集中式库相同的集中式流水线脚本代码仓库。此外，你可以将流水线脚本存储在集中式库本身中。</p><p>这个功能的好处是除了有访问权限的人之外，没有人能够在流水线脚本中进行更改。你在集中流水线脚本中所做的任何更改都将影响使用该脚本文件的所有多分支流水线。这样，你无需等待所有开发人员获取更新版本或将脚本推送到所有代码仓库上的所有分支。</p><p>另一个好处是，如果你将集中式流水线脚本放入 BitBucket 或 GitHub 等代码仓库中，你还将拥有代码审查功能。这样，你可以与其他人共享代码仓库，同时仍可限制或查看其他人所做的更改。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在大型企业中创建 CI/CD 流水线并不容易，你需要考虑治理，限制，稳定性和安全性等概念。在此上下文中，借助 Jenkins 的其他功能，<a href="https://plugins.jenkins.io/remote-file" target="_blank" rel="noopener">Remote File Plugin</a> 提供了一个独特的功能，用于集中，维护和共享流水线脚本。</p><p>有关插件的详细信息，你可以访问插件的 Wiki 页面。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git branching strategy</title>
      <link href="/2019/07/git-branching-strategy/"/>
      <url>/2019/07/git-branching-strategy/</url>
      
        <content type="html"><![CDATA[<p>随着近些年 Git 的快速普及，想必无论开发还是测试在日常工作中都要用到 Git。</p><p>对于刚刚接触的 Git 的人来说，打开一个 Git 仓库，面对十几个甚至几十个分支时，有的人不理解，有的人云里雾里，为什么会创建这么多分支？</p><p>对于开发需要知道如何通过 Git 分支来管理产品的开发和发布，尤其是对于大型的项目的开发，只有 master 和 develop 分支是无法满足产品管理和发布要求的，我们还需要其他分支以便更好的管理产品代码。</p><p>对于测试更多的了解开发过程及分支管理有助于测试及开展自动化测试用例，可以针对不同的分支进行测试用例的编写，在以后回归测试里可以通过分支或是 tag 找到对应的测试用例。</p><a id="more"></a><h2 id="Git-分支策略"><a href="#Git-分支策略" class="headerlink" title="Git 分支策略"></a>Git 分支策略</h2><p>这是一个大型的项目的 Git 分支管理策略，了解这张图可以涵盖 99% 的产品需求。</p><p><img src="/2019/07/git-branching-strategy/diagram.png" alt="大型项目的 Git 分支策略图"></p><p>上面这张图大体上分为 master, hotfix, release, develop 分支：</p><ul><li><p>master - 只用于存放稳定版本的提交，且只限于 merge 操作。每次发布成功后，要将 release 分支的代码 merge 到 master 和 develop 分支，并且在 master 上打上相应的 tag，如图里的 v1.1, v1.1.01 等。</p></li><li><p>develop - 开发分支是所有开发者最常用的分支，当前的 Bug 和 Features 都需要修复到这个分支上面去。需要每次创建 bugfix 或 feature 类型的分支，创建 Pull Request 进行代码 review，然后才能 merge 分支到 develop 分支上。</p></li><li><p>release - 发布分支是在产品 code freeze 后创建的， 这时候测试要开始大规模的测试了，新创建的 release 分支是不允许开发再往里面添加有关 feature 的代码，只有测试发现 bug 并被开发修复的代码才允许通过 Pull Request 的方式 merge 到 release 分支里。如果开发要提交 feature 的代码只能提交到 develop 分支里。等到产品成功发布后会将 release 分支 merge 到 master 分支并打上相应的 tag （版本号），还要将 release 分支 merge 到 develop 分支。</p></li><li><p>develop - 开发分支是所有开发者最常用的分支，当前的 Bug 和 Features 都需要修复到这个分支上面去。</p></li></ul><p>这个图有几个关键点：</p><ul><li>hotfix 分支是从最新的 hotfix 分支上创建的</li><li>hotfix 分支发布后将会合并到 develop 分支</li><li>release 分支是从 develop 分支上创建的</li><li>release 分支发布后将会合并到 develop 和 master 分支</li><li>release 分支上发现的缺陷将会修复到 release 分支</li></ul><p>如果你是那 1% 不能满足的产品需求，欢迎留言。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Branch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Jenkins 来提交修改的代码 git push by Jenkins</title>
      <link href="/2019/07/git-push-by-Jenkins/"/>
      <url>/2019/07/git-push-by-Jenkins/</url>
      
        <content type="html"><![CDATA[<p>在持续集成中，你可能需要通过 Jenkins 来修改代码，并且将修改后的代码提交到Git仓库里。怎么做呢？最方便的做法还是 Jenkins 提供对应的插件，但是很遗憾我没找到合适的。另外我也觉得通过脚本的方式来实现会更加稳定，不用担心 Jenkins 以及插件升级带来潜在不好用的可能。</p><a id="more"></a><p>以下 pipeline 片段供参考使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// This pipeline is used <span class="keyword">for</span> bumping build number</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        MYGIT = credentials(<span class="string">"d1cbab74-823d-41aa-abb7"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Git clone repo'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">'git clone -b develop --depth 1 https://$MYGIT_USR:"$MYGIT_PSW"@github.com/shenxianpeng/blog.git'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Change code stage'</span>)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Git push to remote repo'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">''</span>, script: <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">                cd blog</span></span><br><span class="line"><span class="string">                git add .</span></span><br><span class="line"><span class="string">                git commit -m "Bld # 1001"</span></span><br><span class="line"><span class="string">                git push https://$MYGIT_USR:"$MYGIT_PSW"@github.com/shenxianpeng/blog.git --all'</span><span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面我所遇到最大的坑，我之前脚本是这样写的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'Git push to remote'</span>) &#123;</span><br><span class="line"></span><br><span class="line">    // not works script</span><br><span class="line"></span><br><span class="line">    steps &#123;</span><br><span class="line">        sh <span class="string">'cd blog'</span></span><br><span class="line">        sh <span class="string">'git add .'</span></span><br><span class="line">        sh <span class="string">'git commit -m "$&#123;JIRA_NO&#125; Bld # $&#123;BUILD_NO&#125;"'</span></span><br><span class="line">        sh <span class="string">'git push https://$MYGIT_USR:"$MYGIT_PSW"@github.com/shenxianpeng/blog.git --all'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在最后一个阶段提交代码时，shell 脚本不能使用单引号 ‘’，要使用三引号才行’’’ ‘’’。我在这里花了很多时间，一直找不到问题所在，因为我在上面的shell脚本使用的时候用单引号 ‘’ 可以正常 git clone 代码，但在提交代码时不行，最后我 Jenkins 的 Pipeline Syntax 生成的脚本，提交代码成功。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Execute sudo without password</title>
      <link href="/2019/07/execute-sudo-without-password/"/>
      <url>/2019/07/execute-sudo-without-password/</url>
      
        <content type="html"><![CDATA[<p>在使用 Jenkins pipeline 的时候，在 Linux 需要用 root 来执行，我想通过 Jenkins pipeline 的语法来解决，但是只找到这种方式：<a href="https://jenkins.io/doc/pipeline/steps/ssh-steps/" target="_blank" rel="noopener">SSH Pipeline Steps</a></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def remote = [:]</span><br><span class="line">remote.name = <span class="string">'test'</span></span><br><span class="line">remote.host = <span class="string">'test.domain.com'</span></span><br><span class="line">remote.user = <span class="string">'root'</span></span><br><span class="line">remote.password = <span class="string">'password'</span></span><br><span class="line">remote.allowAnyHosts = <span class="literal">true</span></span><br><span class="line">stage(<span class="string">'Remote SSH'</span>) &#123;</span><br><span class="line">    sshCommand remote: remote, <span class="built_in">command</span>: <span class="string">"ls -lrt"</span></span><br><span class="line">    sshCommand remote: remote, <span class="built_in">command</span>: <span class="string">"for i in &#123;1..5&#125;; do echo -n \"Loop \$i \"; date ; sleep 1; done"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* <span class="built_in">command</span></span><br><span class="line">    * Type: String</span><br><span class="line">* dryRun (optional)</span><br><span class="line">    * Type: boolean</span><br><span class="line">* failOnError (optional)</span><br><span class="line">    * Type: boolean</span><br><span class="line">* remote (optional)</span><br><span class="line">    * Nested Choice of Objects</span><br><span class="line">* sudo (optional)</span><br><span class="line">    * Type: boolean</span><br></pre></td></tr></table></figure><p>从 example 来看需要提供的参数比较多，很多参数我已经在 Pipeline 的 environment 已经设置过了，这里再设置就显得不够优美，且限于没有足够的 example，你知道的 Jenkinsfile 调试非常痛苦和麻烦，我就没通过这种方式来尝试解决。</p><p>通过 Linux 设置来解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// open a shell console and <span class="built_in">type</span></span><br><span class="line">$ sudo visudo</span><br><span class="line"></span><br><span class="line">// <span class="built_in">type</span> your user name</span><br><span class="line">jenkins ALL=(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>但即使这样设置，通过 Jenkins 执行 shell 脚本的时候还是出现如下问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure><p>最后通过如下脚本解决了我的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Jenkinsfile</span><br><span class="line"></span><br><span class="line">environment &#123;</span><br><span class="line">    JENKINS = credentials("d1cbab74-823d-41aa-abb7-85848595")</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sh 'sudo -S &lt;&lt;&lt; "$JENKINS_PSW" sh test.sh'</span><br></pre></td></tr></table></figure><p>如果你有更好的方式，欢迎留言评论，谢谢。</p>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加Disqus留言功能</title>
      <link href="/2019/07/add-disqus-to-hexo/"/>
      <url>/2019/07/add-disqus-to-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="在你的-Hexo-网站添加-Disqus"><a href="#在你的-Hexo-网站添加-Disqus" class="headerlink" title="在你的 Hexo 网站添加 Disqus"></a>在你的 Hexo 网站添加 Disqus</h2><p>去 Disqus 创建一个账号，在这个过程中有需要选择一个 shortname，完成后，你可以在设置页码找到你的 shortname</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;YOURSHORTNAMEHERE.disqus.com&#x2F;admin&#x2F;settings&#x2F;general</span><br></pre></td></tr></table></figure><p>在你Hexo博客里打开 _config.yml, 然后输入 disqus_shortnameand: YOURSHORTNAMEHERE，像这样：</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">disqus_shortname: myshortnamegoeshere</span><br><span class="line">comments: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>也需要更改_config.yml文件如下，例如我的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改默认 url: http://yoursite.com 为：</span></span><br><span class="line">url: https://shenxianpeng.github.io</span><br></pre></td></tr></table></figure><p>复制这段代码到blog\themes\landscape\layout_partial\footer.ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (config.disqus_shortname)&#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> disqus_shortname = <span class="string">'&lt;%= config.disqus_shortname %&gt;'</span>;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (page.permalink)&#123; %&gt;</span><br><span class="line">  <span class="keyword">var</span> disqus_url = <span class="string">'&lt;%= page.permalink %&gt;'</span>;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    dsq.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    dsq.async = <span class="literal">true</span>;</span><br><span class="line">    dsq.src = <span class="string">'//go.disqus.com/&lt;% if (page.comments)&#123; %&gt;embed.js&lt;% &#125; else &#123; %&gt;count.js&lt;% &#125; %&gt;'</span>;</span><br><span class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</span><br><span class="line">  &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>也需要复制这些文件到 footer.ejs 到最底部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"disqus_thread"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>最后最footer.ejs文件是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.sidebar === <span class="string">'bottom'</span>)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(<span class="string">'_partial/sidebar'</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% <span class="keyword">if</span> (config.disqus_shortname)&#123; %&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> disqus_shortname = <span class="string">'&lt;%= config.disqus_shortname %&gt;'</span>;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (page.permalink)&#123; %&gt;</span><br><span class="line">    <span class="keyword">var</span> disqus_url = <span class="string">'&lt;%= page.permalink %&gt;'</span>;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> dsq = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      dsq.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">      dsq.async = <span class="literal">true</span>;</span><br><span class="line">      dsq.src = <span class="string">'//go.disqus.com/&lt;% if (page.comments)&#123; %&gt;embed.js&lt;% &#125; else &#123; %&gt;count.js&lt;% &#125; %&gt;'</span>;</span><br><span class="line">      (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(dsq);</span><br><span class="line">    &#125;)();</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;footer id="footer"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="outer"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div id="footer-info" class="inner"&gt;</span></span><br><span class="line"><span class="regexp">      &amp;copy; &lt;%= date(new Date(), 'YYYY') %&gt; &lt;%= config.author || config.title %&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">      &lt;%= __('powered_by') %&gt; &lt;a href="http:/</span><span class="regexp">/hexo.io/</span><span class="string">" target="</span>_blank<span class="string">"&gt;Hexo&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/footer&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;div id="</span>disqus_thread<span class="string">"&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>最后清理和构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p>现在你可以看到我的博客已经可以添加评论了 : )</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinsfile example - 实现交互、clone 多个仓库以及 git push</title>
      <link href="/2019/07/Jenkinsfile-example/"/>
      <url>/2019/07/Jenkinsfile-example/</url>
      
        <content type="html"><![CDATA[<p>这个pipeline里包含了如下几个技术：</p><ul><li>如何使用其他机器，agent</li><li>如何使用环境变量，environment</li><li>如何在build前通过参数化输入，parameters</li><li>如何使用交互，input</li><li>如何同时clone多个repos</li><li>如何进行条件判断，anyOf</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">'windows-agent'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    environment &#123;</span><br><span class="line">        MY_CRE = credentials(<span class="string">"2aee7e0c-a728-4d9c-b25b-ad5451a12d"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parameters &#123;</span><br><span class="line">        // Jenkins parameter</span><br><span class="line">        choice(</span><br><span class="line">            name: <span class="string">'REPO'</span>,</span><br><span class="line">            choices: [<span class="string">'repo1'</span>, <span class="string">'repo2'</span>, <span class="string">'repo3'</span>, <span class="string">'repo4'</span>],</span><br><span class="line">            description: <span class="string">'Required: pick a repo you want to build'</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">'BRANCH'</span>,</span><br><span class="line">            defaultValue: <span class="string">''</span>,</span><br><span class="line">            description: <span class="string">'Required: chose a branch you want to checkout'</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">'BUILD_NO'</span>,</span><br><span class="line">            defaultValue: <span class="string">''</span>,</span><br><span class="line">            description: <span class="string">'Required: input build number'</span>)</span><br><span class="line">        string(</span><br><span class="line">            name: <span class="string">'JIRA_NO'</span>,</span><br><span class="line">            defaultValue: <span class="string">''</span>,</span><br><span class="line">            description: <span class="string">'Optional: input jira ticket number for commit message'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">"Are you sure?"</span>)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                // make sure you want to start this build</span><br><span class="line">                input message: <span class="string">"<span class="variable">$&#123;REPO&#125;</span>/<span class="variable">$&#123;BRANCH&#125;</span>:<span class="variable">$&#123;BUILD_NO&#125;</span>, are you sure?"</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"I'm sure!"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Git clone repos'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // git <span class="built_in">clone</span> one repo <span class="built_in">source</span> code</span><br><span class="line">                checkout([</span><br><span class="line">                    <span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'refs/heads/$&#123;BRANCH&#125;'</span>]], browser: [<span class="variable">$class</span>: <span class="string">'GitHub'</span>, repoUrl: <span class="string">'https://github.com/$&#123;REPO&#125;'</span>], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">'CleanBeforeCheckout'</span>], [<span class="variable">$class</span>: <span class="string">'LocalBranch'</span>, localBranch: <span class="string">'**'</span>], [<span class="variable">$class</span>: <span class="string">'RelativeTargetDirectory'</span>, relativeTargetDir: <span class="string">'../$&#123;REPO&#125;'</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">'2aee7e0c-a728-4d9c-b25b'</span>, url: <span class="string">'https://github.com/$&#123;REPO&#125;.git'</span>]]])</span><br><span class="line"></span><br><span class="line">                // git <span class="built_in">clone</span> another repo <span class="built_in">source</span> code</span><br><span class="line">                checkout([</span><br><span class="line">                    <span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'refs/heads/$&#123;BRANCH&#125;'</span>]], browser: [<span class="variable">$class</span>: <span class="string">'GitHub'</span>, repoUrl: <span class="string">'https://github.com/$&#123;REPO&#125;'</span>], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">'CleanBeforeCheckout'</span>], [<span class="variable">$class</span>: <span class="string">'LocalBranch'</span>, localBranch: <span class="string">'**'</span>], [<span class="variable">$class</span>: <span class="string">'RelativeTargetDirectory'</span>, relativeTargetDir: <span class="string">'../$&#123;REPO&#125;'</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">'2aee7e0c-a728-4d9c-b25b'</span>, url: <span class="string">'https://github.com/$&#123;REPO&#125;.git'</span>]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Build repo1 and repo2'</span>) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                // <span class="keyword">if</span> REPO=repo1 or REPO=repo2, execute build_repo12.sh</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: <span class="string">'REPO'</span>, value: <span class="string">'repo1'</span></span><br><span class="line">                    environment name: <span class="string">'REPO'</span>, value: <span class="string">'repo2'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">''</span>, script: <span class="string">'$&#123;REPO&#125;/build_repo12.sh $&#123;REPO&#125; $&#123;BUILD_NO&#125; $&#123;JIRA_NO&#125;'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">'Build repo3 and repo4'</span>) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                // <span class="keyword">if</span> REPO=repo3 or REPO=repo4, execute build_repo34.sh</span><br><span class="line">                anyOf &#123;</span><br><span class="line">                    environment name: <span class="string">'REPO'</span>, value: <span class="string">'repo3'</span></span><br><span class="line">                    environment name: <span class="string">'REPO'</span>, value: <span class="string">'repo4'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh label: <span class="string">''</span>, script: <span class="string">'$&#123;REPO&#125;/build_repo34.sh $&#123;REPO&#125; $&#123;BUILD_NO&#125; $&#123;JIRA_NO&#125;'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Git push to remote repo'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                // commit code to remote repo</span><br><span class="line">                sshagent([<span class="string">'2aee7e0c-a728-4d9c-b25b'</span>]) &#123;</span><br><span class="line">                    sh <span class="string">"git push https://%MY_CRE_USR%:%MY_CRE_PSW%@github.com/<span class="variable">$&#123;REPO&#125;</span>.git"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 管理</title>
      <link href="/2019/07/git-management/"/>
      <url>/2019/07/git-management/</url>
      
        <content type="html"><![CDATA[<h2 id="查找是否有遗漏提交"><a href="#查找是否有遗漏提交" class="headerlink" title="查找是否有遗漏提交"></a>查找是否有遗漏提交</h2><p>从一个分支找到所有的 commit 和 ticket 号，然后去另外一个分支去查找这些提交是否也在这个分支里。</p><a id="more"></a><p>找一个分支的所有 commit 和 ticket 号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 develop 分支上获取所有的 commit 和 ticket 号，然后根据 ticket 号进行排序</span></span><br><span class="line">git <span class="built_in">log</span> origin/develop --pretty=oneline --abbrev-commit | cut -d<span class="string">' '</span> -f2,1 | sort -t <span class="string">' '</span> -k 2 &gt;&gt; develop_involve_tickets.txt</span><br><span class="line"></span><br><span class="line">--pretty=oneline    <span class="comment"># 显示为一行</span></span><br><span class="line">--abbrev-commit     <span class="comment"># 显示短的提交号</span></span><br><span class="line"></span><br><span class="line">cut --<span class="built_in">help</span>          <span class="comment"># 切出来所需要的字段</span></span><br><span class="line">-d                  <span class="comment"># 字段分隔符, ' '分隔空格</span></span><br><span class="line">-f                  <span class="comment"># 只选择某些字段</span></span><br><span class="line"></span><br><span class="line">sort --<span class="built_in">help</span>         <span class="comment"># 利用 sort 将剪出来的字段进行排序</span></span><br><span class="line">-t                  <span class="comment"># 字段分隔， ' '分隔空格</span></span><br><span class="line">-k                  <span class="comment"># 通过键进行键定义排序;KEYDEF 给出位置和类型</span></span><br></pre></td></tr></table></figure><p>然后去另外一个分支去找是否有次提交</p><p>由于在 SVN 时代时，每次修改都会在描述里添加 ticket 号，所以切换到 master 分支后，直接搜索所有 ticket 号是否存在就好了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">filename=<span class="string">'C:\develop_involve_tickets.txt'</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line">    var=`grep -ir <span class="variable">$line</span> src`</span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="variable">$var</span> ]];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"not found"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> &gt;&gt; ../not_found_in_master.txt</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"found"</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$line</span> &gt;&gt; ../found_in_master.txt</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> &lt; <span class="string">"<span class="variable">$filename</span>"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multibranch Pipeline</title>
      <link href="/2019/06/multi-branch-pipeline/"/>
      <url>/2019/06/multi-branch-pipeline/</url>
      
        <content type="html"><![CDATA[<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>Like database product, it runs on multi-platform, but for software enginner they may only works on one platform, how they could identify their code works on all platform? manually build the various platforms? NO!</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Most people would know we can use Jenkins pipeline, they may create multi Jenkins job for different stuation.</p><p>How to do it in an elegant way, I would want to share how to use multibranch pipeline to achieve.</p><ol><li>When create a pull request, auto parallel start simple build.</li><li>Reviewers can decide whether to merge base on build results.</li><li>After code merged, auto start full build.</li></ol><a id="more"></a><h2 id="Benefits"><a href="#Benefits" class="headerlink" title="Benefits"></a>Benefits</h2><p>What are the benefits:</p><ol><li>One Jenkins job and one pipeline can manage multi branches.</li><li>Do not need to compile platforms to verify, save huge time and machines.</li><li>Stop looking for other people’s mistakes, no one can break the build.</li><li>Builds can be generated quickly for QA testing</li></ol><h2 id="Jenkinsfile-example"><a href="#Jenkinsfile-example" class="headerlink" title="Jenkinsfile example"></a>Jenkinsfile example</h2><p>In case of reduce simple build time and let PR creater and reviewer know the builds status as soon as possbile, you may need to do something different here, like below, used when condition and branch variable to check it is a develop branch or pull request branch.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when &#123;</span><br><span class="line">    branch <span class="string">'PR-*'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">when &#123;</span><br><span class="line">    branch <span class="string">'develop'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The entire code pipeline looks like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">// This Jenkinsfile is an explame <span class="keyword">for</span> multibranch pipeline</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent none</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">"All platform builds"</span>) &#123;</span><br><span class="line">            parallel &#123;</span><br><span class="line">                stage(<span class="string">"Windows build"</span>) &#123;</span><br><span class="line">                    agent &#123;</span><br><span class="line">                        node &#123;</span><br><span class="line">                            label <span class="string">'windows-vm01'</span></span><br><span class="line">                            customWorkspace <span class="string">'C:\\agent\\workspace\\blog'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stages &#123;</span><br><span class="line">                        stage(<span class="string">"PR build"</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">'PR-*'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                checkout scm</span><br><span class="line">                                dir(<span class="string">'src\\build'</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">''</span>, script: <span class="string">'build.bat PR'</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(<span class="string">"Release build"</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">'develop'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                cleanWs()</span><br><span class="line">                                checkout scm</span><br><span class="line">                                dir(<span class="string">'src\\build'</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">''</span>, script: <span class="string">'build.bat release'</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(<span class="string">"Deploy"</span>) &#123;</span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">"====if you have more stage, can add stage like this==="</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(<span class="string">"Linux build"</span>) &#123;</span><br><span class="line">                    agent &#123;</span><br><span class="line">                        node &#123;</span><br><span class="line">                            label <span class="string">'linux-vm01'</span></span><br><span class="line">                            customWorkspace <span class="string">'/agent/workspace/blog'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    stages &#123;</span><br><span class="line">                        stage(<span class="string">"PR build"</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">'PR-*'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                checkout scm</span><br><span class="line">                                dir(<span class="string">'src/build'</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">''</span>, script: <span class="string">'build.sh PR'</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        stage(<span class="string">"Release build"</span>) &#123;</span><br><span class="line">                            when &#123;</span><br><span class="line">                                branch <span class="string">'develop'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            steps &#123;</span><br><span class="line">                                cleanWs()</span><br><span class="line">                                checkout scm</span><br><span class="line">                                dir(<span class="string">'src/build'</span>) &#123;</span><br><span class="line">                                    bat label: <span class="string">''</span>, script: <span class="string">'build.sh release'</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                stage(<span class="string">"AIX build"</span>)&#123;</span><br><span class="line">                    steps&#123;</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">"====same as windows/Linux example, can write the code here you need ===="</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
            <tag> multi-branch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Coverage - Squishcoco</title>
      <link href="/2019/05/squishcoco/"/>
      <url>/2019/05/squishcoco/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><ol><li>On windows platform</li><li>Installed Visual Studio 2010 or higher, I used VS2017 Professional</li><li>Install Squish Coco and Add-in</li></ol><a id="more"></a><h2 id="Add-in"><a href="#Add-in" class="headerlink" title="Add-in"></a>Add-in</h2><ul><li>go to ..squishcoco\Setup, see quishCocoVSIX2017.vsix, double click, reopen VS2017, squishcoco will be there</li></ul><h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><p>Start Visual Studio and create a new C++ application</p><ol><li>Click on “File→New→Project…” to pop up the new project wizard.</li><li>Choose a project type of “Visual C++2” and the “Win32 Console Application” template.</li><li>Enter a project name of squishcoco_sample, then click the “OK” button.</li><li>When the wizard’s second page appears, click the “Finish” button.</li></ol><p>At this stage the application is not yet instrumented, so now we will create a copy of the build.<br><img src="/2019/05/squishcoco/configuration-manager.png" alt="configuration-manager"></p><ol><li>Open the configuration manager by clicking “Build→Configuration Manager…”.</li><li>In the “Configuration” column, select “New…” in the combobox.</li><li>In the “New Project Configuration” dialog:<ol><li>Enter Code Coverage in the “Name” field,</li><li>Select Release or Debug in the “Copy settings from” selection dialog.</li><li>Click the “OK” button.</li></ol></li></ol><p>Add test code</p><p>squishcoco_sample.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// squishcoco_sample.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">myprint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter your age: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;age);</span><br><span class="line">    <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt;=<span class="number">40</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You're young guys\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;<span class="number">40</span> &amp;&amp; age &lt;=<span class="number">70</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You're midle guys\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (age &gt; <span class="number">70</span> &amp;&amp; age &lt;=<span class="number">100</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You're old guys\n"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You're awesome\n"</span>);</span><br><span class="line"></span><br><span class="line">    myprint();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>myprint.cpp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myprint</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"you have call printf function\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Activate-instrumentation"><a href="#Activate-instrumentation" class="headerlink" title="Activate instrumentation"></a>Activate instrumentation</h2><p>use the Microsoft® Visual Studio® Add-In:<br><img src="/2019/05/squishcoco/squishcoco-add-in.png" alt="squishcoco-add-in"></p><ol><li>Click “Tools→Code Coverage Build Mode…” to pop up the Squish Coco wizard.</li><li>In the “Project:” selection dialog, select squishcoco_sample.</li><li>In the selection dialog “Configuration:”, select Code Coverage.</li><li>In the Configuration section at the bottom, select the radio button “Modify”, and then click on the button, “Enable code coverage for C++ projects”.</li></ol><p>The Code Coverage configuration has now been modified to generate code coverage information. The “SquishCoco” output window summarizes all the modifications that have been made:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Modifying configuration &#39;Code Coverage&#39; for the project &#39;squishcoco_sample&#39; for the platform &#39;Code Coverage|Win32&#39;</span><br><span class="line">    Compiler Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended</span><br><span class="line">    Linker Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended</span><br><span class="line">    Librarian Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended</span><br><span class="line">    File Specific Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended for the file &#39;squishcoco_sample.cpp&#39;</span><br><span class="line">Modifying configuration &#39;Code Coverage&#39; for the project &#39;squishcoco_sample&#39; for the platform &#39;Code Coverage|x64&#39;</span><br><span class="line">    Compiler Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended</span><br><span class="line">    Linker Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended</span><br><span class="line">    Librarian Configuration</span><br><span class="line">        Additional command line arguments &#39; --cs-exclude-file-abs-regex&#x3D;&quot;^.*\\squishcoco_sample\\[^\\]*$&quot; --cs-on --cs-condition --cs-line --cs-function --cs-hit --cs-full-instrumentation --cs-no-qt3 --cs-no-qt4 --cs-no-boost&#39; are appended</span><br><span class="line">    File Specific Configuration</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Build-project"><a href="#Build-project" class="headerlink" title="Build project"></a>Build project</h2><p>Build project will cause the executable squishcoco_sample.exe to be built and the code coverage instrumentation file squishcoco_sample.exe.csmes to be generated</p><p>Double click on squishcoco_sample.exe.csmes to inspect this file in CoverageBrowser</p><p>Right now there is no code coverage statistics visible in CoverageBrowser, this is because the application has not yet been executed. Click on squishcoco_sample.cpp in the source list to display the main function. All the instrumented lines are shown grayed out, to indicate that nothing has been executed.</p><p>Now execute squishcoco_sample.exe by double clicking it. This will result in a file called squishcoco_sample.exe.csexe being generated. The file contains a code coverage snapshot which can be imported into Coverage Browser</p><ol><li>Click “File-&gt;Load Execution Report…”.</li><li>Select the “File” item and enter the path of the squishcoco_sample.exe.csexe file.</li><li>Click on the “Import” button.<br>This will cause the code coverage statistics to be updated. Now, in the source code window, the main function’s return statement will be colored green to indicate that this line has been executed.</li></ol><h2 id="Final-result"><a href="#Final-result" class="headerlink" title="Final result"></a>Final result</h2><p><img src="/2019/05/squishcoco/squishcoco-result.png" alt="squishcoco-result"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeCoverage </tag>
            
            <tag> Squishcoco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Coverage tools of C/C++</title>
      <link href="/2019/05/code-coverage-tools/"/>
      <url>/2019/05/code-coverage-tools/</url>
      
        <content type="html"><![CDATA[<p>Code Coverage is a measurement of how many lines, statements, or blocks of your code are tested using your suite of automated tests. It’s an essential metric to understand the quality of your QA efforts.</p><p>Code coverage shows you how much of your application is not covered by automated tests and is therefore vulnerable to defects. it is typically measured in percentage values – the closer to 100%, the better.</p><p>When you’re trying to demonstrate test coverage to your higher-ups, code coverage tools (and other tools of the trade, of course) come in quite useful.</p><p>List of Code Coverage Tools</p><p>| Tools  | Support Language  | Cost | Partners  |<br>|—|—|—|—|—|<br>| <a href="https://www.froglogic.com/coco/" target="_blank" rel="noopener">Squish Coco</a>  | C, C++, C#, SystemC, Tcl and QML | Not disclosed |<a href="https://www.froglogic.com/coco/" target="_blank" rel="noopener">Botom of this page Selected Clients</a>|<br>| <a href="http://www.bullseye.com/productInfo.html" target="_blank" rel="noopener">BullseyeCoverage</a> | C, C++ |$800 for 1-year license and up |   |<br>| <a href="https://www.verifysoft.com/en_code_coverage.html" target="_blank" rel="noopener">Testwell</a>| C, C++, C#, Java| Not disclosed| |<br>| <a href="https://www.parasoft.com/products/ctest" target="_blank" rel="noopener">Parasoft C/C++test</a> |C, C++   | Not disclosed  | <a href="https://www.parasoft.com/company/partners" target="_blank" rel="noopener">partners</a> |<br>| <a href="https://www.vectorcast.com/software-testing-products/c-unit-testing" target="_blank" rel="noopener">VECTOR Code Coverage</a> | C, C++ | Not disclosed (free trial available)| <a href="https://www.vectorcast.com/partners" target="_blank" rel="noopener">partners</a> |<br>|<a href="https://www.eclemma.org/jacoco/" target="_blank" rel="noopener">JaCoCo</a>| Java | Open Source| Most famous code coverage tool in Java area |</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> CodeCoverage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitSCM clone code don&#39;t display branch</title>
      <link href="/2019/05/GitSCM-clone-code-don-t-display-branch/"/>
      <url>/2019/05/GitSCM-clone-code-don-t-display-branch/</url>
      
        <content type="html"><![CDATA[<p>最近遇到一个 regression bug，是产品完成构建之后，build commit number 不对，显示的 HEAD 而不是常见的 97b34931ac HASH number,这是什么原因呢？<br>我检查了 build 脚本没有发现问题，branch 的输出是正确的，那我怀疑是引入 Jenkins 的原因，果然登录到远程的 agent 上去查看分支名称如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\workspace\blog&gt;git branch</span><br><span class="line">* (HEAD detached at 97b3493)</span><br></pre></td></tr></table></figure><p>果然问题出在了 Jenkins 上。这个问题有简单办法解决，就是直接使用git命令来clone代码，而不使用Git插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 -b u2opensrc https://username:<span class="string">"passwowrd"</span>@git.github.com/scm/blog.git blog</span><br></pre></td></tr></table></figure><p>这种方式固然简单，不会出错，但它是明码显示，我岂能容忍这种不堪的处理方式吗？肯定还是要在 Git 插件上找到解决办法的。<br>随后google一下，果然有遇到和我一样问题的人，问题链接 <a href="https://stackoverflow.com/questions/44006070/jenkins-gitscm-finishes-the-clone-in-a-detached-head-state-how-can-i-make-sure" target="_blank" rel="noopener">这里</a>。</p><p>他说他做了很多调查，还跟专业的 Jenkins 人士联系，试了很多次，最后找到这个办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkout([<span class="variable">$class</span>: <span class="string">'GitSCM'</span>, branches: [[name: <span class="string">'*/feature/*'</span>]], doGenerateSubmoduleConfigurations: <span class="literal">false</span>, extensions: [[<span class="variable">$class</span>: <span class="string">'LocalBranch'</span>, localBranch: <span class="string">"**"</span>]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: <span class="string">'99f978af-XXXX-XXXX-8147-2cf8f69ef864'</span>, url: <span class="string">'http://TFS_SERVER:8080/tfs/DefaultCollection/Product/_git/Project'</span>]]])</span><br></pre></td></tr></table></figure><p>主要是在 extensions:[] 中加入这句 [$class: ‘LocalBranch’, localBranch: “**”]</p><p>这是 Jenkins 的 Bug 吗？带着这个疑问随后通过 Pipeline Syntax，找到 checkout: Check out from version control，在 Additional Behaviours 里有 Check out to specific local branch 这个配置项</p><p>If given, checkout the revision to build as HEAD on this branch.<br>If selected, and its value is an empty string or “**”, then the branch name is computed from the remote branch without the origin. In that case, a remote branch origin/master will be checked out to a local branch named master, and a remote branch origin/develop/new-feature will be checked out to a local branch named develop/newfeature.</p><p>看介绍原来 Jenkins 自带这个设置，只是它不是默认选项，所以才遇到刚才那个问题。随后选择这个设置，然后填入”**”，然后生成 Pipeline 脚本，就跟上面的脚本一样了。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过参数化上传文件到 FTP 服务器</title>
      <link href="/2019/05/upload-to-ftp-parameterization-by-bat/"/>
      <url>/2019/05/upload-to-ftp-parameterization-by-bat/</url>
      
        <content type="html"><![CDATA[<p>实现 CI/CD 过程中，常常需要将构建好的 build 上传到一个公共的服务器，供测试、开发来获取最新的 build。如何上传 build 成果物到 FTP server，又不想把 FTP server登录的用户名和密码存在脚本里，想做这样的参数化如何实现呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload_to_ftp.bat [hostname] [username] [password] [local_path] [remote_pat]</span><br></pre></td></tr></table></figure><a id="more"></a><p>windows batch 由于它的局限性，在实现上是比较麻烦的，但还是有办法。如何用 windows batch 来实现呢？借助一个临时文件，把需要的参数写入到临时文件里，然后通过 ftp -s 参数读取文件，最后把临时文件删除的方式来实现。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ftp_hostname=%1</span><br><span class="line"><span class="built_in">set</span> ftp_username=%2</span><br><span class="line"><span class="built_in">set</span> ftp_password=%3</span><br><span class="line"><span class="built_in">set</span> local_path=%4</span><br><span class="line"><span class="built_in">set</span> remote_path=%5</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> %ftp_hostname%! == ! ( <span class="built_in">echo</span> <span class="string">"ftp_hostname not set correctly"</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %ftp_username%! == ! ( <span class="built_in">echo</span> <span class="string">"ftp_username not set correctly"</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %ftp_password%! == ! ( <span class="built_in">echo</span> <span class="string">"ftp_password not set correctly"</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %local_path%! == ! ( <span class="built_in">echo</span> <span class="string">"local_path not set correctly"</span> &amp; goto USAGE )</span><br><span class="line"><span class="keyword">if</span> %remote_path%! == ! ( <span class="built_in">echo</span> <span class="string">"remote_path not set correctly"</span> &amp; goto USAGE )</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> open %ftp_hostname% &gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> user %ftp_username% %ftp_password% &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">cd</span> %remote_path% &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> lcd %local_path% &gt;&gt;ftp.txt  </span><br><span class="line"><span class="built_in">echo</span> prompt off &gt;&gt;ftp.txt</span><br><span class="line"><span class="built_in">echo</span> bin &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> mput * &gt;&gt; ftp.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">bye</span> &gt;&gt; ftp.txt</span><br><span class="line">ftp -n -s:ftp.txt</span><br><span class="line"></span><br><span class="line">del ftp.txt</span><br><span class="line">goto END</span><br><span class="line"></span><br><span class="line">:USAGE</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.   - -------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span>.   - upload_to_ftp.bat [hostname] [username] [password] [local_path] [remote_pat]  -</span><br><span class="line"><span class="built_in">echo</span>.   - Example:                                                                      -</span><br><span class="line"><span class="built_in">echo</span>.   - upload_to_ftp.bat 192.168.1.1 guest guest D:\Media\* C:\Builds\               -</span><br><span class="line"><span class="built_in">echo</span>.   - -------------------------------------------------------------------------------</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"></span><br><span class="line">:END</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Automation </tag>
            
            <tag> Batch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automatically commit code by Jenkins</title>
      <link href="/2019/05/auto-bump-build-version/"/>
      <url>/2019/05/auto-bump-build-version/</url>
      
        <content type="html"><![CDATA[<p>When we need to release a product, we should change copyright, build version, release month, release note…<br>How to modify multiple files automatically?<br>I used a Jenkins pipeline project, the project is parameterized(string parameter) and regular expressions to implement.</p><ol><li><p>Here is the string parameter for copyright:</p><ul><li>Name: copyright</li><li>Default Value: 1995—2019</li><li>Description: Copyright format:1995—2019  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'change copyrigh'</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh label: <span class="string">''</span>, script: <span class="string">'sed -i -E "s/(1995—[0-9]&#123;4&#125;)/$&#123;copyright&#125;/" 1033/AutoRun.ini'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Here is the string parameter for build version:</p><ul><li>Name: build_version</li><li>Default Value: 1.2.2.1002</li><li>Description: build version format: 1.2.2.1002  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'change build version'</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh label: <span class="string">''</span>, script: <span class="string">'sed -i -E "s/([0-9].[0-9].[0-9].[0-9]&#123;4&#125;)/$&#123;build_version&#125;/" 1033/AutoRun.ini'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Here is the string parameter for build version:</p><ul><li>Name: release_month</li><li>Default Value: May 2019</li><li>Description: release month format: May 2019  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'change release month'</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sh label: <span class="string">''</span>, script: <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        sed -i -E "s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/" 1033/AutoRun.ini</span></span><br><span class="line"><span class="string">        sed -i -E "s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/" 1033/MainMenu.ini</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>push change to Git</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stage(<span class="string">'git push to Git'</span>) &#123;</span><br><span class="line">    steps &#123;</span><br><span class="line">        sshagent([<span class="string">'8dd766ba-ac0f-4302-afa8-bee59c726dee'</span>]) &#123;</span><br><span class="line">            sh(<span class="string">"git add 1033/AutoRun.ini"</span>)</span><br><span class="line">            sh(<span class="string">"git add 1033/MainMenu.ini"</span>)</span><br><span class="line">            sh(<span class="string">"git commit -m 'Bld # <span class="variable">$&#123;build_version&#125;</span>'"</span>)</span><br><span class="line">            sh(<span class="string">"git push -u origin master"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Whole Jenkins Pipeline looks like:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        label <span class="string">'master'</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stages&#123;</span><br><span class="line">        stage(<span class="string">'git clone'</span>) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                git branch: <span class="string">'master'</span>,</span><br><span class="line">                credentialsId: <span class="string">'8dd766ba-ac0f-4302-afa8-bee59c726dee'</span>,</span><br><span class="line">                url: <span class="string">'git@github.com:shenxianpeng/blog.git'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">'change copyrigh'</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            sh label: <span class="string">''</span>, script: <span class="string">'sed -i -E "s/(1995—[0-9]&#123;4&#125;)/$&#123;copyright&#125;/" 1033/AutoRun.ini'</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">'change release month'</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            sh label: <span class="string">''</span>, script: <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">            sed -i -E "s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/" 1033/AutoRun.ini</span></span><br><span class="line"><span class="string">            sed -i -E "s/([a-z]* 20[0-9]&#123;2&#125;)/$&#123;release_month&#125;/" 1033/MainMenu.ini</span></span><br><span class="line"><span class="string">            '</span><span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">'change build version'</span>) &#123;</span><br><span class="line">        steps &#123;</span><br><span class="line">            sh label: <span class="string">''</span>, script: <span class="string">'sed -i -E "s/([0-9].[0-9].[0-9].[0-9]&#123;4&#125;)/$&#123;build_version&#125;/" 1033/AutoRun.ini'</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        stage(<span class="string">'git push to Git'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sshagent([<span class="string">'8dd766ba-ac0f-4302-afa8-bee59c726dee'</span>]) &#123;</span><br><span class="line">                    sh(<span class="string">"git add 1033/AutoRun.ini"</span>)</span><br><span class="line">                    sh(<span class="string">"git add 1033/MainMenu.ini"</span>)</span><br><span class="line">                    sh(<span class="string">"git commit -m 'Bld # <span class="variable">$&#123;build_version&#125;</span>'"</span>)</span><br><span class="line">                    sh(<span class="string">"git push -u origin master"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
            <tag> Release </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Linux agent configuration</title>
      <link href="/2019/05/jenkins-linux-agent/"/>
      <url>/2019/05/jenkins-linux-agent/</url>
      
        <content type="html"><![CDATA[<h2 id="Prepare-Java-runtime"><a href="#Prepare-Java-runtime" class="headerlink" title="Prepare Java runtime"></a>Prepare Java runtime</h2><h3 id="Check-if-had-installed-java"><a href="#Check-if-had-installed-java" class="headerlink" title="Check if had installed java"></a>Check if had installed java</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">"1.8.0_65"</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_65-b17)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)</span><br></pre></td></tr></table></figure><h4 id="if-not-Here-is-an-article-telling-you-how-to-install-it"><a href="#if-not-Here-is-an-article-telling-you-how-to-install-it" class="headerlink" title="if not Here is an article telling you how to install it"></a>if not Here is an <a href="https://www.javahelps.com/2015/03/install-oracle-jdk-in-ubuntu.html" target="_blank" rel="noopener">article</a> telling you how to install it</h4><h2 id="Create-Node"><a href="#Create-Node" class="headerlink" title="Create Node"></a>Create Node</h2><h3 id="1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine"><a href="#1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine" class="headerlink" title="1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine"></a>1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine</h3><h4 id="2-List-Linux-agent-settings"><a href="#2-List-Linux-agent-settings" class="headerlink" title="2. List Linux agent settings"></a>2. List Linux agent settings</h4><table><thead><tr><th>Items</th><th>Settings</th></tr></thead><tbody><tr><td>Name</td><td>Linux-build-machine</td></tr><tr><td>Description</td><td>used for Linux build</td></tr><tr><td>of executors</td><td>1</td></tr><tr><td>Remote root directory</td><td>/home/agent</td></tr><tr><td>Labels</td><td>Linux, build</td></tr><tr><td>Usage</td><td>Use this node as much as possible</td></tr><tr><td>Launch method</td><td>Launch agent agents via SSH</td></tr><tr><td>Host</td><td>192.168.1.112</td></tr><tr><td>Credentials</td><td>username/password</td></tr><tr><td>Host Key Verification Strategy</td><td>Manually trusted key Verification Strategy</td></tr><tr><td>Availability</td><td>Keep this agent online as much as paossible</td></tr></tbody></table><h4 id="3-How-to-set-credentials"><a href="#3-How-to-set-credentials" class="headerlink" title="3. How to set credentials"></a>3. How to set credentials</h4><table><thead><tr><th>credentials</th><th>configuration</th></tr></thead><tbody><tr><td>Domain</td><td>Global credentials (unrestricted)</td></tr><tr><td>Kind</td><td>Username with password</td></tr><tr><td>Scope</td><td>Global(Jenkins, nodes, items, all child items, etc)</td></tr><tr><td>Username</td><td>root</td></tr><tr><td>Password</td><td>mypassword</td></tr><tr><td>Description</td><td>Linux agent username &amp; password</td></tr></tbody></table><h4 id="4-Save-then-Connect"><a href="#4-Save-then-Connect" class="headerlink" title="4. Save then Connect"></a>4. Save then Connect</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Remoting version: 3.29</span><br><span class="line">This is a Unix agent</span><br><span class="line">Evacuated stdout</span><br><span class="line">Agent successfully connected and online</span><br><span class="line">SSHLauncher&#123;host=<span class="string">'192.168.1.112'</span>, port=22, credentialsId=<span class="string">'d1cbab74-823d-41aa-abb7-8584859503d0'</span>, jvmOptions=<span class="string">''</span>, javaPath=<span class="string">'/usr/bin/java'</span>,</span><br><span class="line">prefixStartSlaveCmd=<span class="string">''</span>, suffixStartSlaveCmd=<span class="string">''</span>, launchTimeoutSeconds=210, maxNumRetries=10, retryWaitTime=15,</span><br><span class="line">sshHostKeyVerificationStrategy=hudson.plugins.sshslaves.verifiers.ManuallyTrustedKeyVerificationStrategy, tcpNoDelay=<span class="literal">true</span>, trackCredentials=<span class="literal">true</span>&#125;</span><br><span class="line">[05/11/19 01:33:37] [SSH] Opening SSH connection to 192.168.1.112:22.</span><br><span class="line">[05/11/19 01:33:37] [SSH] SSH host key matches key seen previously <span class="keyword">for</span> this host. Connection will be allowed.</span><br><span class="line">[05/11/19 01:33:37] [SSH] Authentication successful.</span><br><span class="line">[05/11/19 01:33:37] [SSH] The remote user<span class="string">'s environment is:</span></span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><table><thead><tr><th>Problem</th><th>how to fix</th></tr></thead><tbody><tr><td>[04/22/19 23:15:07] [SSH] WARNING: No entry currently exists in the Known Hosts file for this host. Connections will be denied until this new host and its associated key is added to the Known Hosts file.</td><td>ssh-keyscan HOSTNAME &gt;&gt; known_hosts</td></tr><tr><td>/var/lib/jenkins/.ssh/known_hosts [SSH] No Known Hosts file was found at /var/lib/jenkins/.ssh/known_hosts.</td><td>changing the Host key verification strategy in LAUNCH METHOD from “Known Hosts file verification strategy” to “Manually trusted key verification strategy”</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Windows agent configuration</title>
      <link href="/2019/05/jenkins-windows-agent/"/>
      <url>/2019/05/jenkins-windows-agent/</url>
      
        <content type="html"><![CDATA[<h2 id="Prepare-Java-runtime"><a href="#Prepare-Java-runtime" class="headerlink" title="Prepare Java runtime"></a>Prepare Java runtime</h2><h3 id="1-Download-Java"><a href="#1-Download-Java" class="headerlink" title="1. Download Java"></a>1. <a href="https://www.java.com/en/download/" target="_blank" rel="noopener">Download Java</a></h3><h4 id="2-Configure-Java-Windows-path"><a href="#2-Configure-Java-Windows-path" class="headerlink" title="2. Configure Java Windows path"></a>2. Configure Java Windows path</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=C:\Program Files\Java\jdk1.8.0_201</span><br><span class="line">CLASSPATH=.;%JAVA_HOME%\lib;%JAVA_HOME%\jre\lib</span><br></pre></td></tr></table></figure><h2 id="Create-Node"><a href="#Create-Node" class="headerlink" title="Create Node"></a>Create Node</h2><h3 id="1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine"><a href="#1-Jenkins-home-page-gt-Manage-Node-gt-New-Node-such-as-window-build-machine" class="headerlink" title="1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine"></a>1. Jenkins home page-&gt;Manage Node-&gt;New Node, such as window-build-machine</h3><h4 id="2-List-windows-agent-settings"><a href="#2-List-windows-agent-settings" class="headerlink" title="2. List windows agent settings"></a>2. List windows agent settings</h4><table><thead><tr><th>Items</th><th>Settings</th></tr></thead><tbody><tr><td>Name</td><td>window-build-machine</td></tr><tr><td>Description</td><td>used for windows build</td></tr><tr><td>of executors</td><td>1</td></tr><tr><td>Remote root directory</td><td>C:\agent</td></tr><tr><td>Labels</td><td>windows, build</td></tr><tr><td>Usage</td><td>Use this node as much as possible</td></tr><tr><td>Launch method</td><td>Let Jenkins control this Windows slave as a Windows service</td></tr><tr><td>Administrator user name</td><td>.\Administrator</td></tr><tr><td>Password</td><td>mypassword</td></tr><tr><td>Host</td><td>192.168.1.111</td></tr><tr><td>Run service as</td><td>Use Administrator account given above</td></tr><tr><td>Availability</td><td>Keep this agent online as much as paossible</td></tr></tbody></table><h4 id="3-Save-then-Connect"><a href="#3-Save-then-Connect" class="headerlink" title="3. Save then Connect"></a>3. Save then Connect</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[2019-05-11 01:32:50] [windows-slaves] Connecting to 192.168.1.111</span><br><span class="line">Checking <span class="keyword">if</span> Java exists</span><br><span class="line">java -version returned 1.8.0.</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Copying jenkins-slave.xml</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Copying slave.jar</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Starting the service</span><br><span class="line">[2019-05-11 01:32:50] [windows-slaves] Waiting <span class="keyword">for</span> the service to become ready</span><br><span class="line">[2019-05-11 01:32:55] [windows-slaves] Connecting to port 52,347</span><br><span class="line">&lt;===[JENKINS REMOTING CAPACITY]===&gt;Remoting version: 3.29</span><br><span class="line">This is a Windows agent</span><br><span class="line">Agent successfully connected and online</span><br></pre></td></tr></table></figure><h2 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><table><thead><tr><th>No.</th><th>Problem</th><th>how to fix</th></tr></thead><tbody><tr><td>1</td><td>ERROR: Message not found for errorCode: 0xC00000AC</td><td>need to install JDK, and config JAVA environment variable</td></tr><tr><td>2</td><td>how to fix add windows node as Windows service error</td><td><a href="https://issues.jenkins-ci.org/browse/JENKINS-16418" target="_blank" rel="noopener">JENKINS-16418</a></td></tr><tr><td>3</td><td>org.jinterop.dcom.common.JIException: Message not found for errorCode: 0x00000005</td><td>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Wow6432Node\CLSID {72C24DD5-D70A-438B-8A42-98424B88AFB8} <br> HKEY_CLASSES_ROOT\CLSID{76A64158-CB41-11D1-8B02-00600806D9B6} <br>Launch ‘regedit’ (as Administrator) <br>Find (Ctrl+F) the following registry key: “{72C24DD5-D70A-438B-8A42-98424B88AFB8}” in HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Wow6432Node\CLSID\ <br>Right click and select ‘Permissions’, Change owner to administrators group (Advanced…). <br>Change permissions for administrators group. Grant Full Control <br>Change owner back to TrustedInstaller (user is “NT Service\TrustedInstaller” on local machine)<br>Repeat the steps above for HKEY_CLASSES_ROOT\CLSID {76A64158-CB41-11D1-8B02-00600806D9B6} <br>Restart Remote Registry Service (Administrative Tools / Services)</td></tr><tr><td>4</td><td>ERROR: Unexpected error in launching an agent. This is probably a bug in Jenkins</td><td>Login remote machine and open Services find jenkinsslave-C__agent <br>Set startup type: Automatic <br>Log On: select This account, type correct account and password <br>start jenkinsslave-C__agent</td></tr><tr><td>5</td><td>Caused by: org.jinterop.dcom.common.JIRuntimeException: Message not found for errorCode: 0x800703FA</td><td>Slave under domain account <br>If your slave is running under a domain account and you get an error code 0x800703FA, change a group policy: <br>open the group policy editor (gpedit.msc) <br>go to Computer Configuration-&gt;Administrative Templates-&gt;System-&gt; UserProfiles, “Do not forcefully unload the user registry at user logoff” <br>Change the setting from “Not Configured” to “Enabled”, which disables the new User Profile Service feature (‘DisableForceUnload’ is the value added to the registry)</td></tr><tr><td>6</td><td>more connect jenkins agent problem on windows …</td><td>please refer to this link <a href="https://github.com/jenkinsci/windows-slaves-plugin/blob/master/docs/troubleshooting.adoc" target="_blank" rel="noopener">https://github.com/jenkinsci/windows-slaves-plugin/blob/master/docs/troubleshooting.adoc</a></td></tr><tr><td>7</td><td>ERROR: Message not found for errorCode: 0xC0000001 Caused by: jcifs.smb.SmbException: Failed to connect: 0.0.0.0&lt;00&gt;/10.xxx.xxx.xxx</td><td>need to enable SMB1 <br>Search in the start menu for ‘Turn Windows features on or off’ and open it. <br>Search for ‘SMB1.0/CIFS File Sharing Support’ in the list of optional features that appears, and select the checkbox next to it. <br>Click OK and Windows will add the selected feature. You’ll be asked to restart your computer as part of this process</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从测试到开发的五个月</title>
      <link href="/2018/12/from-qa-to-dev/"/>
      <url>/2018/12/from-qa-to-dev/</url>
      
        <content type="html"><![CDATA[<p>每当工作闲暇，我都会时常想起好久没有更新微信公众号的文章了，总想等工作不忙的时候赶紧跟大家分享我从测试转开发这段时间的经历和感受，但工作总是有忙不完的忙，一刻都停不下来。</p><p>终于等到这一周有两天工作不是那么忙碌了，才决定将前几天写到一半的文章更新完。这是我这几个月下来感受最轻松的两天，暂时没有bug需要去调查和测试，不用去看十几年的C代码，终于有大块时间去写我负责的Python Client端代码了。这种写着代码，听着歌曲去重构，Debug，修改Unit Test Suite感觉真是幸福。</p><p>幸福的时光总是短暂的，今天就又来了两个Bug需要去调查 ε=(´ο｀*)))唉…</p><p>又把我打回原形，调查大半天之后发现原来是QA测的不对，可以松口气晚上可以不用工作更新下微信公众号了。</p><p>这五个月来，几乎每天都是白天八小时，晚上继续背着电脑回家准备继续工作，周日偶尔去公司，经常在家学习。因为角色的转变，新的项目，需要学习的地方很多。从业务到技术，再加上产品发布在即，作为一名开发新人也肩负起Bug Fix的任务，十年前的代码，全英文的文档，复杂的系统，如果不全力一搏，真担心自己转型失败，那就太打脸了。</p><p>一天的工作忙碌和压力，使得我晚上总是吃的停不下来，吃饭是我一天当中最轻松的时刻。去年我跟别人打赌减肥赢奖金，我毫无怨念的拿到了第一的奖金，可是今年再和别人打赌减肥，至今我都还没开始，马上年底了，输掉奖金是毫无悬念的。总结下来，大概是因为今年工作太忙，工作压力大的缘故，使得我无法在八小时之余安心去继续练习吉他，做keep，年假还没来得及休，真是计划不如变化快。</p><p>虽然我还是个小开发，当角色变了，角度也会有变化。</p><h2 id="自动化测试是本分，DevOps是阶梯"><a href="#自动化测试是本分，DevOps是阶梯" class="headerlink" title="自动化测试是本分，DevOps是阶梯"></a>自动化测试是本分，DevOps是阶梯</h2><p>这几年下来相信你也会真切感受到，如果一名测试人员不懂自动化测试，不会写自动化测试脚本，不但难有升职或是跳槽的机会，很有可能会被企业所淘汰。</p><p>个人觉得DevOps是未来一段时间很多企业要走的路，一般的二线城市能把DevOps讲明白并且实施的人太少了，所以尽早掌握实施DevOps的人，就有机会成为DevOps教练或是测试架构师这样的角色。</p><h2 id="没有做好抗压的准备，不要去做开发"><a href="#没有做好抗压的准备，不要去做开发" class="headerlink" title="没有做好抗压的准备，不要去做开发"></a>没有做好抗压的准备，不要去做开发</h2><p>这几个月来遇到压力非常多，从刚开始的学习C语言，到C语言考核；从学习全英文的业务文档，到业务文档的分享（也是一种考核）；从调研C代码的代码覆盖率、Git分享，到调查并解决Bug；从每天的站立会汇报到每周与国外同事的例会。终于等到九月份，Title从Quality Assurance Engineer变成了Software Engineer，这其中的压力、痛苦和短暂的喜悦只有走过的人才知道。</p><h2 id="与年龄想匹配的能力"><a href="#与年龄想匹配的能力" class="headerlink" title="与年龄想匹配的能力"></a>与年龄想匹配的能力</h2><p>这点非常重要，如果现在问你，你与刚毕业两三年的同行年轻人有哪些优势？如果你不能肯定和清楚的说出自己优势的话，那就要好好反思一下了。</p><p>如果从开发角度来说，我现在就是与年龄不相匹配的能力，因此测试相关的技能以及DevOps相关知识依旧是我要好好掌握的功课。</p><h2 id="学好英语"><a href="#学好英语" class="headerlink" title="学好英语"></a>学好英语</h2><p>对于国内公司来说，工作上不会用到英语，但我想说如果想在测试和开发领域有更长远发展，英文非常重要。一般最流行开源的自动化测试框架、技术、DevOps相关的工具以及搜索最有效的解决问题的方案一般都是英文。如果你的英语不好，坚持一年半载去硬啃一手英文资料，形成习惯，受益终生。</p>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最受欢迎的 Python 自动化测试框架推荐</title>
      <link href="/2018/09/most-popular-python-automated-testing-framework/"/>
      <url>/2018/09/most-popular-python-automated-testing-framework/</url>
      
        <content type="html"><![CDATA[<p>随着技术的进步和自动化技术的出现，市面上出现了一些自动化测试框架。只需要进行一些适用性和效率参数的调整，这些自动化测试框架就能够开箱即用，大大节省了开发时间。</p><p>本文整理了当前最受欢迎的 Python 自动化测试框架。</p><h2 id="Robot-Framework"><a href="#Robot-Framework" class="headerlink" title="Robot Framework"></a>Robot Framework</h2><p>这是最流行的开源 Python 自动化测试框架，表格式的测试数据语法和关键词驱动测试使得它在全球的测试人员中非常流行。它还拥有众多可用的工具和库，并且留有 API 扩展空间，使得这个框架非常先进和健壮。</p><p>Robot Framework 完全用 Python 开发，对于验收测试非常有用。该框架可以运行在 Java 和.NET 环境，同时支持跨平台，如 Windows、MacOS 和 Linux。它无疑是最易用的自动化测试框架，能允许开发者进行并行测试。</p><h2 id="RedwoodHQ"><a href="#RedwoodHQ" class="headerlink" title="RedwoodHQ"></a>RedwoodHQ</h2><p>这是一个流行的自动化测试工具，它之所以流行是因为它支持大部分流行的编程语言，如 Java、Python、C# 等。它还支持多个测试人员在一个平台上协作并运行测试用例。</p><p>RedwoodHQ 有一个内置的 IDE（集成开发环境），可以在那里创建、修改以及运行测试用例。RedwoodHQ 是对用户最友好或对测试人员最友好的平台之一，它关注一个重大项目的全部测试过程。</p><h2 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h2><p>这是一套 Javascript 行为驱动开发测试框架（BDD），不依赖于其他任何框架和 DOM，适用于任何使用 JavaScript 的地方。除了 JavaScript 之外，Jasmine 还被用于 Python 和 Ruby 自动化测试。</p><p>因此，使用 Jasmine 可以并行运行客户端测试用例和服务端测试用例。它是一个将客户端和服务端单元测试结合起来的完美的测试框架，而且被认为是测试领域的未来。</p><h2 id="Pytest"><a href="#Pytest" class="headerlink" title="Pytest"></a>Pytest</h2><p>如果项目比较小、复杂度比较低，Pytest 是最适合的自动化测试平台。大部分 Python 开发者用它来进行单元测试。它也具有 Robot Framework 所闻名的验收测试能力。</p><p>Pytest 最好的特性之一是，它提供了测试用例的详细失败信息，使开发者可以快速准确地改正问题。它还有各种可用插件来给现有测试技术和测试用例增加更多功能和多样性。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Automation </tag>
            
            <tag> Python </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做好功能测试</title>
      <link href="/2018/08/how-to-do-functional-testing/"/>
      <url>/2018/08/how-to-do-functional-testing/</url>
      
        <content type="html"><![CDATA[<p>当你第一次开始接触测试这个行业的时候，首先听说的应该都是功能测试。</p><p>功能测试是通过一些测试手段来验证开发做出的代码是否符合产品需求。这些年功能测试好像不太受欢迎了，不少同学开始尝试自动化测试，测试开发等等，结果是功能测试、自动化测试、测试开发一样都没做好。</p><p>我们通常认为的功能测试是根据需求，采取以下测试流程：需求分析，用例编写，用例评审，提测验证，Bug回归验证，上线与线上回归等测试。如此日复一日，年复一年，可是等准备换工作的时候却得不到认可，你也遇到这种情况吗？</p><p>那么如何做好功能测试？功能测试用到哪些知识？有哪些相关的建议呢？</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>业务方在提出需求的时候，产品是要分析这个需求的价值，影响范围和实现代价的。在需求评审的时候，作为一个测试人员必须了解这次需求的内容，影响到哪些现有的功能，涉及到的操作系统或是类别等，然后准确的评估出工作量，防止因评估不足造成后期测试不充分。</p><p>再者，关注开发和产品的讨论，关注需求最后如何实现？其中做出的变动和难点就是测试的时候必须重点关注的部分，不能因为这些暂时和你没有关系就不去关注，防止欠债越来越多，不能做好充分的的测试。</p><p>第三，需求评审结束后，要求产品更新此次评审过程中的所有改动部分，同时确保之后的任何需求变化都及时更新。</p><p>第四，根据产品需求，同时与在会人员进行探讨，设计测试方案及时间安排，此时可以粗粒度考虑，时间上要合理。</p><h2 id="用例设计与评审"><a href="#用例设计与评审" class="headerlink" title="用例设计与评审"></a>用例设计与评审</h2><p>测试用例是每个测试人员工作过程中必须要完成的工作，它对测试工作起到指导作用，也是相关业务的一个文档沉淀。在以往面试的经验中，有许多人的测试用例写的没有章法，他们是凭着感觉去写测试用例，也没有从用户的角度来思考如何编写测试用例，对于测试用例设计较为常见的方法论也不清楚。</p><p>假如面试的时候给你一个场景：一个全新的App要发布，如果让你来测试，你能想到哪些测试方案？如果你只能想到如何去测试app的功能的话，作为功能测试人员就考虑不够全面。此时除了App的功能以外，还应关注App的兼容性，易用性，接口的功能测试和性能测试，数据的存储以及容灾情况等等都应考虑在内。</p><p>测试用例可设计为两类： 一类是开发自测和验收提测试标准的冒烟测试用例；一类是针对需求的全面测试用例。</p><p>编写完测试用例后主动联系相关人员进行用例评审，在评审过程中及时修改不合适的用例。</p><h2 id="测试流程，注重项目控制"><a href="#测试流程，注重项目控制" class="headerlink" title="测试流程，注重项目控制"></a>测试流程，注重项目控制</h2><p>项目的流程控制在需求开始的时候就应该重视起来，只是很多时候我们没有意识到这是测试的工作，有的是产品来控制，有的是专门的项目经理来控制。</p><p>测试人员需要有关注整体项目的意识。如果你不关注项目进度，什么时候提测什么时候开始测试，那么在测试过程中会遇到测试的内容和最初的需求不一致时候就会额外需要时间来解决，导致项目延期。另外主动关注项目，长此以往，你的这份主动性也会是你有效的竞争力。</p><p>需求一旦明确了由你来负责的时候，就要时刻来关注项目的情况。中间变更需求的时候，要评估是否影响项目进度，如果影响了重新进行排期。如果开发提测试晚了，是否影响上线时间，如果影响需要及时跟相关的人员沟通，发风险邮件，通知大家详细的情况。</p><p>同时在测试过程中，发现了bug需要详细描述问题，以方便开发去进行重现和修改。同时给bug准确分级，实时跟踪进度，保证项目高质量的按期完成。</p><h2 id="上线回归与项目总结"><a href="#上线回归与项目总结" class="headerlink" title="上线回归与项目总结"></a>上线回归与项目总结</h2><p>一个需求上线完成后，要及时进行线上回归，同时必须回归我们在需求评审的时候考虑到的可能影响到的原有的功能，以确保新功能完全上线成功。</p><p>在一个项目完成后，最好有一份个人总结报告，总结整个项目过程中遇到的问题及最后的解决办法，有哪些需要注意的问题？有什么可以借鉴的方案或是改进策略？项目中有没有通用性的问题等等。</p><h2 id="能力的总结和沉淀"><a href="#能力的总结和沉淀" class="headerlink" title="能力的总结和沉淀"></a>能力的总结和沉淀</h2><p>在找工作的时候，很多做功能测试多年的同学都遭遇过面试失败，究其原因，我觉得最核心的原因是：不具备相应工作年限应该具备的能力。</p><p>我们应该时常问自己一句话：离开现有的平台，我还有什么？如果仅仅是对现在公司业务和工具的熟悉，那是没有任何优势可言的。</p><p>对同类业务流程的掌握，项目的整体把控，快速了解业务并能根据需求选择测试方案，引入提高测试效率测试方案和工具，测试过程中遇到问题的预判和解决办法等才是功能测试人员必须具备的能力。</p><p>这些方面你做到了吗？不要抱怨功能测试如何如何，认清行业现状和自己的优缺点，做好自己的职业规划。</p><p>如果你不善于编码，那么做务专家也是功能测试人员一个很好的选择。</p>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做了9年测试，我为何转开发？</title>
      <link href="/2018/07/why-I-move-to-development/"/>
      <url>/2018/07/why-I-move-to-development/</url>
      
        <content type="html"><![CDATA[<p>最近几个月以来一直没有更新公众号文章，是因为五月开始，因为项目原因我有机会转为开发，我非常珍惜这一机会，所以一直在努力学习开发相关的技能。</p><p>做了9年测试，我为何转开发？</p><p>从三年前我在心里就种下了做开发的种子，因为这些年做自动化测试的原因，在写了很多自动化测试用例代码之后，觉得自己还是喜欢写代码，我想在技术上有更深入的学习，无疑作为开发是最直接的办法，所以一直在努力多看、多写代码，一直准备着等待能成为开发测试工程师，或是开发工程师的那一天。</p><p>最近茹炳晟的一篇文章我看了也很受启发《我为何从开发转测试，并坚持了16年，我们正好是相反的职业历程，虽然如此，但是都是想往更好的职业发展方向上去努力，他在视频里提到了很多未来测试可以做的工作，不了解的可以去看看，可以开阔大家的思路，个人觉得良好的代码能力是做好工程师相关的工作基础。测试不是只要认真仔细的点点点就可以了，不是测试这工作更适合女生，不是做测试比做开发轻松，不是可以不思进取还能高枕无忧，做好测试同样需要比别人更多的努力才能看起来轻而易举。</p><p>因为我学的是毕业之后再没接触的C语言，在这几个月的学习过程中，深刻体会了做开发我还有太多未知的领域知识需要去学习，作为开发语言需要深入的学习，这跟学自动化测试不一样，初学自动化测试脚本语言可以边用边查边学，但C语言不一样，它需要很系统的去学，从数组，指针，结构体，链表，二叉树，数据机构都要一个个突破，了解算法、操作系统、编译原理等等。</p><p>虽然是转开发，但是作为测试出身，我会一如既往的关注测试。</p><p>希望通过角色的转变能让我有更全方位的角度来看待产品质量，测试相关的思考和技术，分享更多有价值的内容。</p>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-print</title>
      <link href="/2018/07/C-print/"/>
      <url>/2018/07/C-print/</url>
      
        <content type="html"><![CDATA[<p>如何打印下面的字符？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$</span><br><span class="line">##</span><br><span class="line">$$$</span><br><span class="line">###</span><br><span class="line">$$$</span><br><span class="line">##</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>示例 1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">array</span>[] = &#123;<span class="string">'#'</span>, <span class="string">'$'</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= <span class="number">7</span>; row++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> hashNum = <span class="number">1</span>; hashNum &lt;= <span class="number">4</span> - <span class="built_in">abs</span>(<span class="number">4</span> - row); hashNum++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, <span class="built_in">array</span>[row % <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C - Score Input Sort Show</title>
      <link href="/2018/05/C-score-input-sort-show/"/>
      <url>/2018/05/C-score-input-sort-show/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5</span></span><br><span class="line"><span class="comment">//Score Input Sort Show</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">double</span>[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortAsc</span><span class="params">(<span class="keyword">double</span>[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortDesc</span><span class="params">(<span class="keyword">double</span>[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span>[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> scores[N];</span><br><span class="line">    input(scores);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[SORT ASC]\n"</span>);</span><br><span class="line">    sortAsc(scores);</span><br><span class="line">    show(scores);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[SORT DESC]\n"</span>);</span><br><span class="line">    sortDesc(scores);</span><br><span class="line">    show(scores);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">double</span> socres[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please enter %d student's score: "</span>, i+<span class="number">1</span>);</span><br><span class="line">        scanf_s(<span class="string">"%lf"</span>, &amp;socres[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortAsc</span><span class="params">(<span class="keyword">double</span> socres[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (socres[j] &gt; socres[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = socres[j];</span><br><span class="line">                    socres[j] = socres[j + <span class="number">1</span>];</span><br><span class="line">                    socres[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortDesc</span><span class="params">(<span class="keyword">double</span> socres[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; N - i - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (socres[j] &lt; socres[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = socres[j];</span><br><span class="line">                    socres[j] = socres[j + <span class="number">1</span>];</span><br><span class="line">                    socres[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> scores[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"********************************************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Chinese\tMath\tEnglish\tPhysics\tChemistry\t\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\t"</span>, scores[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n********************************************\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-Language 计算图形的面积</title>
      <link href="/2018/05/calculate-graph-area/"/>
      <url>/2018/05/calculate-graph-area/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">计算图形的面积：</span></span><br><span class="line"><span class="comment">1. 圆的面积 = π * radius * radius</span></span><br><span class="line"><span class="comment">2. 矩形面积 = weight * height</span></span><br><span class="line"><span class="comment">3. 三角形面积 = 1/2 * weight * height</span></span><br><span class="line"><span class="comment">@author Xianpeng Shen</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcCircle</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcSquare</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcTriangle</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">validate</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> choice;                <span class="comment">// 用户选择</span></span><br><span class="line">    <span class="keyword">double</span> area;               <span class="comment">// 图形面积</span></span><br><span class="line">    <span class="keyword">double</span> radius;             <span class="comment">// 圆半径</span></span><br><span class="line">    <span class="keyword">double</span> weight, <span class="built_in">height</span>;     <span class="comment">// 图形的宽和高</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1. 圆\n2. 矩形\n3. 三角形\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"本系统支持三种图形面积计算，请选择："</span>);</span><br><span class="line">    scanf_s(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">while</span> (choice &gt; <span class="number">3</span> || choice &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"只能输入1~3整数，请重新输入："</span>);</span><br><span class="line">        scanf_s(<span class="string">"%d"</span>, &amp;choice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入圆的半径："</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf_s(<span class="string">"%lf"</span>, &amp;radius);</span><br><span class="line">            <span class="keyword">if</span> (!(validate(radius))) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"不能为负数，请重新输入一个整数："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!validate(radius));</span><br><span class="line">        area = calcCircle(radius);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入矩形的长和宽："</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf_s(<span class="string">"%lf%lf"</span>, &amp;weight, &amp;<span class="built_in">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (!validate(weight) || !validate(<span class="built_in">height</span>)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"不能为负数，请重新输入两个正数："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!validate(weight) || !validate(<span class="built_in">height</span>));</span><br><span class="line">        area = calcSquare(weight, <span class="built_in">height</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入三角形的底和高："</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            scanf_s(<span class="string">"%lf%lf"</span>, &amp;weight, &amp;<span class="built_in">height</span>);</span><br><span class="line">            <span class="keyword">if</span> (!validate(weight) || !validate(<span class="built_in">height</span>)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"不能为负数，请重新输入两个正数："</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!validate(weight) || !validate(<span class="built_in">height</span>));</span><br><span class="line">        area = calcTriangle(weight, <span class="built_in">height</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"只能输入1~3整数，请重新输入："</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"图形面积为：%.2lf\n"</span>, area);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcCircle</span><span class="params">(<span class="keyword">double</span> radius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3.14</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcSquare</span><span class="params">(<span class="keyword">double</span> weight, <span class="keyword">double</span> <span class="built_in">height</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> weight * <span class="built_in">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calcTriangle</span><span class="params">(<span class="keyword">double</span> weight, <span class="keyword">double</span> <span class="built_in">height</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> weight * <span class="built_in">height</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">validate</span><span class="params">(<span class="keyword">double</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num &gt; <span class="number">0</span>;        <span class="comment">// 如果 num&gt;0, 返回一个非零值，表示真。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C-Language 自定义函数</title>
      <link href="/2018/05/C-self-defining-function/"/>
      <url>/2018/05/C-self-defining-function/</url>
      
        <content type="html"><![CDATA[<p>求次幂函数power</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">int</span>)</span></span>;  <span class="comment">// 形式参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2lf的%d次幂等于:%.2lf\n"</span>, <span class="number">5.2</span>, <span class="number">2</span>, power(<span class="number">5.2</span>, <span class="number">2</span>));  <span class="comment">//实际参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">// 形式参数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result *= num1; <span class="comment">// 累乘</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我眼中的高级测试工程师</title>
      <link href="/2018/05/senior-test-engineer-in-my-eyes/"/>
      <url>/2018/05/senior-test-engineer-in-my-eyes/</url>
      
        <content type="html"><![CDATA[<p>满足什么样的技术和经验才算高级工程师呢？说说我心中的高级工程师。</p><h3 id="具有丰富的行业测试经验"><a href="#具有丰富的行业测试经验" class="headerlink" title="具有丰富的行业测试经验"></a>具有丰富的行业测试经验</h3><p>最好有传统和互联网大公司工作经验，没有的话至少与这些公司的高级测试工程师有交流，了解他们是如何开展测试的，有助提高自己的眼界。</p><h3 id="有良好的测试基础"><a href="#有良好的测试基础" class="headerlink" title="有良好的测试基础"></a>有良好的测试基础</h3><p>掌握必要的测试理论，熟悉测试流程，需求分析，测试用例设计方法，根据项目实际需要制定测试方案。</p><h3 id="有丰富的业务能力"><a href="#有丰富的业务能力" class="headerlink" title="有丰富的业务能力"></a>有丰富的业务能力</h3><p>做好功能测试的前提是熟悉业务，能更好的站在产品的角度去设计测试用例，才能发现基本功能以外的问题，能给产品提出建设性的需求和意见。</p><h3 id="熟悉相关的测试工具"><a href="#熟悉相关的测试工具" class="headerlink" title="熟悉相关的测试工具"></a>熟悉相关的测试工具</h3><p>软件测试用到的相关工具非常多，了解和使用过这些工具，能更好的结合公司的要求及项目的需求来权衡引入哪些工具，提高工作效率。</p><ol><li>管理工具：比如JIRA，Testlink，Wiki，Confluence</li><li>持续集成：Jenkins，Bamboo，Travis CI等，了解他们之间的区别以及如何实施。</li><li>自动化测试：web和mobile平台之间是如何做自动化才测试的，用到哪些工具。了解Selenium，WebDriver，Appium，Robotium测试框架，以及用哪些语言去开发自动化测试用例，Python？Java？JavaScript？知道如何选择如何实施。</li><li>性能测试：了解Jmeter，LoadRunner这两个主要的性能测试工具，如何开展性能测试。</li></ol><h3 id="有良好的代码能力"><a href="#有良好的代码能力" class="headerlink" title="有良好的代码能力"></a>有良好的代码能力</h3><p>良好的代码能力可以快速掌握自动化测试，甚至可以开发测试平台。另外，当你跳槽到任何一家公司可以让你快速熟悉Java、Python、Javascript等任何语言编写的自动化测试用例。</p><h3 id="语言能力"><a href="#语言能力" class="headerlink" title="语言能力"></a>语言能力</h3><p>包括沟通能力和外语能力。沟通是一个测试人员在工作中必不可少的一项基本技能，良好的沟通会让开发人员了解问题所在，接受你的意见，从产品人员那里更好的了解需求。虽然只有在外企的时候才会用到英语，但是随着测试人员也需要学习很多的技术，开源社区的发展，很多第一手资料都是用英文写的，所以学好英文对于扩展和学习新知识有很大帮助。</p><p>所以说成为一名优秀的高级测试工程师所要求的能力还是很多的，一起努力吧！💪</p>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error: Permission denied (publickey)</title>
      <link href="/2018/05/permission-denied-publickey/"/>
      <url>/2018/05/permission-denied-publickey/</url>
      
        <content type="html"><![CDATA[<p>如果你想在一台电脑上配置 github 和 bitbucket，如何配置多个 SSH git key？<br>输入以下命令生成 SSH Key，注意在生成过程中最好输入新的名字，比如 id_rsa_github 和 id_rsa_bitbucket</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure><p>然后将生成的 SSH key 文件内容复制到对应网址的个人用户设置中即可。但是明明按照官方教程做的但是在 git clone 的时候还是遇到以下问题：<br>Error: Permission denied (publickey)<br>困恼了几天的错误终于解决了。</p><p><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">参看这个文档</a></p><p>由于我用的是macOS Sierra 10.13.3，<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent" target="_blank" rel="noopener">文档这里</a>写着如果是macOS Sierra 10.12.2 及以后的版本需要在<br>~/.ssh 目录下创建一个 config 文件<br>congfig 文件的具体配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line"> AddKeysToAgent yes</span><br><span class="line"> UseKeychain yes</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line">Host *</span><br><span class="line"> AddKeysToAgent yes</span><br><span class="line"> UseKeychain yes</span><br><span class="line"> IdentityFile ~/.ssh/id_rsa_bitbucket</span><br></pre></td></tr></table></figure><p>配置了这个文件之后，再次尝试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:shenxianpeng/blog.git</span><br></pre></td></tr></table></figure><p>可以 download 代码了，两个 SSH git 都好用了 : )</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkinsfile 配置</title>
      <link href="/2018/04/Jenkinsfile-configure/"/>
      <url>/2018/04/Jenkinsfile-configure/</url>
      
        <content type="html"><![CDATA[<p>最近在做有关 DevOps Build 的时候，学习了 Jenkins 的 Pipeline 的功能，不得不提到的就是 Jenkinsfile 这个文件。</p><p>以下面是我配置的 Jenkinsfile 文件及简单说明，更多有关 <a href="https://jenkins.io/doc/book/pipeline/" target="_blank" rel="noopener">Pipeline</a> 请看官方文档。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="comment">// Build 阶段</span></span><br><span class="line">        stage(<span class="string">'Build'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">'Building...'</span></span><br><span class="line">                bat <span class="string">'npm run build webcomponent-sample'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 单元测试阶段</span></span><br><span class="line">        stage(<span class="string">'Unit Test'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">'Unit Testing...'</span></span><br><span class="line">                bat <span class="string">'npm test webcomponent-sample'</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            post &#123;</span><br><span class="line">                success &#123;</span><br><span class="line">                <span class="comment">// 执行成功后生产报告</span></span><br><span class="line">                publishHTML target: [</span><br><span class="line">                    allowMissing: <span class="literal">false</span>,</span><br><span class="line">                    alwaysLinkToLastBuild: <span class="literal">false</span>,</span><br><span class="line">                    keepAll: <span class="literal">true</span>,</span><br><span class="line">                    reportDir: <span class="string">'components/webcomponent-sample/coverage/chrome'</span>,</span><br><span class="line">                    reportFiles: <span class="string">'index.html'</span>,</span><br><span class="line">                    reportName: <span class="string">'RCov Report'</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// E2E 测试阶段</span></span><br><span class="line">        stage(<span class="string">'E2E Test'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                bat <span class="string">'node nightwatch e2e/demo/test.js'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stage(<span class="string">'Release'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">'Release...'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post &#123;</span><br><span class="line">        <span class="comment">// 执行成功是触发</span></span><br><span class="line">        success &#123;  </span><br><span class="line">            mail bcc: <span class="string">'email@qq.com'</span>,</span><br><span class="line">            body: <span class="string">"&lt;b&gt;Project: $&#123;env.JOB_NAME&#125; &lt;br&gt;Build Number: $&#123;env.BUILD_NUMBER&#125; &lt;br&gt;Build URL: $&#123;env.BUILD_URL&#125; "</span>, <span class="attr">cc</span>: <span class="string">''</span>, <span class="attr">charset</span>: <span class="string">'UTF-8'</span>, <span class="attr">from</span>: <span class="string">'jenkins@qq.com'</span>, <span class="attr">mimeType</span>: <span class="string">'text/html'</span>, <span class="attr">replyTo</span>: <span class="string">''</span>, <span class="attr">subject</span>: <span class="string">"SUCCESS: Project Name -&gt; $&#123;env.JOB_NAME&#125;"</span>, <span class="attr">to</span>: <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行失败时触发</span></span><br><span class="line">        failure &#123;  </span><br><span class="line">            mail bcc: <span class="string">'email@qq.com'</span>,</span><br><span class="line">            body: <span class="string">"&lt;b&gt;Project: $&#123;env.JOB_NAME&#125; &lt;br&gt;Build Number: $&#123;env.BUILD_NUMBER&#125; &lt;br&gt;Build URL: $&#123;env.BUILD_URL&#125; "</span>, <span class="attr">cc</span>: <span class="string">''</span>, <span class="attr">charset</span>: <span class="string">'UTF-8'</span>, <span class="attr">from</span>: <span class="string">'jenkins@qq.com'</span>, <span class="attr">mimeType</span>: <span class="string">'text/html'</span>, <span class="attr">replyTo</span>: <span class="string">''</span>, <span class="attr">subject</span>: <span class="string">"FAILURE: Project Name -&gt; $&#123;env.JOB_NAME&#125;"</span>, <span class="attr">to</span>: <span class="string">""</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps 实践</title>
      <link href="/2018/04/devops-practice/"/>
      <url>/2018/04/devops-practice/</url>
      
        <content type="html"><![CDATA[<p>我想大多数的团队都面临这样的问题：</p><ol><li>发布周期长</li><li>开发和测试时间短</li><li>开发和测试是两个独立的团队</li><li>不稳定的交付质量</li><li>低收益难维护的UI自动化测试脚本</li><li>不合理的测试权重分配</li></ol><p>解决方法：</p><p>引入 DevOps 和分层自动化</p><ul><li>组件化产品<ul><li>产品开发引入模块化，数据驱动会使得产品更加容易实施 Unit，Server，UI 自动化测试</li></ul></li><li>优化工程师<ul><li>开发和测试在未来将没有界限，他们都是开发者，都会产品的质量和客户负责</li></ul></li><li>分层自动化<ul><li>更合理的测试权重分配，更底层的测试收益越高</li></ul></li><li>引入工具<ul><li>实施DevOps引入必要的工具，Bitbucket, Jenkins, Sonar, Pipelines, Docker, test framework …</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 命令备忘</title>
      <link href="/2018/02/git-command-cheat/"/>
      <url>/2018/02/git-command-cheat/</url>
      
        <content type="html"><![CDATA[<p>有些git命令总是记不住，在我这台 Ubuntu 使用 web 版 OneNote 不方便，那就把他们记到 Blog 里吧，需要的时候翻看一下。</p><p>git remote</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                 <span class="comment"># 查看当前位置的远程代码库</span></span><br><span class="line">git remote remove origin      <span class="comment"># 取消远程仓库</span></span><br><span class="line">git remote add orgin git@github.com:shenxianpeng/nightwatch.git       <span class="comment"># 关联新的仓库</span></span><br></pre></td></tr></table></figure><p>git log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 得到某一时段提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --after=<span class="string">'2017-12-04'</span> --before=<span class="string">'2017-12-08'</span> --author=xshen --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p>git tag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.6.700 -m <span class="string">'Release v1.6.700'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给前面的提交补上 tag</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git tag -a v1.6.700 -m <span class="string">'Release v1.6.700'</span> e454ad98862</span><br><span class="line"></span><br><span class="line">git push tag</span><br><span class="line">git push origin --tag</span><br></pre></td></tr></table></figure><p>设置 npm install 代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy=http://10.17.201.60:8080       <span class="comment"># 设置代理</span></span><br><span class="line">npm config <span class="built_in">set</span> proxy null                           <span class="comment"># 取消代理</span></span><br></pre></td></tr></table></figure><p>设置 cnpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install [name]</span><br><span class="line">cnpm sync connect</span><br><span class="line">cnpm info connect</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git remove and add remote repository</title>
      <link href="/2018/02/remove-and-add-remote-repository/"/>
      <url>/2018/02/remove-and-add-remote-repository/</url>
      
        <content type="html"><![CDATA[<p>如果是通过 https 方式来 pull 和 push 代码，每次都要输入烦人的账号和密码<br>可以通过切成成 ssh 方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取消远程仓库</span></span><br><span class="line">git remote remove origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程仓库</span></span><br><span class="line">git remote add origin git@github.com:shenxianpeng/blog.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 使用 VS code 进行调试</title>
      <link href="/2018/02/debug-nightwatch-in-vs/"/>
      <url>/2018/02/debug-nightwatch-in-vs/</url>
      
        <content type="html"><![CDATA[<p>除了通过增加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'==========='</span>)</span><br></pre></td></tr></table></figure><p>来调试 Nightwatch 代码，如何通过配置 VS code 来 Debug Nightwatch 代码？</p><p>Ctrl+Shift+D 打开 Debug 界面，配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible Node.js debug attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"node"</span>,</span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"npm test"</span>,</span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/node_modules/nightwatch/bin/runner.js"</span>,</span><br><span class="line">            <span class="string">"args"</span>: [</span><br><span class="line">                <span class="string">"tests/DQA/DQA-221/login.js"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 持续集成问题</title>
      <link href="/2018/01/nightwatch-CI-problem/"/>
      <url>/2018/01/nightwatch-CI-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="在持续集成执行自动化测试用例时候会遇到那些问题呢"><a href="#在持续集成执行自动化测试用例时候会遇到那些问题呢" class="headerlink" title="在持续集成执行自动化测试用例时候会遇到那些问题呢"></a>在持续集成执行自动化测试用例时候会遇到那些问题呢</h2><ol><li>运行时间过长</li><li>因为某些错误程序卡住</li><li>异常处理</li></ol><h2 id="针对以上三种情况，通过下面的三种方式进行解决"><a href="#针对以上三种情况，通过下面的三种方式进行解决" class="headerlink" title="针对以上三种情况，通过下面的三种方式进行解决"></a>针对以上三种情况，通过下面的三种方式进行解决</h2><h3 id="运行时间过长-E2E-测试脚本中难免需要时间等待，例如"><a href="#运行时间过长-E2E-测试脚本中难免需要时间等待，例如" class="headerlink" title="运行时间过长, E2E 测试脚本中难免需要时间等待，例如"></a>运行时间过长, E2E 测试脚本中难免需要时间等待，例如</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.pause(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 尽可能将说有的 pause 换成 wait，例如：</span></span><br><span class="line"><span class="keyword">this</span>.element(<span class="string">'@columns'</span>).to.be.visible.before(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">this</span>.waitForElementVisible(<span class="string">'@columns'</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h3 id="因为某些错误程序卡住-在-TestCase-中进行验证时，例如"><a href="#因为某些错误程序卡住-在-TestCase-中进行验证时，例如" class="headerlink" title="因为某些错误程序卡住, 在 TestCase 中进行验证时，例如"></a>因为某些错误程序卡住, 在 TestCase 中进行验证时，例如</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.assert.equal(result.value.length, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 如果只想标注失败，继续执行后面的代码，则需将 assert 换成 verify</span></span><br><span class="line"><span class="keyword">this</span>.veriry.equal(result.value.length, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 waitForElementVisible 中加 abortOnFailure 参数，当设置为 false，在 wait 超时时，就会标志为 false 继续继续执行</span></span><br><span class="line"><span class="keyword">this</span>.waitForElementVisible(<span class="string">'@columns'</span>, <span class="number">5000</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以通过在 nightwatch.conf.js 设置全局变量</span></span><br><span class="line">abortOnAssertionFailure: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>当程序执行运行一次时，程序运行正常，一旦遇到异常时，下次执行就回出错。<br>例如：比如邀请账号登录系统的操作。管理员添加一个新用户，然后用这个新用户登录，之后管理员删除这个账户。但如果删除这个账号失败时，下次执行这个程序再邀请这个账号时就会提示这个账号存在的，可能这个时候这个程序就执行不下去了。这个时候就需要考虑这些异常情况处理，保证程序能够良好的执行下去。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 打开多个窗口</title>
      <link href="/2018/01/open-multiple-windows/"/>
      <url>/2018/01/open-multiple-windows/</url>
      
        <content type="html"><![CDATA[<p>如果想打开两个窗口并控制那个窗口怎么办？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = process.env.BASE_URL, newWindow;</span><br><span class="line"></span><br><span class="line">client.execute(<span class="function"><span class="keyword">function</span> (<span class="params">url, newWindow</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.open(url, newWindow, <span class="string">'height=768,width=1024'</span>);</span><br><span class="line">&#125;, [url, newWindow]);</span><br><span class="line"></span><br><span class="line">client.window_handles(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.verify.equal(result.value.length, <span class="number">2</span>, <span class="string">'There should be 2 windows open'</span>);</span><br><span class="line">    newWindow = result.value[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.switchWindow(newWindow);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 上使用 VPN</title>
      <link href="/2017/12/use-vpn-on-ubuntu/"/>
      <url>/2017/12/use-vpn-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>如何在 Ubuntu 上连接 Cisco AnyConnect VPN</p><p>打开Terminal，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /sbin/modprobe tun</span><br></pre></td></tr></table></figure><p>安装OpenConnect，执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openconnect</span><br></pre></td></tr></table></figure><p>连接VPN，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openconnect yourvpn.example.com</span><br></pre></td></tr></table></figure><p>将提示你输入用户名和密码，输入争取后，VPN连接成功。</p><p>原文 <a href="http://ubuntuhandbook.org/index.php/2014/11/connect-cisco-anyconnect-vpn-ubuntu/" target="_blank" rel="noopener">请点击</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 上安装 Hexo</title>
      <link href="/2017/12/install-hexo-on-ubuntu/"/>
      <url>/2017/12/install-hexo-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install                                   <span class="comment">#Install dependencies</span></span><br><span class="line">npm install hexo-deployer-git --save          <span class="comment">#Install deploy</span></span><br></pre></td></tr></table></figure><p>出现这个错误：-bash: hexo: command not found</p><hr><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install-g hexo</span><br></pre></td></tr></table></figure><p>出现这个错误：/usr/bin/env: node: No such file or directory</p><hr><p>执行这个命令，最终解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/nodejs /usr/bin/node</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 上安装 VS Code</title>
      <link href="/2017/12/install-VS-Code-on-ubuntu/"/>
      <url>/2017/12/install-VS-Code-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>在 Ubuntu 下面安装 Visual Studio Code</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-desktop/ubuntu-make</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-make</span><br><span class="line">umake web visual-studio-code</span><br></pre></td></tr></table></figure><p>亲测，好用。</p>]]></content>
      
      
      <categories>
          
          <category> LinuxUnix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch wait For Text</title>
      <link href="/2017/12/nightwatch-wait-for-text/"/>
      <url>/2017/12/nightwatch-wait-for-text/</url>
      
        <content type="html"><![CDATA[<p>在使用 Nightwatch 做自动化测试的时候，会遇到这样一种情况：<br>创建一个 query, 等待这个query的状态从 Wait 变成 Running 最后到 Available 时再执行操作。<br>Nightwatch 并没有提供这样的方法，可以通过下面的方式解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Wait for text'</span>: <span class="function"><span class="keyword">function</span> <span class="title">waitForText</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> query = client.page.query();</span><br><span class="line">    query.navigate();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        client.getText(<span class="string">'status'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (result.value.indexOf(<span class="string">'Available'</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.break;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                client.pause(<span class="number">1000</span>);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 元素判断</title>
      <link href="/2017/12/nightwatch-element-check/"/>
      <url>/2017/12/nightwatch-element-check/</url>
      
        <content type="html"><![CDATA[<h3 id="Nightwatch-元素常用验证方法"><a href="#Nightwatch-元素常用验证方法" class="headerlink" title="Nightwatch 元素常用验证方法"></a>Nightwatch 元素常用验证方法</h3><p>验证元素的值信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .assert.containsText(<span class="string">'@errorMessage'</span>, <span class="string">'The email address is invalid.'</span>)</span><br></pre></td></tr></table></figure><p>验证元素是否可用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .assert.attributeEquals(<span class="string">'@continueBtn'</span>, <span class="string">'disabled'</span>, <span class="string">'true'</span>);</span><br></pre></td></tr></table></figure><p>等待元素可用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .expect.element(<span class="string">'@signInBtn'</span>).to.be.visible.before(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">andesFormSection</span><br><span class="line">    waitForElementVisible(<span class="string">'signInBtn'</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p>等待元素呈现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .expect.element(<span class="string">'@signInBtn'</span>).to.be.present.before(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">andesFormSection</span><br><span class="line">    waitForElementPresent(<span class="string">'signInBtn'</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 得到和验证 cookies</title>
      <link href="/2017/12/nightwatch-handle-cookies/"/>
      <url>/2017/12/nightwatch-handle-cookies/</url>
      
        <content type="html"><![CDATA[<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>验证登录 cookies 和清除 access_token。测试用例设计如下</p><h2 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h2><p>登录系统时，不选择记住我按钮，验证 cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">client.getCookies(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value.length, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">0</span>].name, <span class="string">'domain'</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">1</span>].name, <span class="string">'user_id'</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">2</span>].name, <span class="string">'access_token'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录系统时，选择记住我按钮，验证 cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">client.getCookies(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value.length, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">0</span>].name, <span class="string">'domain'</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">1</span>].name, <span class="string">'user_id'</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">2</span>].name, <span class="string">'identifier'</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">3</span>].name, <span class="string">'access_token'</span>);</span><br><span class="line">    <span class="keyword">this</span>.assert.equal(result.value[<span class="number">4</span>].name, <span class="string">'persistent_token'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录系统时，不选择记住我按钮，删除 cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> accesstoken;</span><br><span class="line">client.getCookies(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    accesstoken = result.value[<span class="number">2</span>].name;</span><br><span class="line">    <span class="keyword">this</span>.deleteCookie(accesstoken, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// refresh current page, logout</span></span><br><span class="line">        <span class="keyword">this</span>.refresh().waitForElementVisible(<span class="string">'div.login-form'</span>, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>登录系统时，选择记住我按钮，删除 cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> accesstoken;</span><br><span class="line">client.getCookies(<span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    accesstoken = result.value[<span class="number">3</span>].name;</span><br><span class="line">    <span class="keyword">this</span>.deleteCookie(accesstoken, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// refresh current page, still login</span></span><br><span class="line">        <span class="keyword">this</span>.refresh().waitForElementVisible(<span class="string">'.andes-header'</span>, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="如何知道登录都有哪些参数"><a href="#如何知道登录都有哪些参数" class="headerlink" title="如何知道登录都有哪些参数"></a>如何知道登录都有哪些参数</h2><p>事先在手动测试的时候打开 chrome 浏览器，然后按 F12，登录时查看 Network。</p><p>以成功百度登录时为例，可以看到 Headers 里的参数，我们可以通过验证这些参数来确定登录成功了。</p><p>这样我们就可以这些参数来实现对 cookie，token 等等参数进行自动化测试的验证。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>度过工作中挫折心结</title>
      <link href="/2017/11/weather-setbacks-at-work/"/>
      <url>/2017/11/weather-setbacks-at-work/</url>
      
        <content type="html"><![CDATA[<h3 id="对于一个不善于言表的我工作中遇到过"><a href="#对于一个不善于言表的我工作中遇到过" class="headerlink" title="对于一个不善于言表的我工作中遇到过"></a>对于一个不善于言表的我工作中遇到过</h3><ul><li>过度理解在与同事之间的Email和Chat中的意思；</li><li>同事之间的沟通中出现的分歧事后还会继续琢磨；</li><li>十分关注自己的工作失与得在上级领导中的看法。</li></ul><h3 id="以下方式对我来说还比较有效的"><a href="#以下方式对我来说还比较有效的" class="headerlink" title="以下方式对我来说还比较有效的"></a>以下方式对我来说还比较有效的</h3><ul><li>让自己的精力更多的聚焦在工作上；</li><li>工作中对事不对人，做对的事情；</li><li>眼光放长远，不忘初心，专注应该做的事情上；</li><li>领导说的一句“向前看”我印象深刻，过去的就过去了，别再纠结，向前看。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MyNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Change Hexo code highlight</title>
      <link href="/2017/11/change-hexo-code-highlight/"/>
      <url>/2017/11/change-hexo-code-highlight/</url>
      
        <content type="html"><![CDATA[<p>Hexo 默认主题代码高亮是黑色的，如果想换个风格？具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 highlight.styl 文件，路径</span></span><br><span class="line">themes/landscape/<span class="built_in">source</span>/css/_partial/highlight.styl</span><br></pre></td></tr></table></figure><p>修改默认代码主题 Tomorrow Night Eighties</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">highlight-background = #2d2d2d</span><br><span class="line">highlight-current-line = #393939</span><br><span class="line">highlight-selection = #515151</span><br><span class="line">highlight-foreground = #cccccc</span><br><span class="line">highlight-comment = #999999</span><br><span class="line">highlight-red = #f2777a</span><br><span class="line">highlight-orange = #f99157</span><br><span class="line">highlight-yellow = #ffcc66</span><br><span class="line">highlight-green = #99cc99</span><br><span class="line">highlight-aqua = #66cccc</span><br><span class="line">highlight-blue = #6699cc</span><br><span class="line">highlight-purple = #cc99cc</span><br></pre></td></tr></table></figure><p>为主题 Tomorrow</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">highlight-background = #ffffff</span><br><span class="line">highlight-current-line = #efefef</span><br><span class="line">highlight-selection = #d6d6d6</span><br><span class="line">highlight-foreground = #4d4d4c</span><br><span class="line">highlight-comment = #8e908c</span><br><span class="line">highlight-red = #c82829</span><br><span class="line">highlight-orange = #f5871f</span><br><span class="line">highlight-yellow = #eab700</span><br><span class="line">highlight-green = #718c00</span><br><span class="line">highlight-aqua = #3e999f</span><br><span class="line">highlight-blue = #4271ae</span><br><span class="line">highlight-purple = #8959a8</span><br></pre></td></tr></table></figure><p>更多详情请参考 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">tomorrow-theme</a> 修改。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fix flask errors</title>
      <link href="/2017/11/fix-flask-errors/"/>
      <url>/2017/11/fix-flask-errors/</url>
      
        <content type="html"><![CDATA[<h4 id="TypeError-object-of-type-‘filter’-has-no-len"><a href="#TypeError-object-of-type-‘filter’-has-no-len" class="headerlink" title="TypeError: object of type ‘filter’ has no len()"></a>TypeError: object of type ‘filter’ has no len()</h4><p>Change below code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">(task_id)</span>:</span></span><br><span class="line">    task = filter(<span class="keyword">lambda</span> t: t[<span class="string">'id'</span>] == task_id, tasks)</span><br><span class="line">    <span class="keyword">if</span> len(task) == <span class="number">0</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'task'</span>: task[<span class="number">0</span>]&#125;)</span><br></pre></td></tr></table></figure><p>To</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/todo/api/v1.0/tasks/&lt;int:task_id&gt;', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_task</span><span class="params">(task_id)</span>:</span></span><br><span class="line">    task = list(filter(<span class="keyword">lambda</span> t: t[<span class="string">'id'</span>] == task_id, tasks))</span><br><span class="line">    <span class="keyword">if</span> len(task) == <span class="number">0</span>:</span><br><span class="line">        abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'task'</span>: task[<span class="number">0</span>]&#125;)</span><br></pre></td></tr></table></figure><p>Add <code>list()</code>, refer to <a href="https://stackoverflow.com/questions/19182188/how-to-find-the-length-of-a-filter-object-in-python" target="_blank" rel="noopener">stackoverflow</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Snippet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 测试用例失败继续执行</title>
      <link href="/2017/10/test-case-fails-to-continue-execution/"/>
      <url>/2017/10/test-case-fails-to-continue-execution/</url>
      
        <content type="html"><![CDATA[<p>自动化测试中，有一个验证点，当测试通过时，后面的测试脚本继续执行；<br>当出现异常时，你希望标记出来这个错误，但不影响后面的测试脚本执行，在 Nightwatch 中如何做？</p><p>下面的一段代码验证 home 页面的 body 是否显示。这里如果显示则将验证点置为 false，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">home.waitForElementVisible(<span class="string">'@body'</span>, <span class="number">3000</span>, <span class="literal">true</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.value) &#123;</span><br><span class="line">        <span class="comment">// 测试报告中会显示失败，但是会继续执行后面的测试脚本</span></span><br><span class="line">        client.verify.equal(result.value, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 验证点通过</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Pass'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：这里如果用 assert，程序就会中断执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中断执行</span></span><br><span class="line">client.assert.equal(result.value, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 验证元素是否存在</title>
      <link href="/2017/10/nightwatch-cdetermine-if-element-exists/"/>
      <url>/2017/10/nightwatch-cdetermine-if-element-exists/</url>
      
        <content type="html"><![CDATA[<h2 id="元素常用验证方法"><a href="#元素常用验证方法" class="headerlink" title="元素常用验证方法"></a>元素常用验证方法</h2><p>验证元素的值信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .assert.containsText(<span class="string">'@errorMessage'</span>, <span class="string">'The email address is invalid.'</span>)</span><br></pre></td></tr></table></figure><p>验证元素是否可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .assert.attributeEquals(<span class="string">'@continueBtn'</span>, <span class="string">'disabled'</span>, <span class="string">'true'</span>);</span><br></pre></td></tr></table></figure><p>等待元素可用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .expect.element(<span class="string">'@signInBtn'</span>).to.be.visible.before(5000);</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">andesFormSection</span><br><span class="line">    waitForElementVisible(<span class="string">'signInBtn'</span>, 5000);</span><br></pre></td></tr></table></figure><p>等待元素呈现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">andesFormSection</span><br><span class="line">    .expect.element(<span class="string">'@signInBtn'</span>).to.be.present.before(5000);</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">andesFormSection</span><br><span class="line">    waitForElementPresent(<span class="string">'signInBtn'</span>, 5000);</span><br></pre></td></tr></table></figure><h2 id="判断元素是否存在"><a href="#判断元素是否存在" class="headerlink" title="判断元素是否存在"></a>判断元素是否存在</h2><p>用 Nightwatch 去判断一个 element 是否存在，如果存在执行如下操作，如果不存在做另外的操作。<br>这个在 Java 编写的自动化测试用例中可以用 try catch 可以解决，Nightwatch 试过不行。<br>另外看到 stackoverflow 上有通过判断 (result.status != -1)，没有解决我的问题。</p><p>最后这样解决的，请看下面 tutorial.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tutorialCommands = &#123;</span><br><span class="line">  notShowTutorial: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tutorialSection = <span class="keyword">this</span>.section.tutorial;</span><br><span class="line">    <span class="keyword">this</span>.api.element(<span class="string">'css selector'</span>, <span class="string">'.andes-dialog md-icon'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (result.value &amp;&amp; result.value.ELEMENT) &#123;</span><br><span class="line">        <span class="keyword">this</span>.pause(<span class="number">2000</span>);</span><br><span class="line">        tutorialSection.click(<span class="string">'@doNotShowBtn'</span>);</span><br><span class="line">        <span class="keyword">this</span>.pause(<span class="number">2000</span>);</span><br><span class="line">        tutorialSection.click(<span class="string">'@closeBtn'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'no tutorial exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  commands: [tutorialCommands],</span><br><span class="line">  url: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`https://shenxianpeng.github.io/`</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  sections: &#123;</span><br><span class="line">    tutorial: &#123;</span><br><span class="line">      selector: <span class="string">'.andes-dialog'</span>,</span><br><span class="line">      elements: &#123;</span><br><span class="line">        closeBtn: <span class="string">'md-icon'</span>,</span><br><span class="line">        doNotShowBtn: <span class="string">'md-checkbox .md-container'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：这里的元素不能通过 section 的方式引用，例如这样，怀疑这是 Nightwatch 的 bug。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tutorialSection.api.element(<span class="string">'css selector'</span>, <span class="string">'@closeBtn'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 配置 rss 订阅功能</title>
      <link href="/2017/10/configure-rss-subscription-for-hexo/"/>
      <url>/2017/10/configure-rss-subscription-for-hexo/</url>
      
        <content type="html"><![CDATA[<p>安装 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>如果国内 npm 安装不成功，可以先安装 <a href="https://npm.taobao.org/" target="_blank" rel="noopener">cnpm</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后再</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 _config.yml 中配置这个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: <span class="string">' '</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客文章中插入图片</title>
      <link href="/2017/10/insert-img-in-hexo-article/"/>
      <url>/2017/10/insert-img-in-hexo-article/</url>
      
        <content type="html"><![CDATA[<p>如果想在 Hexo 文章中插入图片怎么做？</p><p>网络上很容易搜到 Markdown 的语法是 <code>![Alt text](/path/to/img.jpg)</code><br>前面 Alt text 是指在图片下面命名，后面是图片的地址。那么如何配置？</p><p>经过几番尝试得知：在你的 hexo 项目根目录下面 source 创建一个 images 文件夹，<br>把你以后用的到图片都放在这个目录下面就 OK 了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![示例图1](../images/color.png)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 自动化测试中比较颜色</title>
      <link href="/2017/10/nightwatch-auto-compare-colors/"/>
      <url>/2017/10/nightwatch-auto-compare-colors/</url>
      
        <content type="html"><![CDATA[<p>在做 Nightwatch 自动化测试中，出现需要比较颜色的时候如何来做？<br>基本的思路是首先需要取到这个 element 的颜色值，然后跟预期的颜色进行对比。<br>比如我要取下面这个会话窗口的颜色，选中这个图标，按 F12，查看这个图标的属性。发现Angular中的颜色属性不是 Elements 下，是在 Styles 下面，如何取到这个颜色值？</p><p><img src="/2017/10/nightwatch-auto-compare-colors/color.png" alt="element"></p><p>这里会用到 getCssProperty 这个方法，具体如何使用，请看如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getChatColor: <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> chat = <span class="string">'[ng-click="show()"]'</span></span><br><span class="line">    <span class="keyword">this</span>.getCssProperty(<span class="string">'@chat'</span>, <span class="string">'background-color'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      cb(result.value);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>将上面的 getChatColor command 代码放到一个叫 chat.js 的 page 下面，然后在测试用例中这样调用这个 command</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Test get color'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chat = client.page.chat();</span><br><span class="line">    <span class="keyword">let</span> chatColor;</span><br><span class="line">    chat.navigate();</span><br><span class="line"></span><br><span class="line">    chat.getChatColor(<span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">        chatColor = color;</span><br><span class="line">    &#125;);</span><br><span class="line">    client.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        client.assert.equal(chatColor, <span class="string">'rgba(50, 104, 152, 1)'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截图中看到的 background color 是 rgb(50, 104, 152), 但是 getChatColor 返回指是rgba，rgb 和 rgba 之间需要转化一下，a 表示透明度，取值0~1之间。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 获取接口返回数据</title>
      <link href="/2017/10/nightwatch-get-interface-return-data/"/>
      <url>/2017/10/nightwatch-get-interface-return-data/</url>
      
        <content type="html"><![CDATA[<p>如何在 JavaScript 通过接口自动生成和返回接口数据呢？</p><p>在自动化测试中常常遇到接口测试，或是使用的数据需要从接口返回，那么如何来实现这种情况？<br>例如我想通过 generateLicense 方法生成一个 license，然后在之后的自动化测试用例中使用这个生成的 license 继续做下一步的操作，例如注册 license 等。</p><p>在 license.js 文件中创建一个 generateLicense 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">generateLicense: <span class="function"><span class="keyword">function</span>(<span class="params">success, day, capacity, code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line">    <span class="keyword">var</span> options = &#123; <span class="attr">method</span>: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'https://generate-license/api/licenses'</span>,</span><br><span class="line">    headers:</span><br><span class="line">        &#123; <span class="string">'postman-token'</span>: <span class="string">'d849e636-58c9-2705'</span>,</span><br><span class="line">        <span class="string">'cache-control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">        authorization: <span class="string">'Basic YWRtaW46U'</span>,</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span> &#125;,</span><br><span class="line"></span><br><span class="line">    body: &#123; <span class="attr">company</span>: <span class="string">'Google'</span>,</span><br><span class="line">        email: <span class="string">'5012962@qq.com'</span>,</span><br><span class="line">        expiration: day,</span><br><span class="line">        capacity: capacity,</span><br><span class="line">        phone: <span class="string">'89262518'</span>,</span><br><span class="line">        address: <span class="string">'Dalian'</span>,</span><br><span class="line">        code: code &#125;,</span><br><span class="line">    json: <span class="literal">true</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request(options, <span class="function"><span class="keyword">function</span> (<span class="params">error, response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    success(response);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>对上面生成的 license 进行赋值，之后的测试用例中就可以使用 MVlicense 了。<br>使用中会涉及到异步操作，异步如何操作请看之前的文章。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> license = client.page.license();</span><br><span class="line"><span class="keyword">let</span> MVlicense;</span><br><span class="line">license.generateLicense(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    MVlicense = response.body.data.license.license;</span><br><span class="line">&#125;, <span class="number">365</span>, <span class="number">10</span>, <span class="string">'MV'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 异步操作</title>
      <link href="/2017/10/nightwatch-async-operation/"/>
      <url>/2017/10/nightwatch-async-operation/</url>
      
        <content type="html"><![CDATA[<p>在自动化测试中常常需要通过一个 command（或 function ）中返回的值来进行下一步的操作，JavaScript 与 JAVA 在调用返回值时有所不同，JS 中需要特定的写法来进行这种异步操作。</p><p>以下面的 get License 数量为例，首先需要 get 一次 License 数量，然后进行一些列操作之后，再一次 get License 数量，比较这两次 License 数量值。</p><p>getLicenseNum 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getLicenseNum: <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> license = <span class="string">'ul &gt; li.license-id.ng-binding'</span>;</span><br><span class="line">    <span class="keyword">this</span>.waitForElementVisible(license, <span class="number">5000</span>);</span><br><span class="line">    <span class="keyword">this</span>.api.elements(<span class="string">'css selector'</span>, license, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        cb(result.value.length);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对两次得到的 License num 进行比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'JavaScrpit asynchronous operation'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> license = client.page.license();</span><br><span class="line">    <span class="keyword">let</span> num1, num2;</span><br><span class="line">    license.getLicenseNum(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        num1 = num;</span><br><span class="line">    &#125;);</span><br><span class="line">    license.getLicenseNum(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        num2 = num;</span><br><span class="line">    &#125;);</span><br><span class="line">    client.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        client.assert.equal(num2 - num1, <span class="number">1</span>, <span class="string">'license number increase 1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatch 模拟键盘操作</title>
      <link href="/2017/10/nightwatch-keyboard/"/>
      <url>/2017/10/nightwatch-keyboard/</url>
      
        <content type="html"><![CDATA[<p>在自动化测试中有这样一个场景，在一个输入框中输入一串字符，然后执行敲回车键，验证搜索结果，以 Google 搜索为例，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'search nightwatch and click ENTER key'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">client</span>) </span>&#123;</span><br><span class="line"> client</span><br><span class="line">    .url(<span class="string">'http://google.com'</span>)</span><br><span class="line">    .expect.element(<span class="string">'body'</span>).to.be.present.before(<span class="number">1000</span>);</span><br><span class="line"> client.setValue(<span class="string">'input[type=text]'</span>, [<span class="string">'nightwatch'</span>, client.Keys.ENTER])</span><br><span class="line">    .pause(<span class="number">1000</span>)</span><br><span class="line">    .assert.containsText(<span class="string">'#main'</span>, <span class="string">'Night Watch'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>不能翻墙的可换成 baidu，相应的 element 需要改一下否则以上代码会报错。<br>上面的代码是执行一个按键操作，如果想做组合键操作怎么办呢？比如在 Google 搜索框中输入 nightwatch，然后按 ctrl+a 组合键来进行全选操作。还是以 Google 搜索为例，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client.setValue(<span class="string">'input[type=text]'</span>,[<span class="string">'nightwatch'</span>, [client.Keys.CONTROL, <span class="string">'a'</span>]])</span><br></pre></td></tr></table></figure><p>其他的组合键操作以此类推。</p><p>其他按键 Keys 如下：<br>Keys:<br>{ NULL,<br>  CANCEL,<br>  HELP,<br>  BACK_SPACE,<br>  TAB,<br>  CLEAR,<br>  RETURN,<br>  ENTER,<br>  SHIFT,<br>  CONTROL,<br>  ALT,<br>  PAUSE,<br>  ESCAPE,<br>  SPACE,<br>  PAGEUP,<br>  PAGEDOWN,<br>  END,<br>  HOME,<br>  LEFT_ARROW,<br>  UP_ARROW,<br>  RIGHT_ARROW,<br>  DOWN_ARROW,<br>  ARROW_LEFT,<br>  ARROW_UP,<br>  ARROW_RIGHT,<br>  ARROW_DOWN,<br>  INSERT,<br>  DELETE,<br>  SEMICOLON,<br>  EQUALS,<br>  NUMPAD0,<br>  NUMPAD1,<br>  NUMPAD2,<br>  NUMPAD3,<br>  NUMPAD4,<br>  NUMPAD5,<br>  NUMPAD6,<br>  NUMPAD7,<br>  NUMPAD8,<br>  NUMPAD9,<br>  MULTIPLY,<br>  ADD,<br>  SEPARATOR,<br>  SUBTRACT,<br>  DECIMAL,<br>  DIVIDE,<br>  F1,<br>  F2,<br>  F3,<br>  F4,<br>  F5,<br>  F6,<br>  F7,<br>  F8,<br>  F9,<br>  F10,<br>  F11,<br>  F12,<br>  COMMAND,<br>  META<br>},</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nightwatchjs 中文参考手册</title>
      <link href="/2017/10/nightwatchjs-guilde/"/>
      <url>/2017/10/nightwatchjs-guilde/</url>
      
        <content type="html"><![CDATA[<p><a href="https://shenxianpeng.gitbooks.io/nightwatch-js-cn/content/" target="_blank" rel="noopener">Nightwatch中文参考手册</a></p><h2 id="为何放弃-JAVA-改用-Nightwatch"><a href="#为何放弃-JAVA-改用-Nightwatch" class="headerlink" title="为何放弃 JAVA 改用 Nightwatch"></a>为何放弃 JAVA 改用 Nightwatch</h2><ul><li>项目初期用的是 Java + Selenium + TestNG 自动化框架，由于之前推行的力度不够，加上繁重的功能测试和频繁的项目变更导致自动化测试代码跟不上开发的进度，大量的测试代码无法正在运行。</li><li>我们的产品采用的 AngularJS 开发，前端开发人员对js对Java更精通，以后的自动化脚本开发也可以一起编写。</li><li>Nightwatch 的环境配置和执行简单，只要 npm install、npm test 就可以运行起来，方便配置，运行和继续集成。</li></ul><p>因此，与其维护不可用的代码不如好好整理，不如在项目领导和开发的强力支持下重新开始做一套可用的 E2E 测试。</p><h2 id="关于-Nightwatch-翻译"><a href="#关于-Nightwatch-翻译" class="headerlink" title="关于 Nightwatch 翻译"></a>关于 Nightwatch 翻译</h2><p>学习中发现 Nightwatch 没有比较完整的中文参考手册，因此决定学习之余翻译下官方文档，如有问题，欢迎纠正。</p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nightwatch </tag>
            
            <tag> Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JST automation framework</title>
      <link href="/2017/07/JST-automation/"/>
      <url>/2017/07/JST-automation/</url>
      
        <content type="html"><![CDATA[<p>This automation framework was design by Java+Selenium+TestNG when I did automation test work, so I called it JST-automation.</p><h2 id="Directory-Structure"><a href="#Directory-Structure" class="headerlink" title="Directory Structure"></a>Directory Structure</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">├──JST-automation</span><br><span class="line">|   ├── src</span><br><span class="line">|   |   └── main</span><br><span class="line">|   |   |   └── java</span><br><span class="line">|   |   |   |   └── com</span><br><span class="line">|   |   |   |   |   └── action</span><br><span class="line">|   |   |   |   |   |   └── case01</span><br><span class="line">|   |   |   |   |   |   └── case02</span><br><span class="line">|   |   |   |   |   |   └── common</span><br><span class="line">|   |   |   |   |   |   └── .....</span><br><span class="line">|   |   |   |   |   └── config</span><br><span class="line">|   |   |   |   |   |   └── UserConfig</span><br><span class="line">|   |   |   |   |   |   └── DriverConfig</span><br><span class="line">|   |   |   |   |   |   └── UrlConfig</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   |   |   |   |   └── page</span><br><span class="line">|   |   |   |   |   |   └── LoginPage</span><br><span class="line">|   |   |   |   |   |   └── HomePage</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   |   |   |   |   └── verify</span><br><span class="line">|   |   |   |   |   |   └── case01</span><br><span class="line">|   |   |   |   |   |   └── case02</span><br><span class="line">|   |   |   |   |   |   └── ......</span><br><span class="line">|   └── testng.xml</span><br><span class="line">|   └── pom.xml</span><br></pre></td></tr></table></figure><ol><li>action: all test function write in this folder</li><li>config: all config file put in this folder</li><li>page: all page element write in this folder</li><li>verify: all verify test case write in this folder</li><li>testng.xml: test suit file, config all verify test case in this file</li><li>pom.xml: configuration need package files</li></ol><h2 id="Download-Code"><a href="#Download-Code" class="headerlink" title="Download Code"></a>Download Code</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shenxianpeng/JST-automation.git</span><br></pre></td></tr></table></figure><p>Any suggestion and questions please feel free to create issue <a href="https://github.com/shenxianpeng/JST-automation/issues" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      <categories>
          
          <category> Automation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> TestNG </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Git</title>
      <link href="/2017/07/hello-git/"/>
      <url>/2017/07/hello-git/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://git-scm.com" target="_blank" rel="noopener">git</a> world! Here is sample demo post. Check <a href="https://git-scm.com/docs" target="_blank" rel="noopener">documentation</a> for more info.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Getting-a-Git-Repository"><a href="#Getting-a-Git-Repository" class="headerlink" title="Getting a Git Repository"></a>Getting a Git Repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shenxianpeng/shenxianpeng.github.io.git</span><br></pre></td></tr></table></figure><h3 id="Git-Status"><a href="#Git-Status" class="headerlink" title="Git Status"></a>Git Status</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-status - Show the working tree status</span><br></pre></td></tr></table></figure><h3 id="Git-Add"><a href="#Git-Add" class="headerlink" title="Git Add"></a>Git Add</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-add - Add file contents to the index</span><br></pre></td></tr></table></figure><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-commit - Record changes to the repository</span><br></pre></td></tr></table></figure><h3 id="Git-Push"><a href="#Git-Push" class="headerlink" title="Git Push"></a>Git Push</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-push - Update remote refs along with associated objects</span><br></pre></td></tr></table></figure><h3 id="Git-Tag"><a href="#Git-Tag" class="headerlink" title="Git Tag"></a>Git Tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v1.6.620 -m <span class="string">"Release v1.6.620"</span>     - create tag</span><br><span class="line">git push origin --tags                        - push tag to remote repository</span><br><span class="line">git tag -d v1.0.1                             - delete tag</span><br><span class="line">git push origin :refs/tags/v1.0.1             - delete remote tag</span><br><span class="line">git tag                                       - view tag</span><br></pre></td></tr></table></figure><h3 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch deploy                             - create a branch named deploy</span><br><span class="line">git checkout deploy                           - switch to deploy branch</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2017/07/hello-hexo/"/>
      <url>/2017/07/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start-4-Steps"><a href="#Quick-Start-4-Steps" class="headerlink" title="Quick Start(4 Steps)"></a>Quick Start(4 Steps)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span>    <span class="comment">#Create a new post</span></span><br><span class="line">hexo server               <span class="comment">#Run server</span></span><br><span class="line">hexo generate             <span class="comment">#Generate static files</span></span><br><span class="line">hexo deploy               <span class="comment">#Deploy to remote sites</span></span><br></pre></td></tr></table></figure><h2 id="Also"><a href="#Also" class="headerlink" title="Also"></a>Also</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span>    <span class="comment">#Create a new post</span></span><br><span class="line">hexo server               <span class="comment">#Run server</span></span><br><span class="line">hexo generate -deplogy    <span class="comment">#Generate then deploy</span></span><br><span class="line">or</span><br><span class="line">hexo g -d                 <span class="comment">#Simple write this</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
