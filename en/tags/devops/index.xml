<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on DevOps Engineer</title><link>https://shenxianpeng.github.io/en/tags/devops/</link><description>Recent content in DevOps on DevOps Engineer</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>xianpeng.shen@gmail.com (Xianpeng Shen)</managingEditor><webMaster>xianpeng.shen@gmail.com (Xianpeng Shen)</webMaster><copyright>© 2017–2025 Xianpeng Shen. All rights reserved.</copyright><lastBuildDate>Sun, 17 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://shenxianpeng.github.io/en/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>DevOps Maturity — From Reflection to Open Source Practice</title><link>https://shenxianpeng.github.io/en/posts/devops-maturity/</link><pubDate>Sun, 17 Aug 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/devops-maturity/</guid><description>How to assess and improve your team&amp;rsquo;s DevOps maturity. Official release of the DevOps Maturity open source project, with assessment tools and practical guides.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/devops-maturity/featured.png"/></item><item><title>How to Change abortPrevious Value in Jenkins?</title><link>https://shenxianpeng.github.io/en/posts/jenkins-concurrent-build/</link><pubDate>Wed, 04 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/jenkins-concurrent-build/</guid><description>In Jenkins, the &lt;code>disableConcurrentBuilds&lt;/code> option is used to manage concurrent builds. This article explains how to conditionally set the &lt;code>abortPrevious&lt;/code> value based on the branch being built, allowing for more flexible build management.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/jenkins-concurrent-build/featured.png"/></item><item><title>CI/CD—Not a One-Time Project, but a Continuously Evolving System</title><link>https://shenxianpeng.github.io/en/posts/code-refactor/</link><pubDate>Mon, 02 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/code-refactor/</guid><description>In DevOps, CI/CD pipelines require continuous maintenance and refactoring. This article explores why CI/CD is not a one-time construction project, but a system that requires long-term investment and continuous evolution.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/code-refactor/featured.png"/></item><item><title>What Optimizations I Made During the Jenkins Upgrade</title><link>https://shenxianpeng.github.io/en/posts/jenkins-upgrade/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/jenkins-upgrade/</guid><description>This article discusses the optimizations made during the Jenkins upgrade, including using Docker Compose for deployment, refactoring the Jenkins Shared Library, introducing Windows Docker Containers, and more to enhance the efficiency and security of the CI/CD process.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/jenkins-upgrade/featured.png"/></item><item><title>How to Automatically Categorize GitHub Release Notes by New features, Bug Fixes…</title><link>https://shenxianpeng.github.io/en/posts/automatic-categorize-release-notes/</link><pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/automatic-categorize-release-notes/</guid><description>This article shares two methods for automatically categorizing the content of GitHub Release Notes based on titles.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/automatic-categorize-release-notes/featured.png"/></item><item><title>How to fix "hidden symbol `__gcov_init' in ../libgcov.a(_gcov.o) is referenced by DSO"</title><link>https://shenxianpeng.github.io/en/posts/how-to-fix-gcov-hidden-symbol/</link><pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/how-to-fix-gcov-hidden-symbol/</guid><description>This article explains how to resolve the &amp;ldquo;hidden symbol `__gcov_init&amp;rsquo; in ../libgcov.a(_gcov.o) is referenced by DSO&amp;rdquo; error when building a project with Gcov, including how to ensure symbols are not hidden.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/how-to-fix-gcov-hidden-symbol/featured.png"/></item><item><title>About Code Coverage</title><link>https://shenxianpeng.github.io/en/posts/code-coverage/</link><pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/code-coverage/</guid><description>This article briefly introduces the concept, importance, common metrics, working principle, and mainstream tools of code coverage, emphasizing that code coverage metrics should not be over-relied upon.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/code-coverage/featured.png"/></item><item><title>How to backup Jenkins</title><link>https://shenxianpeng.github.io/en/posts/jenkins-backup/</link><pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/jenkins-backup/</guid><description>This article explains how to backup Jenkins using the ThinBackup plugin and shell scripts, ensuring that your Jenkins configuration and build data are safely stored.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/jenkins-backup/featured.png"/></item><item><title>Jenkins Top 3 best practice</title><link>https://shenxianpeng.github.io/en/posts/jenkins-best-practice/</link><pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/jenkins-best-practice/</guid><description>Discusses three best practices for Jenkins: Configuration as Code, Shared Libraries, and Multi-Branch Pipeline, highlighting their benefits in terms of transparency, traceability, and self-service builds.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/jenkins-best-practice/featured.png"/></item><item><title>Beijing 48 Hours — A DevOps Training Camp Experience</title><link>https://shenxianpeng.github.io/en/misc/48h-in-beijing/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/misc/48h-in-beijing/</guid><description>A record of my experience attending the JFrog DevOps training camp in Beijing, sharing training content, personal feelings, and reflections on future work.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/misc/48h-in-beijing/featured.png"/></item><item><title>A Code Coverage Tool - Squish Coco use examples</title><link>https://shenxianpeng.github.io/en/posts/squishcoco/</link><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/squishcoco/</guid><description>introduction to Squish Coco, a code coverage tool, with examples of how to set it up and use it in Visual Studio for C++ projects.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/squishcoco/featured.png"/></item><item><title>Code Coverage tools of C/C++</title><link>https://shenxianpeng.github.io/en/posts/code-coverage-tools/</link><pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (Xianpeng Shen)</author><guid>https://shenxianpeng.github.io/en/posts/code-coverage-tools/</guid><description>Code Coverage is a measurement of how many lines, statements, or blocks of your code are tested using your suite of automated tests. It’s an essential metric to understand the quality of your QA efforts.</description><media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://shenxianpeng.github.io/posts/code-coverage-tools/featured.png"/></item></channel></rss>