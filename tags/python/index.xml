<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on DevOps 攻城狮</title><link>https://shenxianpeng.github.io/tags/python/</link><description>Recent content in Python on DevOps 攻城狮</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>xianpeng.shen@gmail.com (沈显鹏)</managingEditor><webMaster>xianpeng.shen@gmail.com (沈显鹏)</webMaster><copyright>© 2017 - 2025 沈显鹏</copyright><lastBuildDate>Tue, 29 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://shenxianpeng.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>全程记录｜PyCon LT 2025 第三天：AI 能取代你吗？</title><link>https://shenxianpeng.github.io/misc/pycon-lt-d3/</link><pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/misc/pycon-lt-d3/</guid><description>今天是 PyCon LT 2025 的最后一天，主题是 AI and ML Day。分享了几位女性讲者的精彩演讲，以及对数据科学和 AI 的新认识。</description></item><item><title>全程记录｜PyCon LT 2025 第二天：被几位女性开发者圈粉了</title><link>https://shenxianpeng.github.io/misc/pycon-lt-d2/</link><pubDate>Thu, 24 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/misc/pycon-lt-d2/</guid><description>今天是 PyCon LT 2025 的 Data Day，主题是 Dataframes、Databases、Orchestration。虽然不太熟悉这些领域，但几位女性讲者的演讲让我印象深刻，收获颇丰。</description></item><item><title>全程记录｜PyCon LT 2025 第一天：我在异国 Python 大会上的见闻</title><link>https://shenxianpeng.github.io/misc/pycon-lt-d1/</link><pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/misc/pycon-lt-d1/</guid><description>参加了 PyCon LT 2025 的第一天，分享了演讲内容、个人感受以及对 Python 社区的思考。</description></item><item><title>CPython 停止更新 Copyright 了，为什么？</title><link>https://shenxianpeng.github.io/posts/copyright/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/copyright/</guid><description>CPython 停止更新 Copyright 的原因和过程。了解 Python 项目法律团队的建议，以及如何处理开源项目中的版权声明。</description></item><item><title>pip vs pipx 的区别</title><link>https://shenxianpeng.github.io/posts/pip-vs-pipx/</link><pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pip-vs-pipx/</guid><description>&lt;h3 class="relative group">&lt;strong>pip vs pipx 的区别&lt;/strong>
&lt;div id="pip-vs-pipx-的区别" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#pip-vs-pipx-%e7%9a%84%e5%8c%ba%e5%88%ab" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>在 Python 的生态中，&lt;strong>pip&lt;/strong> 和 &lt;strong>pipx&lt;/strong> 都是用于管理包的软件工具，但它们有不同的设计目标和使用场景。有些同学可能会疑惑，两者到底有什么区别？该如何选择？&lt;/p></description></item><item><title>初步了解 PyPA（Python Packaging Authority）下的知名项目和关系</title><link>https://shenxianpeng.github.io/posts/pypa/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pypa/</guid><description>&lt;p>PyPA（Python Packaging Authority）是管理和维护 Python 包相关工具的一个社区组织。PyPA 管理的知名项目包括 pip、packaging、setuptools、wheel、twine、build 等等。了解这些项目的关于有助于我们更好的了解 Python 的生态系统。&lt;/p></description></item><item><title>Python 软件基金会 (PFS) 基础设施概览</title><link>https://shenxianpeng.github.io/posts/psf-infra/</link><pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/psf-infra/</guid><description>&lt;p>Python 软件基金会 (PFS) 或许大家比较熟知，它是开源 Python 编程语言背后的组织，致力于为 Python 和 Python 社区的发展壮大创造条件。&lt;/p></description></item><item><title>Python 和 SLSA 💃</title><link>https://shenxianpeng.github.io/posts/python-and-slsa/</link><pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/python-and-slsa/</guid><description>&lt;p>由于近些年针对软件的供应链的攻击越来越频繁，据 SonaType 的统计从 2019 年到 2022 年针对开源软件的攻击增长了 742%，因此 2021 年 Google 提出的解决方案是软件工件供应链级别（Supply chain Levels for Software Artifacts，&amp;ldquo;SLSA&amp;rdquo;）&lt;/p></description></item><item><title>你的 Python 代码够不够 Pythonic？</title><link>https://shenxianpeng.github.io/posts/pythonic/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pythonic/</guid><description>&lt;p>Python 不必多说，它是众多编程语言中最容易学习的动态类型语言。它的跨平台、易读、易写、丰富的 Packages 等众多特性，也是众多DevOps/测试/开发工程师是最常用的语言之一。&lt;/p></description></item><item><title>在 GitHub 上发布一个 Python 项目需要注意哪些</title><link>https://shenxianpeng.github.io/posts/how-to-release-python-project/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/how-to-release-python-project/</guid><description>&lt;p>本篇介绍个人或企业在 GitHub 上发布一个 Python 项目需要了解和注意哪些内容&lt;/p>
&lt;ol>
&lt;li>&lt;a
href="#%e9%85%8d%e7%bd%aesetup.py">如何配置setup.py&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e5%8f%91%e5%b8%83%e5%88%b0PyPI">如何发布到PyPI&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e5%85%b3%e4%ba%8epydoc">生成pydoc&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e5%85%b3%e4%ba%8e%e7%89%88%e6%9c%ac%e5%8f%b7">版本号的选择&lt;/a>&lt;/li>
&lt;li>&lt;a
href="#%e9%80%89%e6%8b%a9License">License的选择&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 class="relative group">配置setup.py
&lt;div id="配置setuppy" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%85%8d%e7%bd%aesetuppy" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>打包和发布一项都是通过准备一个 &lt;code>setup.py&lt;/code> 文件来完成的。假设你的项目目录结构如下：&lt;/p></description></item><item><title>最受欢迎的 Python 自动化测试框架推荐</title><link>https://shenxianpeng.github.io/posts/most-popular-python-automated-testing-framework/</link><pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/most-popular-python-automated-testing-framework/</guid><description>&lt;p>随着技术的进步和自动化技术的出现，市面上出现了一些自动化测试框架。只需要进行一些适用性和效率参数的调整，这些自动化测试框架就能够开箱即用，大大节省了开发时间。&lt;/p></description></item></channel></rss>