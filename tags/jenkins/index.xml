<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jenkins on DevOps 攻城狮</title><link>https://shenxianpeng.github.io/tags/jenkins/</link><description>Recent content in Jenkins on DevOps 攻城狮</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>xianpeng.shen@gmail.com (沈显鹏)</managingEditor><webMaster>xianpeng.shen@gmail.com (沈显鹏)</webMaster><copyright>© 2017 - 2025 沈显鹏</copyright><lastBuildDate>Sun, 03 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://shenxianpeng.github.io/tags/jenkins/index.xml" rel="self" type="application/rss+xml"/><item><title>Jenkins Explain Error Plugin 支持 Google Gemini 了！🤖</title><link>https://shenxianpeng.github.io/posts/explain-error-plugin-support-gemini/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/explain-error-plugin-support-gemini/</guid><description>&lt;p>上周我发布了 &lt;a
href="https://shenxianpeng.github.io/2025/07/explain-error-plugin/"
target="_blank"
>Jenkins Explain Error Plugin&lt;/a>，旨在帮助 Jenkins 用户通过内置 AI 来更快地分析和解决 Jenkins 构建中的错误。&lt;/p></description></item><item><title>Jenkins 插件中心居然还没有 AI 插件？我写了一个！🤖</title><link>https://shenxianpeng.github.io/posts/explain-error-plugin/</link><pubDate>Tue, 29 Jul 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/explain-error-plugin/</guid><description>介绍我开发的第一个 Jenkins 插件：Explain Error Plugin。它可以自动解析构建失败的日志信息，并生成可读性强的错误解释，帮助开发者更快地定位和解决问题。</description></item><item><title>如何优雅地控制 Jenkins 构建是否中断？只看这篇</title><link>https://shenxianpeng.github.io/posts/jenkins-concurrent-build-cn/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-concurrent-build-cn/</guid><description>在 Jenkins 中，&lt;code>disableConcurrentBuilds&lt;/code> 选项用于管理并发构建。本文介绍了如何根据分支类型动态设置 &lt;code>abortPrevious&lt;/code> 的值，从而实现更灵活的构建管理。</description></item><item><title>从 Jenkins 升级，我做了哪些优化</title><link>https://shenxianpeng.github.io/posts/jenkins-upgrade/</link><pubDate>Thu, 24 Oct 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-upgrade/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>我最近在做的一件事情是迁移并升级 Jenkins。主要动机是因为这个漏洞 &lt;a
href="https://nvd.nist.gov/vuln/detail/CVE-2024-23897"
target="_blank"
>CVE-2024-23897&lt;/a>&lt;/p></description></item><item><title>【分享】通过 Jenkins-X 社区最终进入到 Jenkins 基础设施团队成为 SRE 的经历</title><link>https://shenxianpeng.github.io/posts/jenkins-contributors/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-contributors/</guid><description>&lt;p>今天翻译一篇我在 &lt;a
href="https://contributors.jenkins.io/"
target="_blank"
>Jenkins Contributors&lt;/a> 页面上看到的一篇文章。&lt;/p>
&lt;p>其作者是 Hervé Le Meur，我早在关注 Jenkins-Infra 的项目的时候就关注到他，他是一个法国人。以下是关于他如何通过 Jenkins-X 社区最终进入到 Jenkins 基础设施团队成为 SRE 的经历。&lt;/p></description></item><item><title>你一定要了解的 GitHub Action 特性：可重用工作流（Reusable Workflows）</title><link>https://shenxianpeng.github.io/posts/reusable-workflows/</link><pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/reusable-workflows/</guid><description>&lt;h2 class="relative group">什么是 Reusable Workflows
&lt;div id="什么是-reusable-workflows" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%bb%80%e4%b9%88%e6%98%af-reusable-workflows" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>如果你使用过 GitHub Actions，那么你一定要了解 Reusable Workflows 这个特性，它允许你定义工作流并在多个仓库中重复使用它们。&lt;/p></description></item><item><title>解决通过 Jenkins Artifactory plugin 上传 artifacts 失败的问题 “unable to find valid certification path to requested target”</title><link>https://shenxianpeng.github.io/posts/unable-to-find-valid-certification-path/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/unable-to-find-valid-certification-path/</guid><description>本文介绍了如何解决 Jenkins agent 上传 artifacts 到 Artifactory 时遇到的 SSL 证书验证问题，包括生成安全认证文件和导入到 Java 的 cacerts 中。</description></item><item><title>为什么我的 Jenkins Controller 越来越慢？可能犯了这些错误...</title><link>https://shenxianpeng.github.io/posts/pipeline-best-practices/</link><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/pipeline-best-practices/</guid><description>&lt;p>就像标题所说的，为什么我的 Jenkins Controller 越来越慢，可能是因为没有遵循 Jenkins pipeline 编写的一些最佳实践。&lt;/p></description></item><item><title>在 Jenkins 上用了这么久的 Groovy，是时候认识一下它了</title><link>https://shenxianpeng.github.io/posts/groovy/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/groovy/</guid><description>&lt;p>在使用 Jenkins 和 Groovy 越久，我就这样的疑问：&lt;/p>
&lt;p>Groovy 到底是什么语言？
Groovy 有哪些特性？
Groovy 和 Java 有什么区别？
Groovy 和 Java 如何选择？
Groovy 在整个开发语言中占什么位置？要不要学？&lt;/p></description></item><item><title>解决在 AIX 上 Git Clone 失败的两个问题</title><link>https://shenxianpeng.github.io/posts/git-clone-failed-on-aix/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-clone-failed-on-aix/</guid><description>&lt;h2 class="relative group">前言
&lt;div id="前言" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%89%8d%e8%a8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本篇记录两个在做 Jenkins 与 AIX 做持续集成得时候遇到的 Git clone 代码失败的问题，并已解决，分享出来或许能有所帮助。&lt;/p></description></item><item><title>通过 generic-webhook-trigger 插件实时获取 Bitbucket Repository Events</title><link>https://shenxianpeng.github.io/posts/bitbucket-pull-request-event/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/bitbucket-pull-request-event/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>本篇讨论如何通过 Jenkins generic webhook trigger 插件来获取 Git 仓库事件（Events）。比如获取仓库的 Pull Request ID 等。&lt;/p></description></item><item><title>Jenkins 执行 Shell 如果返回值不为0，作业(Job)停止并失败怎么办？</title><link>https://shenxianpeng.github.io/posts/jenkins-tips-3/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-tips-3/</guid><description>&lt;blockquote>
&lt;p>《Jenkins Tips 3》—— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p>&lt;/blockquote>
&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>在使用 Jenkins pipeline 时，如果 Shell 的返回值不为零（也就是 Shell 命令执行时有错误），Jenkins Job 默认会标记当前的 stage 为失败。因此整个 Job 也会失败。&lt;/p></description></item><item><title>每个 Jenkins 用户都应该知道这三个最佳实践</title><link>https://shenxianpeng.github.io/posts/jenkins-best-practice-cn/</link><pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-best-practice-cn/</guid><description>&lt;p>​在使用 Jenkins 实施了企业级的 CI/CD 工作，有如下三个最重要的实践和总结。&lt;/p></description></item><item><title>将 Jenkins Shell 返回的字符串处理为字符数组</title><link>https://shenxianpeng.github.io/posts/jenkins-tips-2/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-tips-2/</guid><description>&lt;blockquote>
&lt;p>《Jenkins Tips 2》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p>&lt;/blockquote>
&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>想要把 Linux 上不同的文本数据通过 Jenkins 发送邮件给不同的人。&lt;/p></description></item><item><title>忽略 Jenkins Shell 步骤中的故障</title><link>https://shenxianpeng.github.io/posts/jenkins-tips-1/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-tips-1/</guid><description>&lt;blockquote>
&lt;p>《Jenkins Tips 1》 —— 每期用简短的图文描述一个 Jenkins 小技巧。&lt;/p>&lt;/blockquote>
&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;ul>
&lt;li>不希望 Shell 脚本因失败而中止&lt;/li>
&lt;li>想一直运行 Shell 脚本并报告失败&lt;/li>
&lt;/ul>
&lt;h2 class="relative group">解决
&lt;div id="解决" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%a7%a3%e5%86%b3" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h3 class="relative group">方法一
&lt;div id="方法一" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e6%96%b9%e6%b3%95%e4%b8%80" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>运行 Shell 时，你可以通过使用内置的 &lt;code>+e&lt;/code> 选项来控制执行你的脚本错误。这可以禁用“非 0 退出”的默认行为。&lt;/p></description></item><item><title>这也能用Jenkins？快速实现一个定期批量登录远程虚拟机并支持添加新的主机名称的Job</title><link>https://shenxianpeng.github.io/posts/vm-status-check-via-jenkins/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/vm-status-check-via-jenkins/</guid><description>&lt;h2 class="relative group">背景
&lt;div id="背景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e8%83%8c%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>实现定期批量登录远程虚拟机然后进行一些指定的操作，还支持用户添加新的 hostname。&lt;/p></description></item><item><title>如何确保在提交 Jenkins Pipeline 前没有语法错误</title><link>https://shenxianpeng.github.io/posts/jenkins-pipeline-linter-connector/</link><pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-pipeline-linter-connector/</guid><description>&lt;p>我在做 Jenkins 声明式流水线开发时常会遇到的问题是：修改后的 Pipeline 看起来没有问题，当提交到代码仓库后进行 Jenkins 构建时发现原来有语法错误，然后再去修改、提交、构建，结果可能还有有其他没有注意到的语法问题。&lt;/p></description></item><item><title>Jenkins 与 Bitbucket Webhooks 的配置和使用</title><link>https://shenxianpeng.github.io/posts/bitbucket-webhooks-cn/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/bitbucket-webhooks-cn/</guid><description>&lt;h2 class="relative group">问题
&lt;div id="问题" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ae%e9%a2%98" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Jenkins 的 multi-branch pipeline 想必很多人已经在用了，使用这种类型的 Jenkins Job 最显著的作用就是可以对 Git 仓库里的任何分支和任何 Pull Request（以下简写为 PR）进行构建。&lt;/p></description></item><item><title>一款免费的 C/C++ 静态代码分析工具 Cppcheck 与 Jenkins 集成</title><link>https://shenxianpeng.github.io/posts/cppcheck/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/cppcheck/</guid><description>&lt;p>由于历史遗留原因，我们当前产品的代码仓库里遗留很多 Warning，这些 Warning 不是一时半会可以解决掉的。只有通过不断的丰富自动化测试用例，来保障最后的质量关卡，才敢有条不紊的进行 Warining 的修复，在次之前，如何有效杜绝继续引入更多的 Warining 是当下应该做的。&lt;/p></description></item><item><title>Jenkins Warnings Next Generation 插件</title><link>https://shenxianpeng.github.io/posts/jenkins-warnings-next-generation-plugin/</link><pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-warnings-next-generation-plugin/</guid><description>&lt;h2 class="relative group">Jenkins Warnings Next Generation 插件
&lt;div id="jenkins-warnings-next-generation-插件" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#jenkins-warnings-next-generation-%e6%8f%92%e4%bb%b6" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>Jenkins Warnings Next Generation 插件可收集编译器警告或静态分析工具报告的问题并可视化结果，它内置了对众多静态分析工具（包括多个编译器）的支持，更多&lt;a
href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md"
target="_blank"
>支持的报告格式&lt;/a>。&lt;/p></description></item><item><title>Black Duck 与 Jenkins 集成</title><link>https://shenxianpeng.github.io/posts/blackduck-interate-with-jenkins/</link><pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/blackduck-interate-with-jenkins/</guid><description>&lt;p>最近做了 Black Duck 与 Jenkins 的集成，目标是给测试和开发提供定制化、定时的对各个开发代码仓库的进行源码扫描。&lt;/p></description></item><item><title>定制一个 Docker 版 Jenkins 镜像</title><link>https://shenxianpeng.github.io/posts/install-docker-jenkins/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/install-docker-jenkins/</guid><description>如何定制一个 Docker 版 Jenkins 镜像，并将其备份到 Artifactory，便于在需要时快速恢复 Jenkins 环境。</description></item><item><title>Artifactory 与 Jenkins 集成</title><link>https://shenxianpeng.github.io/posts/artifactory-integrate-with-jenkins/</link><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/artifactory-integrate-with-jenkins/</guid><description>&lt;p>上一篇 &lt;a
href="https://shenxianpeng.github.io/2019/11/artifactory-install-and-upgrade/"
target="_blank"
>初识 JFrog Artifactory&lt;/a>，介绍了什么是 Artifactory，以及如何安装、启动和升级。&lt;/p></description></item><item><title>Jenkins Console Output 显示彩色</title><link>https://shenxianpeng.github.io/posts/output-display-color/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/output-display-color/</guid><description>&lt;p>如果想让 Jenkins Console Output 出来一些重要日志醒目的显示，可以让一些日志显示颜色方便查看&lt;/p></description></item><item><title>Jenkins privilege management</title><link>https://shenxianpeng.github.io/posts/jenkins-privilege-management/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-privilege-management/</guid><description>&lt;p>如何针对 Jenkins 里的不同 Job 进行不同的策略管理。比如某个 Job 所有人都可以查看，但仅限于某些人可以执行，这时候就需要对 Job 行程权限设置。&lt;/p></description></item><item><title>如何设置 NFS 共享以及在不同的平台 Windows/Linux/Unix 进行挂载</title><link>https://shenxianpeng.github.io/posts/nfs/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/nfs/</guid><description>&lt;p>例如我有一个共享仓库的代码所在用的空间非常大（超过 20 G），在每个产品构建时候都需要用到这个仓库的代码（从里面 copy 第三方库），如果每个人都要 git clone 这个第三方仓库，一是网络开销非常大，二是 git clone 时间长，而且占用大量的物理空间。&lt;/p></description></item><item><title>如何通过 Jenkins 进行资源的锁定和释放</title><link>https://shenxianpeng.github.io/posts/jenkins-lock-resource/</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-lock-resource/</guid><description>&lt;h2 class="relative group">业务场景
&lt;div id="业务场景" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100 select-none">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e4%b8%9a%e5%8a%a1%e5%9c%ba%e6%99%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>日常工作中需要切换到不同平台（包括 Linux, AIX, Windows, Solris, HP-UX）不同的版本进行开发和验证问题，但是由于虚拟机有限，并不能保证每个开发和测试都有所以平台的虚拟机并且安装了不同的版本，因此准备各种各样的开发和测试环境会花费很长时间。&lt;/p></description></item><item><title>在大型企业里维护多分支流水线</title><link>https://shenxianpeng.github.io/posts/jenkins-multi-branch-pipeline/</link><pubDate>Tue, 06 Aug 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkins-multi-branch-pipeline/</guid><description>如果没有适当的解决方案，在大型企业可能难以创建和维护多分支流水线。</description></item><item><title>通过 Jenkins 来提交修改的代码 git push by Jenkins</title><link>https://shenxianpeng.github.io/posts/git-push-by-jenkins/</link><pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/git-push-by-jenkins/</guid><description>&lt;p>在持续集成中，你可能需要通过 Jenkins 来修改代码，并且将修改后的代码提交到Git仓库里。怎么做呢？最方便的做法还是 Jenkins 提供对应的插件，但是很遗憾我没找到合适的。另外我也觉得通过脚本的方式来实现会更加稳定，不用担心 Jenkins 以及插件升级带来潜在不好用的可能。&lt;/p></description></item><item><title>Execute sudo without password</title><link>https://shenxianpeng.github.io/posts/execute-sudo-without-password/</link><pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/execute-sudo-without-password/</guid><description>&lt;p>在使用 Jenkins pipeline 的时候，在 Linux 需要用 root 来执行，我想通过 Jenkins pipeline 的语法来解决，但是只找到这种方式：&lt;a
href="https://jenkins.io/doc/pipeline/steps/ssh-steps/"
target="_blank"
>SSH Pipeline Steps&lt;/a>&lt;/p></description></item><item><title>Jenkinsfile example - 实现交互、clone 多个仓库以及 git push</title><link>https://shenxianpeng.github.io/posts/jenkinsfile-example/</link><pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkinsfile-example/</guid><description>这个 Jenkinsfile 示例展示了如何在 Jenkins Pipeline 中实现交互式输入、克隆多个 Git 仓库，并在构建完成后将代码推送到远程仓库。</description></item><item><title>GitSCM clone code don't display branch</title><link>https://shenxianpeng.github.io/posts/gitscm-clone-code-don-t-display-branch/</link><pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/gitscm-clone-code-don-t-display-branch/</guid><description>&lt;p>最近遇到一个 regression bug，是产品完成构建之后，build commit number 不对，显示的 HEAD 而不是常见的 97b34931ac HASH number,这是什么原因呢？
我检查了 build 脚本没有发现问题，branch 的输出是正确的，那我怀疑是引入 Jenkins 的原因，果然登录到远程的 agent 上去查看分支名称如下：&lt;/p></description></item><item><title>Jenkinsfile 配置</title><link>https://shenxianpeng.github.io/posts/jenkinsfile-configure/</link><pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate><author>xianpeng.shen@gmail.com (沈显鹏)</author><guid>https://shenxianpeng.github.io/posts/jenkinsfile-configure/</guid><description>&lt;p>最近在做有关 DevOps Build 的时候，学习了 Jenkins 的 Pipeline 的功能，不得不提到的就是 Jenkinsfile 这个文件。&lt;/p></description></item></channel></rss>